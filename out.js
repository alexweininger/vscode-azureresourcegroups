"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __reflectGet = Reflect.get;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b ||= {})
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __superGet = (cls, obj, key) => __reflectGet(__getProtoOf(cls), key, obj);
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __forAwait = (obj, it, method) => {
    it = obj[Symbol.asyncIterator];
    method = (key, fn2) => (fn2 = obj[key]) && (it[key] = (arg) => new Promise((resolve, reject, done) => {
      arg = fn2.call(obj, arg);
      done = arg.done;
      return Promise.resolve(arg.value).then((value) => resolve({ value, done }), reject);
    }));
    return it ? it.call(obj) : (obj = obj[Symbol.iterator](), it = {}, method("next"), method("return"), it);
  };

  // node_modules/@azure/core-client/dist-esm/src/base64.browser.js
  function encodeByteArray(value) {
    let str = "";
    for (let i = 0; i < value.length; i++) {
      str += String.fromCharCode(value[i]);
    }
    return btoa(str);
  }
  function decodeString(value) {
    const byteString = atob(value);
    const arr = new Uint8Array(byteString.length);
    for (let i = 0; i < byteString.length; i++) {
      arr[i] = byteString.charCodeAt(i);
    }
    return arr;
  }
  function decodeStringToString(value) {
    return atob(value);
  }
  var init_base64_browser = __esm({
    "node_modules/@azure/core-client/dist-esm/src/base64.browser.js"() {
      __name(encodeByteArray, "encodeByteArray");
      __name(decodeString, "decodeString");
      __name(decodeStringToString, "decodeStringToString");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/interfaces.js
  var XML_ATTRKEY, XML_CHARKEY;
  var init_interfaces = __esm({
    "node_modules/@azure/core-client/dist-esm/src/interfaces.js"() {
      XML_ATTRKEY = "$";
      XML_CHARKEY = "_";
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/utils.js
  function isPrimitiveBody(value, mapperTypeName) {
    return mapperTypeName !== "Composite" && mapperTypeName !== "Dictionary" && (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === void 0 || value === null);
  }
  function isDuration(value) {
    return validateISODuration.test(value);
  }
  function isValidUuid(uuid) {
    return validUuidRegex.test(uuid);
  }
  function handleNullableResponseAndWrappableBody(responseObject) {
    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
    if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {
      return responseObject.shouldWrapBody ? { body: null } : null;
    } else {
      return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;
    }
  }
  function flattenResponse(fullResponse, responseSpec) {
    var _a7, _b2;
    const parsedHeaders = fullResponse.parsedHeaders;
    if (fullResponse.request.method === "HEAD") {
      return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });
    }
    const bodyMapper = responseSpec && responseSpec.bodyMapper;
    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);
    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;
    if (expectedBodyTypeName === "Stream") {
      return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });
    }
    const modelProperties = expectedBodyTypeName === "Composite" && bodyMapper.type.modelProperties || {};
    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === "");
    if (expectedBodyTypeName === "Sequence" || isPageableResponse) {
      const arrayResponse = (_a7 = fullResponse.parsedBody) !== null && _a7 !== void 0 ? _a7 : [];
      for (const key of Object.keys(modelProperties)) {
        if (modelProperties[key].serializedName) {
          arrayResponse[key] = (_b2 = fullResponse.parsedBody) === null || _b2 === void 0 ? void 0 : _b2[key];
        }
      }
      if (parsedHeaders) {
        for (const key of Object.keys(parsedHeaders)) {
          arrayResponse[key] = parsedHeaders[key];
        }
      }
      return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;
    }
    return handleNullableResponseAndWrappableBody({
      body: fullResponse.parsedBody,
      headers: parsedHeaders,
      hasNullableType: isNullable,
      shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)
    });
  }
  var validateISODuration, validUuidRegex;
  var init_utils = __esm({
    "node_modules/@azure/core-client/dist-esm/src/utils.js"() {
      __name(isPrimitiveBody, "isPrimitiveBody");
      validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      __name(isDuration, "isDuration");
      validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
      __name(isValidUuid, "isValidUuid");
      __name(handleNullableResponseAndWrappableBody, "handleNullableResponseAndWrappableBody");
      __name(flattenResponse, "flattenResponse");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/serializer.js
  function createSerializer(modelMappers = {}, isXML = false) {
    return new SerializerImpl(modelMappers, isXML);
  }
  function trimEnd(str, ch) {
    let len = str.length;
    while (len - 1 >= 0 && str[len - 1] === ch) {
      --len;
    }
    return str.substr(0, len);
  }
  function bufferToBase64Url(buffer) {
    if (!buffer) {
      return void 0;
    }
    if (!(buffer instanceof Uint8Array)) {
      throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
    }
    const str = encodeByteArray(buffer);
    return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
  }
  function base64UrlToByteArray(str) {
    if (!str) {
      return void 0;
    }
    if (str && typeof str.valueOf() !== "string") {
      throw new Error("Please provide an input of type string for converting to Uint8Array");
    }
    str = str.replace(/-/g, "+").replace(/_/g, "/");
    return decodeString(str);
  }
  function splitSerializeName(prop) {
    const classes = [];
    let partialclass = "";
    if (prop) {
      const subwords = prop.split(".");
      for (const item of subwords) {
        if (item.charAt(item.length - 1) === "\\") {
          partialclass += item.substr(0, item.length - 1) + ".";
        } else {
          partialclass += item;
          classes.push(partialclass);
          partialclass = "";
        }
      }
    }
    return classes;
  }
  function dateToUnixTime(d) {
    if (!d) {
      return void 0;
    }
    if (typeof d.valueOf() === "string") {
      d = new Date(d);
    }
    return Math.floor(d.getTime() / 1e3);
  }
  function unixTimeToDate(n) {
    if (!n) {
      return void 0;
    }
    return new Date(n * 1e3);
  }
  function serializeBasicTypes(typeName, objectName, value) {
    if (value !== null && value !== void 0) {
      if (typeName.match(/^Number$/i) !== null) {
        if (typeof value !== "number") {
          throw new Error(`${objectName} with value ${value} must be of type number.`);
        }
      } else if (typeName.match(/^String$/i) !== null) {
        if (typeof value.valueOf() !== "string") {
          throw new Error(`${objectName} with value "${value}" must be of type string.`);
        }
      } else if (typeName.match(/^Uuid$/i) !== null) {
        if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
          throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
        }
      } else if (typeName.match(/^Boolean$/i) !== null) {
        if (typeof value !== "boolean") {
          throw new Error(`${objectName} with value ${value} must be of type boolean.`);
        }
      } else if (typeName.match(/^Stream$/i) !== null) {
        const objectType = typeof value;
        if (objectType !== "string" && typeof value.pipe !== "function" && !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && // File objects count as a type of Blob, so we want to use instanceof explicitly
        !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob) && objectType !== "function") {
          throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, NodeJS.ReadableStream, or () => NodeJS.ReadableStream.`);
        }
      }
    }
    return value;
  }
  function serializeEnumType(objectName, allowedValues, value) {
    if (!allowedValues) {
      throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
    }
    const isPresent = allowedValues.some((item) => {
      if (typeof item.valueOf() === "string") {
        return item.toLowerCase() === value.toLowerCase();
      }
      return item === value;
    });
    if (!isPresent) {
      throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
    }
    return value;
  }
  function serializeByteArrayType(objectName, value) {
    if (value !== void 0 && value !== null) {
      if (!(value instanceof Uint8Array)) {
        throw new Error(`${objectName} must be of type Uint8Array.`);
      }
      value = encodeByteArray(value);
    }
    return value;
  }
  function serializeBase64UrlType(objectName, value) {
    if (value !== void 0 && value !== null) {
      if (!(value instanceof Uint8Array)) {
        throw new Error(`${objectName} must be of type Uint8Array.`);
      }
      value = bufferToBase64Url(value);
    }
    return value;
  }
  function serializeDateTypes(typeName, value, objectName) {
    if (value !== void 0 && value !== null) {
      if (typeName.match(/^Date$/i) !== null) {
        if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
          throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
        }
        value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
      } else if (typeName.match(/^DateTime$/i) !== null) {
        if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
          throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
        }
        value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
      } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
        if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
          throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
        }
        value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
      } else if (typeName.match(/^UnixTime$/i) !== null) {
        if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
          throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format for it to be serialized in UnixTime/Epoch format.`);
        }
        value = dateToUnixTime(value);
      } else if (typeName.match(/^TimeSpan$/i) !== null) {
        if (!isDuration(value)) {
          throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
        }
      }
    }
    return value;
  }
  function serializeSequenceType(serializer56, mapper, object, objectName, isXml, options) {
    var _a7;
    if (!Array.isArray(object)) {
      throw new Error(`${objectName} must be of type Array.`);
    }
    let elementType = mapper.type.element;
    if (!elementType || typeof elementType !== "object") {
      throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}.`);
    }
    if (elementType.type.name === "Composite" && elementType.type.className) {
      elementType = (_a7 = serializer56.modelMappers[elementType.type.className]) !== null && _a7 !== void 0 ? _a7 : elementType;
    }
    const tempArray = [];
    for (let i = 0; i < object.length; i++) {
      const serializedValue = serializer56.serialize(elementType, object[i], objectName, options);
      if (isXml && elementType.xmlNamespace) {
        const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
        if (elementType.type.name === "Composite") {
          tempArray[i] = Object.assign({}, serializedValue);
          tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
        } else {
          tempArray[i] = {};
          tempArray[i][options.xml.xmlCharKey] = serializedValue;
          tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };
        }
      } else {
        tempArray[i] = serializedValue;
      }
    }
    return tempArray;
  }
  function serializeDictionaryType(serializer56, mapper, object, objectName, isXml, options) {
    if (typeof object !== "object") {
      throw new Error(`${objectName} must be of type object.`);
    }
    const valueType = mapper.type.value;
    if (!valueType || typeof valueType !== "object") {
      throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}.`);
    }
    const tempDictionary = {};
    for (const key of Object.keys(object)) {
      const serializedValue = serializer56.serialize(valueType, object[key], objectName, options);
      tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
    }
    if (isXml && mapper.xmlNamespace) {
      const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
      const result = tempDictionary;
      result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };
      return result;
    }
    return tempDictionary;
  }
  function resolveAdditionalProperties(serializer56, mapper, objectName) {
    const additionalProperties = mapper.type.additionalProperties;
    if (!additionalProperties && mapper.type.className) {
      const modelMapper = resolveReferencedMapper(serializer56, mapper, objectName);
      return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
    }
    return additionalProperties;
  }
  function resolveReferencedMapper(serializer56, mapper, objectName) {
    const className = mapper.type.className;
    if (!className) {
      throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, void 0, 2)}".`);
    }
    return serializer56.modelMappers[className];
  }
  function resolveModelProperties(serializer56, mapper, objectName) {
    let modelProps = mapper.type.modelProperties;
    if (!modelProps) {
      const modelMapper = resolveReferencedMapper(serializer56, mapper, objectName);
      if (!modelMapper) {
        throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
      }
      modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
      if (!modelProps) {
        throw new Error(`modelProperties cannot be null or undefined in the mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
      }
    }
    return modelProps;
  }
  function serializeCompositeType(serializer56, mapper, object, objectName, isXml, options) {
    if (getPolymorphicDiscriminatorRecursively(serializer56, mapper)) {
      mapper = getPolymorphicMapper(serializer56, mapper, object, "clientName");
    }
    if (object !== void 0 && object !== null) {
      const payload = {};
      const modelProps = resolveModelProperties(serializer56, mapper, objectName);
      for (const key of Object.keys(modelProps)) {
        const propertyMapper = modelProps[key];
        if (propertyMapper.readOnly) {
          continue;
        }
        let propName;
        let parentObject = payload;
        if (serializer56.isXML) {
          if (propertyMapper.xmlIsWrapped) {
            propName = propertyMapper.xmlName;
          } else {
            propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
          }
        } else {
          const paths = splitSerializeName(propertyMapper.serializedName);
          propName = paths.pop();
          for (const pathName of paths) {
            const childObject = parentObject[pathName];
            if ((childObject === void 0 || childObject === null) && (object[key] !== void 0 && object[key] !== null || propertyMapper.defaultValue !== void 0)) {
              parentObject[pathName] = {};
            }
            parentObject = parentObject[pathName];
          }
        }
        if (parentObject !== void 0 && parentObject !== null) {
          if (isXml && mapper.xmlNamespace) {
            const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
            parentObject[XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });
          }
          const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
          let toSerialize = object[key];
          const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer56, mapper);
          if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === void 0 || toSerialize === null)) {
            toSerialize = mapper.serializedName;
          }
          const serializedValue = serializer56.serialize(propertyMapper, toSerialize, propertyObjectName, options);
          if (serializedValue !== void 0 && propName !== void 0 && propName !== null) {
            const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
            if (isXml && propertyMapper.xmlIsAttribute) {
              parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};
              parentObject[XML_ATTRKEY][propName] = serializedValue;
            } else if (isXml && propertyMapper.xmlIsWrapped) {
              parentObject[propName] = { [propertyMapper.xmlElementName]: value };
            } else {
              parentObject[propName] = value;
            }
          }
        }
      }
      const additionalPropertiesMapper = resolveAdditionalProperties(serializer56, mapper, objectName);
      if (additionalPropertiesMapper) {
        const propNames = Object.keys(modelProps);
        for (const clientPropName in object) {
          const isAdditionalProperty = propNames.every((pn2) => pn2 !== clientPropName);
          if (isAdditionalProperty) {
            payload[clientPropName] = serializer56.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
          }
        }
      }
      return payload;
    }
    return object;
  }
  function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
    if (!isXml || !propertyMapper.xmlNamespace) {
      return serializedValue;
    }
    const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };
    if (["Composite"].includes(propertyMapper.type.name)) {
      if (serializedValue[XML_ATTRKEY]) {
        return serializedValue;
      } else {
        const result2 = Object.assign({}, serializedValue);
        result2[XML_ATTRKEY] = xmlNamespace;
        return result2;
      }
    }
    const result = {};
    result[options.xml.xmlCharKey] = serializedValue;
    result[XML_ATTRKEY] = xmlNamespace;
    return result;
  }
  function isSpecialXmlProperty(propertyName, options) {
    return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);
  }
  function deserializeCompositeType(serializer56, mapper, responseBody, objectName, options) {
    var _a7, _b2;
    const xmlCharKey = (_a7 = options.xml.xmlCharKey) !== null && _a7 !== void 0 ? _a7 : XML_CHARKEY;
    if (getPolymorphicDiscriminatorRecursively(serializer56, mapper)) {
      mapper = getPolymorphicMapper(serializer56, mapper, responseBody, "serializedName");
    }
    const modelProps = resolveModelProperties(serializer56, mapper, objectName);
    let instance = {};
    const handledPropertyNames = [];
    for (const key of Object.keys(modelProps)) {
      const propertyMapper = modelProps[key];
      const paths = splitSerializeName(modelProps[key].serializedName);
      handledPropertyNames.push(paths[0]);
      const { serializedName, xmlName, xmlElementName } = propertyMapper;
      let propertyObjectName = objectName;
      if (serializedName !== "" && serializedName !== void 0) {
        propertyObjectName = objectName + "." + serializedName;
      }
      const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
      if (headerCollectionPrefix) {
        const dictionary = {};
        for (const headerKey of Object.keys(responseBody)) {
          if (headerKey.startsWith(headerCollectionPrefix)) {
            dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer56.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
          }
          handledPropertyNames.push(headerKey);
        }
        instance[key] = dictionary;
      } else if (serializer56.isXML) {
        if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {
          instance[key] = serializer56.deserialize(propertyMapper, responseBody[XML_ATTRKEY][xmlName], propertyObjectName, options);
        } else if (propertyMapper.xmlIsMsText) {
          if (responseBody[xmlCharKey] !== void 0) {
            instance[key] = responseBody[xmlCharKey];
          } else if (typeof responseBody === "string") {
            instance[key] = responseBody;
          }
        } else {
          const propertyName = xmlElementName || xmlName || serializedName;
          if (propertyMapper.xmlIsWrapped) {
            const wrapped = responseBody[xmlName];
            const elementList = (_b2 = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b2 !== void 0 ? _b2 : [];
            instance[key] = serializer56.deserialize(propertyMapper, elementList, propertyObjectName, options);
            handledPropertyNames.push(xmlName);
          } else {
            const property = responseBody[propertyName];
            instance[key] = serializer56.deserialize(propertyMapper, property, propertyObjectName, options);
            handledPropertyNames.push(propertyName);
          }
        }
      } else {
        let propertyInstance;
        let res = responseBody;
        let steps = 0;
        for (const item of paths) {
          if (!res)
            break;
          steps++;
          res = res[item];
        }
        if (res === null && steps < paths.length) {
          res = void 0;
        }
        propertyInstance = res;
        const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
        if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === void 0 || propertyInstance === null)) {
          propertyInstance = mapper.serializedName;
        }
        let serializedValue;
        if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
          propertyInstance = responseBody[key];
          const arrayInstance = serializer56.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
          for (const [k, v] of Object.entries(instance)) {
            if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
              arrayInstance[k] = v;
            }
          }
          instance = arrayInstance;
        } else if (propertyInstance !== void 0 || propertyMapper.defaultValue !== void 0) {
          serializedValue = serializer56.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
          instance[key] = serializedValue;
        }
      }
    }
    const additionalPropertiesMapper = mapper.type.additionalProperties;
    if (additionalPropertiesMapper) {
      const isAdditionalProperty = /* @__PURE__ */ __name((responsePropName) => {
        for (const clientPropName in modelProps) {
          const paths = splitSerializeName(modelProps[clientPropName].serializedName);
          if (paths[0] === responsePropName) {
            return false;
          }
        }
        return true;
      }, "isAdditionalProperty");
      for (const responsePropName in responseBody) {
        if (isAdditionalProperty(responsePropName)) {
          instance[responsePropName] = serializer56.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
        }
      }
    } else if (responseBody && !options.ignoreUnknownProperties) {
      for (const key of Object.keys(responseBody)) {
        if (instance[key] === void 0 && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
          instance[key] = responseBody[key];
        }
      }
    }
    return instance;
  }
  function deserializeDictionaryType(serializer56, mapper, responseBody, objectName, options) {
    const value = mapper.type.value;
    if (!value || typeof value !== "object") {
      throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}`);
    }
    if (responseBody) {
      const tempDictionary = {};
      for (const key of Object.keys(responseBody)) {
        tempDictionary[key] = serializer56.deserialize(value, responseBody[key], objectName, options);
      }
      return tempDictionary;
    }
    return responseBody;
  }
  function deserializeSequenceType(serializer56, mapper, responseBody, objectName, options) {
    var _a7;
    let element = mapper.type.element;
    if (!element || typeof element !== "object") {
      throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}`);
    }
    if (responseBody) {
      if (!Array.isArray(responseBody)) {
        responseBody = [responseBody];
      }
      if (element.type.name === "Composite" && element.type.className) {
        element = (_a7 = serializer56.modelMappers[element.type.className]) !== null && _a7 !== void 0 ? _a7 : element;
      }
      const tempArray = [];
      for (let i = 0; i < responseBody.length; i++) {
        tempArray[i] = serializer56.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
      }
      return tempArray;
    }
    return responseBody;
  }
  function getIndexDiscriminator(discriminators, discriminatorValue, typeName) {
    const typeNamesToCheck = [typeName];
    while (typeNamesToCheck.length) {
      const currentName = typeNamesToCheck.shift();
      const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
      if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {
        return discriminators[indexDiscriminator];
      } else {
        for (const [name, mapper] of Object.entries(discriminators)) {
          if (name.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className) {
            typeNamesToCheck.push(mapper.type.className);
          }
        }
      }
    }
    return void 0;
  }
  function getPolymorphicMapper(serializer56, mapper, object, polymorphicPropertyName) {
    var _a7;
    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer56, mapper);
    if (polymorphicDiscriminator) {
      let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
      if (discriminatorName) {
        if (polymorphicPropertyName === "serializedName") {
          discriminatorName = discriminatorName.replace(/\\/gi, "");
        }
        const discriminatorValue = object[discriminatorName];
        const typeName = (_a7 = mapper.type.uberParent) !== null && _a7 !== void 0 ? _a7 : mapper.type.className;
        if (typeof discriminatorValue === "string" && typeName) {
          const polymorphicMapper = getIndexDiscriminator(serializer56.modelMappers.discriminators, discriminatorValue, typeName);
          if (polymorphicMapper) {
            mapper = polymorphicMapper;
          }
        }
      }
    }
    return mapper;
  }
  function getPolymorphicDiscriminatorRecursively(serializer56, mapper) {
    return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer56, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer56, mapper.type.className);
  }
  function getPolymorphicDiscriminatorSafely(serializer56, typeName) {
    return typeName && serializer56.modelMappers[typeName] && serializer56.modelMappers[typeName].type.polymorphicDiscriminator;
  }
  var SerializerImpl, MapperTypeNames;
  var init_serializer = __esm({
    "node_modules/@azure/core-client/dist-esm/src/serializer.js"() {
      init_base64_browser();
      init_interfaces();
      init_utils();
      SerializerImpl = class {
        constructor(modelMappers = {}, isXML = false) {
          this.modelMappers = modelMappers;
          this.isXML = isXML;
        }
        /**
         * @deprecated Removing the constraints validation on client side.
         */
        validateConstraints(mapper, value, objectName) {
          const failValidation = /* @__PURE__ */ __name((constraintName, constraintValue) => {
            throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
          }, "failValidation");
          if (mapper.constraints && value !== void 0 && value !== null) {
            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;
            if (ExclusiveMaximum !== void 0 && value >= ExclusiveMaximum) {
              failValidation("ExclusiveMaximum", ExclusiveMaximum);
            }
            if (ExclusiveMinimum !== void 0 && value <= ExclusiveMinimum) {
              failValidation("ExclusiveMinimum", ExclusiveMinimum);
            }
            if (InclusiveMaximum !== void 0 && value > InclusiveMaximum) {
              failValidation("InclusiveMaximum", InclusiveMaximum);
            }
            if (InclusiveMinimum !== void 0 && value < InclusiveMinimum) {
              failValidation("InclusiveMinimum", InclusiveMinimum);
            }
            if (MaxItems !== void 0 && value.length > MaxItems) {
              failValidation("MaxItems", MaxItems);
            }
            if (MaxLength !== void 0 && value.length > MaxLength) {
              failValidation("MaxLength", MaxLength);
            }
            if (MinItems !== void 0 && value.length < MinItems) {
              failValidation("MinItems", MinItems);
            }
            if (MinLength !== void 0 && value.length < MinLength) {
              failValidation("MinLength", MinLength);
            }
            if (MultipleOf !== void 0 && value % MultipleOf !== 0) {
              failValidation("MultipleOf", MultipleOf);
            }
            if (Pattern) {
              const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
              if (typeof value !== "string" || value.match(pattern) === null) {
                failValidation("Pattern", Pattern);
              }
            }
            if (UniqueItems && value.some((item, i, ar2) => ar2.indexOf(item) !== i)) {
              failValidation("UniqueItems", UniqueItems);
            }
          }
        }
        /**
         * Serialize the given object based on its metadata defined in the mapper
         *
         * @param mapper - The mapper which defines the metadata of the serializable object
         *
         * @param object - A valid Javascript object to be serialized
         *
         * @param objectName - Name of the serialized object
         *
         * @param options - additional options to serialization
         *
         * @returns A valid serialized Javascript object
         */
        serialize(mapper, object, objectName, options = { xml: {} }) {
          var _a7, _b2, _c2;
          const updatedOptions = {
            xml: {
              rootName: (_a7 = options.xml.rootName) !== null && _a7 !== void 0 ? _a7 : "",
              includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
              xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
            }
          };
          let payload = {};
          const mapperType = mapper.type.name;
          if (!objectName) {
            objectName = mapper.serializedName;
          }
          if (mapperType.match(/^Sequence$/i) !== null) {
            payload = [];
          }
          if (mapper.isConstant) {
            object = mapper.defaultValue;
          }
          const { required, nullable } = mapper;
          if (required && nullable && object === void 0) {
            throw new Error(`${objectName} cannot be undefined.`);
          }
          if (required && !nullable && (object === void 0 || object === null)) {
            throw new Error(`${objectName} cannot be null or undefined.`);
          }
          if (!required && nullable === false && object === null) {
            throw new Error(`${objectName} cannot be null.`);
          }
          if (object === void 0 || object === null) {
            payload = object;
          } else {
            if (mapperType.match(/^any$/i) !== null) {
              payload = object;
            } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
              payload = serializeBasicTypes(mapperType, objectName, object);
            } else if (mapperType.match(/^Enum$/i) !== null) {
              const enumMapper = mapper;
              payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
            } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
              payload = serializeDateTypes(mapperType, object, objectName);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
              payload = serializeByteArrayType(objectName, object);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
              payload = serializeBase64UrlType(objectName, object);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
              payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
              payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            } else if (mapperType.match(/^Composite$/i) !== null) {
              payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
            }
          }
          return payload;
        }
        /**
         * Deserialize the given object based on its metadata defined in the mapper
         *
         * @param mapper - The mapper which defines the metadata of the serializable object
         *
         * @param responseBody - A valid Javascript entity to be deserialized
         *
         * @param objectName - Name of the deserialized object
         *
         * @param options - Controls behavior of XML parser and builder.
         *
         * @returns A valid deserialized Javascript object
         */
        deserialize(mapper, responseBody, objectName, options = { xml: {} }) {
          var _a7, _b2, _c2, _d;
          const updatedOptions = {
            xml: {
              rootName: (_a7 = options.xml.rootName) !== null && _a7 !== void 0 ? _a7 : "",
              includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
              xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY
            },
            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false
          };
          if (responseBody === void 0 || responseBody === null) {
            if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
              responseBody = [];
            }
            if (mapper.defaultValue !== void 0) {
              responseBody = mapper.defaultValue;
            }
            return responseBody;
          }
          let payload;
          const mapperType = mapper.type.name;
          if (!objectName) {
            objectName = mapper.serializedName;
          }
          if (mapperType.match(/^Composite$/i) !== null) {
            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
          } else {
            if (this.isXML) {
              const xmlCharKey = updatedOptions.xml.xmlCharKey;
              if (responseBody[XML_ATTRKEY] !== void 0 && responseBody[xmlCharKey] !== void 0) {
                responseBody = responseBody[xmlCharKey];
              }
            }
            if (mapperType.match(/^Number$/i) !== null) {
              payload = parseFloat(responseBody);
              if (isNaN(payload)) {
                payload = responseBody;
              }
            } else if (mapperType.match(/^Boolean$/i) !== null) {
              if (responseBody === "true") {
                payload = true;
              } else if (responseBody === "false") {
                payload = false;
              } else {
                payload = responseBody;
              }
            } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
              payload = responseBody;
            } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
              payload = new Date(responseBody);
            } else if (mapperType.match(/^UnixTime$/i) !== null) {
              payload = unixTimeToDate(responseBody);
            } else if (mapperType.match(/^ByteArray$/i) !== null) {
              payload = decodeString(responseBody);
            } else if (mapperType.match(/^Base64Url$/i) !== null) {
              payload = base64UrlToByteArray(responseBody);
            } else if (mapperType.match(/^Sequence$/i) !== null) {
              payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
            } else if (mapperType.match(/^Dictionary$/i) !== null) {
              payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
            }
          }
          if (mapper.isConstant) {
            payload = mapper.defaultValue;
          }
          return payload;
        }
      };
      __name(SerializerImpl, "SerializerImpl");
      __name(createSerializer, "createSerializer");
      __name(trimEnd, "trimEnd");
      __name(bufferToBase64Url, "bufferToBase64Url");
      __name(base64UrlToByteArray, "base64UrlToByteArray");
      __name(splitSerializeName, "splitSerializeName");
      __name(dateToUnixTime, "dateToUnixTime");
      __name(unixTimeToDate, "unixTimeToDate");
      __name(serializeBasicTypes, "serializeBasicTypes");
      __name(serializeEnumType, "serializeEnumType");
      __name(serializeByteArrayType, "serializeByteArrayType");
      __name(serializeBase64UrlType, "serializeBase64UrlType");
      __name(serializeDateTypes, "serializeDateTypes");
      __name(serializeSequenceType, "serializeSequenceType");
      __name(serializeDictionaryType, "serializeDictionaryType");
      __name(resolveAdditionalProperties, "resolveAdditionalProperties");
      __name(resolveReferencedMapper, "resolveReferencedMapper");
      __name(resolveModelProperties, "resolveModelProperties");
      __name(serializeCompositeType, "serializeCompositeType");
      __name(getXmlObjectValue, "getXmlObjectValue");
      __name(isSpecialXmlProperty, "isSpecialXmlProperty");
      __name(deserializeCompositeType, "deserializeCompositeType");
      __name(deserializeDictionaryType, "deserializeDictionaryType");
      __name(deserializeSequenceType, "deserializeSequenceType");
      __name(getIndexDiscriminator, "getIndexDiscriminator");
      __name(getPolymorphicMapper, "getPolymorphicMapper");
      __name(getPolymorphicDiscriminatorRecursively, "getPolymorphicDiscriminatorRecursively");
      __name(getPolymorphicDiscriminatorSafely, "getPolymorphicDiscriminatorSafely");
      MapperTypeNames = {
        Base64Url: "Base64Url",
        Boolean: "Boolean",
        ByteArray: "ByteArray",
        Composite: "Composite",
        Date: "Date",
        DateTime: "DateTime",
        DateTimeRfc1123: "DateTimeRfc1123",
        Dictionary: "Dictionary",
        Enum: "Enum",
        Number: "Number",
        Object: "Object",
        Sequence: "Sequence",
        String: "String",
        Stream: "Stream",
        TimeSpan: "TimeSpan",
        UnixTime: "UnixTime"
      };
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/pipeline.js
  function createEmptyPipeline() {
    return HttpPipeline.create();
  }
  var ValidPhaseNames, HttpPipeline;
  var init_pipeline = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/pipeline.js"() {
      ValidPhaseNames = /* @__PURE__ */ new Set(["Deserialize", "Serialize", "Retry", "Sign"]);
      HttpPipeline = class {
        constructor(policies) {
          var _a7;
          this._policies = [];
          this._policies = (_a7 = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a7 !== void 0 ? _a7 : [];
          this._orderedPolicies = void 0;
        }
        addPolicy(policy, options = {}) {
          if (options.phase && options.afterPhase) {
            throw new Error("Policies inside a phase cannot specify afterPhase.");
          }
          if (options.phase && !ValidPhaseNames.has(options.phase)) {
            throw new Error(`Invalid phase name: ${options.phase}`);
          }
          if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {
            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);
          }
          this._policies.push({
            policy,
            options
          });
          this._orderedPolicies = void 0;
        }
        removePolicy(options) {
          const removedPolicies = [];
          this._policies = this._policies.filter((policyDescriptor) => {
            if (options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) {
              removedPolicies.push(policyDescriptor.policy);
              return false;
            } else {
              return true;
            }
          });
          this._orderedPolicies = void 0;
          return removedPolicies;
        }
        sendRequest(httpClient, request) {
          const policies = this.getOrderedPolicies();
          const pipeline = policies.reduceRight((next, policy) => {
            return (req) => {
              return policy.sendRequest(req, next);
            };
          }, (req) => httpClient.sendRequest(req));
          return pipeline(request);
        }
        getOrderedPolicies() {
          if (!this._orderedPolicies) {
            this._orderedPolicies = this.orderPolicies();
          }
          return this._orderedPolicies;
        }
        clone() {
          return new HttpPipeline(this._policies);
        }
        static create() {
          return new HttpPipeline();
        }
        orderPolicies() {
          const result = [];
          const policyMap = /* @__PURE__ */ new Map();
          function createPhase(name) {
            return {
              name,
              policies: /* @__PURE__ */ new Set(),
              hasRun: false,
              hasAfterPolicies: false
            };
          }
          __name(createPhase, "createPhase");
          const serializePhase = createPhase("Serialize");
          const noPhase = createPhase("None");
          const deserializePhase = createPhase("Deserialize");
          const retryPhase = createPhase("Retry");
          const signPhase = createPhase("Sign");
          const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];
          function getPhase(phase) {
            if (phase === "Retry") {
              return retryPhase;
            } else if (phase === "Serialize") {
              return serializePhase;
            } else if (phase === "Deserialize") {
              return deserializePhase;
            } else if (phase === "Sign") {
              return signPhase;
            } else {
              return noPhase;
            }
          }
          __name(getPhase, "getPhase");
          for (const descriptor of this._policies) {
            const policy = descriptor.policy;
            const options = descriptor.options;
            const policyName = policy.name;
            if (policyMap.has(policyName)) {
              throw new Error("Duplicate policy names not allowed in pipeline");
            }
            const node = {
              policy,
              dependsOn: /* @__PURE__ */ new Set(),
              dependants: /* @__PURE__ */ new Set()
            };
            if (options.afterPhase) {
              node.afterPhase = getPhase(options.afterPhase);
              node.afterPhase.hasAfterPolicies = true;
            }
            policyMap.set(policyName, node);
            const phase = getPhase(options.phase);
            phase.policies.add(node);
          }
          for (const descriptor of this._policies) {
            const { policy, options } = descriptor;
            const policyName = policy.name;
            const node = policyMap.get(policyName);
            if (!node) {
              throw new Error(`Missing node for policy ${policyName}`);
            }
            if (options.afterPolicies) {
              for (const afterPolicyName of options.afterPolicies) {
                const afterNode = policyMap.get(afterPolicyName);
                if (afterNode) {
                  node.dependsOn.add(afterNode);
                  afterNode.dependants.add(node);
                }
              }
            }
            if (options.beforePolicies) {
              for (const beforePolicyName of options.beforePolicies) {
                const beforeNode = policyMap.get(beforePolicyName);
                if (beforeNode) {
                  beforeNode.dependsOn.add(node);
                  node.dependants.add(beforeNode);
                }
              }
            }
          }
          function walkPhase(phase) {
            phase.hasRun = true;
            for (const node of phase.policies) {
              if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {
                continue;
              }
              if (node.dependsOn.size === 0) {
                result.push(node.policy);
                for (const dependant of node.dependants) {
                  dependant.dependsOn.delete(node);
                }
                policyMap.delete(node.policy.name);
                phase.policies.delete(node);
              }
            }
          }
          __name(walkPhase, "walkPhase");
          function walkPhases() {
            for (const phase of orderedPhases) {
              walkPhase(phase);
              if (phase.policies.size > 0 && phase !== noPhase) {
                if (!noPhase.hasRun) {
                  walkPhase(noPhase);
                }
                return;
              }
              if (phase.hasAfterPolicies) {
                walkPhase(noPhase);
              }
            }
          }
          __name(walkPhases, "walkPhases");
          let iteration = 0;
          while (policyMap.size > 0) {
            iteration++;
            const initialResultLength = result.length;
            walkPhases();
            if (result.length <= initialResultLength && iteration > 1) {
              throw new Error("Cannot satisfy policy dependencies due to requirements cycle.");
            }
          }
          return result;
        }
      };
      __name(HttpPipeline, "HttpPipeline");
      __name(createEmptyPipeline, "createEmptyPipeline");
    }
  });

  // node_modules/@azure/logger/dist-esm/src/log.browser.js
  function log(...args) {
    if (args.length > 0) {
      const firstArg = String(args[0]);
      if (firstArg.includes(":error")) {
        console.error(...args);
      } else if (firstArg.includes(":warning")) {
        console.warn(...args);
      } else if (firstArg.includes(":info")) {
        console.info(...args);
      } else if (firstArg.includes(":verbose")) {
        console.debug(...args);
      } else {
        console.debug(...args);
      }
    }
  }
  var init_log_browser = __esm({
    "node_modules/@azure/logger/dist-esm/src/log.browser.js"() {
      __name(log, "log");
    }
  });

  // node_modules/@azure/logger/dist-esm/src/debug.js
  function enable(namespaces) {
    enabledString = namespaces;
    enabledNamespaces = [];
    skippedNamespaces = [];
    const wildcard = /\*/g;
    const namespaceList = namespaces.split(",").map((ns2) => ns2.trim().replace(wildcard, ".*?"));
    for (const ns2 of namespaceList) {
      if (ns2.startsWith("-")) {
        skippedNamespaces.push(new RegExp(`^${ns2.substr(1)}$`));
      } else {
        enabledNamespaces.push(new RegExp(`^${ns2}$`));
      }
    }
    for (const instance of debuggers) {
      instance.enabled = enabled(instance.namespace);
    }
  }
  function enabled(namespace) {
    if (namespace.endsWith("*")) {
      return true;
    }
    for (const skipped of skippedNamespaces) {
      if (skipped.test(namespace)) {
        return false;
      }
    }
    for (const enabledNamespace of enabledNamespaces) {
      if (enabledNamespace.test(namespace)) {
        return true;
      }
    }
    return false;
  }
  function disable() {
    const result = enabledString || "";
    enable("");
    return result;
  }
  function createDebugger(namespace) {
    const newDebugger = Object.assign(debug, {
      enabled: enabled(namespace),
      destroy,
      log: debugObj.log,
      namespace,
      extend
    });
    function debug(...args) {
      if (!newDebugger.enabled) {
        return;
      }
      if (args.length > 0) {
        args[0] = `${namespace} ${args[0]}`;
      }
      newDebugger.log(...args);
    }
    __name(debug, "debug");
    debuggers.push(newDebugger);
    return newDebugger;
  }
  function destroy() {
    const index = debuggers.indexOf(this);
    if (index >= 0) {
      debuggers.splice(index, 1);
      return true;
    }
    return false;
  }
  function extend(namespace) {
    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
    newDebugger.log = this.log;
    return newDebugger;
  }
  var debugEnvVariable, enabledString, enabledNamespaces, skippedNamespaces, debuggers, debugObj, debug_default;
  var init_debug = __esm({
    "node_modules/@azure/logger/dist-esm/src/debug.js"() {
      init_log_browser();
      debugEnvVariable = typeof process !== "undefined" && process.env && process.env.DEBUG || void 0;
      enabledNamespaces = [];
      skippedNamespaces = [];
      debuggers = [];
      if (debugEnvVariable) {
        enable(debugEnvVariable);
      }
      debugObj = Object.assign((namespace) => {
        return createDebugger(namespace);
      }, {
        enable,
        enabled,
        disable,
        log
      });
      __name(enable, "enable");
      __name(enabled, "enabled");
      __name(disable, "disable");
      __name(createDebugger, "createDebugger");
      __name(destroy, "destroy");
      __name(extend, "extend");
      debug_default = debugObj;
    }
  });

  // node_modules/@azure/logger/dist-esm/src/index.js
  function setLogLevel(level) {
    if (level && !isAzureLogLevel(level)) {
      throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
    }
    azureLogLevel = level;
    const enabledNamespaces2 = [];
    for (const logger4 of registeredLoggers) {
      if (shouldEnable(logger4)) {
        enabledNamespaces2.push(logger4.namespace);
      }
    }
    debug_default.enable(enabledNamespaces2.join(","));
  }
  function createClientLogger(namespace) {
    const clientRootLogger = AzureLogger.extend(namespace);
    patchLogMethod(AzureLogger, clientRootLogger);
    return {
      error: createLogger(clientRootLogger, "error"),
      warning: createLogger(clientRootLogger, "warning"),
      info: createLogger(clientRootLogger, "info"),
      verbose: createLogger(clientRootLogger, "verbose")
    };
  }
  function patchLogMethod(parent, child) {
    child.log = (...args) => {
      parent.log(...args);
    };
  }
  function createLogger(parent, level) {
    const logger4 = Object.assign(parent.extend(level), {
      level
    });
    patchLogMethod(parent, logger4);
    if (shouldEnable(logger4)) {
      const enabledNamespaces2 = debug_default.disable();
      debug_default.enable(enabledNamespaces2 + "," + logger4.namespace);
    }
    registeredLoggers.add(logger4);
    return logger4;
  }
  function shouldEnable(logger4) {
    if (azureLogLevel && levelMap[logger4.level] <= levelMap[azureLogLevel]) {
      return true;
    } else {
      return false;
    }
  }
  function isAzureLogLevel(logLevel) {
    return AZURE_LOG_LEVELS.includes(logLevel);
  }
  var registeredLoggers, logLevelFromEnv, azureLogLevel, AzureLogger, AZURE_LOG_LEVELS, levelMap;
  var init_src = __esm({
    "node_modules/@azure/logger/dist-esm/src/index.js"() {
      init_debug();
      registeredLoggers = /* @__PURE__ */ new Set();
      logLevelFromEnv = typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL || void 0;
      AzureLogger = debug_default("azure");
      AzureLogger.log = (...args) => {
        debug_default.log(...args);
      };
      AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
      if (logLevelFromEnv) {
        if (isAzureLogLevel(logLevelFromEnv)) {
          setLogLevel(logLevelFromEnv);
        } else {
          console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
        }
      }
      __name(setLogLevel, "setLogLevel");
      levelMap = {
        verbose: 400,
        info: 300,
        warning: 200,
        error: 100
      };
      __name(createClientLogger, "createClientLogger");
      __name(patchLogMethod, "patchLogMethod");
      __name(createLogger, "createLogger");
      __name(shouldEnable, "shouldEnable");
      __name(isAzureLogLevel, "isAzureLogLevel");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/log.js
  var logger;
  var init_log = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/log.js"() {
      init_src();
      logger = createClientLogger("core-rest-pipeline");
    }
  });

  // node_modules/@azure/core-util/dist-esm/src/isNode.browser.js
  var isNode;
  var init_isNode_browser = __esm({
    "node_modules/@azure/core-util/dist-esm/src/isNode.browser.js"() {
      isNode = false;
    }
  });

  // node_modules/@azure/core-util/dist-esm/src/random.js
  function getRandomIntegerInclusive(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    const offset = Math.floor(Math.random() * (max - min + 1));
    return offset + min;
  }
  var init_random = __esm({
    "node_modules/@azure/core-util/dist-esm/src/random.js"() {
      __name(getRandomIntegerInclusive, "getRandomIntegerInclusive");
    }
  });

  // node_modules/@azure/core-util/dist-esm/src/object.js
  function isObject(input) {
    return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
  }
  var init_object = __esm({
    "node_modules/@azure/core-util/dist-esm/src/object.js"() {
      __name(isObject, "isObject");
    }
  });

  // node_modules/@azure/core-util/dist-esm/src/error.js
  function isError(e) {
    if (isObject(e)) {
      const hasName = typeof e.name === "string";
      const hasMessage = typeof e.message === "string";
      return hasName && hasMessage;
    }
    return false;
  }
  function getErrorMessage(e) {
    if (isError(e)) {
      return e.message;
    } else {
      let stringified;
      try {
        if (typeof e === "object" && e) {
          stringified = JSON.stringify(e);
        } else {
          stringified = String(e);
        }
      } catch (err) {
        stringified = "[unable to stringify input]";
      }
      return `Unknown error ${stringified}`;
    }
  }
  var init_error = __esm({
    "node_modules/@azure/core-util/dist-esm/src/error.js"() {
      init_object();
      __name(isError, "isError");
      __name(getErrorMessage, "getErrorMessage");
    }
  });

  // node_modules/@azure/core-util/dist-esm/src/index.js
  var init_src2 = __esm({
    "node_modules/@azure/core-util/dist-esm/src/index.js"() {
      init_isNode_browser();
      init_random();
      init_object();
      init_error();
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/sanitizer.js
  var RedactedString, defaultAllowedHeaderNames, defaultAllowedQueryParameters, Sanitizer;
  var init_sanitizer = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/sanitizer.js"() {
      init_src2();
      RedactedString = "REDACTED";
      defaultAllowedHeaderNames = [
        "x-ms-client-request-id",
        "x-ms-return-client-request-id",
        "x-ms-useragent",
        "x-ms-correlation-request-id",
        "x-ms-request-id",
        "client-request-id",
        "ms-cv",
        "return-client-request-id",
        "traceparent",
        "Access-Control-Allow-Credentials",
        "Access-Control-Allow-Headers",
        "Access-Control-Allow-Methods",
        "Access-Control-Allow-Origin",
        "Access-Control-Expose-Headers",
        "Access-Control-Max-Age",
        "Access-Control-Request-Headers",
        "Access-Control-Request-Method",
        "Origin",
        "Accept",
        "Accept-Encoding",
        "Cache-Control",
        "Connection",
        "Content-Length",
        "Content-Type",
        "Date",
        "ETag",
        "Expires",
        "If-Match",
        "If-Modified-Since",
        "If-None-Match",
        "If-Unmodified-Since",
        "Last-Modified",
        "Pragma",
        "Request-Id",
        "Retry-After",
        "Server",
        "Transfer-Encoding",
        "User-Agent",
        "WWW-Authenticate"
      ];
      defaultAllowedQueryParameters = ["api-version"];
      Sanitizer = class {
        constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [] } = {}) {
          allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);
          allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);
          this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));
          this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));
        }
        sanitize(obj) {
          const seen = /* @__PURE__ */ new Set();
          return JSON.stringify(obj, (key, value) => {
            if (value instanceof Error) {
              return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });
            }
            if (key === "headers") {
              return this.sanitizeHeaders(value);
            } else if (key === "url") {
              return this.sanitizeUrl(value);
            } else if (key === "query") {
              return this.sanitizeQuery(value);
            } else if (key === "body") {
              return void 0;
            } else if (key === "response") {
              return void 0;
            } else if (key === "operationSpec") {
              return void 0;
            } else if (Array.isArray(value) || isObject(value)) {
              if (seen.has(value)) {
                return "[Circular]";
              }
              seen.add(value);
            }
            return value;
          }, 2);
        }
        sanitizeHeaders(obj) {
          const sanitized = {};
          for (const key of Object.keys(obj)) {
            if (this.allowedHeaderNames.has(key.toLowerCase())) {
              sanitized[key] = obj[key];
            } else {
              sanitized[key] = RedactedString;
            }
          }
          return sanitized;
        }
        sanitizeQuery(value) {
          if (typeof value !== "object" || value === null) {
            return value;
          }
          const sanitized = {};
          for (const k of Object.keys(value)) {
            if (this.allowedQueryParameters.has(k.toLowerCase())) {
              sanitized[k] = value[k];
            } else {
              sanitized[k] = RedactedString;
            }
          }
          return sanitized;
        }
        sanitizeUrl(value) {
          if (typeof value !== "string" || value === null) {
            return value;
          }
          const url = new URL(value);
          if (!url.search) {
            return value;
          }
          for (const [key] of url.searchParams) {
            if (!this.allowedQueryParameters.has(key.toLowerCase())) {
              url.searchParams.set(key, RedactedString);
            }
          }
          return url.toString();
        }
      };
      __name(Sanitizer, "Sanitizer");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/logPolicy.js
  function logPolicy(options = {}) {
    var _a7;
    const logger4 = (_a7 = options.logger) !== null && _a7 !== void 0 ? _a7 : logger.info;
    const sanitizer = new Sanitizer({
      additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,
      additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
    });
    return {
      name: logPolicyName,
      async sendRequest(request, next) {
        if (!logger4.enabled) {
          return next(request);
        }
        logger4(`Request: ${sanitizer.sanitize(request)}`);
        const response = await next(request);
        logger4(`Response status code: ${response.status}`);
        logger4(`Headers: ${sanitizer.sanitize(response.headers)}`);
        return response;
      }
    };
  }
  var logPolicyName;
  var init_logPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/logPolicy.js"() {
      init_log();
      init_sanitizer();
      logPolicyName = "logPolicy";
      __name(logPolicy, "logPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/redirectPolicy.js
  function redirectPolicy(options = {}) {
    const { maxRetries = 20 } = options;
    return {
      name: redirectPolicyName,
      async sendRequest(request, next) {
        const response = await next(request);
        return handleRedirect(next, response, maxRetries);
      }
    };
  }
  async function handleRedirect(next, response, maxRetries, currentRetries = 0) {
    const { request, status, headers } = response;
    const locationHeader = headers.get("location");
    if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === "POST" || status === 307) && currentRetries < maxRetries) {
      const url = new URL(locationHeader, request.url);
      request.url = url.toString();
      if (status === 303) {
        request.method = "GET";
        request.headers.delete("Content-Length");
        delete request.body;
      }
      request.headers.delete("Authorization");
      const res = await next(request);
      return handleRedirect(next, res, maxRetries, currentRetries + 1);
    }
    return response;
  }
  var redirectPolicyName, allowedRedirect;
  var init_redirectPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/redirectPolicy.js"() {
      redirectPolicyName = "redirectPolicy";
      allowedRedirect = ["GET", "HEAD"];
      __name(redirectPolicy, "redirectPolicy");
      __name(handleRedirect, "handleRedirect");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/userAgentPlatform.browser.js
  function getHeaderName() {
    return "x-ms-useragent";
  }
  function setPlatformSpecificData(map) {
    var _a7, _b2, _c2;
    const localNavigator = globalThis.navigator;
    map.set("OS", ((_c2 = (_b2 = (_a7 = localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) === null || _a7 === void 0 ? void 0 : _a7.platform) !== null && _b2 !== void 0 ? _b2 : localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) !== null && _c2 !== void 0 ? _c2 : "unknown").replace(" ", ""));
  }
  var init_userAgentPlatform_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/userAgentPlatform.browser.js"() {
      __name(getHeaderName, "getHeaderName");
      __name(setPlatformSpecificData, "setPlatformSpecificData");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/constants.js
  var SDK_VERSION, DEFAULT_RETRY_POLICY_COUNT;
  var init_constants = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/constants.js"() {
      SDK_VERSION = "1.10.2";
      DEFAULT_RETRY_POLICY_COUNT = 3;
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/userAgent.js
  function getUserAgentString(telemetryInfo) {
    const parts = [];
    for (const [key, value] of telemetryInfo) {
      const token = value ? `${key}/${value}` : key;
      parts.push(token);
    }
    return parts.join(" ");
  }
  function getUserAgentHeaderName() {
    return getHeaderName();
  }
  function getUserAgentValue(prefix) {
    const runtimeInfo = /* @__PURE__ */ new Map();
    runtimeInfo.set("core-rest-pipeline", SDK_VERSION);
    setPlatformSpecificData(runtimeInfo);
    const defaultAgent = getUserAgentString(runtimeInfo);
    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;
    return userAgentValue;
  }
  var init_userAgent = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/userAgent.js"() {
      init_userAgentPlatform_browser();
      init_constants();
      __name(getUserAgentString, "getUserAgentString");
      __name(getUserAgentHeaderName, "getUserAgentHeaderName");
      __name(getUserAgentValue, "getUserAgentValue");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/userAgentPolicy.js
  function userAgentPolicy(options = {}) {
    const userAgentValue = getUserAgentValue(options.userAgentPrefix);
    return {
      name: userAgentPolicyName,
      async sendRequest(request, next) {
        if (!request.headers.has(UserAgentHeaderName)) {
          request.headers.set(UserAgentHeaderName, userAgentValue);
        }
        return next(request);
      }
    };
  }
  var UserAgentHeaderName, userAgentPolicyName;
  var init_userAgentPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/userAgentPolicy.js"() {
      init_userAgent();
      UserAgentHeaderName = getUserAgentHeaderName();
      userAgentPolicyName = "userAgentPolicy";
      __name(userAgentPolicy, "userAgentPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/decompressResponsePolicy.browser.js
  function decompressResponsePolicy() {
    throw NotSupported;
  }
  var NotSupported, decompressResponsePolicyName;
  var init_decompressResponsePolicy_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/decompressResponsePolicy.browser.js"() {
      NotSupported = new Error("decompressResponsePolicy is not supported in browser environment");
      decompressResponsePolicyName = "decompressResponsePolicy";
      __name(decompressResponsePolicy, "decompressResponsePolicy");
    }
  });

  // node_modules/@azure/abort-controller/node_modules/tslib/tslib.es6.js
  function __extends2(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    __name(__, "__");
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var extendStatics;
  var init_tslib_es6 = __esm({
    "node_modules/@azure/abort-controller/node_modules/tslib/tslib.es6.js"() {
      extendStatics = /* @__PURE__ */ __name(function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      }, "extendStatics");
      __name(__extends2, "__extends");
    }
  });

  // node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js
  function abortSignal(signal) {
    if (signal.aborted) {
      return;
    }
    if (signal.onabort) {
      signal.onabort.call(signal);
    }
    var listeners = listenersMap.get(signal);
    if (listeners) {
      listeners.slice().forEach(function(listener) {
        listener.call(signal, { type: "abort" });
      });
    }
    abortedMap.set(signal, true);
  }
  var listenersMap, abortedMap, AbortSignal;
  var init_AbortSignal = __esm({
    "node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js"() {
      listenersMap = /* @__PURE__ */ new WeakMap();
      abortedMap = /* @__PURE__ */ new WeakMap();
      AbortSignal = /** @class */
      function() {
        function AbortSignal2() {
          this.onabort = null;
          listenersMap.set(this, []);
          abortedMap.set(this, false);
        }
        __name(AbortSignal2, "AbortSignal");
        Object.defineProperty(AbortSignal2.prototype, "aborted", {
          /**
           * Status of whether aborted or not.
           *
           * @readonly
           */
          get: function() {
            if (!abortedMap.has(this)) {
              throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            return abortedMap.get(this);
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(AbortSignal2, "none", {
          /**
           * Creates a new AbortSignal instance that will never be aborted.
           *
           * @readonly
           */
          get: function() {
            return new AbortSignal2();
          },
          enumerable: false,
          configurable: true
        });
        AbortSignal2.prototype.addEventListener = function(_type, listener) {
          if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
          }
          var listeners = listenersMap.get(this);
          listeners.push(listener);
        };
        AbortSignal2.prototype.removeEventListener = function(_type, listener) {
          if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
          }
          var listeners = listenersMap.get(this);
          var index = listeners.indexOf(listener);
          if (index > -1) {
            listeners.splice(index, 1);
          }
        };
        AbortSignal2.prototype.dispatchEvent = function(_event) {
          throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
        };
        return AbortSignal2;
      }();
      __name(abortSignal, "abortSignal");
    }
  });

  // node_modules/@azure/abort-controller/dist-esm/src/AbortController.js
  var AbortError, AbortController2;
  var init_AbortController = __esm({
    "node_modules/@azure/abort-controller/dist-esm/src/AbortController.js"() {
      init_tslib_es6();
      init_AbortSignal();
      AbortError = /** @class */
      function(_super) {
        __extends2(AbortError2, _super);
        function AbortError2(message) {
          var _this = _super.call(this, message) || this;
          _this.name = "AbortError";
          return _this;
        }
        __name(AbortError2, "AbortError");
        return AbortError2;
      }(Error);
      AbortController2 = /** @class */
      function() {
        function AbortController3(parentSignals) {
          var _this = this;
          this._signal = new AbortSignal();
          if (!parentSignals) {
            return;
          }
          if (!Array.isArray(parentSignals)) {
            parentSignals = arguments;
          }
          for (var _i2 = 0, parentSignals_1 = parentSignals; _i2 < parentSignals_1.length; _i2++) {
            var parentSignal = parentSignals_1[_i2];
            if (parentSignal.aborted) {
              this.abort();
            } else {
              parentSignal.addEventListener("abort", function() {
                _this.abort();
              });
            }
          }
        }
        __name(AbortController3, "AbortController");
        Object.defineProperty(AbortController3.prototype, "signal", {
          /**
           * The AbortSignal associated with this controller that will signal aborted
           * when the abort method is called on this controller.
           *
           * @readonly
           */
          get: function() {
            return this._signal;
          },
          enumerable: false,
          configurable: true
        });
        AbortController3.prototype.abort = function() {
          abortSignal(this._signal);
        };
        AbortController3.timeout = function(ms2) {
          var signal = new AbortSignal();
          var timer = setTimeout(abortSignal, ms2, signal);
          if (typeof timer.unref === "function") {
            timer.unref();
          }
          return signal;
        };
        return AbortController3;
      }();
    }
  });

  // node_modules/@azure/abort-controller/dist-esm/src/index.js
  var init_src3 = __esm({
    "node_modules/@azure/abort-controller/dist-esm/src/index.js"() {
      init_AbortController();
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/helpers.js
  function delay(delayInMs, value, options) {
    return new Promise((resolve, reject) => {
      let timer = void 0;
      let onAborted = void 0;
      const rejectOnAbort = /* @__PURE__ */ __name(() => {
        return reject(new AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));
      }, "rejectOnAbort");
      const removeListeners = /* @__PURE__ */ __name(() => {
        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {
          options.abortSignal.removeEventListener("abort", onAborted);
        }
      }, "removeListeners");
      onAborted = /* @__PURE__ */ __name(() => {
        if (timer) {
          clearTimeout(timer);
        }
        removeListeners();
        return rejectOnAbort();
      }, "onAborted");
      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {
        return rejectOnAbort();
      }
      timer = setTimeout(() => {
        removeListeners();
        resolve(value);
      }, delayInMs);
      if (options === null || options === void 0 ? void 0 : options.abortSignal) {
        options.abortSignal.addEventListener("abort", onAborted);
      }
    });
  }
  function parseHeaderValueAsNumber(response, headerName) {
    const value = response.headers.get(headerName);
    if (!value)
      return;
    const valueAsNum = Number(value);
    if (Number.isNaN(valueAsNum))
      return;
    return valueAsNum;
  }
  var StandardAbortMessage;
  var init_helpers = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/helpers.js"() {
      init_src3();
      StandardAbortMessage = "The operation was aborted.";
      __name(delay, "delay");
      __name(parseHeaderValueAsNumber, "parseHeaderValueAsNumber");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/throttlingRetryStrategy.js
  function getRetryAfterInMs(response) {
    if (!(response && [429, 503].includes(response.status)))
      return void 0;
    try {
      for (const header of AllRetryAfterHeaders) {
        const retryAfterValue = parseHeaderValueAsNumber(response, header);
        if (retryAfterValue === 0 || retryAfterValue) {
          const multiplyingFactor = header === RetryAfterHeader ? 1e3 : 1;
          return retryAfterValue * multiplyingFactor;
        }
      }
      const retryAfterHeader = response.headers.get(RetryAfterHeader);
      if (!retryAfterHeader)
        return;
      const date = Date.parse(retryAfterHeader);
      const diff = date - Date.now();
      return Number.isFinite(diff) ? Math.max(0, diff) : void 0;
    } catch (e) {
      return void 0;
    }
  }
  function isThrottlingRetryResponse(response) {
    return Number.isFinite(getRetryAfterInMs(response));
  }
  function throttlingRetryStrategy() {
    return {
      name: "throttlingRetryStrategy",
      retry({ response }) {
        const retryAfterInMs = getRetryAfterInMs(response);
        if (!Number.isFinite(retryAfterInMs)) {
          return { skipStrategy: true };
        }
        return {
          retryAfterInMs
        };
      }
    };
  }
  var RetryAfterHeader, AllRetryAfterHeaders;
  var init_throttlingRetryStrategy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/throttlingRetryStrategy.js"() {
      init_helpers();
      RetryAfterHeader = "Retry-After";
      AllRetryAfterHeaders = ["retry-after-ms", "x-ms-retry-after-ms", RetryAfterHeader];
      __name(getRetryAfterInMs, "getRetryAfterInMs");
      __name(isThrottlingRetryResponse, "isThrottlingRetryResponse");
      __name(throttlingRetryStrategy, "throttlingRetryStrategy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/exponentialRetryStrategy.js
  function exponentialRetryStrategy(options = {}) {
    var _a7, _b2;
    const retryInterval = (_a7 = options.retryDelayInMs) !== null && _a7 !== void 0 ? _a7 : DEFAULT_CLIENT_RETRY_INTERVAL;
    const maxRetryInterval = (_b2 = options.maxRetryDelayInMs) !== null && _b2 !== void 0 ? _b2 : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
    let retryAfterInMs = retryInterval;
    return {
      name: "exponentialRetryStrategy",
      retry({ retryCount, response, responseError }) {
        const matchedSystemError = isSystemError(responseError);
        const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;
        const isExponential = isExponentialRetryResponse(response);
        const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;
        const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);
        if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {
          return { skipStrategy: true };
        }
        if (responseError && !matchedSystemError && !isExponential) {
          return { errorToThrow: responseError };
        }
        const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);
        const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);
        retryAfterInMs = clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);
        return { retryAfterInMs };
      }
    };
  }
  function isExponentialRetryResponse(response) {
    return Boolean(response && response.status !== void 0 && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);
  }
  function isSystemError(err) {
    if (!err) {
      return false;
    }
    return err.code === "ETIMEDOUT" || err.code === "ESOCKETTIMEDOUT" || err.code === "ECONNREFUSED" || err.code === "ECONNRESET" || err.code === "ENOENT";
  }
  var DEFAULT_CLIENT_RETRY_INTERVAL, DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  var init_exponentialRetryStrategy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/retryStrategies/exponentialRetryStrategy.js"() {
      init_src2();
      init_throttlingRetryStrategy();
      DEFAULT_CLIENT_RETRY_INTERVAL = 1e3;
      DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1e3 * 64;
      __name(exponentialRetryStrategy, "exponentialRetryStrategy");
      __name(isExponentialRetryResponse, "isExponentialRetryResponse");
      __name(isSystemError, "isSystemError");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/retryPolicy.js
  function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {
    const logger4 = options.logger || retryPolicyLogger;
    return {
      name: retryPolicyName,
      async sendRequest(request, next) {
        var _a7, _b2;
        let response;
        let responseError;
        let retryCount = -1;
        retryRequest:
          while (true) {
            retryCount += 1;
            response = void 0;
            responseError = void 0;
            try {
              logger4.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);
              response = await next(request);
              logger4.info(`Retry ${retryCount}: Received a response from request`, request.requestId);
            } catch (e) {
              logger4.error(`Retry ${retryCount}: Received an error from request`, request.requestId);
              responseError = e;
              if (!e || responseError.name !== "RestError") {
                throw e;
              }
              response = responseError.response;
            }
            if ((_a7 = request.abortSignal) === null || _a7 === void 0 ? void 0 : _a7.aborted) {
              logger4.error(`Retry ${retryCount}: Request aborted.`);
              const abortError = new AbortError();
              throw abortError;
            }
            if (retryCount >= ((_b2 = options.maxRetries) !== null && _b2 !== void 0 ? _b2 : DEFAULT_RETRY_POLICY_COUNT)) {
              logger4.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);
              if (responseError) {
                throw responseError;
              } else if (response) {
                return response;
              } else {
                throw new Error("Maximum retries reached with no response or error to throw");
              }
            }
            logger4.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);
            strategiesLoop:
              for (const strategy of strategies) {
                const strategyLogger = strategy.logger || retryPolicyLogger;
                strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);
                const modifiers = strategy.retry({
                  retryCount,
                  response,
                  responseError
                });
                if (modifiers.skipStrategy) {
                  strategyLogger.info(`Retry ${retryCount}: Skipped.`);
                  continue strategiesLoop;
                }
                const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;
                if (errorToThrow) {
                  strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);
                  throw errorToThrow;
                }
                if (retryAfterInMs || retryAfterInMs === 0) {
                  strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);
                  await delay(retryAfterInMs, void 0, { abortSignal: request.abortSignal });
                  continue retryRequest;
                }
                if (redirectTo) {
                  strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);
                  request.url = redirectTo;
                  continue retryRequest;
                }
              }
            if (responseError) {
              logger4.info(`None of the retry strategies could work with the received error. Throwing it.`);
              throw responseError;
            }
            if (response) {
              logger4.info(`None of the retry strategies could work with the received response. Returning it.`);
              return response;
            }
          }
      }
    };
  }
  var retryPolicyLogger, retryPolicyName;
  var init_retryPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/retryPolicy.js"() {
      init_helpers();
      init_src();
      init_src3();
      init_constants();
      retryPolicyLogger = createClientLogger("core-rest-pipeline retryPolicy");
      retryPolicyName = "retryPolicy";
      __name(retryPolicy, "retryPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/defaultRetryPolicy.js
  function defaultRetryPolicy(options = {}) {
    var _a7;
    return {
      name: defaultRetryPolicyName,
      sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {
        maxRetries: (_a7 = options.maxRetries) !== null && _a7 !== void 0 ? _a7 : DEFAULT_RETRY_POLICY_COUNT
      }).sendRequest
    };
  }
  var defaultRetryPolicyName;
  var init_defaultRetryPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/defaultRetryPolicy.js"() {
      init_exponentialRetryStrategy();
      init_throttlingRetryStrategy();
      init_retryPolicy();
      init_constants();
      defaultRetryPolicyName = "defaultRetryPolicy";
      __name(defaultRetryPolicy, "defaultRetryPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/formDataPolicy.browser.js
  function formDataPolicy() {
    return {
      name: formDataPolicyName,
      async sendRequest(request, next) {
        if (request.formData) {
          const formData = request.formData;
          const requestForm = new FormData();
          for (const formKey of Object.keys(formData)) {
            const formValue = formData[formKey];
            if (Array.isArray(formValue)) {
              for (const subValue of formValue) {
                requestForm.append(formKey, subValue);
              }
            } else {
              requestForm.append(formKey, formValue);
            }
          }
          request.body = requestForm;
          request.formData = void 0;
          const contentType7 = request.headers.get("Content-Type");
          if (contentType7 && contentType7.indexOf("application/x-www-form-urlencoded") !== -1) {
            request.body = new URLSearchParams(requestForm).toString();
          } else if (contentType7 && contentType7.indexOf("multipart/form-data") !== -1) {
            request.headers.delete("Content-Type");
          }
        }
        return next(request);
      }
    };
  }
  var formDataPolicyName;
  var init_formDataPolicy_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/formDataPolicy.browser.js"() {
      formDataPolicyName = "formDataPolicy";
      __name(formDataPolicy, "formDataPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/proxyPolicy.browser.js
  function getDefaultProxySettings() {
    throw NotSupported2;
  }
  function proxyPolicy() {
    throw NotSupported2;
  }
  var NotSupported2, proxyPolicyName;
  var init_proxyPolicy_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/proxyPolicy.browser.js"() {
      NotSupported2 = new Error("proxyPolicy is not supported in browser environment");
      proxyPolicyName = "proxyPolicy";
      __name(getDefaultProxySettings, "getDefaultProxySettings");
      __name(proxyPolicy, "proxyPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/setClientRequestIdPolicy.js
  function setClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
    return {
      name: setClientRequestIdPolicyName,
      async sendRequest(request, next) {
        if (!request.headers.has(requestIdHeaderName)) {
          request.headers.set(requestIdHeaderName, request.requestId);
        }
        return next(request);
      }
    };
  }
  var setClientRequestIdPolicyName;
  var init_setClientRequestIdPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/setClientRequestIdPolicy.js"() {
      setClientRequestIdPolicyName = "setClientRequestIdPolicy";
      __name(setClientRequestIdPolicy, "setClientRequestIdPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tlsPolicy.js
  function tlsPolicy(tlsSettings) {
    return {
      name: tlsPolicyName,
      sendRequest: async (req, next) => {
        if (!req.tlsSettings) {
          req.tlsSettings = tlsSettings;
        }
        return next(req);
      }
    };
  }
  var tlsPolicyName;
  var init_tlsPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tlsPolicy.js"() {
      tlsPolicyName = "tlsPolicy";
      __name(tlsPolicy, "tlsPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/tracingContext.js
  function createTracingContext(options = {}) {
    let context = new TracingContextImpl(options.parentContext);
    if (options.span) {
      context = context.setValue(knownContextKeys.span, options.span);
    }
    if (options.namespace) {
      context = context.setValue(knownContextKeys.namespace, options.namespace);
    }
    return context;
  }
  var knownContextKeys, TracingContextImpl;
  var init_tracingContext = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/tracingContext.js"() {
      knownContextKeys = {
        span: Symbol.for("@azure/core-tracing span"),
        namespace: Symbol.for("@azure/core-tracing namespace")
      };
      __name(createTracingContext, "createTracingContext");
      TracingContextImpl = class {
        constructor(initialContext) {
          this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : /* @__PURE__ */ new Map();
        }
        setValue(key, value) {
          const newContext = new TracingContextImpl(this);
          newContext._contextMap.set(key, value);
          return newContext;
        }
        getValue(key) {
          return this._contextMap.get(key);
        }
        deleteValue(key) {
          const newContext = new TracingContextImpl(this);
          newContext._contextMap.delete(key);
          return newContext;
        }
      };
      __name(TracingContextImpl, "TracingContextImpl");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/instrumenter.js
  function createDefaultTracingSpan() {
    return {
      end: () => {
      },
      isRecording: () => false,
      recordException: () => {
      },
      setAttribute: () => {
      },
      setStatus: () => {
      }
    };
  }
  function createDefaultInstrumenter() {
    return {
      createRequestHeaders: () => {
        return {};
      },
      parseTraceparentHeader: () => {
        return void 0;
      },
      startSpan: (_name, spanOptions) => {
        return {
          span: createDefaultTracingSpan(),
          tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext })
        };
      },
      withContext(_context, callback, ...callbackArgs) {
        return callback(...callbackArgs);
      }
    };
  }
  function getInstrumenter() {
    if (!instrumenterImplementation) {
      instrumenterImplementation = createDefaultInstrumenter();
    }
    return instrumenterImplementation;
  }
  var instrumenterImplementation;
  var init_instrumenter = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/instrumenter.js"() {
      init_tracingContext();
      __name(createDefaultTracingSpan, "createDefaultTracingSpan");
      __name(createDefaultInstrumenter, "createDefaultInstrumenter");
      __name(getInstrumenter, "getInstrumenter");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/tracingClient.js
  function createTracingClient(options) {
    const { namespace, packageName, packageVersion } = options;
    function startSpan(name, operationOptions, spanOptions) {
      var _a7;
      const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName, packageVersion, tracingContext: (_a7 = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a7 === void 0 ? void 0 : _a7.tracingContext }));
      let tracingContext = startSpanResult.tracingContext;
      const span = startSpanResult.span;
      if (!tracingContext.getValue(knownContextKeys.namespace)) {
        tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);
      }
      span.setAttribute("az.namespace", tracingContext.getValue(knownContextKeys.namespace));
      const updatedOptions = Object.assign({}, operationOptions, {
        tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext })
      });
      return {
        span,
        updatedOptions
      };
    }
    __name(startSpan, "startSpan");
    async function withSpan(name, operationOptions, callback, spanOptions) {
      const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);
      try {
        const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));
        span.setStatus({ status: "success" });
        return result;
      } catch (err) {
        span.setStatus({ status: "error", error: err });
        throw err;
      } finally {
        span.end();
      }
    }
    __name(withSpan, "withSpan");
    function withContext(context, callback, ...callbackArgs) {
      return getInstrumenter().withContext(context, callback, ...callbackArgs);
    }
    __name(withContext, "withContext");
    function parseTraceparentHeader(traceparentHeader) {
      return getInstrumenter().parseTraceparentHeader(traceparentHeader);
    }
    __name(parseTraceparentHeader, "parseTraceparentHeader");
    function createRequestHeaders(tracingContext) {
      return getInstrumenter().createRequestHeaders(tracingContext);
    }
    __name(createRequestHeaders, "createRequestHeaders");
    return {
      startSpan,
      withSpan,
      withContext,
      parseTraceparentHeader,
      createRequestHeaders
    };
  }
  var init_tracingClient = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/tracingClient.js"() {
      init_instrumenter();
      init_tracingContext();
      __name(createTracingClient, "createTracingClient");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/index.js
  var init_src4 = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/@azure/core-tracing/dist-esm/src/index.js"() {
      init_tracingClient();
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/inspect.browser.js
  var custom;
  var init_inspect_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/inspect.browser.js"() {
      custom = {};
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/restError.js
  function isRestError(e) {
    if (e instanceof RestError) {
      return true;
    }
    return isError(e) && e.name === "RestError";
  }
  var errorSanitizer, RestError;
  var init_restError = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/restError.js"() {
      init_src2();
      init_inspect_browser();
      init_sanitizer();
      errorSanitizer = new Sanitizer();
      RestError = class extends Error {
        constructor(message, options = {}) {
          super(message);
          this.name = "RestError";
          this.code = options.code;
          this.statusCode = options.statusCode;
          this.request = options.request;
          this.response = options.response;
          Object.setPrototypeOf(this, RestError.prototype);
        }
        /**
         * Logging method for util.inspect in Node
         */
        [custom]() {
          return `RestError: ${this.message} 
 ${errorSanitizer.sanitize(this)}`;
        }
      };
      __name(RestError, "RestError");
      RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
      RestError.PARSE_ERROR = "PARSE_ERROR";
      __name(isRestError, "isRestError");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tracingPolicy.js
  function tracingPolicy(options = {}) {
    const userAgent = getUserAgentValue(options.userAgentPrefix);
    const tracingClient = tryCreateTracingClient();
    return {
      name: tracingPolicyName,
      async sendRequest(request, next) {
        var _a7, _b2;
        if (!tracingClient || !((_a7 = request.tracingOptions) === null || _a7 === void 0 ? void 0 : _a7.tracingContext)) {
          return next(request);
        }
        const { span, tracingContext } = (_b2 = tryCreateSpan(tracingClient, request, userAgent)) !== null && _b2 !== void 0 ? _b2 : {};
        if (!span || !tracingContext) {
          return next(request);
        }
        try {
          const response = await tracingClient.withContext(tracingContext, next, request);
          tryProcessResponse(span, response);
          return response;
        } catch (err) {
          tryProcessError(span, err);
          throw err;
        }
      }
    };
  }
  function tryCreateTracingClient() {
    try {
      return createTracingClient({
        namespace: "",
        packageName: "@azure/core-rest-pipeline",
        packageVersion: SDK_VERSION
      });
    } catch (e) {
      logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);
      return void 0;
    }
  }
  function tryCreateSpan(tracingClient, request, userAgent) {
    try {
      const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {
        spanKind: "client",
        spanAttributes: {
          "http.method": request.method,
          "http.url": request.url,
          requestId: request.requestId
        }
      });
      if (!span.isRecording()) {
        span.end();
        return void 0;
      }
      if (userAgent) {
        span.setAttribute("http.user_agent", userAgent);
      }
      const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
      for (const [key, value] of Object.entries(headers)) {
        request.headers.set(key, value);
      }
      return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };
    } catch (e) {
      logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);
      return void 0;
    }
  }
  function tryProcessError(span, error) {
    try {
      span.setStatus({
        status: "error",
        error: isError(error) ? error : void 0
      });
      if (isRestError(error) && error.statusCode) {
        span.setAttribute("http.status_code", error.statusCode);
      }
      span.end();
    } catch (e) {
      logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);
    }
  }
  function tryProcessResponse(span, response) {
    try {
      span.setAttribute("http.status_code", response.status);
      const serviceRequestId = response.headers.get("x-ms-request-id");
      if (serviceRequestId) {
        span.setAttribute("serviceRequestId", serviceRequestId);
      }
      span.setStatus({
        status: "success"
      });
      span.end();
    } catch (e) {
      logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);
    }
  }
  var tracingPolicyName;
  var init_tracingPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/tracingPolicy.js"() {
      init_src4();
      init_constants();
      init_userAgent();
      init_log();
      init_src2();
      init_restError();
      tracingPolicyName = "tracingPolicy";
      __name(tracingPolicy, "tracingPolicy");
      __name(tryCreateTracingClient, "tryCreateTracingClient");
      __name(tryCreateSpan, "tryCreateSpan");
      __name(tryProcessError, "tryProcessError");
      __name(tryProcessResponse, "tryProcessResponse");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/createPipelineFromOptions.js
  function createPipelineFromOptions(options) {
    const pipeline = createEmptyPipeline();
    if (isNode) {
      if (options.tlsOptions) {
        pipeline.addPolicy(tlsPolicy(options.tlsOptions));
      }
      pipeline.addPolicy(proxyPolicy(options.proxyOptions));
      pipeline.addPolicy(decompressResponsePolicy());
    }
    pipeline.addPolicy(formDataPolicy());
    pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));
    pipeline.addPolicy(setClientRequestIdPolicy());
    pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: "Retry" });
    pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: "Retry" });
    if (isNode) {
      pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: "Retry" });
    }
    pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: "Sign" });
    return pipeline;
  }
  var init_createPipelineFromOptions = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/createPipelineFromOptions.js"() {
      init_logPolicy();
      init_pipeline();
      init_redirectPolicy();
      init_userAgentPolicy();
      init_decompressResponsePolicy_browser();
      init_defaultRetryPolicy();
      init_formDataPolicy_browser();
      init_src2();
      init_proxyPolicy_browser();
      init_setClientRequestIdPolicy();
      init_tlsPolicy();
      init_tracingPolicy();
      __name(createPipelineFromOptions, "createPipelineFromOptions");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/httpHeaders.js
  function normalizeName(name) {
    return name.toLowerCase();
  }
  function* headerIterator(map) {
    for (const entry of map.values()) {
      yield [entry.name, entry.value];
    }
  }
  function createHttpHeaders(rawHeaders) {
    return new HttpHeadersImpl(rawHeaders);
  }
  var HttpHeadersImpl;
  var init_httpHeaders = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/httpHeaders.js"() {
      __name(normalizeName, "normalizeName");
      __name(headerIterator, "headerIterator");
      HttpHeadersImpl = class {
        constructor(rawHeaders) {
          this._headersMap = /* @__PURE__ */ new Map();
          if (rawHeaders) {
            for (const headerName of Object.keys(rawHeaders)) {
              this.set(headerName, rawHeaders[headerName]);
            }
          }
        }
        /**
         * Set a header in this collection with the provided name and value. The name is
         * case-insensitive.
         * @param name - The name of the header to set. This value is case-insensitive.
         * @param value - The value of the header to set.
         */
        set(name, value) {
          this._headersMap.set(normalizeName(name), { name, value: String(value) });
        }
        /**
         * Get the header value for the provided header name, or undefined if no header exists in this
         * collection with the provided name.
         * @param name - The name of the header. This value is case-insensitive.
         */
        get(name) {
          var _a7;
          return (_a7 = this._headersMap.get(normalizeName(name))) === null || _a7 === void 0 ? void 0 : _a7.value;
        }
        /**
         * Get whether or not this header collection contains a header entry for the provided header name.
         * @param name - The name of the header to set. This value is case-insensitive.
         */
        has(name) {
          return this._headersMap.has(normalizeName(name));
        }
        /**
         * Remove the header with the provided headerName.
         * @param name - The name of the header to remove.
         */
        delete(name) {
          this._headersMap.delete(normalizeName(name));
        }
        /**
         * Get the JSON object representation of this HTTP header collection.
         */
        toJSON(options = {}) {
          const result = {};
          if (options.preserveCase) {
            for (const entry of this._headersMap.values()) {
              result[entry.name] = entry.value;
            }
          } else {
            for (const [normalizedName, entry] of this._headersMap) {
              result[normalizedName] = entry.value;
            }
          }
          return result;
        }
        /**
         * Get the string representation of this HTTP header collection.
         */
        toString() {
          return JSON.stringify(this.toJSON({ preserveCase: true }));
        }
        /**
         * Iterate over tuples of header [name, value] pairs.
         */
        [Symbol.iterator]() {
          return headerIterator(this._headersMap);
        }
      };
      __name(HttpHeadersImpl, "HttpHeadersImpl");
      __name(createHttpHeaders, "createHttpHeaders");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/fetchHttpClient.js
  function isNodeReadableStream(body4) {
    return body4 && typeof body4.pipe === "function";
  }
  function isReadableStream(body4) {
    return Boolean(body4 && typeof body4.getReader === "function" && typeof body4.tee === "function");
  }
  function isBlob(body4) {
    return (typeof Blob === "function" || typeof Blob === "object") && body4 instanceof Blob;
  }
  async function makeRequest(request) {
    const { abortController, abortControllerCleanup } = setupAbortSignal(request);
    try {
      const headers = buildFetchHeaders(request.headers);
      const requestBody = buildRequestBody(request);
      const response = await fetch(request.url, {
        body: requestBody,
        method: request.method,
        headers,
        signal: abortController.signal,
        credentials: request.withCredentials ? "include" : "same-origin",
        cache: "no-store"
      });
      if (isBlob(request.body) && request.onUploadProgress) {
        request.onUploadProgress({ loadedBytes: request.body.size });
      }
      return buildPipelineResponse(response, request);
    } finally {
      if (abortControllerCleanup) {
        abortControllerCleanup();
      }
    }
  }
  async function buildPipelineResponse(httpResponse, request) {
    var _a7, _b2;
    const headers = buildPipelineHeaders(httpResponse);
    const response = {
      request,
      headers,
      status: httpResponse.status
    };
    const bodyStream = isReadableStream(httpResponse.body) ? buildBodyStream(httpResponse.body, request.onDownloadProgress) : httpResponse.body;
    if (
      // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code
      ((_a7 = request.streamResponseStatusCodes) === null || _a7 === void 0 ? void 0 : _a7.has(Number.POSITIVE_INFINITY)) || ((_b2 = request.streamResponseStatusCodes) === null || _b2 === void 0 ? void 0 : _b2.has(response.status))
    ) {
      if (request.enableBrowserStreams) {
        response.browserStreamBody = bodyStream !== null && bodyStream !== void 0 ? bodyStream : void 0;
      } else {
        const responseStream = new Response(bodyStream);
        response.blobBody = responseStream.blob();
      }
    } else {
      const responseStream = new Response(bodyStream);
      response.bodyAsText = await responseStream.text();
    }
    return response;
  }
  function setupAbortSignal(request) {
    const abortController = new AbortController();
    let abortControllerCleanup;
    let abortListener;
    if (request.abortSignal) {
      if (request.abortSignal.aborted) {
        throw new AbortError("The operation was aborted.");
      }
      abortListener = /* @__PURE__ */ __name((event) => {
        if (event.type === "abort") {
          abortController.abort();
        }
      }, "abortListener");
      request.abortSignal.addEventListener("abort", abortListener);
      abortControllerCleanup = /* @__PURE__ */ __name(() => {
        var _a7;
        if (abortListener) {
          (_a7 = request.abortSignal) === null || _a7 === void 0 ? void 0 : _a7.removeEventListener("abort", abortListener);
        }
      }, "abortControllerCleanup");
    }
    if (request.timeout > 0) {
      setTimeout(() => {
        abortController.abort();
      }, request.timeout);
    }
    return { abortController, abortControllerCleanup };
  }
  function getError(e, request) {
    var _a7;
    if (e && (e === null || e === void 0 ? void 0 : e.name) === "AbortError") {
      return e;
    } else {
      return new RestError(`Error sending request: ${e.message}`, {
        code: (_a7 = e === null || e === void 0 ? void 0 : e.code) !== null && _a7 !== void 0 ? _a7 : RestError.REQUEST_SEND_ERROR,
        request
      });
    }
  }
  function buildFetchHeaders(pipelineHeaders) {
    const headers = new Headers();
    for (const [name, value] of pipelineHeaders) {
      headers.append(name, value);
    }
    return headers;
  }
  function buildPipelineHeaders(httpResponse) {
    const responseHeaders = createHttpHeaders();
    for (const [name, value] of httpResponse.headers) {
      responseHeaders.set(name, value);
    }
    return responseHeaders;
  }
  function buildRequestBody(request) {
    const body4 = typeof request.body === "function" ? request.body() : request.body;
    if (isNodeReadableStream(body4)) {
      throw new Error("Node streams are not supported in browser environment.");
    }
    return isReadableStream(body4) ? buildBodyStream(body4, request.onUploadProgress) : body4;
  }
  function buildBodyStream(readableStream, onProgress) {
    let loadedBytes = 0;
    if (isTransformStreamSupported(readableStream)) {
      return readableStream.pipeThrough(new TransformStream({
        transform(chunk, controller) {
          if (chunk === null) {
            controller.terminate();
            return;
          }
          controller.enqueue(chunk);
          loadedBytes += chunk.length;
          if (onProgress) {
            onProgress({ loadedBytes });
          }
        }
      }));
    } else {
      const reader = readableStream.getReader();
      return new ReadableStream({
        async pull(controller) {
          var _a7;
          const { done, value } = await reader.read();
          if (done || !value) {
            controller.close();
            reader.releaseLock();
            return;
          }
          loadedBytes += (_a7 = value === null || value === void 0 ? void 0 : value.length) !== null && _a7 !== void 0 ? _a7 : 0;
          controller.enqueue(value);
          if (onProgress) {
            onProgress({ loadedBytes });
          }
        }
      });
    }
  }
  function createFetchHttpClient() {
    return new FetchHttpClient();
  }
  function isTransformStreamSupported(readableStream) {
    return readableStream.pipeThrough !== void 0 && self.TransformStream !== void 0;
  }
  var FetchHttpClient;
  var init_fetchHttpClient = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/fetchHttpClient.js"() {
      init_src3();
      init_restError();
      init_httpHeaders();
      __name(isNodeReadableStream, "isNodeReadableStream");
      __name(isReadableStream, "isReadableStream");
      __name(isBlob, "isBlob");
      FetchHttpClient = class {
        /**
         * Makes a request over an underlying transport layer and returns the response.
         * @param request - The request to be made.
         */
        async sendRequest(request) {
          const url = new URL(request.url);
          const isInsecure = url.protocol !== "https:";
          if (isInsecure && !request.allowInsecureConnection) {
            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);
          }
          if (request.proxySettings) {
            throw new Error("HTTP proxy is not supported in browser environment");
          }
          try {
            return await makeRequest(request);
          } catch (e) {
            throw getError(e, request);
          }
        }
      };
      __name(FetchHttpClient, "FetchHttpClient");
      __name(makeRequest, "makeRequest");
      __name(buildPipelineResponse, "buildPipelineResponse");
      __name(setupAbortSignal, "setupAbortSignal");
      __name(getError, "getError");
      __name(buildFetchHeaders, "buildFetchHeaders");
      __name(buildPipelineHeaders, "buildPipelineHeaders");
      __name(buildRequestBody, "buildRequestBody");
      __name(buildBodyStream, "buildBodyStream");
      __name(createFetchHttpClient, "createFetchHttpClient");
      __name(isTransformStreamSupported, "isTransformStreamSupported");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/defaultHttpClient.browser.js
  function createDefaultHttpClient() {
    return createFetchHttpClient();
  }
  var init_defaultHttpClient_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/defaultHttpClient.browser.js"() {
      init_fetchHttpClient();
      __name(createDefaultHttpClient, "createDefaultHttpClient");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/rng.js
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }
  var getRandomValues, rnds8;
  var init_rng = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/rng.js"() {
      rnds8 = new Uint8Array(16);
      __name(rng, "rng");
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/regex.js
  var regex_default;
  var init_regex = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/regex.js"() {
      regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/validate.js
  function validate(uuid) {
    return typeof uuid === "string" && regex_default.test(uuid);
  }
  var validate_default;
  var init_validate = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/validate.js"() {
      init_regex();
      __name(validate, "validate");
      validate_default = validate;
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/stringify.js
  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    if (!validate_default(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var byteToHex, i, stringify_default;
  var init_stringify = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/stringify.js"() {
      init_validate();
      byteToHex = [];
      for (i = 0; i < 256; ++i) {
        byteToHex.push((i + 256).toString(16).substr(1));
      }
      __name(stringify, "stringify");
      stringify_default = stringify;
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return stringify_default(rnds);
  }
  var v4_default;
  var init_v4 = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/v4.js"() {
      init_rng();
      init_stringify();
      __name(v4, "v4");
      v4_default = v4;
    }
  });

  // node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/index.js
  var init_esm_browser = __esm({
    "node_modules/@azure/core-rest-pipeline/node_modules/uuid/dist/esm-browser/index.js"() {
      init_v4();
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/uuid.js
  function generateUuid() {
    return v4_default();
  }
  var init_uuid = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/uuid.js"() {
      init_esm_browser();
      __name(generateUuid, "generateUuid");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/pipelineRequest.js
  function createPipelineRequest(options) {
    return new PipelineRequestImpl(options);
  }
  var PipelineRequestImpl;
  var init_pipelineRequest = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/pipelineRequest.js"() {
      init_httpHeaders();
      init_uuid();
      PipelineRequestImpl = class {
        constructor(options) {
          var _a7, _b2, _c2, _d, _e2, _f, _g;
          this.url = options.url;
          this.body = options.body;
          this.headers = (_a7 = options.headers) !== null && _a7 !== void 0 ? _a7 : createHttpHeaders();
          this.method = (_b2 = options.method) !== null && _b2 !== void 0 ? _b2 : "GET";
          this.timeout = (_c2 = options.timeout) !== null && _c2 !== void 0 ? _c2 : 0;
          this.formData = options.formData;
          this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;
          this.proxySettings = options.proxySettings;
          this.streamResponseStatusCodes = options.streamResponseStatusCodes;
          this.withCredentials = (_e2 = options.withCredentials) !== null && _e2 !== void 0 ? _e2 : false;
          this.abortSignal = options.abortSignal;
          this.tracingOptions = options.tracingOptions;
          this.onUploadProgress = options.onUploadProgress;
          this.onDownloadProgress = options.onDownloadProgress;
          this.requestId = options.requestId || generateUuid();
          this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;
          this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;
        }
      };
      __name(PipelineRequestImpl, "PipelineRequestImpl");
      __name(createPipelineRequest, "createPipelineRequest");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/exponentialRetryPolicy.js
  function exponentialRetryPolicy(options = {}) {
    var _a7;
    return retryPolicy([
      exponentialRetryStrategy(Object.assign(Object.assign({}, options), { ignoreSystemErrors: true }))
    ], {
      maxRetries: (_a7 = options.maxRetries) !== null && _a7 !== void 0 ? _a7 : DEFAULT_RETRY_POLICY_COUNT
    });
  }
  var exponentialRetryPolicyName;
  var init_exponentialRetryPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/exponentialRetryPolicy.js"() {
      init_exponentialRetryStrategy();
      init_retryPolicy();
      init_constants();
      exponentialRetryPolicyName = "exponentialRetryPolicy";
      __name(exponentialRetryPolicy, "exponentialRetryPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/systemErrorRetryPolicy.js
  function systemErrorRetryPolicy(options = {}) {
    var _a7;
    return {
      name: systemErrorRetryPolicyName,
      sendRequest: retryPolicy([
        exponentialRetryStrategy(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true }))
      ], {
        maxRetries: (_a7 = options.maxRetries) !== null && _a7 !== void 0 ? _a7 : DEFAULT_RETRY_POLICY_COUNT
      }).sendRequest
    };
  }
  var systemErrorRetryPolicyName;
  var init_systemErrorRetryPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/systemErrorRetryPolicy.js"() {
      init_exponentialRetryStrategy();
      init_retryPolicy();
      init_constants();
      systemErrorRetryPolicyName = "systemErrorRetryPolicy";
      __name(systemErrorRetryPolicy, "systemErrorRetryPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/throttlingRetryPolicy.js
  function throttlingRetryPolicy(options = {}) {
    var _a7;
    return {
      name: throttlingRetryPolicyName,
      sendRequest: retryPolicy([throttlingRetryStrategy()], {
        maxRetries: (_a7 = options.maxRetries) !== null && _a7 !== void 0 ? _a7 : DEFAULT_RETRY_POLICY_COUNT
      }).sendRequest
    };
  }
  var throttlingRetryPolicyName;
  var init_throttlingRetryPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/throttlingRetryPolicy.js"() {
      init_throttlingRetryStrategy();
      init_retryPolicy();
      init_constants();
      throttlingRetryPolicyName = "throttlingRetryPolicy";
      __name(throttlingRetryPolicy, "throttlingRetryPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/util/tokenCycler.js
  async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {
    async function tryGetAccessToken() {
      if (Date.now() < refreshTimeout) {
        try {
          return await getAccessToken();
        } catch (_a7) {
          return null;
        }
      } else {
        const finalToken = await getAccessToken();
        if (finalToken === null) {
          throw new Error("Failed to refresh access token.");
        }
        return finalToken;
      }
    }
    __name(tryGetAccessToken, "tryGetAccessToken");
    let token = await tryGetAccessToken();
    while (token === null) {
      await delay(retryIntervalInMs);
      token = await tryGetAccessToken();
    }
    return token;
  }
  function createTokenCycler(credential, tokenCyclerOptions) {
    let refreshWorker = null;
    let token = null;
    let tenantId;
    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
    const cycler = {
      /**
       * Produces true if a refresh job is currently in progress.
       */
      get isRefreshing() {
        return refreshWorker !== null;
      },
      /**
       * Produces true if the cycler SHOULD refresh (we are within the refresh
       * window and not already refreshing)
       */
      get shouldRefresh() {
        var _a7;
        return !cycler.isRefreshing && ((_a7 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a7 !== void 0 ? _a7 : 0) - options.refreshWindowInMs < Date.now();
      },
      /**
       * Produces true if the cycler MUST refresh (null or nearly-expired
       * token).
       */
      get mustRefresh() {
        return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
      }
    };
    function refresh(scopes, getTokenOptions) {
      var _a7;
      if (!cycler.isRefreshing) {
        const tryGetAccessToken = /* @__PURE__ */ __name(() => credential.getToken(scopes, getTokenOptions), "tryGetAccessToken");
        refreshWorker = beginRefresh(
          tryGetAccessToken,
          options.retryIntervalInMs,
          // If we don't have a token, then we should timeout immediately
          (_a7 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a7 !== void 0 ? _a7 : Date.now()
        ).then((_token) => {
          refreshWorker = null;
          token = _token;
          tenantId = getTokenOptions.tenantId;
          return token;
        }).catch((reason) => {
          refreshWorker = null;
          token = null;
          tenantId = void 0;
          throw reason;
        });
      }
      return refreshWorker;
    }
    __name(refresh, "refresh");
    return async (scopes, tokenOptions) => {
      const mustRefresh = tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;
      if (mustRefresh)
        return refresh(scopes, tokenOptions);
      if (cycler.shouldRefresh) {
        refresh(scopes, tokenOptions);
      }
      return token;
    };
  }
  var DEFAULT_CYCLER_OPTIONS;
  var init_tokenCycler = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/util/tokenCycler.js"() {
      init_helpers();
      DEFAULT_CYCLER_OPTIONS = {
        forcedRefreshWindowInMs: 1e3,
        retryIntervalInMs: 3e3,
        refreshWindowInMs: 1e3 * 60 * 2
        // Start refreshing 2m before expiry
      };
      __name(beginRefresh, "beginRefresh");
      __name(createTokenCycler, "createTokenCycler");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js
  async function defaultAuthorizeRequest(options) {
    const { scopes, getAccessToken, request } = options;
    const getTokenOptions = {
      abortSignal: request.abortSignal,
      tracingOptions: request.tracingOptions
    };
    const accessToken = await getAccessToken(scopes, getTokenOptions);
    if (accessToken) {
      options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
    }
  }
  function getChallenge(response) {
    const challenge = response.headers.get("WWW-Authenticate");
    if (response.status === 401 && challenge) {
      return challenge;
    }
    return;
  }
  function bearerTokenAuthenticationPolicy(options) {
    var _a7;
    const { credential, scopes, challengeCallbacks } = options;
    const logger4 = options.logger || logger;
    const callbacks = Object.assign({ authorizeRequest: (_a7 = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) !== null && _a7 !== void 0 ? _a7 : defaultAuthorizeRequest, authorizeRequestOnChallenge: challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge }, challengeCallbacks);
    const getAccessToken = credential ? createTokenCycler(
      credential
      /* , options */
    ) : () => Promise.resolve(null);
    return {
      name: bearerTokenAuthenticationPolicyName,
      /**
       * If there's no challenge parameter:
       * - It will try to retrieve the token using the cache, or the credential's getToken.
       * - Then it will try the next policy with or without the retrieved token.
       *
       * It uses the challenge parameters to:
       * - Skip a first attempt to get the token from the credential if there's no cached token,
       *   since it expects the token to be retrievable only after the challenge.
       * - Prepare the outgoing request if the `prepareRequest` method has been provided.
       * - Send an initial request to receive the challenge if it fails.
       * - Process a challenge if the response contains it.
       * - Retrieve a token with the challenge information, then re-send the request.
       */
      async sendRequest(request, next) {
        if (!request.url.toLowerCase().startsWith("https://")) {
          throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
        }
        await callbacks.authorizeRequest({
          scopes: Array.isArray(scopes) ? scopes : [scopes],
          request,
          getAccessToken,
          logger: logger4
        });
        let response;
        let error;
        try {
          response = await next(request);
        } catch (err) {
          error = err;
          response = err.response;
        }
        if (callbacks.authorizeRequestOnChallenge && (response === null || response === void 0 ? void 0 : response.status) === 401 && getChallenge(response)) {
          const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
            scopes: Array.isArray(scopes) ? scopes : [scopes],
            request,
            response,
            getAccessToken,
            logger: logger4
          });
          if (shouldSendRequest) {
            return next(request);
          }
        }
        if (error) {
          throw error;
        } else {
          return response;
        }
      }
    };
  }
  var bearerTokenAuthenticationPolicyName;
  var init_bearerTokenAuthenticationPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js"() {
      init_tokenCycler();
      init_log();
      bearerTokenAuthenticationPolicyName = "bearerTokenAuthenticationPolicy";
      __name(defaultAuthorizeRequest, "defaultAuthorizeRequest");
      __name(getChallenge, "getChallenge");
      __name(bearerTokenAuthenticationPolicy, "bearerTokenAuthenticationPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/ndJsonPolicy.js
  function ndJsonPolicy() {
    return {
      name: ndJsonPolicyName,
      async sendRequest(request, next) {
        if (typeof request.body === "string" && request.body.startsWith("[")) {
          const body4 = JSON.parse(request.body);
          if (Array.isArray(body4)) {
            request.body = body4.map((item) => JSON.stringify(item) + "\n").join("");
          }
        }
        return next(request);
      }
    };
  }
  var ndJsonPolicyName;
  var init_ndJsonPolicy = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/policies/ndJsonPolicy.js"() {
      ndJsonPolicyName = "ndJsonPolicy";
      __name(ndJsonPolicy, "ndJsonPolicy");
    }
  });

  // node_modules/@azure/core-rest-pipeline/dist-esm/src/index.js
  var src_exports = {};
  __export(src_exports, {
    RestError: () => RestError,
    bearerTokenAuthenticationPolicy: () => bearerTokenAuthenticationPolicy,
    bearerTokenAuthenticationPolicyName: () => bearerTokenAuthenticationPolicyName,
    createDefaultHttpClient: () => createDefaultHttpClient,
    createEmptyPipeline: () => createEmptyPipeline,
    createHttpHeaders: () => createHttpHeaders,
    createPipelineFromOptions: () => createPipelineFromOptions,
    createPipelineRequest: () => createPipelineRequest,
    decompressResponsePolicy: () => decompressResponsePolicy,
    decompressResponsePolicyName: () => decompressResponsePolicyName,
    defaultRetryPolicy: () => defaultRetryPolicy,
    exponentialRetryPolicy: () => exponentialRetryPolicy,
    exponentialRetryPolicyName: () => exponentialRetryPolicyName,
    formDataPolicy: () => formDataPolicy,
    formDataPolicyName: () => formDataPolicyName,
    getDefaultProxySettings: () => getDefaultProxySettings,
    isRestError: () => isRestError,
    logPolicy: () => logPolicy,
    logPolicyName: () => logPolicyName,
    ndJsonPolicy: () => ndJsonPolicy,
    ndJsonPolicyName: () => ndJsonPolicyName,
    proxyPolicy: () => proxyPolicy,
    proxyPolicyName: () => proxyPolicyName,
    redirectPolicy: () => redirectPolicy,
    redirectPolicyName: () => redirectPolicyName,
    retryPolicy: () => retryPolicy,
    setClientRequestIdPolicy: () => setClientRequestIdPolicy,
    setClientRequestIdPolicyName: () => setClientRequestIdPolicyName,
    systemErrorRetryPolicy: () => systemErrorRetryPolicy,
    systemErrorRetryPolicyName: () => systemErrorRetryPolicyName,
    throttlingRetryPolicy: () => throttlingRetryPolicy,
    throttlingRetryPolicyName: () => throttlingRetryPolicyName,
    tlsPolicy: () => tlsPolicy,
    tlsPolicyName: () => tlsPolicyName,
    tracingPolicy: () => tracingPolicy,
    tracingPolicyName: () => tracingPolicyName,
    userAgentPolicy: () => userAgentPolicy,
    userAgentPolicyName: () => userAgentPolicyName
  });
  var init_src5 = __esm({
    "node_modules/@azure/core-rest-pipeline/dist-esm/src/index.js"() {
      init_pipeline();
      init_createPipelineFromOptions();
      init_defaultHttpClient_browser();
      init_httpHeaders();
      init_pipelineRequest();
      init_restError();
      init_decompressResponsePolicy_browser();
      init_exponentialRetryPolicy();
      init_setClientRequestIdPolicy();
      init_logPolicy();
      init_proxyPolicy_browser();
      init_redirectPolicy();
      init_systemErrorRetryPolicy();
      init_throttlingRetryPolicy();
      init_retryPolicy();
      init_tracingPolicy();
      init_defaultRetryPolicy();
      init_userAgentPolicy();
      init_tlsPolicy();
      init_formDataPolicy_browser();
      init_bearerTokenAuthenticationPolicy();
      init_ndJsonPolicy();
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/operationHelpers.js
  function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
    let parameterPath = parameter.parameterPath;
    const parameterMapper = parameter.mapper;
    let value;
    if (typeof parameterPath === "string") {
      parameterPath = [parameterPath];
    }
    if (Array.isArray(parameterPath)) {
      if (parameterPath.length > 0) {
        if (parameterMapper.isConstant) {
          value = parameterMapper.defaultValue;
        } else {
          let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
          if (!propertySearchResult.propertyFound && fallbackObject) {
            propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);
          }
          let useDefaultValue = false;
          if (!propertySearchResult.propertyFound) {
            useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
          }
          value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
        }
      }
    } else {
      if (parameterMapper.required) {
        value = {};
      }
      for (const propertyName in parameterPath) {
        const propertyMapper = parameterMapper.type.modelProperties[propertyName];
        const propertyPath = parameterPath[propertyName];
        const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
          parameterPath: propertyPath,
          mapper: propertyMapper
        }, fallbackObject);
        if (propertyValue !== void 0) {
          if (!value) {
            value = {};
          }
          value[propertyName] = propertyValue;
        }
      }
    }
    return value;
  }
  function getPropertyFromParameterPath(parent, parameterPath) {
    const result = { propertyFound: false };
    let i = 0;
    for (; i < parameterPath.length; ++i) {
      const parameterPathPart = parameterPath[i];
      if (parent && parameterPathPart in parent) {
        parent = parent[parameterPathPart];
      } else {
        break;
      }
    }
    if (i === parameterPath.length) {
      result.propertyValue = parent;
      result.propertyFound = true;
    }
    return result;
  }
  function hasOriginalRequest(request) {
    return originalRequestSymbol in request;
  }
  function getOperationRequestInfo(request) {
    if (hasOriginalRequest(request)) {
      return getOperationRequestInfo(request[originalRequestSymbol]);
    }
    let info = operationRequestMap.get(request);
    if (!info) {
      info = {};
      operationRequestMap.set(request, info);
    }
    return info;
  }
  var operationRequestMap, originalRequestSymbol;
  var init_operationHelpers = __esm({
    "node_modules/@azure/core-client/dist-esm/src/operationHelpers.js"() {
      __name(getOperationArgumentValueFromParameter, "getOperationArgumentValueFromParameter");
      __name(getPropertyFromParameterPath, "getPropertyFromParameterPath");
      operationRequestMap = /* @__PURE__ */ new WeakMap();
      originalRequestSymbol = Symbol.for("@azure/core-client original request");
      __name(hasOriginalRequest, "hasOriginalRequest");
      __name(getOperationRequestInfo, "getOperationRequestInfo");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/deserializationPolicy.js
  function deserializationPolicy(options = {}) {
    var _a7, _b2, _c2, _d, _e2, _f, _g;
    const jsonContentTypes = (_b2 = (_a7 = options.expectedContentTypes) === null || _a7 === void 0 ? void 0 : _a7.json) !== null && _b2 !== void 0 ? _b2 : defaultJsonContentTypes;
    const xmlContentTypes = (_d = (_c2 = options.expectedContentTypes) === null || _c2 === void 0 ? void 0 : _c2.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;
    const parseXML = options.parseXML;
    const serializerOptions = options.serializerOptions;
    const updatedOptions = {
      xml: {
        rootName: (_e2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e2 !== void 0 ? _e2 : "",
        includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,
        xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY
      }
    };
    return {
      name: deserializationPolicyName,
      async sendRequest(request, next) {
        const response = await next(request);
        return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);
      }
    };
  }
  function getOperationResponseMap(parsedResponse) {
    let result;
    const request = parsedResponse.request;
    const operationInfo = getOperationRequestInfo(request);
    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
    if (operationSpec) {
      if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {
        result = operationSpec.responses[parsedResponse.status];
      } else {
        result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);
      }
    }
    return result;
  }
  function shouldDeserializeResponse(parsedResponse) {
    const request = parsedResponse.request;
    const operationInfo = getOperationRequestInfo(request);
    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;
    let result;
    if (shouldDeserialize === void 0) {
      result = true;
    } else if (typeof shouldDeserialize === "boolean") {
      result = shouldDeserialize;
    } else {
      result = shouldDeserialize(parsedResponse);
    }
    return result;
  }
  async function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {
    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);
    if (!shouldDeserializeResponse(parsedResponse)) {
      return parsedResponse;
    }
    const operationInfo = getOperationRequestInfo(parsedResponse.request);
    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
    if (!operationSpec || !operationSpec.responses) {
      return parsedResponse;
    }
    const responseSpec = getOperationResponseMap(parsedResponse);
    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);
    if (error) {
      throw error;
    } else if (shouldReturnResponse) {
      return parsedResponse;
    }
    if (responseSpec) {
      if (responseSpec.bodyMapper) {
        let valueToDeserialize = parsedResponse.parsedBody;
        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {
          valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
        }
        try {
          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
        } catch (deserializeError) {
          const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
            statusCode: parsedResponse.status,
            request: parsedResponse.request,
            response: parsedResponse
          });
          throw restError;
        }
      } else if (operationSpec.httpMethod === "HEAD") {
        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
      }
      if (responseSpec.headersMapper) {
        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", { xml: {}, ignoreUnknownProperties: true });
      }
    }
    return parsedResponse;
  }
  function isOperationSpecEmpty(operationSpec) {
    const expectedStatusCodes = Object.keys(operationSpec.responses);
    return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
  }
  function handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {
    var _a7;
    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
    if (isExpectedStatusCode) {
      if (responseSpec) {
        if (!responseSpec.isError) {
          return { error: null, shouldReturnResponse: false };
        }
      } else {
        return { error: null, shouldReturnResponse: false };
      }
    }
    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
    const initialErrorMessage = ((_a7 = parsedResponse.request.streamResponseStatusCodes) === null || _a7 === void 0 ? void 0 : _a7.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
    const error = new RestError(initialErrorMessage, {
      statusCode: parsedResponse.status,
      request: parsedResponse.request,
      response: parsedResponse
    });
    if (!errorResponseSpec) {
      throw error;
    }
    const defaultBodyMapper = errorResponseSpec.bodyMapper;
    const defaultHeadersMapper = errorResponseSpec.headersMapper;
    try {
      if (parsedResponse.parsedBody) {
        const parsedBody = parsedResponse.parsedBody;
        let deserializedError;
        if (defaultBodyMapper) {
          let valueToDeserialize = parsedBody;
          if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {
            valueToDeserialize = [];
            const elementName = defaultBodyMapper.xmlElementName;
            if (typeof parsedBody === "object" && elementName) {
              valueToDeserialize = parsedBody[elementName];
            }
          }
          deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
        }
        const internalError = parsedBody.error || deserializedError || parsedBody;
        error.code = internalError.code;
        if (internalError.message) {
          error.message = internalError.message;
        }
        if (defaultBodyMapper) {
          error.response.parsedBody = deserializedError;
        }
      }
      if (parsedResponse.headers && defaultHeadersMapper) {
        error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders");
      }
    } catch (defaultError) {
      error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
    }
    return { error, shouldReturnResponse: false };
  }
  async function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {
    var _a7;
    if (!((_a7 = operationResponse.request.streamResponseStatusCodes) === null || _a7 === void 0 ? void 0 : _a7.has(operationResponse.status)) && operationResponse.bodyAsText) {
      const text = operationResponse.bodyAsText;
      const contentType7 = operationResponse.headers.get("Content-Type") || "";
      const contentComponents = !contentType7 ? [] : contentType7.split(";").map((component) => component.toLowerCase());
      try {
        if (contentComponents.length === 0 || contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {
          operationResponse.parsedBody = JSON.parse(text);
          return operationResponse;
        } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {
          if (!parseXML) {
            throw new Error("Parsing XML not supported.");
          }
          const body4 = await parseXML(text, opts.xml);
          operationResponse.parsedBody = body4;
          return operationResponse;
        }
      } catch (err) {
        const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
        const errCode = err.code || RestError.PARSE_ERROR;
        const e = new RestError(msg, {
          code: errCode,
          statusCode: operationResponse.status,
          request: operationResponse.request,
          response: operationResponse
        });
        throw e;
      }
    }
    return operationResponse;
  }
  var defaultJsonContentTypes, defaultXmlContentTypes, deserializationPolicyName;
  var init_deserializationPolicy = __esm({
    "node_modules/@azure/core-client/dist-esm/src/deserializationPolicy.js"() {
      init_interfaces();
      init_src5();
      init_serializer();
      init_operationHelpers();
      defaultJsonContentTypes = ["application/json", "text/json"];
      defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
      deserializationPolicyName = "deserializationPolicy";
      __name(deserializationPolicy, "deserializationPolicy");
      __name(getOperationResponseMap, "getOperationResponseMap");
      __name(shouldDeserializeResponse, "shouldDeserializeResponse");
      __name(deserializeResponseBody, "deserializeResponseBody");
      __name(isOperationSpecEmpty, "isOperationSpecEmpty");
      __name(handleErrorResponse, "handleErrorResponse");
      __name(parse, "parse");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/interfaceHelpers.js
  function getStreamingResponseStatusCodes(operationSpec) {
    const result = /* @__PURE__ */ new Set();
    for (const statusCode in operationSpec.responses) {
      const operationResponse = operationSpec.responses[statusCode];
      if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {
        result.add(Number(statusCode));
      }
    }
    return result;
  }
  function getPathStringFromParameter(parameter) {
    const { parameterPath, mapper } = parameter;
    let result;
    if (typeof parameterPath === "string") {
      result = parameterPath;
    } else if (Array.isArray(parameterPath)) {
      result = parameterPath.join(".");
    } else {
      result = mapper.serializedName;
    }
    return result;
  }
  var init_interfaceHelpers = __esm({
    "node_modules/@azure/core-client/dist-esm/src/interfaceHelpers.js"() {
      init_serializer();
      __name(getStreamingResponseStatusCodes, "getStreamingResponseStatusCodes");
      __name(getPathStringFromParameter, "getPathStringFromParameter");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/serializationPolicy.js
  function serializationPolicy(options = {}) {
    const stringifyXML = options.stringifyXML;
    return {
      name: serializationPolicyName,
      async sendRequest(request, next) {
        const operationInfo = getOperationRequestInfo(request);
        const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
        const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;
        if (operationSpec && operationArguments) {
          serializeHeaders(request, operationArguments, operationSpec);
          serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);
        }
        return next(request);
      }
    };
  }
  function serializeHeaders(request, operationArguments, operationSpec) {
    var _a7, _b2;
    if (operationSpec.headerParameters) {
      for (const headerParameter of operationSpec.headerParameters) {
        let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);
        if (headerValue !== null && headerValue !== void 0 || headerParameter.mapper.required) {
          headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));
          const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
          if (headerCollectionPrefix) {
            for (const key of Object.keys(headerValue)) {
              request.headers.set(headerCollectionPrefix + key, headerValue[key]);
            }
          } else {
            request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);
          }
        }
      }
    }
    const customHeaders = (_b2 = (_a7 = operationArguments.options) === null || _a7 === void 0 ? void 0 : _a7.requestOptions) === null || _b2 === void 0 ? void 0 : _b2.customHeaders;
    if (customHeaders) {
      for (const customHeaderName of Object.keys(customHeaders)) {
        request.headers.set(customHeaderName, customHeaders[customHeaderName]);
      }
    }
  }
  function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function() {
    throw new Error("XML serialization unsupported!");
  }) {
    var _a7, _b2, _c2, _d, _e2;
    const serializerOptions = (_a7 = operationArguments.options) === null || _a7 === void 0 ? void 0 : _a7.serializerOptions;
    const updatedOptions = {
      xml: {
        rootName: (_b2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b2 !== void 0 ? _b2 : "",
        includeRoot: (_c2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c2 !== void 0 ? _c2 : false,
        xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY
      }
    };
    const xmlCharKey = updatedOptions.xml.xmlCharKey;
    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
      request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);
      const bodyMapper = operationSpec.requestBody.mapper;
      const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;
      const typeName = bodyMapper.type.name;
      try {
        if (request.body !== void 0 && request.body !== null || nullable && request.body === null || required) {
          const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
          request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);
          const isStream = typeName === MapperTypeNames.Stream;
          if (operationSpec.isXML) {
            const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
            const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);
            if (typeName === MapperTypeNames.Sequence) {
              request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });
            } else if (!isStream) {
              request.body = stringifyXML(value, {
                rootName: xmlName || serializedName,
                xmlCharKey
              });
            }
          } else if (typeName === MapperTypeNames.String && (((_e2 = operationSpec.contentType) === null || _e2 === void 0 ? void 0 : _e2.match("text/plain")) || operationSpec.mediaType === "text")) {
            return;
          } else if (!isStream) {
            request.body = JSON.stringify(request.body);
          }
        }
      } catch (error) {
        throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, void 0, "  ")}.`);
      }
    } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
      request.formData = {};
      for (const formDataParameter of operationSpec.formDataParameters) {
        const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);
        if (formDataParameterValue !== void 0 && formDataParameterValue !== null) {
          const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
          request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
        }
      }
    }
  }
  function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
    if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
      const result = {};
      result[options.xml.xmlCharKey] = serializedValue;
      result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };
      return result;
    }
    return serializedValue;
  }
  function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
    if (!Array.isArray(obj)) {
      obj = [obj];
    }
    if (!xmlNamespaceKey || !xmlNamespace) {
      return { [elementName]: obj };
    }
    const result = { [elementName]: obj };
    result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };
    return result;
  }
  var serializationPolicyName;
  var init_serializationPolicy = __esm({
    "node_modules/@azure/core-client/dist-esm/src/serializationPolicy.js"() {
      init_interfaces();
      init_operationHelpers();
      init_serializer();
      init_interfaceHelpers();
      serializationPolicyName = "serializationPolicy";
      __name(serializationPolicy, "serializationPolicy");
      __name(serializeHeaders, "serializeHeaders");
      __name(serializeRequestBody, "serializeRequestBody");
      __name(getXmlValueWithNamespace, "getXmlValueWithNamespace");
      __name(prepareXMLRootList, "prepareXMLRootList");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/pipeline.js
  function createClientPipeline(options = {}) {
    const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});
    if (options.credentialOptions) {
      pipeline.addPolicy(bearerTokenAuthenticationPolicy({
        credential: options.credentialOptions.credential,
        scopes: options.credentialOptions.credentialScopes
      }));
    }
    pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: "Serialize" });
    pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {
      phase: "Deserialize"
    });
    return pipeline;
  }
  var init_pipeline2 = __esm({
    "node_modules/@azure/core-client/dist-esm/src/pipeline.js"() {
      init_deserializationPolicy();
      init_src5();
      init_serializationPolicy();
      __name(createClientPipeline, "createClientPipeline");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/httpClientCache.js
  function getCachedDefaultHttpClient() {
    if (!cachedHttpClient) {
      cachedHttpClient = createDefaultHttpClient();
    }
    return cachedHttpClient;
  }
  var cachedHttpClient;
  var init_httpClientCache = __esm({
    "node_modules/@azure/core-client/dist-esm/src/httpClientCache.js"() {
      init_src5();
      __name(getCachedDefaultHttpClient, "getCachedDefaultHttpClient");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/urlHelpers.js
  function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);
    let isAbsolutePath = false;
    let requestUrl = replaceAll(baseUri, urlReplacements);
    if (operationSpec.path) {
      let path = replaceAll(operationSpec.path, urlReplacements);
      if (operationSpec.path === "/{nextLink}" && path.startsWith("/")) {
        path = path.substring(1);
      }
      if (isAbsoluteUrl(path)) {
        requestUrl = path;
        isAbsolutePath = true;
      } else {
        requestUrl = appendPath(requestUrl, path);
      }
    }
    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);
    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);
    return requestUrl;
  }
  function replaceAll(input, replacements) {
    let result = input;
    for (const [searchValue, replaceValue] of replacements) {
      result = result.split(searchValue).join(replaceValue);
    }
    return result;
  }
  function calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {
    var _a7;
    const result = /* @__PURE__ */ new Map();
    if ((_a7 = operationSpec.urlParameters) === null || _a7 === void 0 ? void 0 : _a7.length) {
      for (const urlParameter of operationSpec.urlParameters) {
        let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);
        const parameterPathString = getPathStringFromParameter(urlParameter);
        urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);
        if (!urlParameter.skipEncoding) {
          urlParameterValue = encodeURIComponent(urlParameterValue);
        }
        result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
      }
    }
    return result;
  }
  function isAbsoluteUrl(url) {
    return url.includes("://");
  }
  function appendPath(url, pathToAppend) {
    if (!pathToAppend) {
      return url;
    }
    const parsedUrl = new URL(url);
    let newPath = parsedUrl.pathname;
    if (!newPath.endsWith("/")) {
      newPath = `${newPath}/`;
    }
    if (pathToAppend.startsWith("/")) {
      pathToAppend = pathToAppend.substring(1);
    }
    const searchStart = pathToAppend.indexOf("?");
    if (searchStart !== -1) {
      const path = pathToAppend.substring(0, searchStart);
      const search = pathToAppend.substring(searchStart + 1);
      newPath = newPath + path;
      if (search) {
        parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;
      }
    } else {
      newPath = newPath + pathToAppend;
    }
    parsedUrl.pathname = newPath;
    return parsedUrl.toString();
  }
  function calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {
    var _a7;
    const result = /* @__PURE__ */ new Map();
    const sequenceParams = /* @__PURE__ */ new Set();
    if ((_a7 = operationSpec.queryParameters) === null || _a7 === void 0 ? void 0 : _a7.length) {
      for (const queryParameter of operationSpec.queryParameters) {
        if (queryParameter.mapper.type.name === "Sequence" && queryParameter.mapper.serializedName) {
          sequenceParams.add(queryParameter.mapper.serializedName);
        }
        let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);
        if (queryParameterValue !== void 0 && queryParameterValue !== null || queryParameter.mapper.required) {
          queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));
          const delimiter = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
          if (Array.isArray(queryParameterValue)) {
            queryParameterValue = queryParameterValue.map((item) => {
              if (item === null || item === void 0) {
                return "";
              }
              return item;
            });
          }
          if (queryParameter.collectionFormat === "Multi" && queryParameterValue.length === 0) {
            continue;
          } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "SSV" || queryParameter.collectionFormat === "TSV")) {
            queryParameterValue = queryParameterValue.join(delimiter);
          }
          if (!queryParameter.skipEncoding) {
            if (Array.isArray(queryParameterValue)) {
              queryParameterValue = queryParameterValue.map((item) => {
                return encodeURIComponent(item);
              });
            } else {
              queryParameterValue = encodeURIComponent(queryParameterValue);
            }
          }
          if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "CSV" || queryParameter.collectionFormat === "Pipes")) {
            queryParameterValue = queryParameterValue.join(delimiter);
          }
          result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
        }
      }
    }
    return {
      queryParams: result,
      sequenceParams
    };
  }
  function simpleParseQueryParams(queryString) {
    const result = /* @__PURE__ */ new Map();
    if (!queryString || queryString[0] !== "?") {
      return result;
    }
    queryString = queryString.slice(1);
    const pairs = queryString.split("&");
    for (const pair of pairs) {
      const [name, value] = pair.split("=", 2);
      const existingValue = result.get(name);
      if (existingValue) {
        if (Array.isArray(existingValue)) {
          existingValue.push(value);
        } else {
          result.set(name, [existingValue, value]);
        }
      } else {
        result.set(name, value);
      }
    }
    return result;
  }
  function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {
    if (queryParams.size === 0) {
      return url;
    }
    const parsedUrl = new URL(url);
    const combinedParams = simpleParseQueryParams(parsedUrl.search);
    for (const [name, value] of queryParams) {
      const existingValue = combinedParams.get(name);
      if (Array.isArray(existingValue)) {
        if (Array.isArray(value)) {
          existingValue.push(...value);
          const valueSet = new Set(existingValue);
          combinedParams.set(name, Array.from(valueSet));
        } else {
          existingValue.push(value);
        }
      } else if (existingValue) {
        if (Array.isArray(value)) {
          value.unshift(existingValue);
        } else if (sequenceParams.has(name)) {
          combinedParams.set(name, [existingValue, value]);
        }
        if (!noOverwrite) {
          combinedParams.set(name, value);
        }
      } else {
        combinedParams.set(name, value);
      }
    }
    const searchPieces = [];
    for (const [name, value] of combinedParams) {
      if (typeof value === "string") {
        searchPieces.push(`${name}=${value}`);
      } else if (Array.isArray(value)) {
        for (const subValue of value) {
          searchPieces.push(`${name}=${subValue}`);
        }
      } else {
        searchPieces.push(`${name}=${value}`);
      }
    }
    parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
    return parsedUrl.toString();
  }
  var CollectionFormatToDelimiterMap;
  var init_urlHelpers = __esm({
    "node_modules/@azure/core-client/dist-esm/src/urlHelpers.js"() {
      init_operationHelpers();
      init_interfaceHelpers();
      CollectionFormatToDelimiterMap = {
        CSV: ",",
        SSV: " ",
        Multi: "Multi",
        TSV: "	",
        Pipes: "|"
      };
      __name(getRequestUrl, "getRequestUrl");
      __name(replaceAll, "replaceAll");
      __name(calculateUrlReplacements, "calculateUrlReplacements");
      __name(isAbsoluteUrl, "isAbsoluteUrl");
      __name(appendPath, "appendPath");
      __name(calculateQueryParameters, "calculateQueryParameters");
      __name(simpleParseQueryParams, "simpleParseQueryParams");
      __name(appendQueryParams, "appendQueryParams");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/log.js
  var logger2;
  var init_log2 = __esm({
    "node_modules/@azure/core-client/dist-esm/src/log.js"() {
      init_src();
      logger2 = createClientLogger("core-client");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/serviceClient.js
  function createDefaultPipeline(options) {
    const credentialScopes = getCredentialScopes(options);
    const credentialOptions = options.credential && credentialScopes ? { credentialScopes, credential: options.credential } : void 0;
    return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));
  }
  function getCredentialScopes(options) {
    if (options.credentialScopes) {
      const scopes = options.credentialScopes;
      return Array.isArray(scopes) ? scopes.map((scope3) => new URL(scope3).toString()) : new URL(scopes).toString();
    }
    if (options.endpoint) {
      return `${options.endpoint}/.default`;
    }
    if (options.baseUri) {
      return `${options.baseUri}/.default`;
    }
    if (options.credential && !options.credentialScopes) {
      throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);
    }
    return void 0;
  }
  var ServiceClient;
  var init_serviceClient = __esm({
    "node_modules/@azure/core-client/dist-esm/src/serviceClient.js"() {
      init_src5();
      init_pipeline2();
      init_utils();
      init_httpClientCache();
      init_operationHelpers();
      init_urlHelpers();
      init_interfaceHelpers();
      init_log2();
      ServiceClient = class {
        /**
         * The ServiceClient constructor
         * @param credential - The credentials used for authentication with the service.
         * @param options - The service client options that govern the behavior of the client.
         */
        constructor(options = {}) {
          var _a7, _b2;
          this._requestContentType = options.requestContentType;
          this._endpoint = (_a7 = options.endpoint) !== null && _a7 !== void 0 ? _a7 : options.baseUri;
          if (options.baseUri) {
            logger2.warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead.");
          }
          this._allowInsecureConnection = options.allowInsecureConnection;
          this._httpClient = options.httpClient || getCachedDefaultHttpClient();
          this.pipeline = options.pipeline || createDefaultPipeline(options);
          if ((_b2 = options.additionalPolicies) === null || _b2 === void 0 ? void 0 : _b2.length) {
            for (const { policy, position } of options.additionalPolicies) {
              const afterPhase = position === "perRetry" ? "Sign" : void 0;
              this.pipeline.addPolicy(policy, {
                afterPhase
              });
            }
          }
        }
        /**
         * Send the provided httpRequest.
         */
        async sendRequest(request) {
          return this.pipeline.sendRequest(this._httpClient, request);
        }
        /**
         * Send an HTTP request that is populated using the provided OperationSpec.
         * @typeParam T - The typed result of the request, based on the OperationSpec.
         * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
         * @param operationSpec - The OperationSpec to use to populate the httpRequest.
         */
        async sendOperationRequest(operationArguments, operationSpec) {
          const endpoint = operationSpec.baseUrl || this._endpoint;
          if (!endpoint) {
            throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
          }
          const url = getRequestUrl(endpoint, operationSpec, operationArguments, this);
          const request = createPipelineRequest({
            url
          });
          request.method = operationSpec.httpMethod;
          const operationInfo = getOperationRequestInfo(request);
          operationInfo.operationSpec = operationSpec;
          operationInfo.operationArguments = operationArguments;
          const contentType7 = operationSpec.contentType || this._requestContentType;
          if (contentType7 && operationSpec.requestBody) {
            request.headers.set("Content-Type", contentType7);
          }
          const options = operationArguments.options;
          if (options) {
            const requestOptions = options.requestOptions;
            if (requestOptions) {
              if (requestOptions.timeout) {
                request.timeout = requestOptions.timeout;
              }
              if (requestOptions.onUploadProgress) {
                request.onUploadProgress = requestOptions.onUploadProgress;
              }
              if (requestOptions.onDownloadProgress) {
                request.onDownloadProgress = requestOptions.onDownloadProgress;
              }
              if (requestOptions.shouldDeserialize !== void 0) {
                operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;
              }
              if (requestOptions.allowInsecureConnection) {
                request.allowInsecureConnection = true;
              }
            }
            if (options.abortSignal) {
              request.abortSignal = options.abortSignal;
            }
            if (options.tracingOptions) {
              request.tracingOptions = options.tracingOptions;
            }
          }
          if (this._allowInsecureConnection) {
            request.allowInsecureConnection = true;
          }
          if (request.streamResponseStatusCodes === void 0) {
            request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);
          }
          try {
            const rawResponse = await this.sendRequest(request);
            const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);
            if (options === null || options === void 0 ? void 0 : options.onResponse) {
              options.onResponse(rawResponse, flatResponse);
            }
            return flatResponse;
          } catch (error) {
            if (typeof error === "object" && (error === null || error === void 0 ? void 0 : error.response)) {
              const rawResponse = error.response;
              const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses["default"]);
              error.details = flatResponse;
              if (options === null || options === void 0 ? void 0 : options.onResponse) {
                options.onResponse(rawResponse, flatResponse, error);
              }
            }
            throw error;
          }
        }
      };
      __name(ServiceClient, "ServiceClient");
      __name(createDefaultPipeline, "createDefaultPipeline");
      __name(getCredentialScopes, "getCredentialScopes");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/authorizeRequestOnClaimChallenge.js
  function parseCAEChallenge(challenges) {
    const bearerChallenges = `, ${challenges.trim()}`.split(", Bearer ").filter((x2) => x2);
    return bearerChallenges.map((challenge) => {
      const challengeParts = `${challenge.trim()}, `.split('", ').filter((x2) => x2);
      const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('="')));
      return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
    });
  }
  async function authorizeRequestOnClaimChallenge(onChallengeOptions) {
    const { scopes, response } = onChallengeOptions;
    const logger4 = onChallengeOptions.logger || logger2;
    const challenge = response.headers.get("WWW-Authenticate");
    if (!challenge) {
      logger4.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);
      return false;
    }
    const challenges = parseCAEChallenge(challenge) || [];
    const parsedChallenge = challenges.find((x2) => x2.claims);
    if (!parsedChallenge) {
      logger4.info(`The WWW-Authenticate header was missing the necessary "claims" to perform the Continuous Access Evaluation authentication flow.`);
      return false;
    }
    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {
      claims: decodeStringToString(parsedChallenge.claims)
    });
    if (!accessToken) {
      return false;
    }
    onChallengeOptions.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
    return true;
  }
  var init_authorizeRequestOnClaimChallenge = __esm({
    "node_modules/@azure/core-client/dist-esm/src/authorizeRequestOnClaimChallenge.js"() {
      init_log2();
      init_base64_browser();
      __name(parseCAEChallenge, "parseCAEChallenge");
      __name(authorizeRequestOnClaimChallenge, "authorizeRequestOnClaimChallenge");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/authorizeRequestOnTenantChallenge.js
  function extractTenantId(challengeInfo) {
    const parsedAuthUri = new URL(challengeInfo.authorization_uri);
    const pathSegments = parsedAuthUri.pathname.split("/");
    const tenantId = pathSegments[1];
    return tenantId;
  }
  function buildScopes(challengeOptions, challengeInfo) {
    if (!challengeInfo.resource_uri) {
      return challengeOptions.scopes;
    }
    const challengeScopes = new URL(challengeInfo.resource_uri);
    challengeScopes.pathname = Constants.DefaultScope;
    return [challengeScopes.toString()];
  }
  function getChallenge2(response) {
    const challenge = response.headers.get("WWW-Authenticate");
    if (response.status === 401 && challenge) {
      return challenge;
    }
    return;
  }
  function parseChallenge(challenge) {
    const bearerChallenge = challenge.slice("Bearer ".length);
    const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x2) => x2);
    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split("=")));
    return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
  }
  function requestToOptions(request) {
    return {
      abortSignal: request.abortSignal,
      requestOptions: {
        timeout: request.timeout
      },
      tracingOptions: request.tracingOptions
    };
  }
  var Constants, authorizeRequestOnTenantChallenge;
  var init_authorizeRequestOnTenantChallenge = __esm({
    "node_modules/@azure/core-client/dist-esm/src/authorizeRequestOnTenantChallenge.js"() {
      Constants = {
        DefaultScope: "/.default",
        /**
         * Defines constants for use with HTTP headers.
         */
        HeaderConstants: {
          /**
           * The Authorization header.
           */
          AUTHORIZATION: "authorization"
        }
      };
      authorizeRequestOnTenantChallenge = /* @__PURE__ */ __name(async (challengeOptions) => {
        const requestOptions = requestToOptions(challengeOptions.request);
        const challenge = getChallenge2(challengeOptions.response);
        if (challenge) {
          const challengeInfo = parseChallenge(challenge);
          const challengeScopes = buildScopes(challengeOptions, challengeInfo);
          const tenantId = extractTenantId(challengeInfo);
          const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));
          if (!accessToken) {
            return false;
          }
          challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);
          return true;
        }
        return false;
      }, "authorizeRequestOnTenantChallenge");
      __name(extractTenantId, "extractTenantId");
      __name(buildScopes, "buildScopes");
      __name(getChallenge2, "getChallenge");
      __name(parseChallenge, "parseChallenge");
      __name(requestToOptions, "requestToOptions");
    }
  });

  // node_modules/@azure/core-client/dist-esm/src/index.js
  var src_exports2 = {};
  __export(src_exports2, {
    MapperTypeNames: () => MapperTypeNames,
    ServiceClient: () => ServiceClient,
    XML_ATTRKEY: () => XML_ATTRKEY,
    XML_CHARKEY: () => XML_CHARKEY,
    authorizeRequestOnClaimChallenge: () => authorizeRequestOnClaimChallenge,
    authorizeRequestOnTenantChallenge: () => authorizeRequestOnTenantChallenge,
    createClientPipeline: () => createClientPipeline,
    createSerializer: () => createSerializer,
    deserializationPolicy: () => deserializationPolicy,
    deserializationPolicyName: () => deserializationPolicyName,
    serializationPolicy: () => serializationPolicy,
    serializationPolicyName: () => serializationPolicyName
  });
  var init_src6 = __esm({
    "node_modules/@azure/core-client/dist-esm/src/index.js"() {
      init_serializer();
      init_serviceClient();
      init_pipeline2();
      init_interfaces();
      init_deserializationPolicy();
      init_serializationPolicy();
      init_authorizeRequestOnClaimChallenge();
      init_authorizeRequestOnTenantChallenge();
    }
  });

  // node_modules/vscode-nls/lib/common/ral.js
  var require_ral = __commonJS({
    "node_modules/vscode-nls/lib/common/ral.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _ral;
      function RAL() {
        if (_ral === void 0) {
          throw new Error("No runtime abstraction layer installed");
        }
        return _ral;
      }
      __name(RAL, "RAL");
      (function(RAL2) {
        function install(ral) {
          if (ral === void 0) {
            throw new Error("No runtime abstraction layer provided");
          }
          _ral = ral;
        }
        __name(install, "install");
        RAL2.install = install;
      })(RAL || (RAL = {}));
      exports.default = RAL;
    }
  });

  // node_modules/vscode-nls/lib/common/common.js
  var require_common = __commonJS({
    "node_modules/vscode-nls/lib/common/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.config = exports.loadMessageBundle = exports.localize = exports.format = exports.setPseudo = exports.isPseudo = exports.isDefined = exports.BundleFormat = exports.MessageFormat = void 0;
      var ral_1 = require_ral();
      var MessageFormat;
      (function(MessageFormat2) {
        MessageFormat2["file"] = "file";
        MessageFormat2["bundle"] = "bundle";
        MessageFormat2["both"] = "both";
      })(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));
      var BundleFormat;
      (function(BundleFormat2) {
        BundleFormat2["standalone"] = "standalone";
        BundleFormat2["languagePack"] = "languagePack";
      })(BundleFormat = exports.BundleFormat || (exports.BundleFormat = {}));
      var LocalizeInfo;
      (function(LocalizeInfo2) {
        function is2(value) {
          var candidate = value;
          return candidate && isDefined(candidate.key) && isDefined(candidate.comment);
        }
        __name(is2, "is");
        LocalizeInfo2.is = is2;
      })(LocalizeInfo || (LocalizeInfo = {}));
      function isDefined(value) {
        return typeof value !== "undefined";
      }
      __name(isDefined, "isDefined");
      exports.isDefined = isDefined;
      exports.isPseudo = false;
      function setPseudo(pseudo) {
        exports.isPseudo = pseudo;
      }
      __name(setPseudo, "setPseudo");
      exports.setPseudo = setPseudo;
      function format2(message, args) {
        var result;
        if (exports.isPseudo) {
          message = "\uFF3B" + message.replace(/[aouei]/g, "$&$&") + "\uFF3D";
        }
        if (args.length === 0) {
          result = message;
        } else {
          result = message.replace(/\{(\d+)\}/g, function(match, rest) {
            var index = rest[0];
            var arg = args[index];
            var replacement = match;
            if (typeof arg === "string") {
              replacement = arg;
            } else if (typeof arg === "number" || typeof arg === "boolean" || arg === void 0 || arg === null) {
              replacement = String(arg);
            }
            return replacement;
          });
        }
        return result;
      }
      __name(format2, "format");
      exports.format = format2;
      function localize2(_key, message) {
        var args = [];
        for (var _i2 = 2; _i2 < arguments.length; _i2++) {
          args[_i2 - 2] = arguments[_i2];
        }
        return format2(message, args);
      }
      __name(localize2, "localize");
      exports.localize = localize2;
      function loadMessageBundle2(file) {
        return (0, ral_1.default)().loadMessageBundle(file);
      }
      __name(loadMessageBundle2, "loadMessageBundle");
      exports.loadMessageBundle = loadMessageBundle2;
      function config(opts) {
        return (0, ral_1.default)().config(opts);
      }
      __name(config, "config");
      exports.config = config;
    }
  });

  // node_modules/vscode-nls/lib/browser/main.js
  var require_main = __commonJS({
    "node_modules/vscode-nls/lib/browser/main.js"(exports) {
      "use strict";
      var __spreadArray = exports && exports.__spreadArray || function(to2, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar2; i < l; i++) {
            if (ar2 || !(i in from)) {
              if (!ar2)
                ar2 = Array.prototype.slice.call(from, 0, i);
              ar2[i] = from[i];
            }
          }
        return to2.concat(ar2 || Array.prototype.slice.call(from));
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.config = exports.loadMessageBundle = exports.BundleFormat = exports.MessageFormat = void 0;
      var ral_1 = require_ral();
      var common_1 = require_common();
      var common_2 = require_common();
      Object.defineProperty(exports, "MessageFormat", { enumerable: true, get: function() {
        return common_2.MessageFormat;
      } });
      Object.defineProperty(exports, "BundleFormat", { enumerable: true, get: function() {
        return common_2.BundleFormat;
      } });
      function loadMessageBundle2(_file) {
        return function(key, message) {
          var args = [];
          for (var _i2 = 2; _i2 < arguments.length; _i2++) {
            args[_i2 - 2] = arguments[_i2];
          }
          if (typeof key === "number") {
            throw new Error("Browser implementation does currently not support externalized strings.");
          } else {
            return common_1.localize.apply(void 0, __spreadArray([key, message], args, false));
          }
        };
      }
      __name(loadMessageBundle2, "loadMessageBundle");
      exports.loadMessageBundle = loadMessageBundle2;
      function config(options) {
        var _a7;
        (0, common_1.setPseudo)(((_a7 = options === null || options === void 0 ? void 0 : options.locale) === null || _a7 === void 0 ? void 0 : _a7.toLowerCase()) === "pseudo");
        return loadMessageBundle2;
      }
      __name(config, "config");
      exports.config = config;
      ral_1.default.install(Object.freeze({
        loadMessageBundle: loadMessageBundle2,
        config
      }));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/localize.js
  var require_localize = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/localize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.localize = void 0;
      var nls2 = require_main();
      exports.localize = nls2.loadMessageBundle();
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/errors.js
  var require_errors = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/errors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NoResourceFoundError = exports.NotImplementedError = exports.GoBackError = exports.UserCancelledError = void 0;
      var localize_1 = require_localize();
      var UserCancelledError2 = class extends Error {
        constructor(stepName) {
          super((0, localize_1.localize)("userCancelledError", "Operation cancelled."));
          this.stepName = stepName;
        }
      };
      __name(UserCancelledError2, "UserCancelledError");
      exports.UserCancelledError = UserCancelledError2;
      var GoBackError = class extends Error {
        constructor() {
          super((0, localize_1.localize)("backError", "Go back."));
        }
      };
      __name(GoBackError, "GoBackError");
      exports.GoBackError = GoBackError;
      var NotImplementedError = class extends Error {
        constructor(methodName, obj) {
          super((0, localize_1.localize)("notImplementedError", '"{0}" is not implemented on "{1}".', methodName, obj.constructor.name));
        }
      };
      __name(NotImplementedError, "NotImplementedError");
      exports.NotImplementedError = NotImplementedError;
      var NoResourceFoundError = class extends Error {
        constructor(context) {
          if (context && context.noItemFoundErrorMessage) {
            super(context.noItemFoundErrorMessage);
            context.errorHandling.suppressReportIssue = true;
          } else {
            super((0, localize_1.localize)("noResourcesError", "No matching resources found."));
          }
        }
      };
      __name(NoResourceFoundError, "NoResourceFoundError");
      exports.NoResourceFoundError = NoResourceFoundError;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/nonNull.js
  var require_nonNull = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/nonNull.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.nonNullValueAndProp = exports.nonNullOrEmptyValue = exports.nonNullValue = exports.nonNullProp = void 0;
      function nonNullProp9(source, name) {
        const value = source[name];
        return nonNullValue3(value, name);
      }
      __name(nonNullProp9, "nonNullProp");
      exports.nonNullProp = nonNullProp9;
      function nonNullValue3(value, propertyNameOrMessage) {
        if (isNullOrUndefined2(value)) {
          throw new Error("Internal error: Expected value to be neither null nor undefined" + (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : ""));
        }
        return value;
      }
      __name(nonNullValue3, "nonNullValue");
      exports.nonNullValue = nonNullValue3;
      function nonNullOrEmptyValue(value, propertyNameOrMessage) {
        if (!value) {
          throw new Error("Internal error: Expected value to be neither null, undefined, nor empty" + (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : ""));
        }
        return value;
      }
      __name(nonNullOrEmptyValue, "nonNullOrEmptyValue");
      exports.nonNullOrEmptyValue = nonNullOrEmptyValue;
      function nonNullValueAndProp(source, name) {
        return nonNullProp9(nonNullValue3(source, name), name);
      }
      __name(nonNullValueAndProp, "nonNullValueAndProp");
      exports.nonNullValueAndProp = nonNullValueAndProp;
      function isNullOrUndefined2(value) {
        return value === null || value === void 0;
      }
      __name(isNullOrUndefined2, "isNullOrUndefined");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/constants.js
  var require_constants = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtQuickInputButtons = exports.showContextValueSetting = exports.azToolsPrefix = exports.learnMore = void 0;
      var vscode_1 = __require("vscode");
      var localize_1 = require_localize();
      exports.learnMore = (0, localize_1.localize)("learnMore", "Learn more");
      exports.azToolsPrefix = "azureTools";
      exports.showContextValueSetting = "showContextValues";
      var AzExtQuickInputButtons;
      (function(AzExtQuickInputButtons2) {
        AzExtQuickInputButtons2.LearnMore = { iconPath: new vscode_1.ThemeIcon("question"), tooltip: exports.learnMore };
      })(AzExtQuickInputButtons = exports.AzExtQuickInputButtons || (exports.AzExtQuickInputButtons = {}));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/settingUtils.js
  var require_settingUtils = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/settingUtils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.settingUtils = void 0;
      var vscode_1 = __require("vscode");
      var constants_1 = require_constants();
      var settingUtils2;
      (function(settingUtils3) {
        function getWorkspaceSetting(key, fsPath, prefix = constants_1.azToolsPrefix) {
          const projectConfiguration = vscode_1.workspace.getConfiguration(prefix, fsPath ? vscode_1.Uri.file(fsPath) : void 0);
          return projectConfiguration.get(key);
        }
        __name(getWorkspaceSetting, "getWorkspaceSetting");
        settingUtils3.getWorkspaceSetting = getWorkspaceSetting;
      })(settingUtils2 = exports.settingUtils || (exports.settingUtils = {}));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/isAzExtTreeItem.js
  var require_isAzExtTreeItem = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/isAzExtTreeItem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isAzExtParentTreeItem = exports.isAzExtTreeItem = void 0;
      function isAzExtTreeItem4(maybeTreeItem) {
        return typeof maybeTreeItem === "object" && maybeTreeItem._isAzExtTreeItem === true;
      }
      __name(isAzExtTreeItem4, "isAzExtTreeItem");
      exports.isAzExtTreeItem = isAzExtTreeItem4;
      function isAzExtParentTreeItem2(maybeParentTreeItem) {
        return isAzExtTreeItem4(maybeParentTreeItem) && maybeParentTreeItem._isAzExtParentTreeItem === true;
      }
      __name(isAzExtParentTreeItem2, "isAzExtParentTreeItem");
      exports.isAzExtParentTreeItem = isAzExtParentTreeItem2;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtTreeItem.js
  var require_AzExtTreeItem = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtTreeItem.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtTreeItem = void 0;
      var vscode_1 = __require("vscode");
      var errors_1 = require_errors();
      var localize_1 = require_localize();
      var nonNull_1 = require_nonNull();
      var settingUtils_1 = require_settingUtils();
      var constants_1 = require_constants();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var AzExtTreeItem11 = class {
        constructor(parent) {
          this._isAzExtTreeItem = true;
          this.valuesToMask = [];
          this.parent = parent;
        }
        get collapsibleState() {
          if (!(0, isAzExtTreeItem_1.isAzExtParentTreeItem)(this)) {
            return void 0;
          }
          if (this.treeDataProvider.collapsibleStateTracker) {
            return this.treeDataProvider.collapsibleStateTracker.getCollapsibleState(this);
          }
          return this.initialCollapsibleState;
        }
        get effectiveDescription() {
          return this._temporaryDescription || this.description;
        }
        get id() {
          return this._id;
        }
        set id(id) {
          this._id = id;
        }
        get fullId() {
          if (this.parent === void 0) {
            return "";
          } else {
            let id = this.id || this.label;
            if (!id.startsWith("/")) {
              id = `/${id}`;
            }
            if (!id.startsWith(this.parent.fullId)) {
              id = `${this.parent.fullId}${id}`;
            }
            return id;
          }
        }
        get effectiveId() {
          return this.fullIdWithContext || this.fullId;
        }
        set iconPath(iconPath) {
          this._iconPath = iconPath;
        }
        get iconPath() {
          return this._iconPath;
        }
        get effectiveIconPath() {
          return this._temporaryDescription || this.isLoadingMore ? new vscode_1.ThemeIcon("loading~spin") : this.iconPath;
        }
        get treeDataProvider() {
          return this._treeDataProvider || (0, nonNull_1.nonNullProp)(this, "parent").treeDataProvider;
        }
        set treeDataProvider(val) {
          this._treeDataProvider = val;
        }
        get description() {
          return this._description;
        }
        set description(desc) {
          this._description = desc;
        }
        get tooltip() {
          if (process.env.DEBUGTELEMETRY === "v" && !!settingUtils_1.settingUtils.getWorkspaceSetting(constants_1.showContextValueSetting)) {
            return `Context: "${this.contextValue}"`;
          } else {
            return this._tooltip;
          }
        }
        set tooltip(tt2) {
          this._tooltip = tt2;
        }
        get commandId() {
          return this._commandId;
        }
        set commandId(id) {
          this._commandId = id;
        }
        get subscription() {
          var _a7;
          const result = this._subscription || ((_a7 = this.parent) === null || _a7 === void 0 ? void 0 : _a7.subscription);
          if (!result) {
            throw Error((0, localize_1.localize)("noSubscriptionFound", "No Azure subscription found for this tree item."));
          } else {
            return result;
          }
        }
        //#endregion
        refresh(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            yield this.treeDataProvider.refresh(context, this);
          });
        }
        matchesContextValue(expectedContextValues) {
          return expectedContextValues.some((val) => {
            return this.contextValue === val || val instanceof RegExp && val.test(this.contextValue);
          });
        }
        includeInTreePicker(expectedContextValues) {
          if (this.matchesContextValue(expectedContextValues)) {
            return true;
          }
          return expectedContextValues.some((val) => {
            if (this.isAncestorOfImpl) {
              return this.isAncestorOfImpl(val);
            } else {
              return (0, isAzExtTreeItem_1.isAzExtParentTreeItem)(this);
            }
          });
        }
        deleteTreeItem(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            yield this.runWithTemporaryDescription(context, (0, localize_1.localize)("deleting", "Deleting..."), () => __awaiter6(this, void 0, void 0, function* () {
              if (this.deleteTreeItemImpl) {
                yield this.deleteTreeItemImpl(context);
                if (this.parent) {
                  this.parent.removeChildFromCache(this);
                }
                this.hasBeenDeleted = true;
              } else {
                throw new errors_1.NotImplementedError("deleteTreeItemImpl", this);
              }
            }));
          });
        }
        runWithTemporaryDescription(context, options, callback) {
          return __awaiter6(this, void 0, void 0, function* () {
            options = typeof options === "string" ? { description: options } : options;
            this._temporaryDescription = options.description;
            try {
              if (!options.softRefresh) {
                this.treeDataProvider.refreshUIOnly(this);
              }
              yield callback();
            } finally {
              this._temporaryDescription = void 0;
              if (!options.softRefresh) {
                yield this.refresh(context);
              } else {
                this.treeDataProvider.refreshUIOnly(this.parent);
              }
            }
          });
        }
      };
      __name(AzExtTreeItem11, "AzExtTreeItem");
      exports.AzExtTreeItem = AzExtTreeItem11;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/GenericTreeItem.js
  var require_GenericTreeItem = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/GenericTreeItem.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isGenericTreeItem = exports.GenericTreeItem = void 0;
      var AzExtTreeItem_1 = require_AzExtTreeItem();
      var GenericTreeItem2 = class extends AzExtTreeItem_1.AzExtTreeItem {
        constructor(parent, options) {
          super(parent);
          this._isGenericTreeItem = true;
          this.label = options.label;
          this.contextValue = options.contextValue;
          this.id = options.id;
          this.commandId = options.commandId;
          this.iconPath = options.iconPath;
          this.description = options.description;
          this._includeInTreeItemPicker = !!options.includeInTreeItemPicker;
        }
        isAncestorOfImpl() {
          return this._includeInTreeItemPicker;
        }
      };
      __name(GenericTreeItem2, "GenericTreeItem");
      exports.GenericTreeItem = GenericTreeItem2;
      function isGenericTreeItem(item) {
        return typeof item === "object" && item._isGenericTreeItem;
      }
      __name(isGenericTreeItem, "isGenericTreeItem");
      exports.isGenericTreeItem = isGenericTreeItem;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/rng.js
  var require_rng = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/rng.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = rng3;
      var getRandomValues3;
      var rnds83 = new Uint8Array(16);
      function rng3() {
        if (!getRandomValues3) {
          getRandomValues3 = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
          if (!getRandomValues3) {
            throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
          }
        }
        return getRandomValues3(rnds83);
      }
      __name(rng3, "rng");
    }
  });

  // node_modules/uuid/dist/commonjs-browser/regex.js
  var require_regex = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/regex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/validate.js
  var require_validate = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/validate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _regex = _interopRequireDefault(require_regex());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function validate2(uuid) {
        return typeof uuid === "string" && _regex.default.test(uuid);
      }
      __name(validate2, "validate");
      var _default = validate2;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/stringify.js
  var require_stringify = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/stringify.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unsafeStringify = unsafeStringify2;
      var _validate = _interopRequireDefault(require_validate());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var byteToHex3 = [];
      for (let i = 0; i < 256; ++i) {
        byteToHex3.push((i + 256).toString(16).slice(1));
      }
      function unsafeStringify2(arr, offset = 0) {
        return (byteToHex3[arr[offset + 0]] + byteToHex3[arr[offset + 1]] + byteToHex3[arr[offset + 2]] + byteToHex3[arr[offset + 3]] + "-" + byteToHex3[arr[offset + 4]] + byteToHex3[arr[offset + 5]] + "-" + byteToHex3[arr[offset + 6]] + byteToHex3[arr[offset + 7]] + "-" + byteToHex3[arr[offset + 8]] + byteToHex3[arr[offset + 9]] + "-" + byteToHex3[arr[offset + 10]] + byteToHex3[arr[offset + 11]] + byteToHex3[arr[offset + 12]] + byteToHex3[arr[offset + 13]] + byteToHex3[arr[offset + 14]] + byteToHex3[arr[offset + 15]]).toLowerCase();
      }
      __name(unsafeStringify2, "unsafeStringify");
      function stringify2(arr, offset = 0) {
        const uuid = unsafeStringify2(arr, offset);
        if (!(0, _validate.default)(uuid)) {
          throw TypeError("Stringified UUID is invalid");
        }
        return uuid;
      }
      __name(stringify2, "stringify");
      var _default = stringify2;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/v1.js
  var require_v1 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/v1.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _rng = _interopRequireDefault(require_rng());
      var _stringify = require_stringify();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var _nodeId;
      var _clockseq;
      var _lastMSecs = 0;
      var _lastNSecs = 0;
      function v1(options, buf, offset) {
        let i = buf && offset || 0;
        const b = buf || new Array(16);
        options = options || {};
        let node = options.node || _nodeId;
        let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
        if (node == null || clockseq == null) {
          const seedBytes = options.random || (options.rng || _rng.default)();
          if (node == null) {
            node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
          }
          if (clockseq == null) {
            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
          }
        }
        let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
        let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
        const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
        if (dt < 0 && options.clockseq === void 0) {
          clockseq = clockseq + 1 & 16383;
        }
        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
          nsecs = 0;
        }
        if (nsecs >= 1e4) {
          throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        }
        _lastMSecs = msecs;
        _lastNSecs = nsecs;
        _clockseq = clockseq;
        msecs += 122192928e5;
        const tl2 = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
        b[i++] = tl2 >>> 24 & 255;
        b[i++] = tl2 >>> 16 & 255;
        b[i++] = tl2 >>> 8 & 255;
        b[i++] = tl2 & 255;
        const tmh = msecs / 4294967296 * 1e4 & 268435455;
        b[i++] = tmh >>> 8 & 255;
        b[i++] = tmh & 255;
        b[i++] = tmh >>> 24 & 15 | 16;
        b[i++] = tmh >>> 16 & 255;
        b[i++] = clockseq >>> 8 | 128;
        b[i++] = clockseq & 255;
        for (let n = 0; n < 6; ++n) {
          b[i + n] = node[n];
        }
        return buf || (0, _stringify.unsafeStringify)(b);
      }
      __name(v1, "v1");
      var _default = v1;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/parse.js
  var require_parse = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/parse.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _validate = _interopRequireDefault(require_validate());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function parse4(uuid) {
        if (!(0, _validate.default)(uuid)) {
          throw TypeError("Invalid UUID");
        }
        let v;
        const arr = new Uint8Array(16);
        arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
        arr[1] = v >>> 16 & 255;
        arr[2] = v >>> 8 & 255;
        arr[3] = v & 255;
        arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
        arr[5] = v & 255;
        arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
        arr[7] = v & 255;
        arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
        arr[9] = v & 255;
        arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
        arr[11] = v / 4294967296 & 255;
        arr[12] = v >>> 24 & 255;
        arr[13] = v >>> 16 & 255;
        arr[14] = v >>> 8 & 255;
        arr[15] = v & 255;
        return arr;
      }
      __name(parse4, "parse");
      var _default = parse4;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/v35.js
  var require_v35 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/v35.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.URL = exports.DNS = void 0;
      exports.default = v35;
      var _stringify = require_stringify();
      var _parse = _interopRequireDefault(require_parse());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function stringToBytes(str) {
        str = unescape(encodeURIComponent(str));
        const bytes = [];
        for (let i = 0; i < str.length; ++i) {
          bytes.push(str.charCodeAt(i));
        }
        return bytes;
      }
      __name(stringToBytes, "stringToBytes");
      var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
      exports.DNS = DNS;
      var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
      exports.URL = URL2;
      function v35(name, version2, hashfunc) {
        function generateUUID(value, namespace, buf, offset) {
          var _namespace;
          if (typeof value === "string") {
            value = stringToBytes(value);
          }
          if (typeof namespace === "string") {
            namespace = (0, _parse.default)(namespace);
          }
          if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
            throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
          }
          let bytes = new Uint8Array(16 + value.length);
          bytes.set(namespace);
          bytes.set(value, namespace.length);
          bytes = hashfunc(bytes);
          bytes[6] = bytes[6] & 15 | version2;
          bytes[8] = bytes[8] & 63 | 128;
          if (buf) {
            offset = offset || 0;
            for (let i = 0; i < 16; ++i) {
              buf[offset + i] = bytes[i];
            }
            return buf;
          }
          return (0, _stringify.unsafeStringify)(bytes);
        }
        __name(generateUUID, "generateUUID");
        try {
          generateUUID.name = name;
        } catch (err) {
        }
        generateUUID.DNS = DNS;
        generateUUID.URL = URL2;
        return generateUUID;
      }
      __name(v35, "v35");
    }
  });

  // node_modules/uuid/dist/commonjs-browser/md5.js
  var require_md5 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/md5.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function md5(bytes) {
        if (typeof bytes === "string") {
          const msg = unescape(encodeURIComponent(bytes));
          bytes = new Uint8Array(msg.length);
          for (let i = 0; i < msg.length; ++i) {
            bytes[i] = msg.charCodeAt(i);
          }
        }
        return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
      }
      __name(md5, "md5");
      function md5ToHexEncodedArray(input) {
        const output = [];
        const length32 = input.length * 32;
        const hexTab = "0123456789abcdef";
        for (let i = 0; i < length32; i += 8) {
          const x2 = input[i >> 5] >>> i % 32 & 255;
          const hex = parseInt(hexTab.charAt(x2 >>> 4 & 15) + hexTab.charAt(x2 & 15), 16);
          output.push(hex);
        }
        return output;
      }
      __name(md5ToHexEncodedArray, "md5ToHexEncodedArray");
      function getOutputLength(inputLength8) {
        return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
      }
      __name(getOutputLength, "getOutputLength");
      function wordsToMd5(x2, len) {
        x2[len >> 5] |= 128 << len % 32;
        x2[getOutputLength(len) - 1] = len;
        let a = 1732584193;
        let b = -271733879;
        let c = -1732584194;
        let d = 271733878;
        for (let i = 0; i < x2.length; i += 16) {
          const olda = a;
          const oldb = b;
          const oldc = c;
          const oldd = d;
          a = md5ff(a, b, c, d, x2[i], 7, -680876936);
          d = md5ff(d, a, b, c, x2[i + 1], 12, -389564586);
          c = md5ff(c, d, a, b, x2[i + 2], 17, 606105819);
          b = md5ff(b, c, d, a, x2[i + 3], 22, -1044525330);
          a = md5ff(a, b, c, d, x2[i + 4], 7, -176418897);
          d = md5ff(d, a, b, c, x2[i + 5], 12, 1200080426);
          c = md5ff(c, d, a, b, x2[i + 6], 17, -1473231341);
          b = md5ff(b, c, d, a, x2[i + 7], 22, -45705983);
          a = md5ff(a, b, c, d, x2[i + 8], 7, 1770035416);
          d = md5ff(d, a, b, c, x2[i + 9], 12, -1958414417);
          c = md5ff(c, d, a, b, x2[i + 10], 17, -42063);
          b = md5ff(b, c, d, a, x2[i + 11], 22, -1990404162);
          a = md5ff(a, b, c, d, x2[i + 12], 7, 1804603682);
          d = md5ff(d, a, b, c, x2[i + 13], 12, -40341101);
          c = md5ff(c, d, a, b, x2[i + 14], 17, -1502002290);
          b = md5ff(b, c, d, a, x2[i + 15], 22, 1236535329);
          a = md5gg(a, b, c, d, x2[i + 1], 5, -165796510);
          d = md5gg(d, a, b, c, x2[i + 6], 9, -1069501632);
          c = md5gg(c, d, a, b, x2[i + 11], 14, 643717713);
          b = md5gg(b, c, d, a, x2[i], 20, -373897302);
          a = md5gg(a, b, c, d, x2[i + 5], 5, -701558691);
          d = md5gg(d, a, b, c, x2[i + 10], 9, 38016083);
          c = md5gg(c, d, a, b, x2[i + 15], 14, -660478335);
          b = md5gg(b, c, d, a, x2[i + 4], 20, -405537848);
          a = md5gg(a, b, c, d, x2[i + 9], 5, 568446438);
          d = md5gg(d, a, b, c, x2[i + 14], 9, -1019803690);
          c = md5gg(c, d, a, b, x2[i + 3], 14, -187363961);
          b = md5gg(b, c, d, a, x2[i + 8], 20, 1163531501);
          a = md5gg(a, b, c, d, x2[i + 13], 5, -1444681467);
          d = md5gg(d, a, b, c, x2[i + 2], 9, -51403784);
          c = md5gg(c, d, a, b, x2[i + 7], 14, 1735328473);
          b = md5gg(b, c, d, a, x2[i + 12], 20, -1926607734);
          a = md5hh(a, b, c, d, x2[i + 5], 4, -378558);
          d = md5hh(d, a, b, c, x2[i + 8], 11, -2022574463);
          c = md5hh(c, d, a, b, x2[i + 11], 16, 1839030562);
          b = md5hh(b, c, d, a, x2[i + 14], 23, -35309556);
          a = md5hh(a, b, c, d, x2[i + 1], 4, -1530992060);
          d = md5hh(d, a, b, c, x2[i + 4], 11, 1272893353);
          c = md5hh(c, d, a, b, x2[i + 7], 16, -155497632);
          b = md5hh(b, c, d, a, x2[i + 10], 23, -1094730640);
          a = md5hh(a, b, c, d, x2[i + 13], 4, 681279174);
          d = md5hh(d, a, b, c, x2[i], 11, -358537222);
          c = md5hh(c, d, a, b, x2[i + 3], 16, -722521979);
          b = md5hh(b, c, d, a, x2[i + 6], 23, 76029189);
          a = md5hh(a, b, c, d, x2[i + 9], 4, -640364487);
          d = md5hh(d, a, b, c, x2[i + 12], 11, -421815835);
          c = md5hh(c, d, a, b, x2[i + 15], 16, 530742520);
          b = md5hh(b, c, d, a, x2[i + 2], 23, -995338651);
          a = md5ii(a, b, c, d, x2[i], 6, -198630844);
          d = md5ii(d, a, b, c, x2[i + 7], 10, 1126891415);
          c = md5ii(c, d, a, b, x2[i + 14], 15, -1416354905);
          b = md5ii(b, c, d, a, x2[i + 5], 21, -57434055);
          a = md5ii(a, b, c, d, x2[i + 12], 6, 1700485571);
          d = md5ii(d, a, b, c, x2[i + 3], 10, -1894986606);
          c = md5ii(c, d, a, b, x2[i + 10], 15, -1051523);
          b = md5ii(b, c, d, a, x2[i + 1], 21, -2054922799);
          a = md5ii(a, b, c, d, x2[i + 8], 6, 1873313359);
          d = md5ii(d, a, b, c, x2[i + 15], 10, -30611744);
          c = md5ii(c, d, a, b, x2[i + 6], 15, -1560198380);
          b = md5ii(b, c, d, a, x2[i + 13], 21, 1309151649);
          a = md5ii(a, b, c, d, x2[i + 4], 6, -145523070);
          d = md5ii(d, a, b, c, x2[i + 11], 10, -1120210379);
          c = md5ii(c, d, a, b, x2[i + 2], 15, 718787259);
          b = md5ii(b, c, d, a, x2[i + 9], 21, -343485551);
          a = safeAdd(a, olda);
          b = safeAdd(b, oldb);
          c = safeAdd(c, oldc);
          d = safeAdd(d, oldd);
        }
        return [a, b, c, d];
      }
      __name(wordsToMd5, "wordsToMd5");
      function bytesToWords(input) {
        if (input.length === 0) {
          return [];
        }
        const length8 = input.length * 8;
        const output = new Uint32Array(getOutputLength(length8));
        for (let i = 0; i < length8; i += 8) {
          output[i >> 5] |= (input[i / 8] & 255) << i % 32;
        }
        return output;
      }
      __name(bytesToWords, "bytesToWords");
      function safeAdd(x2, y) {
        const lsw = (x2 & 65535) + (y & 65535);
        const msw = (x2 >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      __name(safeAdd, "safeAdd");
      function bitRotateLeft(num, cnt) {
        return num << cnt | num >>> 32 - cnt;
      }
      __name(bitRotateLeft, "bitRotateLeft");
      function md5cmn(q, a, b, x2, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x2, t)), s), b);
      }
      __name(md5cmn, "md5cmn");
      function md5ff(a, b, c, d, x2, s, t) {
        return md5cmn(b & c | ~b & d, a, b, x2, s, t);
      }
      __name(md5ff, "md5ff");
      function md5gg(a, b, c, d, x2, s, t) {
        return md5cmn(b & d | c & ~d, a, b, x2, s, t);
      }
      __name(md5gg, "md5gg");
      function md5hh(a, b, c, d, x2, s, t) {
        return md5cmn(b ^ c ^ d, a, b, x2, s, t);
      }
      __name(md5hh, "md5hh");
      function md5ii(a, b, c, d, x2, s, t) {
        return md5cmn(c ^ (b | ~d), a, b, x2, s, t);
      }
      __name(md5ii, "md5ii");
      var _default = md5;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/v3.js
  var require_v3 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/v3.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _v = _interopRequireDefault(require_v35());
      var _md = _interopRequireDefault(require_md5());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var v3 = (0, _v.default)("v3", 48, _md.default);
      var _default = v3;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/native.js
  var require_native = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/native.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var randomUUID2 = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
      var _default = {
        randomUUID: randomUUID2
      };
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/v4.js
  var require_v4 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/v4.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _native = _interopRequireDefault(require_native());
      var _rng = _interopRequireDefault(require_rng());
      var _stringify = require_stringify();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function v43(options, buf, offset) {
        if (_native.default.randomUUID && !buf && !options) {
          return _native.default.randomUUID();
        }
        options = options || {};
        const rnds = options.random || (options.rng || _rng.default)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = rnds[i];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(rnds);
      }
      __name(v43, "v4");
      var _default = v43;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/sha1.js
  var require_sha1 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/sha1.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function f2(s, x2, y, z2) {
        switch (s) {
          case 0:
            return x2 & y ^ ~x2 & z2;
          case 1:
            return x2 ^ y ^ z2;
          case 2:
            return x2 & y ^ x2 & z2 ^ y & z2;
          case 3:
            return x2 ^ y ^ z2;
        }
      }
      __name(f2, "f");
      function ROTL(x2, n) {
        return x2 << n | x2 >>> 32 - n;
      }
      __name(ROTL, "ROTL");
      function sha1(bytes) {
        const K2 = [1518500249, 1859775393, 2400959708, 3395469782];
        const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
        if (typeof bytes === "string") {
          const msg = unescape(encodeURIComponent(bytes));
          bytes = [];
          for (let i = 0; i < msg.length; ++i) {
            bytes.push(msg.charCodeAt(i));
          }
        } else if (!Array.isArray(bytes)) {
          bytes = Array.prototype.slice.call(bytes);
        }
        bytes.push(128);
        const l = bytes.length / 4 + 2;
        const N = Math.ceil(l / 16);
        const M = new Array(N);
        for (let i = 0; i < N; ++i) {
          const arr = new Uint32Array(16);
          for (let j = 0; j < 16; ++j) {
            arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
          }
          M[i] = arr;
        }
        M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
        M[N - 1][14] = Math.floor(M[N - 1][14]);
        M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
        for (let i = 0; i < N; ++i) {
          const W2 = new Uint32Array(80);
          for (let t = 0; t < 16; ++t) {
            W2[t] = M[i][t];
          }
          for (let t = 16; t < 80; ++t) {
            W2[t] = ROTL(W2[t - 3] ^ W2[t - 8] ^ W2[t - 14] ^ W2[t - 16], 1);
          }
          let a = H[0];
          let b = H[1];
          let c = H[2];
          let d = H[3];
          let e = H[4];
          for (let t = 0; t < 80; ++t) {
            const s = Math.floor(t / 20);
            const T = ROTL(a, 5) + f2(s, b, c, d) + e + K2[s] + W2[t] >>> 0;
            e = d;
            d = c;
            c = ROTL(b, 30) >>> 0;
            b = a;
            a = T;
          }
          H[0] = H[0] + a >>> 0;
          H[1] = H[1] + b >>> 0;
          H[2] = H[2] + c >>> 0;
          H[3] = H[3] + d >>> 0;
          H[4] = H[4] + e >>> 0;
        }
        return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
      }
      __name(sha1, "sha1");
      var _default = sha1;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/v5.js
  var require_v5 = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/v5.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _v = _interopRequireDefault(require_v35());
      var _sha = _interopRequireDefault(require_sha1());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      var v5 = (0, _v.default)("v5", 80, _sha.default);
      var _default = v5;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/nil.js
  var require_nil = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/nil.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = "00000000-0000-0000-0000-000000000000";
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/version.js
  var require_version = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/version.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _validate = _interopRequireDefault(require_validate());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
      function version2(uuid) {
        if (!(0, _validate.default)(uuid)) {
          throw TypeError("Invalid UUID");
        }
        return parseInt(uuid.slice(14, 15), 16);
      }
      __name(version2, "version");
      var _default = version2;
      exports.default = _default;
    }
  });

  // node_modules/uuid/dist/commonjs-browser/index.js
  var require_commonjs_browser = __commonJS({
    "node_modules/uuid/dist/commonjs-browser/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "NIL", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _nil.default;
        }, "get")
      });
      Object.defineProperty(exports, "parse", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _parse.default;
        }, "get")
      });
      Object.defineProperty(exports, "stringify", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _stringify.default;
        }, "get")
      });
      Object.defineProperty(exports, "v1", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _v.default;
        }, "get")
      });
      Object.defineProperty(exports, "v3", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _v2.default;
        }, "get")
      });
      Object.defineProperty(exports, "v4", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _v3.default;
        }, "get")
      });
      Object.defineProperty(exports, "v5", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _v4.default;
        }, "get")
      });
      Object.defineProperty(exports, "validate", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _validate.default;
        }, "get")
      });
      Object.defineProperty(exports, "version", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function get() {
          return _version.default;
        }, "get")
      });
      var _v = _interopRequireDefault(require_v1());
      var _v2 = _interopRequireDefault(require_v3());
      var _v3 = _interopRequireDefault(require_v4());
      var _v4 = _interopRequireDefault(require_v5());
      var _nil = _interopRequireDefault(require_nil());
      var _version = _interopRequireDefault(require_version());
      var _validate = _interopRequireDefault(require_validate());
      var _stringify = _interopRequireDefault(require_stringify());
      var _parse = _interopRequireDefault(require_parse());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      __name(_interopRequireDefault, "_interopRequireDefault");
    }
  });

  // node_modules/domelementtype/lib/index.js
  var require_lib = __commonJS({
    "node_modules/domelementtype/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
      var ElementType;
      (function(ElementType2) {
        ElementType2["Root"] = "root";
        ElementType2["Text"] = "text";
        ElementType2["Directive"] = "directive";
        ElementType2["Comment"] = "comment";
        ElementType2["Script"] = "script";
        ElementType2["Style"] = "style";
        ElementType2["Tag"] = "tag";
        ElementType2["CDATA"] = "cdata";
        ElementType2["Doctype"] = "doctype";
      })(ElementType = exports.ElementType || (exports.ElementType = {}));
      function isTag(elem) {
        return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
      }
      __name(isTag, "isTag");
      exports.isTag = isTag;
      exports.Root = ElementType.Root;
      exports.Text = ElementType.Text;
      exports.Directive = ElementType.Directive;
      exports.Comment = ElementType.Comment;
      exports.Script = ElementType.Script;
      exports.Style = ElementType.Style;
      exports.Tag = ElementType.Tag;
      exports.CDATA = ElementType.CDATA;
      exports.Doctype = ElementType.Doctype;
    }
  });

  // node_modules/domhandler/lib/node.js
  var require_node = __commonJS({
    "node_modules/domhandler/lib/node.js"(exports) {
      "use strict";
      var __extends3 = exports && exports.__extends || function() {
        var extendStatics2 = /* @__PURE__ */ __name(function(d, b) {
          extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics2(d, b);
        }, "extendStatics");
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics2(d, b);
          function __() {
            this.constructor = d;
          }
          __name(__, "__");
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign2 = exports && exports.__assign || function() {
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign2.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
      var domelementtype_1 = require_lib();
      var nodeTypes = /* @__PURE__ */ new Map([
        [domelementtype_1.ElementType.Tag, 1],
        [domelementtype_1.ElementType.Script, 1],
        [domelementtype_1.ElementType.Style, 1],
        [domelementtype_1.ElementType.Directive, 1],
        [domelementtype_1.ElementType.Text, 3],
        [domelementtype_1.ElementType.CDATA, 4],
        [domelementtype_1.ElementType.Comment, 8],
        [domelementtype_1.ElementType.Root, 9]
      ]);
      var Node = (
        /** @class */
        function() {
          function Node2(type) {
            this.type = type;
            this.parent = null;
            this.prev = null;
            this.next = null;
            this.startIndex = null;
            this.endIndex = null;
          }
          __name(Node2, "Node");
          Object.defineProperty(Node2.prototype, "nodeType", {
            // Read-only aliases
            get: function() {
              var _a7;
              return (_a7 = nodeTypes.get(this.type)) !== null && _a7 !== void 0 ? _a7 : 1;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Node2.prototype, "parentNode", {
            // Read-write aliases for properties
            get: function() {
              return this.parent;
            },
            set: function(parent) {
              this.parent = parent;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Node2.prototype, "previousSibling", {
            get: function() {
              return this.prev;
            },
            set: function(prev) {
              this.prev = prev;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Node2.prototype, "nextSibling", {
            get: function() {
              return this.next;
            },
            set: function(next) {
              this.next = next;
            },
            enumerable: false,
            configurable: true
          });
          Node2.prototype.cloneNode = function(recursive) {
            if (recursive === void 0) {
              recursive = false;
            }
            return cloneNode(this, recursive);
          };
          return Node2;
        }()
      );
      exports.Node = Node;
      var DataNode = (
        /** @class */
        function(_super) {
          __extends3(DataNode2, _super);
          function DataNode2(type, data) {
            var _this = _super.call(this, type) || this;
            _this.data = data;
            return _this;
          }
          __name(DataNode2, "DataNode");
          Object.defineProperty(DataNode2.prototype, "nodeValue", {
            get: function() {
              return this.data;
            },
            set: function(data) {
              this.data = data;
            },
            enumerable: false,
            configurable: true
          });
          return DataNode2;
        }(Node)
      );
      exports.DataNode = DataNode;
      var Text = (
        /** @class */
        function(_super) {
          __extends3(Text2, _super);
          function Text2(data) {
            return _super.call(this, domelementtype_1.ElementType.Text, data) || this;
          }
          __name(Text2, "Text");
          return Text2;
        }(DataNode)
      );
      exports.Text = Text;
      var Comment = (
        /** @class */
        function(_super) {
          __extends3(Comment2, _super);
          function Comment2(data) {
            return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;
          }
          __name(Comment2, "Comment");
          return Comment2;
        }(DataNode)
      );
      exports.Comment = Comment;
      var ProcessingInstruction = (
        /** @class */
        function(_super) {
          __extends3(ProcessingInstruction2, _super);
          function ProcessingInstruction2(name, data) {
            var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;
            _this.name = name;
            return _this;
          }
          __name(ProcessingInstruction2, "ProcessingInstruction");
          return ProcessingInstruction2;
        }(DataNode)
      );
      exports.ProcessingInstruction = ProcessingInstruction;
      var NodeWithChildren = (
        /** @class */
        function(_super) {
          __extends3(NodeWithChildren2, _super);
          function NodeWithChildren2(type, children) {
            var _this = _super.call(this, type) || this;
            _this.children = children;
            return _this;
          }
          __name(NodeWithChildren2, "NodeWithChildren");
          Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
            // Aliases
            get: function() {
              var _a7;
              return (_a7 = this.children[0]) !== null && _a7 !== void 0 ? _a7 : null;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
            get: function() {
              return this.children.length > 0 ? this.children[this.children.length - 1] : null;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
            get: function() {
              return this.children;
            },
            set: function(children) {
              this.children = children;
            },
            enumerable: false,
            configurable: true
          });
          return NodeWithChildren2;
        }(Node)
      );
      exports.NodeWithChildren = NodeWithChildren;
      var Document = (
        /** @class */
        function(_super) {
          __extends3(Document2, _super);
          function Document2(children) {
            return _super.call(this, domelementtype_1.ElementType.Root, children) || this;
          }
          __name(Document2, "Document");
          return Document2;
        }(NodeWithChildren)
      );
      exports.Document = Document;
      var Element = (
        /** @class */
        function(_super) {
          __extends3(Element2, _super);
          function Element2(name, attribs, children, type) {
            if (children === void 0) {
              children = [];
            }
            if (type === void 0) {
              type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
            }
            var _this = _super.call(this, type, children) || this;
            _this.name = name;
            _this.attribs = attribs;
            return _this;
          }
          __name(Element2, "Element");
          Object.defineProperty(Element2.prototype, "tagName", {
            // DOM Level 1 aliases
            get: function() {
              return this.name;
            },
            set: function(name) {
              this.name = name;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Element2.prototype, "attributes", {
            get: function() {
              var _this = this;
              return Object.keys(this.attribs).map(function(name) {
                var _a7, _b2;
                return {
                  name,
                  value: _this.attribs[name],
                  namespace: (_a7 = _this["x-attribsNamespace"]) === null || _a7 === void 0 ? void 0 : _a7[name],
                  prefix: (_b2 = _this["x-attribsPrefix"]) === null || _b2 === void 0 ? void 0 : _b2[name]
                };
              });
            },
            enumerable: false,
            configurable: true
          });
          return Element2;
        }(NodeWithChildren)
      );
      exports.Element = Element;
      function isTag(node) {
        return domelementtype_1.isTag(node);
      }
      __name(isTag, "isTag");
      exports.isTag = isTag;
      function isCDATA(node) {
        return node.type === domelementtype_1.ElementType.CDATA;
      }
      __name(isCDATA, "isCDATA");
      exports.isCDATA = isCDATA;
      function isText(node) {
        return node.type === domelementtype_1.ElementType.Text;
      }
      __name(isText, "isText");
      exports.isText = isText;
      function isComment(node) {
        return node.type === domelementtype_1.ElementType.Comment;
      }
      __name(isComment, "isComment");
      exports.isComment = isComment;
      function isDirective(node) {
        return node.type === domelementtype_1.ElementType.Directive;
      }
      __name(isDirective, "isDirective");
      exports.isDirective = isDirective;
      function isDocument(node) {
        return node.type === domelementtype_1.ElementType.Root;
      }
      __name(isDocument, "isDocument");
      exports.isDocument = isDocument;
      function hasChildren(node) {
        return Object.prototype.hasOwnProperty.call(node, "children");
      }
      __name(hasChildren, "hasChildren");
      exports.hasChildren = hasChildren;
      function cloneNode(node, recursive) {
        if (recursive === void 0) {
          recursive = false;
        }
        var result;
        if (isText(node)) {
          result = new Text(node.data);
        } else if (isComment(node)) {
          result = new Comment(node.data);
        } else if (isTag(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_1 = new Element(node.name, __assign2({}, node.attribs), children);
          children.forEach(function(child) {
            return child.parent = clone_1;
          });
          if (node["x-attribsNamespace"]) {
            clone_1["x-attribsNamespace"] = __assign2({}, node["x-attribsNamespace"]);
          }
          if (node["x-attribsPrefix"]) {
            clone_1["x-attribsPrefix"] = __assign2({}, node["x-attribsPrefix"]);
          }
          result = clone_1;
        } else if (isCDATA(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);
          children.forEach(function(child) {
            return child.parent = clone_2;
          });
          result = clone_2;
        } else if (isDocument(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_3 = new Document(children);
          children.forEach(function(child) {
            return child.parent = clone_3;
          });
          if (node["x-mode"]) {
            clone_3["x-mode"] = node["x-mode"];
          }
          result = clone_3;
        } else if (isDirective(node)) {
          var instruction = new ProcessingInstruction(node.name, node.data);
          if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
          }
          result = instruction;
        } else {
          throw new Error("Not implemented yet: " + node.type);
        }
        result.startIndex = node.startIndex;
        result.endIndex = node.endIndex;
        return result;
      }
      __name(cloneNode, "cloneNode");
      exports.cloneNode = cloneNode;
      function cloneChildren(childs) {
        var children = childs.map(function(child) {
          return cloneNode(child, true);
        });
        for (var i = 1; i < children.length; i++) {
          children[i].prev = children[i - 1];
          children[i - 1].next = children[i];
        }
        return children;
      }
      __name(cloneChildren, "cloneChildren");
    }
  });

  // node_modules/domhandler/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/domhandler/lib/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DomHandler = void 0;
      var domelementtype_1 = require_lib();
      var node_1 = require_node();
      __exportStar(require_node(), exports);
      var reWhitespace = /\s+/g;
      var defaultOpts = {
        normalizeWhitespace: false,
        withStartIndices: false,
        withEndIndices: false
      };
      var DomHandler = (
        /** @class */
        function() {
          function DomHandler2(callback, options, elementCB) {
            this.dom = [];
            this.root = new node_1.Document(this.dom);
            this.done = false;
            this.tagStack = [this.root];
            this.lastNode = null;
            this.parser = null;
            if (typeof options === "function") {
              elementCB = options;
              options = defaultOpts;
            }
            if (typeof callback === "object") {
              options = callback;
              callback = void 0;
            }
            this.callback = callback !== null && callback !== void 0 ? callback : null;
            this.options = options !== null && options !== void 0 ? options : defaultOpts;
            this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
          }
          __name(DomHandler2, "DomHandler");
          DomHandler2.prototype.onparserinit = function(parser) {
            this.parser = parser;
          };
          DomHandler2.prototype.onreset = function() {
            var _a7;
            this.dom = [];
            this.root = new node_1.Document(this.dom);
            this.done = false;
            this.tagStack = [this.root];
            this.lastNode = null;
            this.parser = (_a7 = this.parser) !== null && _a7 !== void 0 ? _a7 : null;
          };
          DomHandler2.prototype.onend = function() {
            if (this.done)
              return;
            this.done = true;
            this.parser = null;
            this.handleCallback(null);
          };
          DomHandler2.prototype.onerror = function(error) {
            this.handleCallback(error);
          };
          DomHandler2.prototype.onclosetag = function() {
            this.lastNode = null;
            var elem = this.tagStack.pop();
            if (this.options.withEndIndices) {
              elem.endIndex = this.parser.endIndex;
            }
            if (this.elementCB)
              this.elementCB(elem);
          };
          DomHandler2.prototype.onopentag = function(name, attribs) {
            var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : void 0;
            var element = new node_1.Element(name, attribs, void 0, type);
            this.addNode(element);
            this.tagStack.push(element);
          };
          DomHandler2.prototype.ontext = function(data) {
            var normalizeWhitespace = this.options.normalizeWhitespace;
            var lastNode = this.lastNode;
            if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
              if (normalizeWhitespace) {
                lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
              } else {
                lastNode.data += data;
              }
            } else {
              if (normalizeWhitespace) {
                data = data.replace(reWhitespace, " ");
              }
              var node = new node_1.Text(data);
              this.addNode(node);
              this.lastNode = node;
            }
          };
          DomHandler2.prototype.oncomment = function(data) {
            if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
              this.lastNode.data += data;
              return;
            }
            var node = new node_1.Comment(data);
            this.addNode(node);
            this.lastNode = node;
          };
          DomHandler2.prototype.oncommentend = function() {
            this.lastNode = null;
          };
          DomHandler2.prototype.oncdatastart = function() {
            var text = new node_1.Text("");
            var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);
            this.addNode(node);
            text.parent = node;
            this.lastNode = text;
          };
          DomHandler2.prototype.oncdataend = function() {
            this.lastNode = null;
          };
          DomHandler2.prototype.onprocessinginstruction = function(name, data) {
            var node = new node_1.ProcessingInstruction(name, data);
            this.addNode(node);
          };
          DomHandler2.prototype.handleCallback = function(error) {
            if (typeof this.callback === "function") {
              this.callback(error, this.dom);
            } else if (error) {
              throw error;
            }
          };
          DomHandler2.prototype.addNode = function(node) {
            var parent = this.tagStack[this.tagStack.length - 1];
            var previousSibling = parent.children[parent.children.length - 1];
            if (this.options.withStartIndices) {
              node.startIndex = this.parser.startIndex;
            }
            if (this.options.withEndIndices) {
              node.endIndex = this.parser.endIndex;
            }
            parent.children.push(node);
            if (previousSibling) {
              node.prev = previousSibling;
              previousSibling.next = node;
            }
            node.parent = parent;
            this.lastNode = null;
          };
          return DomHandler2;
        }()
      );
      exports.DomHandler = DomHandler;
      exports.default = DomHandler;
    }
  });

  // node_modules/nearley/lib/nearley.js
  var require_nearley = __commonJS({
    "node_modules/nearley/lib/nearley.js"(exports, module) {
      (function(root, factory) {
        if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          root.nearley = factory();
        }
      })(exports, function() {
        function Rule(name, symbols, postprocess) {
          this.id = ++Rule.highestId;
          this.name = name;
          this.symbols = symbols;
          this.postprocess = postprocess;
          return this;
        }
        __name(Rule, "Rule");
        Rule.highestId = 0;
        Rule.prototype.toString = function(withCursorAt) {
          var symbolSequence = typeof withCursorAt === "undefined" ? this.symbols.map(getSymbolShortDisplay).join(" ") : this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(" ") + " \u25CF " + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(" ");
          return this.name + " \u2192 " + symbolSequence;
        };
        function State(rule, dot, reference, wantedBy) {
          this.rule = rule;
          this.dot = dot;
          this.reference = reference;
          this.data = [];
          this.wantedBy = wantedBy;
          this.isComplete = this.dot === rule.symbols.length;
        }
        __name(State, "State");
        State.prototype.toString = function() {
          return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
        };
        State.prototype.nextState = function(child) {
          var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
          state.left = this;
          state.right = child;
          if (state.isComplete) {
            state.data = state.build();
            state.right = void 0;
          }
          return state;
        };
        State.prototype.build = function() {
          var children = [];
          var node = this;
          do {
            children.push(node.right.data);
            node = node.left;
          } while (node.left);
          children.reverse();
          return children;
        };
        State.prototype.finish = function() {
          if (this.rule.postprocess) {
            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
          }
        };
        function Column(grammar, index) {
          this.grammar = grammar;
          this.index = index;
          this.states = [];
          this.wants = {};
          this.scannable = [];
          this.completed = {};
        }
        __name(Column, "Column");
        Column.prototype.process = function(nextColumn) {
          var states = this.states;
          var wants = this.wants;
          var completed = this.completed;
          for (var w = 0; w < states.length; w++) {
            var state = states[w];
            if (state.isComplete) {
              state.finish();
              if (state.data !== Parser.fail) {
                var wantedBy = state.wantedBy;
                for (var i = wantedBy.length; i--; ) {
                  var left = wantedBy[i];
                  this.complete(left, state);
                }
                if (state.reference === this.index) {
                  var exp = state.rule.name;
                  (this.completed[exp] = this.completed[exp] || []).push(state);
                }
              }
            } else {
              var exp = state.rule.symbols[state.dot];
              if (typeof exp !== "string") {
                this.scannable.push(state);
                continue;
              }
              if (wants[exp]) {
                wants[exp].push(state);
                if (completed.hasOwnProperty(exp)) {
                  var nulls = completed[exp];
                  for (var i = 0; i < nulls.length; i++) {
                    var right = nulls[i];
                    this.complete(state, right);
                  }
                }
              } else {
                wants[exp] = [state];
                this.predict(exp);
              }
            }
          }
        };
        Column.prototype.predict = function(exp) {
          var rules = this.grammar.byName[exp] || [];
          for (var i = 0; i < rules.length; i++) {
            var r = rules[i];
            var wantedBy = this.wants[exp];
            var s = new State(r, 0, this.index, wantedBy);
            this.states.push(s);
          }
        };
        Column.prototype.complete = function(left, right) {
          var copy = left.nextState(right);
          this.states.push(copy);
        };
        function Grammar(rules, start) {
          this.rules = rules;
          this.start = start || this.rules[0].name;
          var byName = this.byName = {};
          this.rules.forEach(function(rule) {
            if (!byName.hasOwnProperty(rule.name)) {
              byName[rule.name] = [];
            }
            byName[rule.name].push(rule);
          });
        }
        __name(Grammar, "Grammar");
        Grammar.fromCompiled = function(rules, start) {
          var lexer = rules.Lexer;
          if (rules.ParserStart) {
            start = rules.ParserStart;
            rules = rules.ParserRules;
          }
          var rules = rules.map(function(r) {
            return new Rule(r.name, r.symbols, r.postprocess);
          });
          var g = new Grammar(rules, start);
          g.lexer = lexer;
          return g;
        };
        function StreamLexer() {
          this.reset("");
        }
        __name(StreamLexer, "StreamLexer");
        StreamLexer.prototype.reset = function(data, state) {
          this.buffer = data;
          this.index = 0;
          this.line = state ? state.line : 1;
          this.lastLineBreak = state ? -state.col : 0;
        };
        StreamLexer.prototype.next = function() {
          if (this.index < this.buffer.length) {
            var ch = this.buffer[this.index++];
            if (ch === "\n") {
              this.line += 1;
              this.lastLineBreak = this.index;
            }
            return { value: ch };
          }
        };
        StreamLexer.prototype.save = function() {
          return {
            line: this.line,
            col: this.index - this.lastLineBreak
          };
        };
        StreamLexer.prototype.formatError = function(token, message) {
          var buffer = this.buffer;
          if (typeof buffer === "string") {
            var lines = buffer.split("\n").slice(
              Math.max(0, this.line - 5),
              this.line
            );
            var nextLineBreak = buffer.indexOf("\n", this.index);
            if (nextLineBreak === -1)
              nextLineBreak = buffer.length;
            var col = this.index - this.lastLineBreak;
            var lastLineDigits = String(this.line).length;
            message += " at line " + this.line + " col " + col + ":\n\n";
            message += lines.map(function(line, i) {
              return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;
            }, this).join("\n");
            message += "\n" + pad("", lastLineDigits + col) + "^\n";
            return message;
          } else {
            return message + " at index " + (this.index - 1);
          }
          function pad(n, length) {
            var s = String(n);
            return Array(length - s.length + 1).join(" ") + s;
          }
          __name(pad, "pad");
        };
        function Parser(rules, start, options) {
          if (rules instanceof Grammar) {
            var grammar = rules;
            var options = start;
          } else {
            var grammar = Grammar.fromCompiled(rules, start);
          }
          this.grammar = grammar;
          this.options = {
            keepHistory: false,
            lexer: grammar.lexer || new StreamLexer()
          };
          for (var key in options || {}) {
            this.options[key] = options[key];
          }
          this.lexer = this.options.lexer;
          this.lexerState = void 0;
          var column = new Column(grammar, 0);
          var table = this.table = [column];
          column.wants[grammar.start] = [];
          column.predict(grammar.start);
          column.process();
          this.current = 0;
        }
        __name(Parser, "Parser");
        Parser.fail = {};
        Parser.prototype.feed = function(chunk) {
          var lexer = this.lexer;
          lexer.reset(chunk, this.lexerState);
          var token;
          while (true) {
            try {
              token = lexer.next();
              if (!token) {
                break;
              }
            } catch (e) {
              var nextColumn = new Column(this.grammar, this.current + 1);
              this.table.push(nextColumn);
              var err = new Error(this.reportLexerError(e));
              err.offset = this.current;
              err.token = e.token;
              throw err;
            }
            var column = this.table[this.current];
            if (!this.options.keepHistory) {
              delete this.table[this.current - 1];
            }
            var n = this.current + 1;
            var nextColumn = new Column(this.grammar, n);
            this.table.push(nextColumn);
            var literal = token.text !== void 0 ? token.text : token.value;
            var value = lexer.constructor === StreamLexer ? token.value : token;
            var scannable = column.scannable;
            for (var w = scannable.length; w--; ) {
              var state = scannable[w];
              var expect = state.rule.symbols[state.dot];
              if (expect.test ? expect.test(value) : expect.type ? expect.type === token.type : expect.literal === literal) {
                var next = state.nextState({ data: value, token, isToken: true, reference: n - 1 });
                nextColumn.states.push(next);
              }
            }
            nextColumn.process();
            if (nextColumn.states.length === 0) {
              var err = new Error(this.reportError(token));
              err.offset = this.current;
              err.token = token;
              throw err;
            }
            if (this.options.keepHistory) {
              column.lexerState = lexer.save();
            }
            this.current++;
          }
          if (column) {
            this.lexerState = lexer.save();
          }
          this.results = this.finish();
          return this;
        };
        Parser.prototype.reportLexerError = function(lexerError) {
          var tokenDisplay, lexerMessage;
          var token = lexerError.token;
          if (token) {
            tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";
            lexerMessage = this.lexer.formatError(token, "Syntax error");
          } else {
            tokenDisplay = "input (lexer error)";
            lexerMessage = lexerError.message;
          }
          return this.reportErrorCommon(lexerMessage, tokenDisplay);
        };
        Parser.prototype.reportError = function(token) {
          var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== void 0 ? token.value : token);
          var lexerMessage = this.lexer.formatError(token, "Syntax error");
          return this.reportErrorCommon(lexerMessage, tokenDisplay);
        };
        Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {
          var lines = [];
          lines.push(lexerMessage);
          var lastColumnIndex = this.table.length - 2;
          var lastColumn = this.table[lastColumnIndex];
          var expectantStates = lastColumn.states.filter(function(state) {
            var nextSymbol = state.rule.symbols[state.dot];
            return nextSymbol && typeof nextSymbol !== "string";
          });
          if (expectantStates.length === 0) {
            lines.push("Unexpected " + tokenDisplay + ". I did not expect any more input. Here is the state of my parse table:\n");
            this.displayStateStack(lastColumn.states, lines);
          } else {
            lines.push("Unexpected " + tokenDisplay + ". Instead, I was expecting to see one of the following:\n");
            var stateStacks = expectantStates.map(function(state) {
              return this.buildFirstStateStack(state, []) || [state];
            }, this);
            stateStacks.forEach(function(stateStack) {
              var state = stateStack[0];
              var nextSymbol = state.rule.symbols[state.dot];
              var symbolDisplay = this.getSymbolDisplay(nextSymbol);
              lines.push("A " + symbolDisplay + " based on:");
              this.displayStateStack(stateStack, lines);
            }, this);
          }
          lines.push("");
          return lines.join("\n");
        };
        Parser.prototype.displayStateStack = function(stateStack, lines) {
          var lastDisplay;
          var sameDisplayCount = 0;
          for (var j = 0; j < stateStack.length; j++) {
            var state = stateStack[j];
            var display = state.rule.toString(state.dot);
            if (display === lastDisplay) {
              sameDisplayCount++;
            } else {
              if (sameDisplayCount > 0) {
                lines.push("    ^ " + sameDisplayCount + " more lines identical to this");
              }
              sameDisplayCount = 0;
              lines.push("    " + display);
            }
            lastDisplay = display;
          }
        };
        Parser.prototype.getSymbolDisplay = function(symbol) {
          return getSymbolLongDisplay(symbol);
        };
        Parser.prototype.buildFirstStateStack = function(state, visited) {
          if (visited.indexOf(state) !== -1) {
            return null;
          }
          if (state.wantedBy.length === 0) {
            return [state];
          }
          var prevState = state.wantedBy[0];
          var childVisited = [state].concat(visited);
          var childResult = this.buildFirstStateStack(prevState, childVisited);
          if (childResult === null) {
            return null;
          }
          return [state].concat(childResult);
        };
        Parser.prototype.save = function() {
          var column = this.table[this.current];
          column.lexerState = this.lexerState;
          return column;
        };
        Parser.prototype.restore = function(column) {
          var index = column.index;
          this.current = index;
          this.table[index] = column;
          this.table.splice(index + 1);
          this.lexerState = column.lexerState;
          this.results = this.finish();
        };
        Parser.prototype.rewind = function(index) {
          if (!this.options.keepHistory) {
            throw new Error("set option `keepHistory` to enable rewinding");
          }
          this.restore(this.table[index]);
        };
        Parser.prototype.finish = function() {
          var considerations = [];
          var start = this.grammar.start;
          var column = this.table[this.table.length - 1];
          column.states.forEach(function(t) {
            if (t.rule.name === start && t.dot === t.rule.symbols.length && t.reference === 0 && t.data !== Parser.fail) {
              considerations.push(t);
            }
          });
          return considerations.map(function(c) {
            return c.data;
          });
        };
        function getSymbolLongDisplay(symbol) {
          var type = typeof symbol;
          if (type === "string") {
            return symbol;
          } else if (type === "object") {
            if (symbol.literal) {
              return JSON.stringify(symbol.literal);
            } else if (symbol instanceof RegExp) {
              return "character matching " + symbol;
            } else if (symbol.type) {
              return symbol.type + " token";
            } else if (symbol.test) {
              return "token matching " + String(symbol.test);
            } else {
              throw new Error("Unknown symbol type: " + symbol);
            }
          }
        }
        __name(getSymbolLongDisplay, "getSymbolLongDisplay");
        function getSymbolShortDisplay(symbol) {
          var type = typeof symbol;
          if (type === "string") {
            return symbol;
          } else if (type === "object") {
            if (symbol.literal) {
              return JSON.stringify(symbol.literal);
            } else if (symbol instanceof RegExp) {
              return symbol.toString();
            } else if (symbol.type) {
              return "%" + symbol.type;
            } else if (symbol.test) {
              return "<" + String(symbol.test) + ">";
            } else {
              throw new Error("Unknown symbol type: " + symbol);
            }
          }
        }
        __name(getSymbolShortDisplay, "getSymbolShortDisplay");
        return {
          Parser,
          Grammar,
          Rule
        };
      });
    }
  });

  // node_modules/moo/moo.js
  var require_moo = __commonJS({
    "node_modules/moo/moo.js"(exports, module) {
      (function(root, factory) {
        if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          root.moo = factory();
        }
      })(exports, function() {
        "use strict";
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var toString = Object.prototype.toString;
        var hasSticky = typeof new RegExp().sticky === "boolean";
        function isRegExp(o) {
          return o && toString.call(o) === "[object RegExp]";
        }
        __name(isRegExp, "isRegExp");
        function isObject3(o) {
          return o && typeof o === "object" && !isRegExp(o) && !Array.isArray(o);
        }
        __name(isObject3, "isObject");
        function reEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        __name(reEscape, "reEscape");
        function reGroups(s) {
          var re2 = new RegExp("|" + s);
          return re2.exec("").length - 1;
        }
        __name(reGroups, "reGroups");
        function reCapture(s) {
          return "(" + s + ")";
        }
        __name(reCapture, "reCapture");
        function reUnion(regexps) {
          if (!regexps.length)
            return "(?!)";
          var source = regexps.map(function(s) {
            return "(?:" + s + ")";
          }).join("|");
          return "(?:" + source + ")";
        }
        __name(reUnion, "reUnion");
        function regexpOrLiteral(obj) {
          if (typeof obj === "string") {
            return "(?:" + reEscape(obj) + ")";
          } else if (isRegExp(obj)) {
            if (obj.ignoreCase)
              throw new Error("RegExp /i flag not allowed");
            if (obj.global)
              throw new Error("RegExp /g flag is implied");
            if (obj.sticky)
              throw new Error("RegExp /y flag is implied");
            if (obj.multiline)
              throw new Error("RegExp /m flag is implied");
            return obj.source;
          } else {
            throw new Error("Not a pattern: " + obj);
          }
        }
        __name(regexpOrLiteral, "regexpOrLiteral");
        function pad(s, length) {
          if (s.length > length) {
            return s;
          }
          return Array(length - s.length + 1).join(" ") + s;
        }
        __name(pad, "pad");
        function lastNLines(string, numLines) {
          var position = string.length;
          var lineBreaks = 0;
          while (true) {
            var idx = string.lastIndexOf("\n", position - 1);
            if (idx === -1) {
              break;
            } else {
              lineBreaks++;
            }
            position = idx;
            if (lineBreaks === numLines) {
              break;
            }
            if (position === 0) {
              break;
            }
          }
          var startPosition = lineBreaks < numLines ? 0 : position + 1;
          return string.substring(startPosition).split("\n");
        }
        __name(lastNLines, "lastNLines");
        function objectToRules(object) {
          var keys = Object.getOwnPropertyNames(object);
          var result = [];
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var thing = object[key];
            var rules = [].concat(thing);
            if (key === "include") {
              for (var j = 0; j < rules.length; j++) {
                result.push({ include: rules[j] });
              }
              continue;
            }
            var match = [];
            rules.forEach(function(rule) {
              if (isObject3(rule)) {
                if (match.length)
                  result.push(ruleOptions(key, match));
                result.push(ruleOptions(key, rule));
                match = [];
              } else {
                match.push(rule);
              }
            });
            if (match.length)
              result.push(ruleOptions(key, match));
          }
          return result;
        }
        __name(objectToRules, "objectToRules");
        function arrayToRules(array) {
          var result = [];
          for (var i = 0; i < array.length; i++) {
            var obj = array[i];
            if (obj.include) {
              var include3 = [].concat(obj.include);
              for (var j = 0; j < include3.length; j++) {
                result.push({ include: include3[j] });
              }
              continue;
            }
            if (!obj.type) {
              throw new Error("Rule has no type: " + JSON.stringify(obj));
            }
            result.push(ruleOptions(obj.type, obj));
          }
          return result;
        }
        __name(arrayToRules, "arrayToRules");
        function ruleOptions(type, obj) {
          if (!isObject3(obj)) {
            obj = { match: obj };
          }
          if (obj.include) {
            throw new Error("Matching rules cannot also include states");
          }
          var options = {
            defaultType: type,
            lineBreaks: !!obj.error || !!obj.fallback,
            pop: false,
            next: null,
            push: null,
            error: false,
            fallback: false,
            value: null,
            type: null,
            shouldThrow: false
          };
          for (var key in obj) {
            if (hasOwnProperty2.call(obj, key)) {
              options[key] = obj[key];
            }
          }
          if (typeof options.type === "string" && type !== options.type) {
            throw new Error("Type transform cannot be a string (type '" + options.type + "' for token '" + type + "')");
          }
          var match = options.match;
          options.match = Array.isArray(match) ? match : match ? [match] : [];
          options.match.sort(function(a, b) {
            return isRegExp(a) && isRegExp(b) ? 0 : isRegExp(b) ? -1 : isRegExp(a) ? 1 : b.length - a.length;
          });
          return options;
        }
        __name(ruleOptions, "ruleOptions");
        function toRules(spec) {
          return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec);
        }
        __name(toRules, "toRules");
        var defaultErrorRule = ruleOptions("error", { lineBreaks: true, shouldThrow: true });
        function compileRules(rules, hasStates) {
          var errorRule = null;
          var fast = /* @__PURE__ */ Object.create(null);
          var fastAllowed = true;
          var unicodeFlag = null;
          var groups = [];
          var parts = [];
          for (var i = 0; i < rules.length; i++) {
            if (rules[i].fallback) {
              fastAllowed = false;
            }
          }
          for (var i = 0; i < rules.length; i++) {
            var options = rules[i];
            if (options.include) {
              throw new Error("Inheritance is not allowed in stateless lexers");
            }
            if (options.error || options.fallback) {
              if (errorRule) {
                if (!options.fallback === !errorRule.fallback) {
                  throw new Error("Multiple " + (options.fallback ? "fallback" : "error") + " rules not allowed (for token '" + options.defaultType + "')");
                } else {
                  throw new Error("fallback and error are mutually exclusive (for token '" + options.defaultType + "')");
                }
              }
              errorRule = options;
            }
            var match = options.match.slice();
            if (fastAllowed) {
              while (match.length && typeof match[0] === "string" && match[0].length === 1) {
                var word = match.shift();
                fast[word.charCodeAt(0)] = options;
              }
            }
            if (options.pop || options.push || options.next) {
              if (!hasStates) {
                throw new Error("State-switching options are not allowed in stateless lexers (for token '" + options.defaultType + "')");
              }
              if (options.fallback) {
                throw new Error("State-switching options are not allowed on fallback tokens (for token '" + options.defaultType + "')");
              }
            }
            if (match.length === 0) {
              continue;
            }
            fastAllowed = false;
            groups.push(options);
            for (var j = 0; j < match.length; j++) {
              var obj = match[j];
              if (!isRegExp(obj)) {
                continue;
              }
              if (unicodeFlag === null) {
                unicodeFlag = obj.unicode;
              } else if (unicodeFlag !== obj.unicode && options.fallback === false) {
                throw new Error("If one rule is /u then all must be");
              }
            }
            var pat = reUnion(match.map(regexpOrLiteral));
            var regexp = new RegExp(pat);
            if (regexp.test("")) {
              throw new Error("RegExp matches empty string: " + regexp);
            }
            var groupCount = reGroups(pat);
            if (groupCount > 0) {
              throw new Error("RegExp has capture groups: " + regexp + "\nUse (?: \u2026 ) instead");
            }
            if (!options.lineBreaks && regexp.test("\n")) {
              throw new Error("Rule should declare lineBreaks: " + regexp);
            }
            parts.push(reCapture(pat));
          }
          var fallbackRule = errorRule && errorRule.fallback;
          var flags = hasSticky && !fallbackRule ? "ym" : "gm";
          var suffix = hasSticky || fallbackRule ? "" : "|";
          if (unicodeFlag === true)
            flags += "u";
          var combined = new RegExp(reUnion(parts) + suffix, flags);
          return { regexp: combined, groups, fast, error: errorRule || defaultErrorRule };
        }
        __name(compileRules, "compileRules");
        function compile(rules) {
          var result = compileRules(toRules(rules));
          return new Lexer({ start: result }, "start");
        }
        __name(compile, "compile");
        function checkStateGroup(g, name, map) {
          var state = g && (g.push || g.next);
          if (state && !map[state]) {
            throw new Error("Missing state '" + state + "' (in token '" + g.defaultType + "' of state '" + name + "')");
          }
          if (g && g.pop && +g.pop !== 1) {
            throw new Error("pop must be 1 (in token '" + g.defaultType + "' of state '" + name + "')");
          }
        }
        __name(checkStateGroup, "checkStateGroup");
        function compileStates(states, start) {
          var all = states.$all ? toRules(states.$all) : [];
          delete states.$all;
          var keys = Object.getOwnPropertyNames(states);
          if (!start)
            start = keys[0];
          var ruleMap = /* @__PURE__ */ Object.create(null);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            ruleMap[key] = toRules(states[key]).concat(all);
          }
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var rules = ruleMap[key];
            var included = /* @__PURE__ */ Object.create(null);
            for (var j = 0; j < rules.length; j++) {
              var rule = rules[j];
              if (!rule.include)
                continue;
              var splice = [j, 1];
              if (rule.include !== key && !included[rule.include]) {
                included[rule.include] = true;
                var newRules = ruleMap[rule.include];
                if (!newRules) {
                  throw new Error("Cannot include nonexistent state '" + rule.include + "' (in state '" + key + "')");
                }
                for (var k = 0; k < newRules.length; k++) {
                  var newRule = newRules[k];
                  if (rules.indexOf(newRule) !== -1)
                    continue;
                  splice.push(newRule);
                }
              }
              rules.splice.apply(rules, splice);
              j--;
            }
          }
          var map = /* @__PURE__ */ Object.create(null);
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            map[key] = compileRules(ruleMap[key], true);
          }
          for (var i = 0; i < keys.length; i++) {
            var name = keys[i];
            var state = map[name];
            var groups = state.groups;
            for (var j = 0; j < groups.length; j++) {
              checkStateGroup(groups[j], name, map);
            }
            var fastKeys = Object.getOwnPropertyNames(state.fast);
            for (var j = 0; j < fastKeys.length; j++) {
              checkStateGroup(state.fast[fastKeys[j]], name, map);
            }
          }
          return new Lexer(map, start);
        }
        __name(compileStates, "compileStates");
        function keywordTransform(map) {
          var isMap = typeof Map !== "undefined";
          var reverseMap = isMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
          var types = Object.getOwnPropertyNames(map);
          for (var i = 0; i < types.length; i++) {
            var tokenType = types[i];
            var item = map[tokenType];
            var keywordList = Array.isArray(item) ? item : [item];
            keywordList.forEach(function(keyword) {
              if (typeof keyword !== "string") {
                throw new Error("keyword must be string (in keyword '" + tokenType + "')");
              }
              if (isMap) {
                reverseMap.set(keyword, tokenType);
              } else {
                reverseMap[keyword] = tokenType;
              }
            });
          }
          return function(k) {
            return isMap ? reverseMap.get(k) : reverseMap[k];
          };
        }
        __name(keywordTransform, "keywordTransform");
        var Lexer = /* @__PURE__ */ __name(function(states, state) {
          this.startState = state;
          this.states = states;
          this.buffer = "";
          this.stack = [];
          this.reset();
        }, "Lexer");
        Lexer.prototype.reset = function(data, info) {
          this.buffer = data || "";
          this.index = 0;
          this.line = info ? info.line : 1;
          this.col = info ? info.col : 1;
          this.queuedToken = info ? info.queuedToken : null;
          this.queuedText = info ? info.queuedText : "";
          this.queuedThrow = info ? info.queuedThrow : null;
          this.setState(info ? info.state : this.startState);
          this.stack = info && info.stack ? info.stack.slice() : [];
          return this;
        };
        Lexer.prototype.save = function() {
          return {
            line: this.line,
            col: this.col,
            state: this.state,
            stack: this.stack.slice(),
            queuedToken: this.queuedToken,
            queuedText: this.queuedText,
            queuedThrow: this.queuedThrow
          };
        };
        Lexer.prototype.setState = function(state) {
          if (!state || this.state === state)
            return;
          this.state = state;
          var info = this.states[state];
          this.groups = info.groups;
          this.error = info.error;
          this.re = info.regexp;
          this.fast = info.fast;
        };
        Lexer.prototype.popState = function() {
          this.setState(this.stack.pop());
        };
        Lexer.prototype.pushState = function(state) {
          this.stack.push(this.state);
          this.setState(state);
        };
        var eat = hasSticky ? function(re2, buffer) {
          return re2.exec(buffer);
        } : function(re2, buffer) {
          var match = re2.exec(buffer);
          if (match[0].length === 0) {
            return null;
          }
          return match;
        };
        Lexer.prototype._getGroup = function(match) {
          var groupCount = this.groups.length;
          for (var i = 0; i < groupCount; i++) {
            if (match[i + 1] !== void 0) {
              return this.groups[i];
            }
          }
          throw new Error("Cannot find token type for matched text");
        };
        function tokenToString() {
          return this.value;
        }
        __name(tokenToString, "tokenToString");
        Lexer.prototype.next = function() {
          var index = this.index;
          if (this.queuedGroup) {
            var token = this._token(this.queuedGroup, this.queuedText, index);
            this.queuedGroup = null;
            this.queuedText = "";
            return token;
          }
          var buffer = this.buffer;
          if (index === buffer.length) {
            return;
          }
          var group = this.fast[buffer.charCodeAt(index)];
          if (group) {
            return this._token(group, buffer.charAt(index), index);
          }
          var re2 = this.re;
          re2.lastIndex = index;
          var match = eat(re2, buffer);
          var error = this.error;
          if (match == null) {
            return this._token(error, buffer.slice(index, buffer.length), index);
          }
          var group = this._getGroup(match);
          var text = match[0];
          if (error.fallback && match.index !== index) {
            this.queuedGroup = group;
            this.queuedText = text;
            return this._token(error, buffer.slice(index, match.index), index);
          }
          return this._token(group, text, index);
        };
        Lexer.prototype._token = function(group, text, offset) {
          var lineBreaks = 0;
          if (group.lineBreaks) {
            var matchNL = /\n/g;
            var nl2 = 1;
            if (text === "\n") {
              lineBreaks = 1;
            } else {
              while (matchNL.exec(text)) {
                lineBreaks++;
                nl2 = matchNL.lastIndex;
              }
            }
          }
          var token = {
            type: typeof group.type === "function" && group.type(text) || group.defaultType,
            value: typeof group.value === "function" ? group.value(text) : text,
            text,
            toString: tokenToString,
            offset,
            lineBreaks,
            line: this.line,
            col: this.col
          };
          var size = text.length;
          this.index += size;
          this.line += lineBreaks;
          if (lineBreaks !== 0) {
            this.col = size - nl2 + 1;
          } else {
            this.col += size;
          }
          if (group.shouldThrow) {
            var err = new Error(this.formatError(token, "invalid syntax"));
            throw err;
          }
          if (group.pop)
            this.popState();
          else if (group.push)
            this.pushState(group.push);
          else if (group.next)
            this.setState(group.next);
          return token;
        };
        if (typeof Symbol !== "undefined" && Symbol.iterator) {
          var LexerIterator = /* @__PURE__ */ __name(function(lexer) {
            this.lexer = lexer;
          }, "LexerIterator");
          LexerIterator.prototype.next = function() {
            var token = this.lexer.next();
            return { value: token, done: !token };
          };
          LexerIterator.prototype[Symbol.iterator] = function() {
            return this;
          };
          Lexer.prototype[Symbol.iterator] = function() {
            return new LexerIterator(this);
          };
        }
        Lexer.prototype.formatError = function(token, message) {
          if (token == null) {
            var text = this.buffer.slice(this.index);
            var token = {
              text,
              offset: this.index,
              lineBreaks: text.indexOf("\n") === -1 ? 0 : 1,
              line: this.line,
              col: this.col
            };
          }
          var numLinesAround = 2;
          var firstDisplayedLine = Math.max(token.line - numLinesAround, 1);
          var lastDisplayedLine = token.line + numLinesAround;
          var lastLineDigits = String(lastDisplayedLine).length;
          var displayedLines = lastNLines(
            this.buffer,
            this.line - token.line + numLinesAround + 1
          ).slice(0, 5);
          var errorLines = [];
          errorLines.push(message + " at line " + token.line + " col " + token.col + ":");
          errorLines.push("");
          for (var i = 0; i < displayedLines.length; i++) {
            var line = displayedLines[i];
            var lineNo = firstDisplayedLine + i;
            errorLines.push(pad(String(lineNo), lastLineDigits) + "  " + line);
            if (lineNo === token.line) {
              errorLines.push(pad("", lastLineDigits + token.col + 1) + "^");
            }
          }
          return errorLines.join("\n");
        };
        Lexer.prototype.clone = function() {
          return new Lexer(this.states, this.state);
        };
        Lexer.prototype.has = function(tokenType) {
          return true;
        };
        return {
          compile,
          states: compileStates,
          error: Object.freeze({ error: true }),
          fallback: Object.freeze({ fallback: true }),
          keywords: keywordTransform
        };
      });
    }
  });

  // node_modules/parseley/lib/parseley.cjs
  var require_parseley = __commonJS({
    "node_modules/parseley/lib/parseley.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var nearley = require_nearley();
      var moo = require_moo();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      __name(_interopNamespace, "_interopNamespace");
      var moo__namespace = /* @__PURE__ */ _interopNamespace(moo);
      function id(d) {
        return d[0];
      }
      __name(id, "id");
      var lexer = moo__namespace.compile({
        ws: { match: /[ \t\r\n\f]+/, lineBreaks: true },
        idn: { match: /[a-zA-Z_-][a-zA-Z0-9_-]*/ },
        hashToken: { match: /#[a-zA-Z0-9_-]+/, value: (s) => s.slice(1) },
        str1: { match: /'(?:\\['\\]|[^\n'\\])*'/, value: (s) => s.slice(1, -1) },
        str2: { match: /"(?:\\["\\]|[^\n"\\])*"/, value: (s) => s.slice(1, -1) },
        asterisk: "*",
        fullstop: ".",
        comma: ",",
        lbr: "[",
        rbr: "]",
        eq: "=",
        gt: ">",
        vbar: "|",
        plus: "+",
        tilde: "~",
        caret: "^",
        dollar: "$"
        //colon:      ':',
        //lpar:       '(',
        //rpar:       ')',
      });
      function firstTokenValue(tokens) {
        return tokens[0].value;
      }
      __name(firstTokenValue, "firstTokenValue");
      function second(tokens) {
        return tokens[1];
      }
      __name(second, "second");
      function sumSpec([a0, a1, a2], [b0, b1, b2]) {
        return [a0 + b0, a1 + b1, a2 + b2];
      }
      __name(sumSpec, "sumSpec");
      var grammar = {
        Lexer: lexer,
        ParserRules: [
          { "name": "main", "symbols": ["_", "listSelector", "_"], "postprocess": second },
          { "name": "mainNoList", "symbols": ["_", "complexSelector", "_"], "postprocess": second },
          { "name": "listSelector", "symbols": ["complexSelector"], "postprocess": ([next]) => ({ type: "list", list: [next] }) },
          { "name": "listSelector", "symbols": ["listSelector", "_", lexer.has("comma") ? { type: "comma" } : comma, "_", "complexSelector"], "postprocess": ([acc, , , , next]) => ({ type: "list", list: [...acc.list, next] }) },
          { "name": "complexSelector", "symbols": ["compoundSelector"], "postprocess": id },
          { "name": "complexSelector", "symbols": ["complexSelector", "__", "compoundSelector"], "postprocess": ([left, , right]) => ({
            type: "compound",
            list: [...right.list, { type: "combinator", combinator: " ", left, specificity: left.specificity }],
            specificity: sumSpec(left.specificity, right.specificity)
          }) },
          { "name": "complexSelector", "symbols": ["complexSelector", "_", "combinator", "_", "compoundSelector"], "postprocess": ([left, , c, , right]) => ({
            type: "compound",
            list: [...right.list, { type: "combinator", combinator: c, left, specificity: left.specificity }],
            specificity: sumSpec(left.specificity, right.specificity)
          }) },
          { "name": "combinator", "symbols": [lexer.has("gt") ? { type: "gt" } : gt], "postprocess": () => ">" },
          { "name": "combinator", "symbols": [lexer.has("plus") ? { type: "plus" } : plus], "postprocess": () => "+" },
          { "name": "combinator", "symbols": [lexer.has("tilde") ? { type: "tilde" } : tilde], "postprocess": () => "~" },
          { "name": "combinator", "symbols": [lexer.has("vbar") ? { type: "vbar" } : vbar, lexer.has("vbar") ? { type: "vbar" } : vbar], "postprocess": () => "||" },
          { "name": "compoundSelector", "symbols": ["typeSelector"], "postprocess": ([next]) => ({
            type: "compound",
            list: [next],
            specificity: next.specificity
          }) },
          { "name": "compoundSelector", "symbols": ["subclassSelector"], "postprocess": ([next]) => ({
            type: "compound",
            list: [next],
            specificity: next.specificity
          }) },
          { "name": "compoundSelector", "symbols": ["compoundSelector", "subclassSelector"], "postprocess": ([acc, next]) => ({
            type: "compound",
            list: [...acc.list, next],
            specificity: sumSpec(acc.specificity, next.specificity)
          }) },
          { "name": "subclassSelector", "symbols": ["idSelector"], "postprocess": id },
          { "name": "subclassSelector", "symbols": ["classSelector"], "postprocess": id },
          { "name": "subclassSelector", "symbols": ["attrSelector"], "postprocess": id },
          { "name": "attrSelector", "symbols": ["attrPresenceSelector"], "postprocess": id },
          { "name": "attrSelector", "symbols": ["attrValueSelector"], "postprocess": id },
          { "name": "typeSelector", "symbols": ["tagSelector"], "postprocess": id },
          { "name": "typeSelector", "symbols": ["uniSelector"], "postprocess": id },
          {
            "name": "attrPresenceSelector",
            "symbols": [lexer.has("lbr") ? { type: "lbr" } : lbr, "_", "wqname", "_", lexer.has("rbr") ? { type: "rbr" } : rbr],
            "postprocess": ([, , wqname]) => ({
              type: "attrPresence",
              name: wqname.name,
              namespace: wqname.namespace,
              specificity: [0, 1, 0]
            })
          },
          {
            "name": "attrValueSelector",
            "symbols": [lexer.has("lbr") ? { type: "lbr" } : lbr, "_", "wqname", "_", "attrMatcher", "_", "attrValue", "_", lexer.has("rbr") ? { type: "rbr" } : rbr],
            "postprocess": ([, , wqname, , matcher, , v]) => ({
              type: "attrValue",
              name: wqname.name,
              namespace: wqname.namespace,
              matcher,
              value: v.value,
              modifier: v.modifier,
              specificity: [0, 1, 0]
            })
          },
          { "name": "attrMatcher", "symbols": [lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "=" },
          { "name": "attrMatcher", "symbols": [lexer.has("tilde") ? { type: "tilde" } : tilde, lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "~=" },
          { "name": "attrMatcher", "symbols": [lexer.has("vbar") ? { type: "vbar" } : vbar, lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "|=" },
          { "name": "attrMatcher", "symbols": [lexer.has("caret") ? { type: "caret" } : caret, lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "^=" },
          { "name": "attrMatcher", "symbols": [lexer.has("dollar") ? { type: "dollar" } : dollar, lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "$=" },
          { "name": "attrMatcher", "symbols": [lexer.has("asterisk") ? { type: "asterisk" } : asterisk, lexer.has("eq") ? { type: "eq" } : eq], "postprocess": () => "*=" },
          { "name": "attrValue", "symbols": ["str"], "postprocess": ([v]) => ({ value: v, modifier: null }) },
          { "name": "attrValue", "symbols": ["idn"], "postprocess": ([v]) => ({ value: v, modifier: null }) },
          { "name": "attrValue", "symbols": ["str", "_", "attrModifier"], "postprocess": ([v, , mod]) => ({ value: v, modifier: mod }) },
          { "name": "attrValue", "symbols": ["idn", "__", "attrModifier"], "postprocess": ([v, , mod]) => ({ value: v, modifier: mod }) },
          { "name": "attrModifier", "symbols": [{ "literal": "i" }], "postprocess": () => "i" },
          { "name": "attrModifier", "symbols": [{ "literal": "I" }], "postprocess": () => "i" },
          { "name": "attrModifier", "symbols": [{ "literal": "s" }], "postprocess": () => "s" },
          { "name": "attrModifier", "symbols": [{ "literal": "S" }], "postprocess": () => "s" },
          { "name": "idSelector", "symbols": [lexer.has("hashToken") ? { type: "hashToken" } : hashToken], "postprocess": ([{ value: name }]) => ({ type: "id", name, specificity: [1, 0, 0] }) },
          { "name": "classSelector", "symbols": [lexer.has("fullstop") ? { type: "fullstop" } : fullstop, "idn"], "postprocess": ([, name]) => ({ type: "class", name, specificity: [0, 1, 0] }) },
          {
            "name": "tagSelector",
            "symbols": ["wqname"],
            "postprocess": ([wqname]) => ({
              type: "tag",
              name: wqname.name,
              namespace: wqname.namespace,
              specificity: [0, 0, 1]
            })
          },
          { "name": "uniSelector", "symbols": [lexer.has("asterisk") ? { type: "asterisk" } : asterisk], "postprocess": () => ({ type: "universal", namespace: null, specificity: [0, 0, 0] }) },
          { "name": "uniSelector", "symbols": ["ns", lexer.has("asterisk") ? { type: "asterisk" } : asterisk], "postprocess": ([ns2]) => ({ type: "universal", namespace: ns2, specificity: [0, 0, 0] }) },
          { "name": "wqname", "symbols": ["idn"], "postprocess": ([name]) => ({ name, namespace: null }) },
          { "name": "wqname", "symbols": ["ns", "idn"], "postprocess": ([ns2, name]) => ({ name, namespace: ns2 }) },
          { "name": "ns", "symbols": [lexer.has("vbar") ? { type: "vbar" } : vbar], "postprocess": () => "" },
          { "name": "ns", "symbols": ["idn", lexer.has("vbar") ? { type: "vbar" } : vbar], "postprocess": id },
          { "name": "str", "symbols": [lexer.has("str1") ? { type: "str1" } : str1], "postprocess": firstTokenValue },
          { "name": "str", "symbols": [lexer.has("str2") ? { type: "str2" } : str2], "postprocess": firstTokenValue },
          { "name": "idn", "symbols": [lexer.has("idn") ? { type: "idn" } : idn], "postprocess": firstTokenValue },
          { "name": "_$ebnf$1", "symbols": [lexer.has("ws") ? { type: "ws" } : ws], "postprocess": id },
          { "name": "_$ebnf$1", "symbols": [], "postprocess": () => null },
          { "name": "_", "symbols": ["_$ebnf$1"], "postprocess": () => null },
          { "name": "__", "symbols": [lexer.has("ws") ? { type: "ws" } : ws], "postprocess": () => null }
        ],
        ParserStart: "main"
      };
      var ast = /* @__PURE__ */ Object.freeze({
        __proto__: null
      });
      var compiledRulesNoList = { ...grammar, ParserStart: "mainNoList" };
      function parse4(str) {
        return _parse(grammar, str);
      }
      __name(parse4, "parse");
      function parse1(str) {
        return _parse(compiledRulesNoList, str);
      }
      __name(parse1, "parse1");
      function _parse(compiledRules1, str) {
        const parser = new nearley.Parser(nearley.Grammar.fromCompiled(compiledRules1));
        parser.feed(str);
        if (parser.results.length === 0) {
          throw new Error("Failed to parse - input string might be incomplete.");
        }
        return parser.results[0];
      }
      __name(_parse, "_parse");
      function serialize(selector) {
        if (!selector.type) {
          throw new Error("This is not an AST node.");
        }
        switch (selector.type) {
          case "universal":
            return _serNs(selector.namespace) + "*";
          case "tag":
            return _serNs(selector.namespace) + selector.name;
          case "class":
            return "." + selector.name;
          case "id":
            return "#" + selector.name;
          case "attrPresence":
            return `[${_serNs(selector.namespace)}${selector.name}]`;
          case "attrValue":
            return `[${_serNs(selector.namespace)}${selector.name}${selector.matcher}${_serStr(selector.value)}${selector.modifier ? selector.modifier : ""}]`;
          case "combinator":
            return serialize(selector.left) + selector.combinator;
          case "compound":
            return selector.list.reduce((acc, node) => {
              if (node.type === "combinator") {
                return serialize(node) + acc;
              } else {
                return acc + serialize(node);
              }
            }, "");
          case "list":
            return selector.list.map(serialize).join(",");
        }
      }
      __name(serialize, "serialize");
      function _serNs(ns2) {
        return ns2 || ns2 === "" ? ns2 + "|" : "";
      }
      __name(_serNs, "_serNs");
      function _serStr(str) {
        if (str.indexOf('"') === -1) {
          return `"${str}"`;
        } else if (str.indexOf("'") === -1) {
          return `'${str}'`;
        } else {
          return `"${str.replace('"', '\\"')}"`;
        }
      }
      __name(_serStr, "_serStr");
      function normalize(selector) {
        if (!selector.type) {
          throw new Error("This is not an AST node.");
        }
        switch (selector.type) {
          case "compound": {
            selector.list.forEach(normalize);
            selector.list.sort((a, b) => _compareArrays(_getSelectorPriority(a), _getSelectorPriority(b)));
            break;
          }
          case "combinator": {
            normalize(selector.left);
            break;
          }
          case "list": {
            selector.list.forEach(normalize);
            selector.list.sort((a, b) => serialize(a) < serialize(b) ? -1 : 1);
            break;
          }
        }
        return selector;
      }
      __name(normalize, "normalize");
      function _getSelectorPriority(selector) {
        switch (selector.type) {
          case "universal":
            return [1];
          case "tag":
            return [1];
          case "id":
            return [2];
          case "class":
            return [3, selector.name];
          case "attrPresence":
            return [4, serialize(selector)];
          case "attrValue":
            return [5, serialize(selector)];
          case "combinator":
            return [15, serialize(selector)];
        }
      }
      __name(_getSelectorPriority, "_getSelectorPriority");
      function compareSelectors(a, b) {
        return _compareArrays(a.specificity, b.specificity);
      }
      __name(compareSelectors, "compareSelectors");
      function compareSpecificity(a, b) {
        return _compareArrays(a, b);
      }
      __name(compareSpecificity, "compareSpecificity");
      function _compareArrays(a, b) {
        if (!Array.isArray(a) || !Array.isArray(b)) {
          throw new Error("Arguments must be arrays.");
        }
        const shorter = a.length < b.length ? a.length : b.length;
        for (let i = 0; i < shorter; i++) {
          if (a[i] === b[i]) {
            continue;
          }
          return a[i] < b[i] ? -1 : 1;
        }
        return a.length - b.length;
      }
      __name(_compareArrays, "_compareArrays");
      exports.Ast = ast;
      exports.compareSelectors = compareSelectors;
      exports.compareSpecificity = compareSpecificity;
      exports.normalize = normalize;
      exports.parse = parse4;
      exports.parse1 = parse1;
      exports.serialize = serialize;
    }
  });

  // node_modules/selderee/lib/selderee.cjs
  var require_selderee = __commonJS({
    "node_modules/selderee/lib/selderee.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var parseley = require_parseley();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      __name(_interopNamespace, "_interopNamespace");
      var parseley__namespace = /* @__PURE__ */ _interopNamespace(parseley);
      var Ast = /* @__PURE__ */ Object.freeze({
        __proto__: null
      });
      var Types = /* @__PURE__ */ Object.freeze({
        __proto__: null
      });
      var treeify = /* @__PURE__ */ __name((nodes) => "\u25BD\n" + treeifyArray(nodes, thinLines), "treeify");
      var thinLines = [["\u251C\u2500", "\u2502 "], ["\u2514\u2500", "  "]];
      var heavyLines = [["\u2520\u2500", "\u2503 "], ["\u2516\u2500", "  "]];
      var doubleLines = [["\u255F\u2500", "\u2551 "], ["\u2559\u2500", "  "]];
      function treeifyArray(nodes, tpl = heavyLines) {
        return prefixItems(tpl, nodes.map((n) => treeifyNode(n)));
      }
      __name(treeifyArray, "treeifyArray");
      function treeifyNode(node) {
        switch (node.type) {
          case "terminal": {
            const vctr = node.valueContainer;
            return `\u25C1 #${vctr.index} ${JSON.stringify(vctr.specificity)} ${vctr.value}`;
          }
          case "tagName":
            return `\u25FB Tag name
${treeifyArray(node.variants, doubleLines)}`;
          case "attrValue":
            return `\u25A3 Attr value: ${node.name}
${treeifyArray(node.matchers, doubleLines)}`;
          case "attrPresence":
            return `\u25E8 Attr presence: ${node.name}
${treeifyArray(node.cont)}`;
          case "pushElement":
            return `\u25C9 Push element: ${node.combinator}
${treeifyArray(node.cont, thinLines)}`;
          case "popElement":
            return `\u25CC Pop element
${treeifyArray(node.cont, thinLines)}`;
          case "variant":
            return `\u25C7 = ${node.value}
${treeifyArray(node.cont)}`;
          case "matcher":
            return `\u25C8 ${node.matcher} "${node.value}"${node.modifier || ""}
${treeifyArray(node.cont)}`;
        }
      }
      __name(treeifyNode, "treeifyNode");
      function prefixItems(tpl, items) {
        return items.map((item, i, { length }) => prefixItem(tpl, item, i === length - 1)).join("\n");
      }
      __name(prefixItems, "prefixItems");
      function prefixItem(tpl, item, tail = true) {
        const tpl1 = tpl[tail ? 1 : 0];
        return tpl1[0] + item.split("\n").join("\n" + tpl1[1]);
      }
      __name(prefixItem, "prefixItem");
      var TreeifyBuilder = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        treeify
      });
      var DecisionTree = class {
        /**
         * Create new DecisionTree object.
         *
         * @param input - an array containing all selectors
         * paired with associated values.
         *
         * @typeParam V - the type of values associated with selectors.
         */
        constructor(input) {
          this.branches = weave(toAstTerminalPairs(input));
        }
        /**
         * Turn this decision tree into a usable form.
         *
         * @typeParam R - return type defined by the builder function.
         *
         * @param builder - the builder function.
         *
         * @returns the decision tree in a form ready for use.
         */
        build(builder) {
          return builder(this.branches);
        }
      };
      __name(DecisionTree, "DecisionTree");
      function toAstTerminalPairs(array) {
        const len = array.length;
        const results = new Array(len);
        for (let i = 0; i < len; i++) {
          const [selectorString, val] = array[i];
          const ast = preprocess(parseley__namespace.parse1(selectorString));
          results[i] = {
            ast,
            terminal: {
              type: "terminal",
              valueContainer: { index: i, value: val, specificity: ast.specificity }
            }
          };
        }
        return results;
      }
      __name(toAstTerminalPairs, "toAstTerminalPairs");
      function preprocess(ast) {
        reduceSelectorVariants(ast);
        parseley__namespace.normalize(ast);
        return ast;
      }
      __name(preprocess, "preprocess");
      function reduceSelectorVariants(ast) {
        const newList = [];
        ast.list.forEach((sel) => {
          switch (sel.type) {
            case "class":
              newList.push({
                matcher: "~=",
                modifier: null,
                name: "class",
                namespace: null,
                specificity: sel.specificity,
                type: "attrValue",
                value: sel.name
              });
              break;
            case "id":
              newList.push({
                matcher: "=",
                modifier: null,
                name: "id",
                namespace: null,
                specificity: sel.specificity,
                type: "attrValue",
                value: sel.name
              });
              break;
            case "combinator":
              reduceSelectorVariants(sel.left);
              newList.push(sel);
              break;
            case "universal":
              break;
            default:
              newList.push(sel);
              break;
          }
        });
        ast.list = newList;
      }
      __name(reduceSelectorVariants, "reduceSelectorVariants");
      function weave(items) {
        const branches = [];
        while (items.length) {
          const topKind = findTopKey(items, (sel) => true, getSelectorKind);
          const { matches, nonmatches, empty } = breakByKind(items, topKind);
          items = nonmatches;
          if (matches.length) {
            branches.push(branchOfKind(topKind, matches));
          }
          if (empty.length) {
            branches.push(...terminate(empty));
          }
        }
        return branches;
      }
      __name(weave, "weave");
      function terminate(items) {
        const results = [];
        for (const item of items) {
          const terminal = item.terminal;
          if (terminal.type === "terminal") {
            results.push(terminal);
          } else {
            const { matches, rest } = partition(terminal.cont, (node) => node.type === "terminal");
            matches.forEach((node) => results.push(node));
            if (rest.length) {
              terminal.cont = rest;
              results.push(terminal);
            }
          }
        }
        return results;
      }
      __name(terminate, "terminate");
      function breakByKind(items, selectedKind) {
        const matches = [];
        const nonmatches = [];
        const empty = [];
        for (const item of items) {
          const simpsels = item.ast.list;
          if (simpsels.length) {
            const isMatch = simpsels.some((node) => getSelectorKind(node) === selectedKind);
            (isMatch ? matches : nonmatches).push(item);
          } else {
            empty.push(item);
          }
        }
        return { matches, nonmatches, empty };
      }
      __name(breakByKind, "breakByKind");
      function getSelectorKind(sel) {
        switch (sel.type) {
          case "attrPresence":
            return `attrPresence ${sel.name}`;
          case "attrValue":
            return `attrValue ${sel.name}`;
          case "combinator":
            return `combinator ${sel.combinator}`;
          default:
            return sel.type;
        }
      }
      __name(getSelectorKind, "getSelectorKind");
      function branchOfKind(kind, items) {
        if (kind === "tag") {
          return tagNameBranch(items);
        }
        if (kind.startsWith("attrValue ")) {
          return attrValueBranch(kind.substring(10), items);
        }
        if (kind.startsWith("attrPresence ")) {
          return attrPresenceBranch(kind.substring(13), items);
        }
        if (kind === "combinator >") {
          return combinatorBranch(">", items);
        }
        if (kind === "combinator +") {
          return combinatorBranch("+", items);
        }
        throw new Error(`Unsupported selector kind: ${kind}`);
      }
      __name(branchOfKind, "branchOfKind");
      function tagNameBranch(items) {
        const groups = spliceAndGroup(items, (x2) => x2.type === "tag", (x2) => x2.name);
        const variants = Object.entries(groups).map(([name, group]) => ({
          type: "variant",
          value: name,
          cont: weave(group.items)
        }));
        return {
          type: "tagName",
          variants
        };
      }
      __name(tagNameBranch, "tagNameBranch");
      function attrPresenceBranch(name, items) {
        for (const item of items) {
          spliceSimpleSelector(item, (x2) => x2.type === "attrPresence" && x2.name === name);
        }
        return {
          type: "attrPresence",
          name,
          cont: weave(items)
        };
      }
      __name(attrPresenceBranch, "attrPresenceBranch");
      function attrValueBranch(name, items) {
        const groups = spliceAndGroup(items, (x2) => x2.type === "attrValue" && x2.name === name, (x2) => `${x2.matcher} ${x2.modifier || ""} ${x2.value}`);
        const matchers = [];
        for (const group of Object.values(groups)) {
          const sel = group.oneSimpleSelector;
          const predicate = getAttrPredicate(sel);
          const continuation = weave(group.items);
          matchers.push({
            type: "matcher",
            matcher: sel.matcher,
            modifier: sel.modifier,
            value: sel.value,
            predicate,
            cont: continuation
          });
        }
        return {
          type: "attrValue",
          name,
          matchers
        };
      }
      __name(attrValueBranch, "attrValueBranch");
      function getAttrPredicate(sel) {
        if (sel.modifier === "i") {
          const expected = sel.value.toLowerCase();
          switch (sel.matcher) {
            case "=":
              return (actual) => expected === actual.toLowerCase();
            case "~=":
              return (actual) => actual.toLowerCase().split(/[ \t]+/).includes(expected);
            case "^=":
              return (actual) => actual.toLowerCase().startsWith(expected);
            case "$=":
              return (actual) => actual.toLowerCase().endsWith(expected);
            case "*=":
              return (actual) => actual.toLowerCase().includes(expected);
            case "|=":
              return (actual) => {
                const lower = actual.toLowerCase();
                return expected === lower || lower.startsWith(expected) && lower[expected.length] === "-";
              };
          }
        } else {
          const expected = sel.value;
          switch (sel.matcher) {
            case "=":
              return (actual) => expected === actual;
            case "~=":
              return (actual) => actual.split(/[ \t]+/).includes(expected);
            case "^=":
              return (actual) => actual.startsWith(expected);
            case "$=":
              return (actual) => actual.endsWith(expected);
            case "*=":
              return (actual) => actual.includes(expected);
            case "|=":
              return (actual) => expected === actual || actual.startsWith(expected) && actual[expected.length] === "-";
          }
        }
      }
      __name(getAttrPredicate, "getAttrPredicate");
      function combinatorBranch(combinator, items) {
        const groups = spliceAndGroup(items, (x2) => x2.type === "combinator" && x2.combinator === combinator, (x2) => parseley__namespace.serialize(x2.left));
        const leftItems = [];
        for (const group of Object.values(groups)) {
          const rightCont = weave(group.items);
          const leftAst = group.oneSimpleSelector.left;
          leftItems.push({
            ast: leftAst,
            terminal: { type: "popElement", cont: rightCont }
          });
        }
        return {
          type: "pushElement",
          combinator,
          cont: weave(leftItems)
        };
      }
      __name(combinatorBranch, "combinatorBranch");
      function spliceAndGroup(items, predicate, keyCallback) {
        const groups = {};
        while (items.length) {
          const bestKey = findTopKey(items, predicate, keyCallback);
          const bestKeyPredicate = /* @__PURE__ */ __name((sel) => predicate(sel) && keyCallback(sel) === bestKey, "bestKeyPredicate");
          const hasBestKeyPredicate = /* @__PURE__ */ __name((item) => item.ast.list.some(bestKeyPredicate), "hasBestKeyPredicate");
          const { matches, rest } = partition1(items, hasBestKeyPredicate);
          let oneSimpleSelector = null;
          for (const item of matches) {
            const splicedNode = spliceSimpleSelector(item, bestKeyPredicate);
            if (!oneSimpleSelector) {
              oneSimpleSelector = splicedNode;
            }
          }
          if (oneSimpleSelector == null) {
            throw new Error("No simple selector is found.");
          }
          groups[bestKey] = { oneSimpleSelector, items: matches };
          items = rest;
        }
        return groups;
      }
      __name(spliceAndGroup, "spliceAndGroup");
      function spliceSimpleSelector(item, predicate) {
        const simpsels = item.ast.list;
        const matches = new Array(simpsels.length);
        let firstIndex = -1;
        for (let i = simpsels.length; i-- > 0; ) {
          if (predicate(simpsels[i])) {
            matches[i] = true;
            firstIndex = i;
          }
        }
        if (firstIndex == -1) {
          throw new Error(`Couldn't find the required simple selector.`);
        }
        const result = simpsels[firstIndex];
        item.ast.list = simpsels.filter((sel, i) => !matches[i]);
        return result;
      }
      __name(spliceSimpleSelector, "spliceSimpleSelector");
      function findTopKey(items, predicate, keyCallback) {
        const candidates = {};
        for (const item of items) {
          const candidates1 = {};
          for (const node of item.ast.list.filter(predicate)) {
            candidates1[keyCallback(node)] = true;
          }
          for (const key of Object.keys(candidates1)) {
            if (candidates[key]) {
              candidates[key]++;
            } else {
              candidates[key] = 1;
            }
          }
        }
        let topKind = "";
        let topCounter = 0;
        for (const entry of Object.entries(candidates)) {
          if (entry[1] > topCounter) {
            topKind = entry[0];
            topCounter = entry[1];
          }
        }
        return topKind;
      }
      __name(findTopKey, "findTopKey");
      function partition(src, predicate) {
        const matches = [];
        const rest = [];
        for (const x2 of src) {
          if (predicate(x2)) {
            matches.push(x2);
          } else {
            rest.push(x2);
          }
        }
        return { matches, rest };
      }
      __name(partition, "partition");
      function partition1(src, predicate) {
        const matches = [];
        const rest = [];
        for (const x2 of src) {
          if (predicate(x2)) {
            matches.push(x2);
          } else {
            rest.push(x2);
          }
        }
        return { matches, rest };
      }
      __name(partition1, "partition1");
      var Picker = class {
        /**
         * Create new Picker object.
         *
         * @typeParam L - the type of HTML Element in the targeted DOM AST.
         * @typeParam V - the type of associated values.
         *
         * @param f - the function that matches an element
         * and returns all associated values.
         */
        constructor(f2) {
          this.f = f2;
        }
        /**
         * Run the selectors decision tree against one HTML Element
         * and return all matched associated values
         * along with selector specificities.
         *
         * Client code then decides how to further process them
         * (sort, filter, etc).
         *
         * @param el - an HTML Element.
         *
         * @returns all associated values along with
         * selector specificities for all matched selectors.
         */
        pickAll(el2) {
          return this.f(el2);
        }
        /**
         * Run the selectors decision tree against one HTML Element
         * and choose the value from the most specific mached selector.
         *
         * @param el - an HTML Element.
         *
         * @param preferFirst - option to define which value to choose
         * when there are multiple matches with equal specificity.
         *
         * @returns the value from the most specific mached selector
         * or `null` if nothing matched.
         */
        pick1(el2, preferFirst = false) {
          const results = this.f(el2);
          const len = results.length;
          if (len === 0) {
            return null;
          }
          if (len === 1) {
            return results[0].value;
          }
          const comparator = preferFirst ? comparatorPreferFirst : comparatorPreferLast;
          let result = results[0];
          for (let i = 1; i < len; i++) {
            const next = results[i];
            if (comparator(result, next)) {
              result = next;
            }
          }
          return result.value;
        }
      };
      __name(Picker, "Picker");
      function comparatorPreferFirst(acc, next) {
        const diff = parseley.compareSpecificity(next.specificity, acc.specificity);
        return diff > 0 || diff === 0 && next.index < acc.index;
      }
      __name(comparatorPreferFirst, "comparatorPreferFirst");
      function comparatorPreferLast(acc, next) {
        const diff = parseley.compareSpecificity(next.specificity, acc.specificity);
        return diff > 0 || diff === 0 && next.index > acc.index;
      }
      __name(comparatorPreferLast, "comparatorPreferLast");
      exports.Ast = Ast;
      exports.DecisionTree = DecisionTree;
      exports.Picker = Picker;
      exports.Treeify = TreeifyBuilder;
      exports.Types = Types;
    }
  });

  // node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.cjs
  var require_hp2_builder = __commonJS({
    "node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var domhandler = require_lib2();
      var selderee = require_selderee();
      function hp2Builder(nodes) {
        return new selderee.Picker(handleArray(nodes));
      }
      __name(hp2Builder, "hp2Builder");
      function handleArray(nodes) {
        const matchers = nodes.map(handleNode);
        return (el2, ...tail) => flatMap(matchers, (m) => m(el2, ...tail));
      }
      __name(handleArray, "handleArray");
      function handleNode(node) {
        switch (node.type) {
          case "terminal": {
            const result = [node.valueContainer];
            return (el2, ...tail) => result;
          }
          case "tagName":
            return handleTagName(node);
          case "attrValue":
            return handleAttrValueName(node);
          case "attrPresence":
            return handleAttrPresenceName(node);
          case "pushElement":
            return handlePushElementNode(node);
          case "popElement":
            return handlePopElementNode(node);
        }
      }
      __name(handleNode, "handleNode");
      function handleTagName(node) {
        const variants = {};
        for (const variant of node.variants) {
          variants[variant.value] = handleArray(variant.cont);
        }
        return (el2, ...tail) => {
          const continuation = variants[el2.name];
          return continuation ? continuation(el2, ...tail) : [];
        };
      }
      __name(handleTagName, "handleTagName");
      function handleAttrPresenceName(node) {
        const attrName = node.name;
        const continuation = handleArray(node.cont);
        return (el2, ...tail) => Object.prototype.hasOwnProperty.call(el2.attribs, attrName) ? continuation(el2, ...tail) : [];
      }
      __name(handleAttrPresenceName, "handleAttrPresenceName");
      function handleAttrValueName(node) {
        const callbacks = [];
        for (const matcher of node.matchers) {
          const predicate = matcher.predicate;
          const continuation = handleArray(matcher.cont);
          callbacks.push((attr, el2, ...tail) => predicate(attr) ? continuation(el2, ...tail) : []);
        }
        const attrName = node.name;
        return (el2, ...tail) => {
          const attr = el2.attribs[attrName];
          return attr || attr === "" ? flatMap(callbacks, (cb) => cb(attr, el2, ...tail)) : [];
        };
      }
      __name(handleAttrValueName, "handleAttrValueName");
      function handlePushElementNode(node) {
        const continuation = handleArray(node.cont);
        const leftElementGetter = node.combinator === "+" ? getPrecedingElement : getParentElement;
        return (el2, ...tail) => {
          const next = leftElementGetter(el2);
          if (next === null) {
            return [];
          }
          return continuation(next, el2, ...tail);
        };
      }
      __name(handlePushElementNode, "handlePushElementNode");
      var getPrecedingElement = /* @__PURE__ */ __name((el2) => {
        const prev = el2.prev;
        if (prev === null) {
          return null;
        }
        return domhandler.isTag(prev) ? prev : getPrecedingElement(prev);
      }, "getPrecedingElement");
      var getParentElement = /* @__PURE__ */ __name((el2) => {
        const parent = el2.parent;
        return parent && domhandler.isTag(parent) ? parent : null;
      }, "getParentElement");
      function handlePopElementNode(node) {
        const continuation = handleArray(node.cont);
        return (el2, next, ...tail) => continuation(next, ...tail);
      }
      __name(handlePopElementNode, "handlePopElementNode");
      function flatMap(items, mapper) {
        return [].concat(...amap(items, mapper));
      }
      __name(flatMap, "flatMap");
      function amap(items, mapper) {
        const len = items.length;
        const res = new Array(len);
        for (let i = 0; i < len; i++) {
          res[i] = mapper(items[i]);
        }
        return res;
      }
      __name(amap, "amap");
      exports.hp2Builder = hp2Builder;
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports, module) {
      "use strict";
      var isMergeableObject = /* @__PURE__ */ __name(function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      }, "isMergeableObject");
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      __name(isNonNullObject, "isNonNullObject");
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      __name(isSpecial, "isSpecial");
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      __name(isReactElement, "isReactElement");
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      __name(emptyTarget, "emptyTarget");
      function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
      }
      __name(cloneUnlessOtherwiseSpecified, "cloneUnlessOtherwiseSpecified");
      function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options);
        });
      }
      __name(defaultArrayMerge, "defaultArrayMerge");
      function getMergeFunction(key, options) {
        if (!options.customMerge) {
          return deepmerge;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge;
      }
      __name(getMergeFunction, "getMergeFunction");
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
          return target.propertyIsEnumerable(symbol);
        }) : [];
      }
      __name(getEnumerableOwnPropertySymbols, "getEnumerableOwnPropertySymbols");
      function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      __name(getKeys, "getKeys");
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      __name(propertyIsOnObject, "propertyIsOnObject");
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      __name(propertyIsUnsafe, "propertyIsUnsafe");
      function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
          getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
          });
        }
        getKeys(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
          }
        });
        return destination;
      }
      __name(mergeObject, "mergeObject");
      function deepmerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
          return options.arrayMerge(target, source, options);
        } else {
          return mergeObject(target, source, options);
        }
      }
      __name(deepmerge, "deepmerge");
      deepmerge.all = /* @__PURE__ */ __name(function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev, next) {
          return deepmerge(prev, next, options);
        }, {});
      }, "deepmergeAll");
      var deepmerge_1 = deepmerge;
      module.exports = deepmerge_1;
    }
  });

  // node_modules/he/he.js
  var require_he = __commonJS({
    "node_modules/he/he.js"(exports, module) {
      (function(root) {
        var freeExports = typeof exports == "object" && exports;
        var freeModule = typeof module == "object" && module && module.exports == freeExports && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
          root = freeGlobal;
        }
        var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
        var regexAsciiWhitelist = /[\x01-\x7F]/g;
        var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
        var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
        var encodeMap = { "\xAD": "shy", "\u200C": "zwnj", "\u200D": "zwj", "\u200E": "lrm", "\u2063": "ic", "\u2062": "it", "\u2061": "af", "\u200F": "rlm", "\u200B": "ZeroWidthSpace", "\u2060": "NoBreak", "\u0311": "DownBreve", "\u20DB": "tdot", "\u20DC": "DotDot", "	": "Tab", "\n": "NewLine", "\u2008": "puncsp", "\u205F": "MediumSpace", "\u2009": "thinsp", "\u200A": "hairsp", "\u2004": "emsp13", "\u2002": "ensp", "\u2005": "emsp14", "\u2003": "emsp", "\u2007": "numsp", "\xA0": "nbsp", "\u205F\u200A": "ThickSpace", "\u203E": "oline", "_": "lowbar", "\u2010": "dash", "\u2013": "ndash", "\u2014": "mdash", "\u2015": "horbar", ",": "comma", ";": "semi", "\u204F": "bsemi", ":": "colon", "\u2A74": "Colone", "!": "excl", "\xA1": "iexcl", "?": "quest", "\xBF": "iquest", ".": "period", "\u2025": "nldr", "\u2026": "mldr", "\xB7": "middot", "'": "apos", "\u2018": "lsquo", "\u2019": "rsquo", "\u201A": "sbquo", "\u2039": "lsaquo", "\u203A": "rsaquo", '"': "quot", "\u201C": "ldquo", "\u201D": "rdquo", "\u201E": "bdquo", "\xAB": "laquo", "\xBB": "raquo", "(": "lpar", ")": "rpar", "[": "lsqb", "]": "rsqb", "{": "lcub", "}": "rcub", "\u2308": "lceil", "\u2309": "rceil", "\u230A": "lfloor", "\u230B": "rfloor", "\u2985": "lopar", "\u2986": "ropar", "\u298B": "lbrke", "\u298C": "rbrke", "\u298D": "lbrkslu", "\u298E": "rbrksld", "\u298F": "lbrksld", "\u2990": "rbrkslu", "\u2991": "langd", "\u2992": "rangd", "\u2993": "lparlt", "\u2994": "rpargt", "\u2995": "gtlPar", "\u2996": "ltrPar", "\u27E6": "lobrk", "\u27E7": "robrk", "\u27E8": "lang", "\u27E9": "rang", "\u27EA": "Lang", "\u27EB": "Rang", "\u27EC": "loang", "\u27ED": "roang", "\u2772": "lbbrk", "\u2773": "rbbrk", "\u2016": "Vert", "\xA7": "sect", "\xB6": "para", "@": "commat", "*": "ast", "/": "sol", "undefined": null, "&": "amp", "#": "num", "%": "percnt", "\u2030": "permil", "\u2031": "pertenk", "\u2020": "dagger", "\u2021": "Dagger", "\u2022": "bull", "\u2043": "hybull", "\u2032": "prime", "\u2033": "Prime", "\u2034": "tprime", "\u2057": "qprime", "\u2035": "bprime", "\u2041": "caret", "`": "grave", "\xB4": "acute", "\u02DC": "tilde", "^": "Hat", "\xAF": "macr", "\u02D8": "breve", "\u02D9": "dot", "\xA8": "die", "\u02DA": "ring", "\u02DD": "dblac", "\xB8": "cedil", "\u02DB": "ogon", "\u02C6": "circ", "\u02C7": "caron", "\xB0": "deg", "\xA9": "copy", "\xAE": "reg", "\u2117": "copysr", "\u2118": "wp", "\u211E": "rx", "\u2127": "mho", "\u2129": "iiota", "\u2190": "larr", "\u219A": "nlarr", "\u2192": "rarr", "\u219B": "nrarr", "\u2191": "uarr", "\u2193": "darr", "\u2194": "harr", "\u21AE": "nharr", "\u2195": "varr", "\u2196": "nwarr", "\u2197": "nearr", "\u2198": "searr", "\u2199": "swarr", "\u219D": "rarrw", "\u219D\u0338": "nrarrw", "\u219E": "Larr", "\u219F": "Uarr", "\u21A0": "Rarr", "\u21A1": "Darr", "\u21A2": "larrtl", "\u21A3": "rarrtl", "\u21A4": "mapstoleft", "\u21A5": "mapstoup", "\u21A6": "map", "\u21A7": "mapstodown", "\u21A9": "larrhk", "\u21AA": "rarrhk", "\u21AB": "larrlp", "\u21AC": "rarrlp", "\u21AD": "harrw", "\u21B0": "lsh", "\u21B1": "rsh", "\u21B2": "ldsh", "\u21B3": "rdsh", "\u21B5": "crarr", "\u21B6": "cularr", "\u21B7": "curarr", "\u21BA": "olarr", "\u21BB": "orarr", "\u21BC": "lharu", "\u21BD": "lhard", "\u21BE": "uharr", "\u21BF": "uharl", "\u21C0": "rharu", "\u21C1": "rhard", "\u21C2": "dharr", "\u21C3": "dharl", "\u21C4": "rlarr", "\u21C5": "udarr", "\u21C6": "lrarr", "\u21C7": "llarr", "\u21C8": "uuarr", "\u21C9": "rrarr", "\u21CA": "ddarr", "\u21CB": "lrhar", "\u21CC": "rlhar", "\u21D0": "lArr", "\u21CD": "nlArr", "\u21D1": "uArr", "\u21D2": "rArr", "\u21CF": "nrArr", "\u21D3": "dArr", "\u21D4": "iff", "\u21CE": "nhArr", "\u21D5": "vArr", "\u21D6": "nwArr", "\u21D7": "neArr", "\u21D8": "seArr", "\u21D9": "swArr", "\u21DA": "lAarr", "\u21DB": "rAarr", "\u21DD": "zigrarr", "\u21E4": "larrb", "\u21E5": "rarrb", "\u21F5": "duarr", "\u21FD": "loarr", "\u21FE": "roarr", "\u21FF": "hoarr", "\u2200": "forall", "\u2201": "comp", "\u2202": "part", "\u2202\u0338": "npart", "\u2203": "exist", "\u2204": "nexist", "\u2205": "empty", "\u2207": "Del", "\u2208": "in", "\u2209": "notin", "\u220B": "ni", "\u220C": "notni", "\u03F6": "bepsi", "\u220F": "prod", "\u2210": "coprod", "\u2211": "sum", "+": "plus", "\xB1": "pm", "\xF7": "div", "\xD7": "times", "<": "lt", "\u226E": "nlt", "<\u20D2": "nvlt", "=": "equals", "\u2260": "ne", "=\u20E5": "bne", "\u2A75": "Equal", ">": "gt", "\u226F": "ngt", ">\u20D2": "nvgt", "\xAC": "not", "|": "vert", "\xA6": "brvbar", "\u2212": "minus", "\u2213": "mp", "\u2214": "plusdo", "\u2044": "frasl", "\u2216": "setmn", "\u2217": "lowast", "\u2218": "compfn", "\u221A": "Sqrt", "\u221D": "prop", "\u221E": "infin", "\u221F": "angrt", "\u2220": "ang", "\u2220\u20D2": "nang", "\u2221": "angmsd", "\u2222": "angsph", "\u2223": "mid", "\u2224": "nmid", "\u2225": "par", "\u2226": "npar", "\u2227": "and", "\u2228": "or", "\u2229": "cap", "\u2229\uFE00": "caps", "\u222A": "cup", "\u222A\uFE00": "cups", "\u222B": "int", "\u222C": "Int", "\u222D": "tint", "\u2A0C": "qint", "\u222E": "oint", "\u222F": "Conint", "\u2230": "Cconint", "\u2231": "cwint", "\u2232": "cwconint", "\u2233": "awconint", "\u2234": "there4", "\u2235": "becaus", "\u2236": "ratio", "\u2237": "Colon", "\u2238": "minusd", "\u223A": "mDDot", "\u223B": "homtht", "\u223C": "sim", "\u2241": "nsim", "\u223C\u20D2": "nvsim", "\u223D": "bsim", "\u223D\u0331": "race", "\u223E": "ac", "\u223E\u0333": "acE", "\u223F": "acd", "\u2240": "wr", "\u2242": "esim", "\u2242\u0338": "nesim", "\u2243": "sime", "\u2244": "nsime", "\u2245": "cong", "\u2247": "ncong", "\u2246": "simne", "\u2248": "ap", "\u2249": "nap", "\u224A": "ape", "\u224B": "apid", "\u224B\u0338": "napid", "\u224C": "bcong", "\u224D": "CupCap", "\u226D": "NotCupCap", "\u224D\u20D2": "nvap", "\u224E": "bump", "\u224E\u0338": "nbump", "\u224F": "bumpe", "\u224F\u0338": "nbumpe", "\u2250": "doteq", "\u2250\u0338": "nedot", "\u2251": "eDot", "\u2252": "efDot", "\u2253": "erDot", "\u2254": "colone", "\u2255": "ecolon", "\u2256": "ecir", "\u2257": "cire", "\u2259": "wedgeq", "\u225A": "veeeq", "\u225C": "trie", "\u225F": "equest", "\u2261": "equiv", "\u2262": "nequiv", "\u2261\u20E5": "bnequiv", "\u2264": "le", "\u2270": "nle", "\u2264\u20D2": "nvle", "\u2265": "ge", "\u2271": "nge", "\u2265\u20D2": "nvge", "\u2266": "lE", "\u2266\u0338": "nlE", "\u2267": "gE", "\u2267\u0338": "ngE", "\u2268\uFE00": "lvnE", "\u2268": "lnE", "\u2269": "gnE", "\u2269\uFE00": "gvnE", "\u226A": "ll", "\u226A\u0338": "nLtv", "\u226A\u20D2": "nLt", "\u226B": "gg", "\u226B\u0338": "nGtv", "\u226B\u20D2": "nGt", "\u226C": "twixt", "\u2272": "lsim", "\u2274": "nlsim", "\u2273": "gsim", "\u2275": "ngsim", "\u2276": "lg", "\u2278": "ntlg", "\u2277": "gl", "\u2279": "ntgl", "\u227A": "pr", "\u2280": "npr", "\u227B": "sc", "\u2281": "nsc", "\u227C": "prcue", "\u22E0": "nprcue", "\u227D": "sccue", "\u22E1": "nsccue", "\u227E": "prsim", "\u227F": "scsim", "\u227F\u0338": "NotSucceedsTilde", "\u2282": "sub", "\u2284": "nsub", "\u2282\u20D2": "vnsub", "\u2283": "sup", "\u2285": "nsup", "\u2283\u20D2": "vnsup", "\u2286": "sube", "\u2288": "nsube", "\u2287": "supe", "\u2289": "nsupe", "\u228A\uFE00": "vsubne", "\u228A": "subne", "\u228B\uFE00": "vsupne", "\u228B": "supne", "\u228D": "cupdot", "\u228E": "uplus", "\u228F": "sqsub", "\u228F\u0338": "NotSquareSubset", "\u2290": "sqsup", "\u2290\u0338": "NotSquareSuperset", "\u2291": "sqsube", "\u22E2": "nsqsube", "\u2292": "sqsupe", "\u22E3": "nsqsupe", "\u2293": "sqcap", "\u2293\uFE00": "sqcaps", "\u2294": "sqcup", "\u2294\uFE00": "sqcups", "\u2295": "oplus", "\u2296": "ominus", "\u2297": "otimes", "\u2298": "osol", "\u2299": "odot", "\u229A": "ocir", "\u229B": "oast", "\u229D": "odash", "\u229E": "plusb", "\u229F": "minusb", "\u22A0": "timesb", "\u22A1": "sdotb", "\u22A2": "vdash", "\u22AC": "nvdash", "\u22A3": "dashv", "\u22A4": "top", "\u22A5": "bot", "\u22A7": "models", "\u22A8": "vDash", "\u22AD": "nvDash", "\u22A9": "Vdash", "\u22AE": "nVdash", "\u22AA": "Vvdash", "\u22AB": "VDash", "\u22AF": "nVDash", "\u22B0": "prurel", "\u22B2": "vltri", "\u22EA": "nltri", "\u22B3": "vrtri", "\u22EB": "nrtri", "\u22B4": "ltrie", "\u22EC": "nltrie", "\u22B4\u20D2": "nvltrie", "\u22B5": "rtrie", "\u22ED": "nrtrie", "\u22B5\u20D2": "nvrtrie", "\u22B6": "origof", "\u22B7": "imof", "\u22B8": "mumap", "\u22B9": "hercon", "\u22BA": "intcal", "\u22BB": "veebar", "\u22BD": "barvee", "\u22BE": "angrtvb", "\u22BF": "lrtri", "\u22C0": "Wedge", "\u22C1": "Vee", "\u22C2": "xcap", "\u22C3": "xcup", "\u22C4": "diam", "\u22C5": "sdot", "\u22C6": "Star", "\u22C7": "divonx", "\u22C8": "bowtie", "\u22C9": "ltimes", "\u22CA": "rtimes", "\u22CB": "lthree", "\u22CC": "rthree", "\u22CD": "bsime", "\u22CE": "cuvee", "\u22CF": "cuwed", "\u22D0": "Sub", "\u22D1": "Sup", "\u22D2": "Cap", "\u22D3": "Cup", "\u22D4": "fork", "\u22D5": "epar", "\u22D6": "ltdot", "\u22D7": "gtdot", "\u22D8": "Ll", "\u22D8\u0338": "nLl", "\u22D9": "Gg", "\u22D9\u0338": "nGg", "\u22DA\uFE00": "lesg", "\u22DA": "leg", "\u22DB": "gel", "\u22DB\uFE00": "gesl", "\u22DE": "cuepr", "\u22DF": "cuesc", "\u22E6": "lnsim", "\u22E7": "gnsim", "\u22E8": "prnsim", "\u22E9": "scnsim", "\u22EE": "vellip", "\u22EF": "ctdot", "\u22F0": "utdot", "\u22F1": "dtdot", "\u22F2": "disin", "\u22F3": "isinsv", "\u22F4": "isins", "\u22F5": "isindot", "\u22F5\u0338": "notindot", "\u22F6": "notinvc", "\u22F7": "notinvb", "\u22F9": "isinE", "\u22F9\u0338": "notinE", "\u22FA": "nisd", "\u22FB": "xnis", "\u22FC": "nis", "\u22FD": "notnivc", "\u22FE": "notnivb", "\u2305": "barwed", "\u2306": "Barwed", "\u230C": "drcrop", "\u230D": "dlcrop", "\u230E": "urcrop", "\u230F": "ulcrop", "\u2310": "bnot", "\u2312": "profline", "\u2313": "profsurf", "\u2315": "telrec", "\u2316": "target", "\u231C": "ulcorn", "\u231D": "urcorn", "\u231E": "dlcorn", "\u231F": "drcorn", "\u2322": "frown", "\u2323": "smile", "\u232D": "cylcty", "\u232E": "profalar", "\u2336": "topbot", "\u233D": "ovbar", "\u233F": "solbar", "\u237C": "angzarr", "\u23B0": "lmoust", "\u23B1": "rmoust", "\u23B4": "tbrk", "\u23B5": "bbrk", "\u23B6": "bbrktbrk", "\u23DC": "OverParenthesis", "\u23DD": "UnderParenthesis", "\u23DE": "OverBrace", "\u23DF": "UnderBrace", "\u23E2": "trpezium", "\u23E7": "elinters", "\u2423": "blank", "\u2500": "boxh", "\u2502": "boxv", "\u250C": "boxdr", "\u2510": "boxdl", "\u2514": "boxur", "\u2518": "boxul", "\u251C": "boxvr", "\u2524": "boxvl", "\u252C": "boxhd", "\u2534": "boxhu", "\u253C": "boxvh", "\u2550": "boxH", "\u2551": "boxV", "\u2552": "boxdR", "\u2553": "boxDr", "\u2554": "boxDR", "\u2555": "boxdL", "\u2556": "boxDl", "\u2557": "boxDL", "\u2558": "boxuR", "\u2559": "boxUr", "\u255A": "boxUR", "\u255B": "boxuL", "\u255C": "boxUl", "\u255D": "boxUL", "\u255E": "boxvR", "\u255F": "boxVr", "\u2560": "boxVR", "\u2561": "boxvL", "\u2562": "boxVl", "\u2563": "boxVL", "\u2564": "boxHd", "\u2565": "boxhD", "\u2566": "boxHD", "\u2567": "boxHu", "\u2568": "boxhU", "\u2569": "boxHU", "\u256A": "boxvH", "\u256B": "boxVh", "\u256C": "boxVH", "\u2580": "uhblk", "\u2584": "lhblk", "\u2588": "block", "\u2591": "blk14", "\u2592": "blk12", "\u2593": "blk34", "\u25A1": "squ", "\u25AA": "squf", "\u25AB": "EmptyVerySmallSquare", "\u25AD": "rect", "\u25AE": "marker", "\u25B1": "fltns", "\u25B3": "xutri", "\u25B4": "utrif", "\u25B5": "utri", "\u25B8": "rtrif", "\u25B9": "rtri", "\u25BD": "xdtri", "\u25BE": "dtrif", "\u25BF": "dtri", "\u25C2": "ltrif", "\u25C3": "ltri", "\u25CA": "loz", "\u25CB": "cir", "\u25EC": "tridot", "\u25EF": "xcirc", "\u25F8": "ultri", "\u25F9": "urtri", "\u25FA": "lltri", "\u25FB": "EmptySmallSquare", "\u25FC": "FilledSmallSquare", "\u2605": "starf", "\u2606": "star", "\u260E": "phone", "\u2640": "female", "\u2642": "male", "\u2660": "spades", "\u2663": "clubs", "\u2665": "hearts", "\u2666": "diams", "\u266A": "sung", "\u2713": "check", "\u2717": "cross", "\u2720": "malt", "\u2736": "sext", "\u2758": "VerticalSeparator", "\u27C8": "bsolhsub", "\u27C9": "suphsol", "\u27F5": "xlarr", "\u27F6": "xrarr", "\u27F7": "xharr", "\u27F8": "xlArr", "\u27F9": "xrArr", "\u27FA": "xhArr", "\u27FC": "xmap", "\u27FF": "dzigrarr", "\u2902": "nvlArr", "\u2903": "nvrArr", "\u2904": "nvHarr", "\u2905": "Map", "\u290C": "lbarr", "\u290D": "rbarr", "\u290E": "lBarr", "\u290F": "rBarr", "\u2910": "RBarr", "\u2911": "DDotrahd", "\u2912": "UpArrowBar", "\u2913": "DownArrowBar", "\u2916": "Rarrtl", "\u2919": "latail", "\u291A": "ratail", "\u291B": "lAtail", "\u291C": "rAtail", "\u291D": "larrfs", "\u291E": "rarrfs", "\u291F": "larrbfs", "\u2920": "rarrbfs", "\u2923": "nwarhk", "\u2924": "nearhk", "\u2925": "searhk", "\u2926": "swarhk", "\u2927": "nwnear", "\u2928": "toea", "\u2929": "tosa", "\u292A": "swnwar", "\u2933": "rarrc", "\u2933\u0338": "nrarrc", "\u2935": "cudarrr", "\u2936": "ldca", "\u2937": "rdca", "\u2938": "cudarrl", "\u2939": "larrpl", "\u293C": "curarrm", "\u293D": "cularrp", "\u2945": "rarrpl", "\u2948": "harrcir", "\u2949": "Uarrocir", "\u294A": "lurdshar", "\u294B": "ldrushar", "\u294E": "LeftRightVector", "\u294F": "RightUpDownVector", "\u2950": "DownLeftRightVector", "\u2951": "LeftUpDownVector", "\u2952": "LeftVectorBar", "\u2953": "RightVectorBar", "\u2954": "RightUpVectorBar", "\u2955": "RightDownVectorBar", "\u2956": "DownLeftVectorBar", "\u2957": "DownRightVectorBar", "\u2958": "LeftUpVectorBar", "\u2959": "LeftDownVectorBar", "\u295A": "LeftTeeVector", "\u295B": "RightTeeVector", "\u295C": "RightUpTeeVector", "\u295D": "RightDownTeeVector", "\u295E": "DownLeftTeeVector", "\u295F": "DownRightTeeVector", "\u2960": "LeftUpTeeVector", "\u2961": "LeftDownTeeVector", "\u2962": "lHar", "\u2963": "uHar", "\u2964": "rHar", "\u2965": "dHar", "\u2966": "luruhar", "\u2967": "ldrdhar", "\u2968": "ruluhar", "\u2969": "rdldhar", "\u296A": "lharul", "\u296B": "llhard", "\u296C": "rharul", "\u296D": "lrhard", "\u296E": "udhar", "\u296F": "duhar", "\u2970": "RoundImplies", "\u2971": "erarr", "\u2972": "simrarr", "\u2973": "larrsim", "\u2974": "rarrsim", "\u2975": "rarrap", "\u2976": "ltlarr", "\u2978": "gtrarr", "\u2979": "subrarr", "\u297B": "suplarr", "\u297C": "lfisht", "\u297D": "rfisht", "\u297E": "ufisht", "\u297F": "dfisht", "\u299A": "vzigzag", "\u299C": "vangrt", "\u299D": "angrtvbd", "\u29A4": "ange", "\u29A5": "range", "\u29A6": "dwangle", "\u29A7": "uwangle", "\u29A8": "angmsdaa", "\u29A9": "angmsdab", "\u29AA": "angmsdac", "\u29AB": "angmsdad", "\u29AC": "angmsdae", "\u29AD": "angmsdaf", "\u29AE": "angmsdag", "\u29AF": "angmsdah", "\u29B0": "bemptyv", "\u29B1": "demptyv", "\u29B2": "cemptyv", "\u29B3": "raemptyv", "\u29B4": "laemptyv", "\u29B5": "ohbar", "\u29B6": "omid", "\u29B7": "opar", "\u29B9": "operp", "\u29BB": "olcross", "\u29BC": "odsold", "\u29BE": "olcir", "\u29BF": "ofcir", "\u29C0": "olt", "\u29C1": "ogt", "\u29C2": "cirscir", "\u29C3": "cirE", "\u29C4": "solb", "\u29C5": "bsolb", "\u29C9": "boxbox", "\u29CD": "trisb", "\u29CE": "rtriltri", "\u29CF": "LeftTriangleBar", "\u29CF\u0338": "NotLeftTriangleBar", "\u29D0": "RightTriangleBar", "\u29D0\u0338": "NotRightTriangleBar", "\u29DC": "iinfin", "\u29DD": "infintie", "\u29DE": "nvinfin", "\u29E3": "eparsl", "\u29E4": "smeparsl", "\u29E5": "eqvparsl", "\u29EB": "lozf", "\u29F4": "RuleDelayed", "\u29F6": "dsol", "\u2A00": "xodot", "\u2A01": "xoplus", "\u2A02": "xotime", "\u2A04": "xuplus", "\u2A06": "xsqcup", "\u2A0D": "fpartint", "\u2A10": "cirfnint", "\u2A11": "awint", "\u2A12": "rppolint", "\u2A13": "scpolint", "\u2A14": "npolint", "\u2A15": "pointint", "\u2A16": "quatint", "\u2A17": "intlarhk", "\u2A22": "pluscir", "\u2A23": "plusacir", "\u2A24": "simplus", "\u2A25": "plusdu", "\u2A26": "plussim", "\u2A27": "plustwo", "\u2A29": "mcomma", "\u2A2A": "minusdu", "\u2A2D": "loplus", "\u2A2E": "roplus", "\u2A2F": "Cross", "\u2A30": "timesd", "\u2A31": "timesbar", "\u2A33": "smashp", "\u2A34": "lotimes", "\u2A35": "rotimes", "\u2A36": "otimesas", "\u2A37": "Otimes", "\u2A38": "odiv", "\u2A39": "triplus", "\u2A3A": "triminus", "\u2A3B": "tritime", "\u2A3C": "iprod", "\u2A3F": "amalg", "\u2A40": "capdot", "\u2A42": "ncup", "\u2A43": "ncap", "\u2A44": "capand", "\u2A45": "cupor", "\u2A46": "cupcap", "\u2A47": "capcup", "\u2A48": "cupbrcap", "\u2A49": "capbrcup", "\u2A4A": "cupcup", "\u2A4B": "capcap", "\u2A4C": "ccups", "\u2A4D": "ccaps", "\u2A50": "ccupssm", "\u2A53": "And", "\u2A54": "Or", "\u2A55": "andand", "\u2A56": "oror", "\u2A57": "orslope", "\u2A58": "andslope", "\u2A5A": "andv", "\u2A5B": "orv", "\u2A5C": "andd", "\u2A5D": "ord", "\u2A5F": "wedbar", "\u2A66": "sdote", "\u2A6A": "simdot", "\u2A6D": "congdot", "\u2A6D\u0338": "ncongdot", "\u2A6E": "easter", "\u2A6F": "apacir", "\u2A70": "apE", "\u2A70\u0338": "napE", "\u2A71": "eplus", "\u2A72": "pluse", "\u2A73": "Esim", "\u2A77": "eDDot", "\u2A78": "equivDD", "\u2A79": "ltcir", "\u2A7A": "gtcir", "\u2A7B": "ltquest", "\u2A7C": "gtquest", "\u2A7D": "les", "\u2A7D\u0338": "nles", "\u2A7E": "ges", "\u2A7E\u0338": "nges", "\u2A7F": "lesdot", "\u2A80": "gesdot", "\u2A81": "lesdoto", "\u2A82": "gesdoto", "\u2A83": "lesdotor", "\u2A84": "gesdotol", "\u2A85": "lap", "\u2A86": "gap", "\u2A87": "lne", "\u2A88": "gne", "\u2A89": "lnap", "\u2A8A": "gnap", "\u2A8B": "lEg", "\u2A8C": "gEl", "\u2A8D": "lsime", "\u2A8E": "gsime", "\u2A8F": "lsimg", "\u2A90": "gsiml", "\u2A91": "lgE", "\u2A92": "glE", "\u2A93": "lesges", "\u2A94": "gesles", "\u2A95": "els", "\u2A96": "egs", "\u2A97": "elsdot", "\u2A98": "egsdot", "\u2A99": "el", "\u2A9A": "eg", "\u2A9D": "siml", "\u2A9E": "simg", "\u2A9F": "simlE", "\u2AA0": "simgE", "\u2AA1": "LessLess", "\u2AA1\u0338": "NotNestedLessLess", "\u2AA2": "GreaterGreater", "\u2AA2\u0338": "NotNestedGreaterGreater", "\u2AA4": "glj", "\u2AA5": "gla", "\u2AA6": "ltcc", "\u2AA7": "gtcc", "\u2AA8": "lescc", "\u2AA9": "gescc", "\u2AAA": "smt", "\u2AAB": "lat", "\u2AAC": "smte", "\u2AAC\uFE00": "smtes", "\u2AAD": "late", "\u2AAD\uFE00": "lates", "\u2AAE": "bumpE", "\u2AAF": "pre", "\u2AAF\u0338": "npre", "\u2AB0": "sce", "\u2AB0\u0338": "nsce", "\u2AB3": "prE", "\u2AB4": "scE", "\u2AB5": "prnE", "\u2AB6": "scnE", "\u2AB7": "prap", "\u2AB8": "scap", "\u2AB9": "prnap", "\u2ABA": "scnap", "\u2ABB": "Pr", "\u2ABC": "Sc", "\u2ABD": "subdot", "\u2ABE": "supdot", "\u2ABF": "subplus", "\u2AC0": "supplus", "\u2AC1": "submult", "\u2AC2": "supmult", "\u2AC3": "subedot", "\u2AC4": "supedot", "\u2AC5": "subE", "\u2AC5\u0338": "nsubE", "\u2AC6": "supE", "\u2AC6\u0338": "nsupE", "\u2AC7": "subsim", "\u2AC8": "supsim", "\u2ACB\uFE00": "vsubnE", "\u2ACB": "subnE", "\u2ACC\uFE00": "vsupnE", "\u2ACC": "supnE", "\u2ACF": "csub", "\u2AD0": "csup", "\u2AD1": "csube", "\u2AD2": "csupe", "\u2AD3": "subsup", "\u2AD4": "supsub", "\u2AD5": "subsub", "\u2AD6": "supsup", "\u2AD7": "suphsub", "\u2AD8": "supdsub", "\u2AD9": "forkv", "\u2ADA": "topfork", "\u2ADB": "mlcp", "\u2AE4": "Dashv", "\u2AE6": "Vdashl", "\u2AE7": "Barv", "\u2AE8": "vBar", "\u2AE9": "vBarv", "\u2AEB": "Vbar", "\u2AEC": "Not", "\u2AED": "bNot", "\u2AEE": "rnmid", "\u2AEF": "cirmid", "\u2AF0": "midcir", "\u2AF1": "topcir", "\u2AF2": "nhpar", "\u2AF3": "parsim", "\u2AFD": "parsl", "\u2AFD\u20E5": "nparsl", "\u266D": "flat", "\u266E": "natur", "\u266F": "sharp", "\xA4": "curren", "\xA2": "cent", "$": "dollar", "\xA3": "pound", "\xA5": "yen", "\u20AC": "euro", "\xB9": "sup1", "\xBD": "half", "\u2153": "frac13", "\xBC": "frac14", "\u2155": "frac15", "\u2159": "frac16", "\u215B": "frac18", "\xB2": "sup2", "\u2154": "frac23", "\u2156": "frac25", "\xB3": "sup3", "\xBE": "frac34", "\u2157": "frac35", "\u215C": "frac38", "\u2158": "frac45", "\u215A": "frac56", "\u215D": "frac58", "\u215E": "frac78", "\u{1D4B6}": "ascr", "\u{1D552}": "aopf", "\u{1D51E}": "afr", "\u{1D538}": "Aopf", "\u{1D504}": "Afr", "\u{1D49C}": "Ascr", "\xAA": "ordf", "\xE1": "aacute", "\xC1": "Aacute", "\xE0": "agrave", "\xC0": "Agrave", "\u0103": "abreve", "\u0102": "Abreve", "\xE2": "acirc", "\xC2": "Acirc", "\xE5": "aring", "\xC5": "angst", "\xE4": "auml", "\xC4": "Auml", "\xE3": "atilde", "\xC3": "Atilde", "\u0105": "aogon", "\u0104": "Aogon", "\u0101": "amacr", "\u0100": "Amacr", "\xE6": "aelig", "\xC6": "AElig", "\u{1D4B7}": "bscr", "\u{1D553}": "bopf", "\u{1D51F}": "bfr", "\u{1D539}": "Bopf", "\u212C": "Bscr", "\u{1D505}": "Bfr", "\u{1D520}": "cfr", "\u{1D4B8}": "cscr", "\u{1D554}": "copf", "\u212D": "Cfr", "\u{1D49E}": "Cscr", "\u2102": "Copf", "\u0107": "cacute", "\u0106": "Cacute", "\u0109": "ccirc", "\u0108": "Ccirc", "\u010D": "ccaron", "\u010C": "Ccaron", "\u010B": "cdot", "\u010A": "Cdot", "\xE7": "ccedil", "\xC7": "Ccedil", "\u2105": "incare", "\u{1D521}": "dfr", "\u2146": "dd", "\u{1D555}": "dopf", "\u{1D4B9}": "dscr", "\u{1D49F}": "Dscr", "\u{1D507}": "Dfr", "\u2145": "DD", "\u{1D53B}": "Dopf", "\u010F": "dcaron", "\u010E": "Dcaron", "\u0111": "dstrok", "\u0110": "Dstrok", "\xF0": "eth", "\xD0": "ETH", "\u2147": "ee", "\u212F": "escr", "\u{1D522}": "efr", "\u{1D556}": "eopf", "\u2130": "Escr", "\u{1D508}": "Efr", "\u{1D53C}": "Eopf", "\xE9": "eacute", "\xC9": "Eacute", "\xE8": "egrave", "\xC8": "Egrave", "\xEA": "ecirc", "\xCA": "Ecirc", "\u011B": "ecaron", "\u011A": "Ecaron", "\xEB": "euml", "\xCB": "Euml", "\u0117": "edot", "\u0116": "Edot", "\u0119": "eogon", "\u0118": "Eogon", "\u0113": "emacr", "\u0112": "Emacr", "\u{1D523}": "ffr", "\u{1D557}": "fopf", "\u{1D4BB}": "fscr", "\u{1D509}": "Ffr", "\u{1D53D}": "Fopf", "\u2131": "Fscr", "\uFB00": "fflig", "\uFB03": "ffilig", "\uFB04": "ffllig", "\uFB01": "filig", "fj": "fjlig", "\uFB02": "fllig", "\u0192": "fnof", "\u210A": "gscr", "\u{1D558}": "gopf", "\u{1D524}": "gfr", "\u{1D4A2}": "Gscr", "\u{1D53E}": "Gopf", "\u{1D50A}": "Gfr", "\u01F5": "gacute", "\u011F": "gbreve", "\u011E": "Gbreve", "\u011D": "gcirc", "\u011C": "Gcirc", "\u0121": "gdot", "\u0120": "Gdot", "\u0122": "Gcedil", "\u{1D525}": "hfr", "\u210E": "planckh", "\u{1D4BD}": "hscr", "\u{1D559}": "hopf", "\u210B": "Hscr", "\u210C": "Hfr", "\u210D": "Hopf", "\u0125": "hcirc", "\u0124": "Hcirc", "\u210F": "hbar", "\u0127": "hstrok", "\u0126": "Hstrok", "\u{1D55A}": "iopf", "\u{1D526}": "ifr", "\u{1D4BE}": "iscr", "\u2148": "ii", "\u{1D540}": "Iopf", "\u2110": "Iscr", "\u2111": "Im", "\xED": "iacute", "\xCD": "Iacute", "\xEC": "igrave", "\xCC": "Igrave", "\xEE": "icirc", "\xCE": "Icirc", "\xEF": "iuml", "\xCF": "Iuml", "\u0129": "itilde", "\u0128": "Itilde", "\u0130": "Idot", "\u012F": "iogon", "\u012E": "Iogon", "\u012B": "imacr", "\u012A": "Imacr", "\u0133": "ijlig", "\u0132": "IJlig", "\u0131": "imath", "\u{1D4BF}": "jscr", "\u{1D55B}": "jopf", "\u{1D527}": "jfr", "\u{1D4A5}": "Jscr", "\u{1D50D}": "Jfr", "\u{1D541}": "Jopf", "\u0135": "jcirc", "\u0134": "Jcirc", "\u0237": "jmath", "\u{1D55C}": "kopf", "\u{1D4C0}": "kscr", "\u{1D528}": "kfr", "\u{1D4A6}": "Kscr", "\u{1D542}": "Kopf", "\u{1D50E}": "Kfr", "\u0137": "kcedil", "\u0136": "Kcedil", "\u{1D529}": "lfr", "\u{1D4C1}": "lscr", "\u2113": "ell", "\u{1D55D}": "lopf", "\u2112": "Lscr", "\u{1D50F}": "Lfr", "\u{1D543}": "Lopf", "\u013A": "lacute", "\u0139": "Lacute", "\u013E": "lcaron", "\u013D": "Lcaron", "\u013C": "lcedil", "\u013B": "Lcedil", "\u0142": "lstrok", "\u0141": "Lstrok", "\u0140": "lmidot", "\u013F": "Lmidot", "\u{1D52A}": "mfr", "\u{1D55E}": "mopf", "\u{1D4C2}": "mscr", "\u{1D510}": "Mfr", "\u{1D544}": "Mopf", "\u2133": "Mscr", "\u{1D52B}": "nfr", "\u{1D55F}": "nopf", "\u{1D4C3}": "nscr", "\u2115": "Nopf", "\u{1D4A9}": "Nscr", "\u{1D511}": "Nfr", "\u0144": "nacute", "\u0143": "Nacute", "\u0148": "ncaron", "\u0147": "Ncaron", "\xF1": "ntilde", "\xD1": "Ntilde", "\u0146": "ncedil", "\u0145": "Ncedil", "\u2116": "numero", "\u014B": "eng", "\u014A": "ENG", "\u{1D560}": "oopf", "\u{1D52C}": "ofr", "\u2134": "oscr", "\u{1D4AA}": "Oscr", "\u{1D512}": "Ofr", "\u{1D546}": "Oopf", "\xBA": "ordm", "\xF3": "oacute", "\xD3": "Oacute", "\xF2": "ograve", "\xD2": "Ograve", "\xF4": "ocirc", "\xD4": "Ocirc", "\xF6": "ouml", "\xD6": "Ouml", "\u0151": "odblac", "\u0150": "Odblac", "\xF5": "otilde", "\xD5": "Otilde", "\xF8": "oslash", "\xD8": "Oslash", "\u014D": "omacr", "\u014C": "Omacr", "\u0153": "oelig", "\u0152": "OElig", "\u{1D52D}": "pfr", "\u{1D4C5}": "pscr", "\u{1D561}": "popf", "\u2119": "Popf", "\u{1D513}": "Pfr", "\u{1D4AB}": "Pscr", "\u{1D562}": "qopf", "\u{1D52E}": "qfr", "\u{1D4C6}": "qscr", "\u{1D4AC}": "Qscr", "\u{1D514}": "Qfr", "\u211A": "Qopf", "\u0138": "kgreen", "\u{1D52F}": "rfr", "\u{1D563}": "ropf", "\u{1D4C7}": "rscr", "\u211B": "Rscr", "\u211C": "Re", "\u211D": "Ropf", "\u0155": "racute", "\u0154": "Racute", "\u0159": "rcaron", "\u0158": "Rcaron", "\u0157": "rcedil", "\u0156": "Rcedil", "\u{1D564}": "sopf", "\u{1D4C8}": "sscr", "\u{1D530}": "sfr", "\u{1D54A}": "Sopf", "\u{1D516}": "Sfr", "\u{1D4AE}": "Sscr", "\u24C8": "oS", "\u015B": "sacute", "\u015A": "Sacute", "\u015D": "scirc", "\u015C": "Scirc", "\u0161": "scaron", "\u0160": "Scaron", "\u015F": "scedil", "\u015E": "Scedil", "\xDF": "szlig", "\u{1D531}": "tfr", "\u{1D4C9}": "tscr", "\u{1D565}": "topf", "\u{1D4AF}": "Tscr", "\u{1D517}": "Tfr", "\u{1D54B}": "Topf", "\u0165": "tcaron", "\u0164": "Tcaron", "\u0163": "tcedil", "\u0162": "Tcedil", "\u2122": "trade", "\u0167": "tstrok", "\u0166": "Tstrok", "\u{1D4CA}": "uscr", "\u{1D566}": "uopf", "\u{1D532}": "ufr", "\u{1D54C}": "Uopf", "\u{1D518}": "Ufr", "\u{1D4B0}": "Uscr", "\xFA": "uacute", "\xDA": "Uacute", "\xF9": "ugrave", "\xD9": "Ugrave", "\u016D": "ubreve", "\u016C": "Ubreve", "\xFB": "ucirc", "\xDB": "Ucirc", "\u016F": "uring", "\u016E": "Uring", "\xFC": "uuml", "\xDC": "Uuml", "\u0171": "udblac", "\u0170": "Udblac", "\u0169": "utilde", "\u0168": "Utilde", "\u0173": "uogon", "\u0172": "Uogon", "\u016B": "umacr", "\u016A": "Umacr", "\u{1D533}": "vfr", "\u{1D567}": "vopf", "\u{1D4CB}": "vscr", "\u{1D519}": "Vfr", "\u{1D54D}": "Vopf", "\u{1D4B1}": "Vscr", "\u{1D568}": "wopf", "\u{1D4CC}": "wscr", "\u{1D534}": "wfr", "\u{1D4B2}": "Wscr", "\u{1D54E}": "Wopf", "\u{1D51A}": "Wfr", "\u0175": "wcirc", "\u0174": "Wcirc", "\u{1D535}": "xfr", "\u{1D4CD}": "xscr", "\u{1D569}": "xopf", "\u{1D54F}": "Xopf", "\u{1D51B}": "Xfr", "\u{1D4B3}": "Xscr", "\u{1D536}": "yfr", "\u{1D4CE}": "yscr", "\u{1D56A}": "yopf", "\u{1D4B4}": "Yscr", "\u{1D51C}": "Yfr", "\u{1D550}": "Yopf", "\xFD": "yacute", "\xDD": "Yacute", "\u0177": "ycirc", "\u0176": "Ycirc", "\xFF": "yuml", "\u0178": "Yuml", "\u{1D4CF}": "zscr", "\u{1D537}": "zfr", "\u{1D56B}": "zopf", "\u2128": "Zfr", "\u2124": "Zopf", "\u{1D4B5}": "Zscr", "\u017A": "zacute", "\u0179": "Zacute", "\u017E": "zcaron", "\u017D": "Zcaron", "\u017C": "zdot", "\u017B": "Zdot", "\u01B5": "imped", "\xFE": "thorn", "\xDE": "THORN", "\u0149": "napos", "\u03B1": "alpha", "\u0391": "Alpha", "\u03B2": "beta", "\u0392": "Beta", "\u03B3": "gamma", "\u0393": "Gamma", "\u03B4": "delta", "\u0394": "Delta", "\u03B5": "epsi", "\u03F5": "epsiv", "\u0395": "Epsilon", "\u03DD": "gammad", "\u03DC": "Gammad", "\u03B6": "zeta", "\u0396": "Zeta", "\u03B7": "eta", "\u0397": "Eta", "\u03B8": "theta", "\u03D1": "thetav", "\u0398": "Theta", "\u03B9": "iota", "\u0399": "Iota", "\u03BA": "kappa", "\u03F0": "kappav", "\u039A": "Kappa", "\u03BB": "lambda", "\u039B": "Lambda", "\u03BC": "mu", "\xB5": "micro", "\u039C": "Mu", "\u03BD": "nu", "\u039D": "Nu", "\u03BE": "xi", "\u039E": "Xi", "\u03BF": "omicron", "\u039F": "Omicron", "\u03C0": "pi", "\u03D6": "piv", "\u03A0": "Pi", "\u03C1": "rho", "\u03F1": "rhov", "\u03A1": "Rho", "\u03C3": "sigma", "\u03A3": "Sigma", "\u03C2": "sigmaf", "\u03C4": "tau", "\u03A4": "Tau", "\u03C5": "upsi", "\u03A5": "Upsilon", "\u03D2": "Upsi", "\u03C6": "phi", "\u03D5": "phiv", "\u03A6": "Phi", "\u03C7": "chi", "\u03A7": "Chi", "\u03C8": "psi", "\u03A8": "Psi", "\u03C9": "omega", "\u03A9": "ohm", "\u0430": "acy", "\u0410": "Acy", "\u0431": "bcy", "\u0411": "Bcy", "\u0432": "vcy", "\u0412": "Vcy", "\u0433": "gcy", "\u0413": "Gcy", "\u0453": "gjcy", "\u0403": "GJcy", "\u0434": "dcy", "\u0414": "Dcy", "\u0452": "djcy", "\u0402": "DJcy", "\u0435": "iecy", "\u0415": "IEcy", "\u0451": "iocy", "\u0401": "IOcy", "\u0454": "jukcy", "\u0404": "Jukcy", "\u0436": "zhcy", "\u0416": "ZHcy", "\u0437": "zcy", "\u0417": "Zcy", "\u0455": "dscy", "\u0405": "DScy", "\u0438": "icy", "\u0418": "Icy", "\u0456": "iukcy", "\u0406": "Iukcy", "\u0457": "yicy", "\u0407": "YIcy", "\u0439": "jcy", "\u0419": "Jcy", "\u0458": "jsercy", "\u0408": "Jsercy", "\u043A": "kcy", "\u041A": "Kcy", "\u045C": "kjcy", "\u040C": "KJcy", "\u043B": "lcy", "\u041B": "Lcy", "\u0459": "ljcy", "\u0409": "LJcy", "\u043C": "mcy", "\u041C": "Mcy", "\u043D": "ncy", "\u041D": "Ncy", "\u045A": "njcy", "\u040A": "NJcy", "\u043E": "ocy", "\u041E": "Ocy", "\u043F": "pcy", "\u041F": "Pcy", "\u0440": "rcy", "\u0420": "Rcy", "\u0441": "scy", "\u0421": "Scy", "\u0442": "tcy", "\u0422": "Tcy", "\u045B": "tshcy", "\u040B": "TSHcy", "\u0443": "ucy", "\u0423": "Ucy", "\u045E": "ubrcy", "\u040E": "Ubrcy", "\u0444": "fcy", "\u0424": "Fcy", "\u0445": "khcy", "\u0425": "KHcy", "\u0446": "tscy", "\u0426": "TScy", "\u0447": "chcy", "\u0427": "CHcy", "\u045F": "dzcy", "\u040F": "DZcy", "\u0448": "shcy", "\u0428": "SHcy", "\u0449": "shchcy", "\u0429": "SHCHcy", "\u044A": "hardcy", "\u042A": "HARDcy", "\u044B": "ycy", "\u042B": "Ycy", "\u044C": "softcy", "\u042C": "SOFTcy", "\u044D": "ecy", "\u042D": "Ecy", "\u044E": "yucy", "\u042E": "YUcy", "\u044F": "yacy", "\u042F": "YAcy", "\u2135": "aleph", "\u2136": "beth", "\u2137": "gimel", "\u2138": "daleth" };
        var regexEscape = /["&'<>`]/g;
        var escapeMap = {
          '"': "&quot;",
          "&": "&amp;",
          "'": "&#x27;",
          "<": "&lt;",
          // See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
          // following is not strictly necessary unless it’s part of a tag or an
          // unquoted attribute value. We’re only escaping it to support those
          // situations, and for XML support.
          ">": "&gt;",
          // In Internet Explorer ≤ 8, the backtick character can be used
          // to break out of (un)quoted attribute values or HTML comments.
          // See http://html5sec.org/#102, http://html5sec.org/#108, and
          // http://html5sec.org/#133.
          "`": "&#x60;"
        };
        var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
        var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
        var decodeMap = { "aacute": "\xE1", "Aacute": "\xC1", "abreve": "\u0103", "Abreve": "\u0102", "ac": "\u223E", "acd": "\u223F", "acE": "\u223E\u0333", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "acy": "\u0430", "Acy": "\u0410", "aelig": "\xE6", "AElig": "\xC6", "af": "\u2061", "afr": "\u{1D51E}", "Afr": "\u{1D504}", "agrave": "\xE0", "Agrave": "\xC0", "alefsym": "\u2135", "aleph": "\u2135", "alpha": "\u03B1", "Alpha": "\u0391", "amacr": "\u0101", "Amacr": "\u0100", "amalg": "\u2A3F", "amp": "&", "AMP": "&", "and": "\u2227", "And": "\u2A53", "andand": "\u2A55", "andd": "\u2A5C", "andslope": "\u2A58", "andv": "\u2A5A", "ang": "\u2220", "ange": "\u29A4", "angle": "\u2220", "angmsd": "\u2221", "angmsdaa": "\u29A8", "angmsdab": "\u29A9", "angmsdac": "\u29AA", "angmsdad": "\u29AB", "angmsdae": "\u29AC", "angmsdaf": "\u29AD", "angmsdag": "\u29AE", "angmsdah": "\u29AF", "angrt": "\u221F", "angrtvb": "\u22BE", "angrtvbd": "\u299D", "angsph": "\u2222", "angst": "\xC5", "angzarr": "\u237C", "aogon": "\u0105", "Aogon": "\u0104", "aopf": "\u{1D552}", "Aopf": "\u{1D538}", "ap": "\u2248", "apacir": "\u2A6F", "ape": "\u224A", "apE": "\u2A70", "apid": "\u224B", "apos": "'", "ApplyFunction": "\u2061", "approx": "\u2248", "approxeq": "\u224A", "aring": "\xE5", "Aring": "\xC5", "ascr": "\u{1D4B6}", "Ascr": "\u{1D49C}", "Assign": "\u2254", "ast": "*", "asymp": "\u2248", "asympeq": "\u224D", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "awconint": "\u2233", "awint": "\u2A11", "backcong": "\u224C", "backepsilon": "\u03F6", "backprime": "\u2035", "backsim": "\u223D", "backsimeq": "\u22CD", "Backslash": "\u2216", "Barv": "\u2AE7", "barvee": "\u22BD", "barwed": "\u2305", "Barwed": "\u2306", "barwedge": "\u2305", "bbrk": "\u23B5", "bbrktbrk": "\u23B6", "bcong": "\u224C", "bcy": "\u0431", "Bcy": "\u0411", "bdquo": "\u201E", "becaus": "\u2235", "because": "\u2235", "Because": "\u2235", "bemptyv": "\u29B0", "bepsi": "\u03F6", "bernou": "\u212C", "Bernoullis": "\u212C", "beta": "\u03B2", "Beta": "\u0392", "beth": "\u2136", "between": "\u226C", "bfr": "\u{1D51F}", "Bfr": "\u{1D505}", "bigcap": "\u22C2", "bigcirc": "\u25EF", "bigcup": "\u22C3", "bigodot": "\u2A00", "bigoplus": "\u2A01", "bigotimes": "\u2A02", "bigsqcup": "\u2A06", "bigstar": "\u2605", "bigtriangledown": "\u25BD", "bigtriangleup": "\u25B3", "biguplus": "\u2A04", "bigvee": "\u22C1", "bigwedge": "\u22C0", "bkarow": "\u290D", "blacklozenge": "\u29EB", "blacksquare": "\u25AA", "blacktriangle": "\u25B4", "blacktriangledown": "\u25BE", "blacktriangleleft": "\u25C2", "blacktriangleright": "\u25B8", "blank": "\u2423", "blk12": "\u2592", "blk14": "\u2591", "blk34": "\u2593", "block": "\u2588", "bne": "=\u20E5", "bnequiv": "\u2261\u20E5", "bnot": "\u2310", "bNot": "\u2AED", "bopf": "\u{1D553}", "Bopf": "\u{1D539}", "bot": "\u22A5", "bottom": "\u22A5", "bowtie": "\u22C8", "boxbox": "\u29C9", "boxdl": "\u2510", "boxdL": "\u2555", "boxDl": "\u2556", "boxDL": "\u2557", "boxdr": "\u250C", "boxdR": "\u2552", "boxDr": "\u2553", "boxDR": "\u2554", "boxh": "\u2500", "boxH": "\u2550", "boxhd": "\u252C", "boxhD": "\u2565", "boxHd": "\u2564", "boxHD": "\u2566", "boxhu": "\u2534", "boxhU": "\u2568", "boxHu": "\u2567", "boxHU": "\u2569", "boxminus": "\u229F", "boxplus": "\u229E", "boxtimes": "\u22A0", "boxul": "\u2518", "boxuL": "\u255B", "boxUl": "\u255C", "boxUL": "\u255D", "boxur": "\u2514", "boxuR": "\u2558", "boxUr": "\u2559", "boxUR": "\u255A", "boxv": "\u2502", "boxV": "\u2551", "boxvh": "\u253C", "boxvH": "\u256A", "boxVh": "\u256B", "boxVH": "\u256C", "boxvl": "\u2524", "boxvL": "\u2561", "boxVl": "\u2562", "boxVL": "\u2563", "boxvr": "\u251C", "boxvR": "\u255E", "boxVr": "\u255F", "boxVR": "\u2560", "bprime": "\u2035", "breve": "\u02D8", "Breve": "\u02D8", "brvbar": "\xA6", "bscr": "\u{1D4B7}", "Bscr": "\u212C", "bsemi": "\u204F", "bsim": "\u223D", "bsime": "\u22CD", "bsol": "\\", "bsolb": "\u29C5", "bsolhsub": "\u27C8", "bull": "\u2022", "bullet": "\u2022", "bump": "\u224E", "bumpe": "\u224F", "bumpE": "\u2AAE", "bumpeq": "\u224F", "Bumpeq": "\u224E", "cacute": "\u0107", "Cacute": "\u0106", "cap": "\u2229", "Cap": "\u22D2", "capand": "\u2A44", "capbrcup": "\u2A49", "capcap": "\u2A4B", "capcup": "\u2A47", "capdot": "\u2A40", "CapitalDifferentialD": "\u2145", "caps": "\u2229\uFE00", "caret": "\u2041", "caron": "\u02C7", "Cayleys": "\u212D", "ccaps": "\u2A4D", "ccaron": "\u010D", "Ccaron": "\u010C", "ccedil": "\xE7", "Ccedil": "\xC7", "ccirc": "\u0109", "Ccirc": "\u0108", "Cconint": "\u2230", "ccups": "\u2A4C", "ccupssm": "\u2A50", "cdot": "\u010B", "Cdot": "\u010A", "cedil": "\xB8", "Cedilla": "\xB8", "cemptyv": "\u29B2", "cent": "\xA2", "centerdot": "\xB7", "CenterDot": "\xB7", "cfr": "\u{1D520}", "Cfr": "\u212D", "chcy": "\u0447", "CHcy": "\u0427", "check": "\u2713", "checkmark": "\u2713", "chi": "\u03C7", "Chi": "\u03A7", "cir": "\u25CB", "circ": "\u02C6", "circeq": "\u2257", "circlearrowleft": "\u21BA", "circlearrowright": "\u21BB", "circledast": "\u229B", "circledcirc": "\u229A", "circleddash": "\u229D", "CircleDot": "\u2299", "circledR": "\xAE", "circledS": "\u24C8", "CircleMinus": "\u2296", "CirclePlus": "\u2295", "CircleTimes": "\u2297", "cire": "\u2257", "cirE": "\u29C3", "cirfnint": "\u2A10", "cirmid": "\u2AEF", "cirscir": "\u29C2", "ClockwiseContourIntegral": "\u2232", "CloseCurlyDoubleQuote": "\u201D", "CloseCurlyQuote": "\u2019", "clubs": "\u2663", "clubsuit": "\u2663", "colon": ":", "Colon": "\u2237", "colone": "\u2254", "Colone": "\u2A74", "coloneq": "\u2254", "comma": ",", "commat": "@", "comp": "\u2201", "compfn": "\u2218", "complement": "\u2201", "complexes": "\u2102", "cong": "\u2245", "congdot": "\u2A6D", "Congruent": "\u2261", "conint": "\u222E", "Conint": "\u222F", "ContourIntegral": "\u222E", "copf": "\u{1D554}", "Copf": "\u2102", "coprod": "\u2210", "Coproduct": "\u2210", "copy": "\xA9", "COPY": "\xA9", "copysr": "\u2117", "CounterClockwiseContourIntegral": "\u2233", "crarr": "\u21B5", "cross": "\u2717", "Cross": "\u2A2F", "cscr": "\u{1D4B8}", "Cscr": "\u{1D49E}", "csub": "\u2ACF", "csube": "\u2AD1", "csup": "\u2AD0", "csupe": "\u2AD2", "ctdot": "\u22EF", "cudarrl": "\u2938", "cudarrr": "\u2935", "cuepr": "\u22DE", "cuesc": "\u22DF", "cularr": "\u21B6", "cularrp": "\u293D", "cup": "\u222A", "Cup": "\u22D3", "cupbrcap": "\u2A48", "cupcap": "\u2A46", "CupCap": "\u224D", "cupcup": "\u2A4A", "cupdot": "\u228D", "cupor": "\u2A45", "cups": "\u222A\uFE00", "curarr": "\u21B7", "curarrm": "\u293C", "curlyeqprec": "\u22DE", "curlyeqsucc": "\u22DF", "curlyvee": "\u22CE", "curlywedge": "\u22CF", "curren": "\xA4", "curvearrowleft": "\u21B6", "curvearrowright": "\u21B7", "cuvee": "\u22CE", "cuwed": "\u22CF", "cwconint": "\u2232", "cwint": "\u2231", "cylcty": "\u232D", "dagger": "\u2020", "Dagger": "\u2021", "daleth": "\u2138", "darr": "\u2193", "dArr": "\u21D3", "Darr": "\u21A1", "dash": "\u2010", "dashv": "\u22A3", "Dashv": "\u2AE4", "dbkarow": "\u290F", "dblac": "\u02DD", "dcaron": "\u010F", "Dcaron": "\u010E", "dcy": "\u0434", "Dcy": "\u0414", "dd": "\u2146", "DD": "\u2145", "ddagger": "\u2021", "ddarr": "\u21CA", "DDotrahd": "\u2911", "ddotseq": "\u2A77", "deg": "\xB0", "Del": "\u2207", "delta": "\u03B4", "Delta": "\u0394", "demptyv": "\u29B1", "dfisht": "\u297F", "dfr": "\u{1D521}", "Dfr": "\u{1D507}", "dHar": "\u2965", "dharl": "\u21C3", "dharr": "\u21C2", "DiacriticalAcute": "\xB4", "DiacriticalDot": "\u02D9", "DiacriticalDoubleAcute": "\u02DD", "DiacriticalGrave": "`", "DiacriticalTilde": "\u02DC", "diam": "\u22C4", "diamond": "\u22C4", "Diamond": "\u22C4", "diamondsuit": "\u2666", "diams": "\u2666", "die": "\xA8", "DifferentialD": "\u2146", "digamma": "\u03DD", "disin": "\u22F2", "div": "\xF7", "divide": "\xF7", "divideontimes": "\u22C7", "divonx": "\u22C7", "djcy": "\u0452", "DJcy": "\u0402", "dlcorn": "\u231E", "dlcrop": "\u230D", "dollar": "$", "dopf": "\u{1D555}", "Dopf": "\u{1D53B}", "dot": "\u02D9", "Dot": "\xA8", "DotDot": "\u20DC", "doteq": "\u2250", "doteqdot": "\u2251", "DotEqual": "\u2250", "dotminus": "\u2238", "dotplus": "\u2214", "dotsquare": "\u22A1", "doublebarwedge": "\u2306", "DoubleContourIntegral": "\u222F", "DoubleDot": "\xA8", "DoubleDownArrow": "\u21D3", "DoubleLeftArrow": "\u21D0", "DoubleLeftRightArrow": "\u21D4", "DoubleLeftTee": "\u2AE4", "DoubleLongLeftArrow": "\u27F8", "DoubleLongLeftRightArrow": "\u27FA", "DoubleLongRightArrow": "\u27F9", "DoubleRightArrow": "\u21D2", "DoubleRightTee": "\u22A8", "DoubleUpArrow": "\u21D1", "DoubleUpDownArrow": "\u21D5", "DoubleVerticalBar": "\u2225", "downarrow": "\u2193", "Downarrow": "\u21D3", "DownArrow": "\u2193", "DownArrowBar": "\u2913", "DownArrowUpArrow": "\u21F5", "DownBreve": "\u0311", "downdownarrows": "\u21CA", "downharpoonleft": "\u21C3", "downharpoonright": "\u21C2", "DownLeftRightVector": "\u2950", "DownLeftTeeVector": "\u295E", "DownLeftVector": "\u21BD", "DownLeftVectorBar": "\u2956", "DownRightTeeVector": "\u295F", "DownRightVector": "\u21C1", "DownRightVectorBar": "\u2957", "DownTee": "\u22A4", "DownTeeArrow": "\u21A7", "drbkarow": "\u2910", "drcorn": "\u231F", "drcrop": "\u230C", "dscr": "\u{1D4B9}", "Dscr": "\u{1D49F}", "dscy": "\u0455", "DScy": "\u0405", "dsol": "\u29F6", "dstrok": "\u0111", "Dstrok": "\u0110", "dtdot": "\u22F1", "dtri": "\u25BF", "dtrif": "\u25BE", "duarr": "\u21F5", "duhar": "\u296F", "dwangle": "\u29A6", "dzcy": "\u045F", "DZcy": "\u040F", "dzigrarr": "\u27FF", "eacute": "\xE9", "Eacute": "\xC9", "easter": "\u2A6E", "ecaron": "\u011B", "Ecaron": "\u011A", "ecir": "\u2256", "ecirc": "\xEA", "Ecirc": "\xCA", "ecolon": "\u2255", "ecy": "\u044D", "Ecy": "\u042D", "eDDot": "\u2A77", "edot": "\u0117", "eDot": "\u2251", "Edot": "\u0116", "ee": "\u2147", "efDot": "\u2252", "efr": "\u{1D522}", "Efr": "\u{1D508}", "eg": "\u2A9A", "egrave": "\xE8", "Egrave": "\xC8", "egs": "\u2A96", "egsdot": "\u2A98", "el": "\u2A99", "Element": "\u2208", "elinters": "\u23E7", "ell": "\u2113", "els": "\u2A95", "elsdot": "\u2A97", "emacr": "\u0113", "Emacr": "\u0112", "empty": "\u2205", "emptyset": "\u2205", "EmptySmallSquare": "\u25FB", "emptyv": "\u2205", "EmptyVerySmallSquare": "\u25AB", "emsp": "\u2003", "emsp13": "\u2004", "emsp14": "\u2005", "eng": "\u014B", "ENG": "\u014A", "ensp": "\u2002", "eogon": "\u0119", "Eogon": "\u0118", "eopf": "\u{1D556}", "Eopf": "\u{1D53C}", "epar": "\u22D5", "eparsl": "\u29E3", "eplus": "\u2A71", "epsi": "\u03B5", "epsilon": "\u03B5", "Epsilon": "\u0395", "epsiv": "\u03F5", "eqcirc": "\u2256", "eqcolon": "\u2255", "eqsim": "\u2242", "eqslantgtr": "\u2A96", "eqslantless": "\u2A95", "Equal": "\u2A75", "equals": "=", "EqualTilde": "\u2242", "equest": "\u225F", "Equilibrium": "\u21CC", "equiv": "\u2261", "equivDD": "\u2A78", "eqvparsl": "\u29E5", "erarr": "\u2971", "erDot": "\u2253", "escr": "\u212F", "Escr": "\u2130", "esdot": "\u2250", "esim": "\u2242", "Esim": "\u2A73", "eta": "\u03B7", "Eta": "\u0397", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "euro": "\u20AC", "excl": "!", "exist": "\u2203", "Exists": "\u2203", "expectation": "\u2130", "exponentiale": "\u2147", "ExponentialE": "\u2147", "fallingdotseq": "\u2252", "fcy": "\u0444", "Fcy": "\u0424", "female": "\u2640", "ffilig": "\uFB03", "fflig": "\uFB00", "ffllig": "\uFB04", "ffr": "\u{1D523}", "Ffr": "\u{1D509}", "filig": "\uFB01", "FilledSmallSquare": "\u25FC", "FilledVerySmallSquare": "\u25AA", "fjlig": "fj", "flat": "\u266D", "fllig": "\uFB02", "fltns": "\u25B1", "fnof": "\u0192", "fopf": "\u{1D557}", "Fopf": "\u{1D53D}", "forall": "\u2200", "ForAll": "\u2200", "fork": "\u22D4", "forkv": "\u2AD9", "Fouriertrf": "\u2131", "fpartint": "\u2A0D", "frac12": "\xBD", "frac13": "\u2153", "frac14": "\xBC", "frac15": "\u2155", "frac16": "\u2159", "frac18": "\u215B", "frac23": "\u2154", "frac25": "\u2156", "frac34": "\xBE", "frac35": "\u2157", "frac38": "\u215C", "frac45": "\u2158", "frac56": "\u215A", "frac58": "\u215D", "frac78": "\u215E", "frasl": "\u2044", "frown": "\u2322", "fscr": "\u{1D4BB}", "Fscr": "\u2131", "gacute": "\u01F5", "gamma": "\u03B3", "Gamma": "\u0393", "gammad": "\u03DD", "Gammad": "\u03DC", "gap": "\u2A86", "gbreve": "\u011F", "Gbreve": "\u011E", "Gcedil": "\u0122", "gcirc": "\u011D", "Gcirc": "\u011C", "gcy": "\u0433", "Gcy": "\u0413", "gdot": "\u0121", "Gdot": "\u0120", "ge": "\u2265", "gE": "\u2267", "gel": "\u22DB", "gEl": "\u2A8C", "geq": "\u2265", "geqq": "\u2267", "geqslant": "\u2A7E", "ges": "\u2A7E", "gescc": "\u2AA9", "gesdot": "\u2A80", "gesdoto": "\u2A82", "gesdotol": "\u2A84", "gesl": "\u22DB\uFE00", "gesles": "\u2A94", "gfr": "\u{1D524}", "Gfr": "\u{1D50A}", "gg": "\u226B", "Gg": "\u22D9", "ggg": "\u22D9", "gimel": "\u2137", "gjcy": "\u0453", "GJcy": "\u0403", "gl": "\u2277", "gla": "\u2AA5", "glE": "\u2A92", "glj": "\u2AA4", "gnap": "\u2A8A", "gnapprox": "\u2A8A", "gne": "\u2A88", "gnE": "\u2269", "gneq": "\u2A88", "gneqq": "\u2269", "gnsim": "\u22E7", "gopf": "\u{1D558}", "Gopf": "\u{1D53E}", "grave": "`", "GreaterEqual": "\u2265", "GreaterEqualLess": "\u22DB", "GreaterFullEqual": "\u2267", "GreaterGreater": "\u2AA2", "GreaterLess": "\u2277", "GreaterSlantEqual": "\u2A7E", "GreaterTilde": "\u2273", "gscr": "\u210A", "Gscr": "\u{1D4A2}", "gsim": "\u2273", "gsime": "\u2A8E", "gsiml": "\u2A90", "gt": ">", "Gt": "\u226B", "GT": ">", "gtcc": "\u2AA7", "gtcir": "\u2A7A", "gtdot": "\u22D7", "gtlPar": "\u2995", "gtquest": "\u2A7C", "gtrapprox": "\u2A86", "gtrarr": "\u2978", "gtrdot": "\u22D7", "gtreqless": "\u22DB", "gtreqqless": "\u2A8C", "gtrless": "\u2277", "gtrsim": "\u2273", "gvertneqq": "\u2269\uFE00", "gvnE": "\u2269\uFE00", "Hacek": "\u02C7", "hairsp": "\u200A", "half": "\xBD", "hamilt": "\u210B", "hardcy": "\u044A", "HARDcy": "\u042A", "harr": "\u2194", "hArr": "\u21D4", "harrcir": "\u2948", "harrw": "\u21AD", "Hat": "^", "hbar": "\u210F", "hcirc": "\u0125", "Hcirc": "\u0124", "hearts": "\u2665", "heartsuit": "\u2665", "hellip": "\u2026", "hercon": "\u22B9", "hfr": "\u{1D525}", "Hfr": "\u210C", "HilbertSpace": "\u210B", "hksearow": "\u2925", "hkswarow": "\u2926", "hoarr": "\u21FF", "homtht": "\u223B", "hookleftarrow": "\u21A9", "hookrightarrow": "\u21AA", "hopf": "\u{1D559}", "Hopf": "\u210D", "horbar": "\u2015", "HorizontalLine": "\u2500", "hscr": "\u{1D4BD}", "Hscr": "\u210B", "hslash": "\u210F", "hstrok": "\u0127", "Hstrok": "\u0126", "HumpDownHump": "\u224E", "HumpEqual": "\u224F", "hybull": "\u2043", "hyphen": "\u2010", "iacute": "\xED", "Iacute": "\xCD", "ic": "\u2063", "icirc": "\xEE", "Icirc": "\xCE", "icy": "\u0438", "Icy": "\u0418", "Idot": "\u0130", "iecy": "\u0435", "IEcy": "\u0415", "iexcl": "\xA1", "iff": "\u21D4", "ifr": "\u{1D526}", "Ifr": "\u2111", "igrave": "\xEC", "Igrave": "\xCC", "ii": "\u2148", "iiiint": "\u2A0C", "iiint": "\u222D", "iinfin": "\u29DC", "iiota": "\u2129", "ijlig": "\u0133", "IJlig": "\u0132", "Im": "\u2111", "imacr": "\u012B", "Imacr": "\u012A", "image": "\u2111", "ImaginaryI": "\u2148", "imagline": "\u2110", "imagpart": "\u2111", "imath": "\u0131", "imof": "\u22B7", "imped": "\u01B5", "Implies": "\u21D2", "in": "\u2208", "incare": "\u2105", "infin": "\u221E", "infintie": "\u29DD", "inodot": "\u0131", "int": "\u222B", "Int": "\u222C", "intcal": "\u22BA", "integers": "\u2124", "Integral": "\u222B", "intercal": "\u22BA", "Intersection": "\u22C2", "intlarhk": "\u2A17", "intprod": "\u2A3C", "InvisibleComma": "\u2063", "InvisibleTimes": "\u2062", "iocy": "\u0451", "IOcy": "\u0401", "iogon": "\u012F", "Iogon": "\u012E", "iopf": "\u{1D55A}", "Iopf": "\u{1D540}", "iota": "\u03B9", "Iota": "\u0399", "iprod": "\u2A3C", "iquest": "\xBF", "iscr": "\u{1D4BE}", "Iscr": "\u2110", "isin": "\u2208", "isindot": "\u22F5", "isinE": "\u22F9", "isins": "\u22F4", "isinsv": "\u22F3", "isinv": "\u2208", "it": "\u2062", "itilde": "\u0129", "Itilde": "\u0128", "iukcy": "\u0456", "Iukcy": "\u0406", "iuml": "\xEF", "Iuml": "\xCF", "jcirc": "\u0135", "Jcirc": "\u0134", "jcy": "\u0439", "Jcy": "\u0419", "jfr": "\u{1D527}", "Jfr": "\u{1D50D}", "jmath": "\u0237", "jopf": "\u{1D55B}", "Jopf": "\u{1D541}", "jscr": "\u{1D4BF}", "Jscr": "\u{1D4A5}", "jsercy": "\u0458", "Jsercy": "\u0408", "jukcy": "\u0454", "Jukcy": "\u0404", "kappa": "\u03BA", "Kappa": "\u039A", "kappav": "\u03F0", "kcedil": "\u0137", "Kcedil": "\u0136", "kcy": "\u043A", "Kcy": "\u041A", "kfr": "\u{1D528}", "Kfr": "\u{1D50E}", "kgreen": "\u0138", "khcy": "\u0445", "KHcy": "\u0425", "kjcy": "\u045C", "KJcy": "\u040C", "kopf": "\u{1D55C}", "Kopf": "\u{1D542}", "kscr": "\u{1D4C0}", "Kscr": "\u{1D4A6}", "lAarr": "\u21DA", "lacute": "\u013A", "Lacute": "\u0139", "laemptyv": "\u29B4", "lagran": "\u2112", "lambda": "\u03BB", "Lambda": "\u039B", "lang": "\u27E8", "Lang": "\u27EA", "langd": "\u2991", "langle": "\u27E8", "lap": "\u2A85", "Laplacetrf": "\u2112", "laquo": "\xAB", "larr": "\u2190", "lArr": "\u21D0", "Larr": "\u219E", "larrb": "\u21E4", "larrbfs": "\u291F", "larrfs": "\u291D", "larrhk": "\u21A9", "larrlp": "\u21AB", "larrpl": "\u2939", "larrsim": "\u2973", "larrtl": "\u21A2", "lat": "\u2AAB", "latail": "\u2919", "lAtail": "\u291B", "late": "\u2AAD", "lates": "\u2AAD\uFE00", "lbarr": "\u290C", "lBarr": "\u290E", "lbbrk": "\u2772", "lbrace": "{", "lbrack": "[", "lbrke": "\u298B", "lbrksld": "\u298F", "lbrkslu": "\u298D", "lcaron": "\u013E", "Lcaron": "\u013D", "lcedil": "\u013C", "Lcedil": "\u013B", "lceil": "\u2308", "lcub": "{", "lcy": "\u043B", "Lcy": "\u041B", "ldca": "\u2936", "ldquo": "\u201C", "ldquor": "\u201E", "ldrdhar": "\u2967", "ldrushar": "\u294B", "ldsh": "\u21B2", "le": "\u2264", "lE": "\u2266", "LeftAngleBracket": "\u27E8", "leftarrow": "\u2190", "Leftarrow": "\u21D0", "LeftArrow": "\u2190", "LeftArrowBar": "\u21E4", "LeftArrowRightArrow": "\u21C6", "leftarrowtail": "\u21A2", "LeftCeiling": "\u2308", "LeftDoubleBracket": "\u27E6", "LeftDownTeeVector": "\u2961", "LeftDownVector": "\u21C3", "LeftDownVectorBar": "\u2959", "LeftFloor": "\u230A", "leftharpoondown": "\u21BD", "leftharpoonup": "\u21BC", "leftleftarrows": "\u21C7", "leftrightarrow": "\u2194", "Leftrightarrow": "\u21D4", "LeftRightArrow": "\u2194", "leftrightarrows": "\u21C6", "leftrightharpoons": "\u21CB", "leftrightsquigarrow": "\u21AD", "LeftRightVector": "\u294E", "LeftTee": "\u22A3", "LeftTeeArrow": "\u21A4", "LeftTeeVector": "\u295A", "leftthreetimes": "\u22CB", "LeftTriangle": "\u22B2", "LeftTriangleBar": "\u29CF", "LeftTriangleEqual": "\u22B4", "LeftUpDownVector": "\u2951", "LeftUpTeeVector": "\u2960", "LeftUpVector": "\u21BF", "LeftUpVectorBar": "\u2958", "LeftVector": "\u21BC", "LeftVectorBar": "\u2952", "leg": "\u22DA", "lEg": "\u2A8B", "leq": "\u2264", "leqq": "\u2266", "leqslant": "\u2A7D", "les": "\u2A7D", "lescc": "\u2AA8", "lesdot": "\u2A7F", "lesdoto": "\u2A81", "lesdotor": "\u2A83", "lesg": "\u22DA\uFE00", "lesges": "\u2A93", "lessapprox": "\u2A85", "lessdot": "\u22D6", "lesseqgtr": "\u22DA", "lesseqqgtr": "\u2A8B", "LessEqualGreater": "\u22DA", "LessFullEqual": "\u2266", "LessGreater": "\u2276", "lessgtr": "\u2276", "LessLess": "\u2AA1", "lesssim": "\u2272", "LessSlantEqual": "\u2A7D", "LessTilde": "\u2272", "lfisht": "\u297C", "lfloor": "\u230A", "lfr": "\u{1D529}", "Lfr": "\u{1D50F}", "lg": "\u2276", "lgE": "\u2A91", "lHar": "\u2962", "lhard": "\u21BD", "lharu": "\u21BC", "lharul": "\u296A", "lhblk": "\u2584", "ljcy": "\u0459", "LJcy": "\u0409", "ll": "\u226A", "Ll": "\u22D8", "llarr": "\u21C7", "llcorner": "\u231E", "Lleftarrow": "\u21DA", "llhard": "\u296B", "lltri": "\u25FA", "lmidot": "\u0140", "Lmidot": "\u013F", "lmoust": "\u23B0", "lmoustache": "\u23B0", "lnap": "\u2A89", "lnapprox": "\u2A89", "lne": "\u2A87", "lnE": "\u2268", "lneq": "\u2A87", "lneqq": "\u2268", "lnsim": "\u22E6", "loang": "\u27EC", "loarr": "\u21FD", "lobrk": "\u27E6", "longleftarrow": "\u27F5", "Longleftarrow": "\u27F8", "LongLeftArrow": "\u27F5", "longleftrightarrow": "\u27F7", "Longleftrightarrow": "\u27FA", "LongLeftRightArrow": "\u27F7", "longmapsto": "\u27FC", "longrightarrow": "\u27F6", "Longrightarrow": "\u27F9", "LongRightArrow": "\u27F6", "looparrowleft": "\u21AB", "looparrowright": "\u21AC", "lopar": "\u2985", "lopf": "\u{1D55D}", "Lopf": "\u{1D543}", "loplus": "\u2A2D", "lotimes": "\u2A34", "lowast": "\u2217", "lowbar": "_", "LowerLeftArrow": "\u2199", "LowerRightArrow": "\u2198", "loz": "\u25CA", "lozenge": "\u25CA", "lozf": "\u29EB", "lpar": "(", "lparlt": "\u2993", "lrarr": "\u21C6", "lrcorner": "\u231F", "lrhar": "\u21CB", "lrhard": "\u296D", "lrm": "\u200E", "lrtri": "\u22BF", "lsaquo": "\u2039", "lscr": "\u{1D4C1}", "Lscr": "\u2112", "lsh": "\u21B0", "Lsh": "\u21B0", "lsim": "\u2272", "lsime": "\u2A8D", "lsimg": "\u2A8F", "lsqb": "[", "lsquo": "\u2018", "lsquor": "\u201A", "lstrok": "\u0142", "Lstrok": "\u0141", "lt": "<", "Lt": "\u226A", "LT": "<", "ltcc": "\u2AA6", "ltcir": "\u2A79", "ltdot": "\u22D6", "lthree": "\u22CB", "ltimes": "\u22C9", "ltlarr": "\u2976", "ltquest": "\u2A7B", "ltri": "\u25C3", "ltrie": "\u22B4", "ltrif": "\u25C2", "ltrPar": "\u2996", "lurdshar": "\u294A", "luruhar": "\u2966", "lvertneqq": "\u2268\uFE00", "lvnE": "\u2268\uFE00", "macr": "\xAF", "male": "\u2642", "malt": "\u2720", "maltese": "\u2720", "map": "\u21A6", "Map": "\u2905", "mapsto": "\u21A6", "mapstodown": "\u21A7", "mapstoleft": "\u21A4", "mapstoup": "\u21A5", "marker": "\u25AE", "mcomma": "\u2A29", "mcy": "\u043C", "Mcy": "\u041C", "mdash": "\u2014", "mDDot": "\u223A", "measuredangle": "\u2221", "MediumSpace": "\u205F", "Mellintrf": "\u2133", "mfr": "\u{1D52A}", "Mfr": "\u{1D510}", "mho": "\u2127", "micro": "\xB5", "mid": "\u2223", "midast": "*", "midcir": "\u2AF0", "middot": "\xB7", "minus": "\u2212", "minusb": "\u229F", "minusd": "\u2238", "minusdu": "\u2A2A", "MinusPlus": "\u2213", "mlcp": "\u2ADB", "mldr": "\u2026", "mnplus": "\u2213", "models": "\u22A7", "mopf": "\u{1D55E}", "Mopf": "\u{1D544}", "mp": "\u2213", "mscr": "\u{1D4C2}", "Mscr": "\u2133", "mstpos": "\u223E", "mu": "\u03BC", "Mu": "\u039C", "multimap": "\u22B8", "mumap": "\u22B8", "nabla": "\u2207", "nacute": "\u0144", "Nacute": "\u0143", "nang": "\u2220\u20D2", "nap": "\u2249", "napE": "\u2A70\u0338", "napid": "\u224B\u0338", "napos": "\u0149", "napprox": "\u2249", "natur": "\u266E", "natural": "\u266E", "naturals": "\u2115", "nbsp": "\xA0", "nbump": "\u224E\u0338", "nbumpe": "\u224F\u0338", "ncap": "\u2A43", "ncaron": "\u0148", "Ncaron": "\u0147", "ncedil": "\u0146", "Ncedil": "\u0145", "ncong": "\u2247", "ncongdot": "\u2A6D\u0338", "ncup": "\u2A42", "ncy": "\u043D", "Ncy": "\u041D", "ndash": "\u2013", "ne": "\u2260", "nearhk": "\u2924", "nearr": "\u2197", "neArr": "\u21D7", "nearrow": "\u2197", "nedot": "\u2250\u0338", "NegativeMediumSpace": "\u200B", "NegativeThickSpace": "\u200B", "NegativeThinSpace": "\u200B", "NegativeVeryThinSpace": "\u200B", "nequiv": "\u2262", "nesear": "\u2928", "nesim": "\u2242\u0338", "NestedGreaterGreater": "\u226B", "NestedLessLess": "\u226A", "NewLine": "\n", "nexist": "\u2204", "nexists": "\u2204", "nfr": "\u{1D52B}", "Nfr": "\u{1D511}", "nge": "\u2271", "ngE": "\u2267\u0338", "ngeq": "\u2271", "ngeqq": "\u2267\u0338", "ngeqslant": "\u2A7E\u0338", "nges": "\u2A7E\u0338", "nGg": "\u22D9\u0338", "ngsim": "\u2275", "ngt": "\u226F", "nGt": "\u226B\u20D2", "ngtr": "\u226F", "nGtv": "\u226B\u0338", "nharr": "\u21AE", "nhArr": "\u21CE", "nhpar": "\u2AF2", "ni": "\u220B", "nis": "\u22FC", "nisd": "\u22FA", "niv": "\u220B", "njcy": "\u045A", "NJcy": "\u040A", "nlarr": "\u219A", "nlArr": "\u21CD", "nldr": "\u2025", "nle": "\u2270", "nlE": "\u2266\u0338", "nleftarrow": "\u219A", "nLeftarrow": "\u21CD", "nleftrightarrow": "\u21AE", "nLeftrightarrow": "\u21CE", "nleq": "\u2270", "nleqq": "\u2266\u0338", "nleqslant": "\u2A7D\u0338", "nles": "\u2A7D\u0338", "nless": "\u226E", "nLl": "\u22D8\u0338", "nlsim": "\u2274", "nlt": "\u226E", "nLt": "\u226A\u20D2", "nltri": "\u22EA", "nltrie": "\u22EC", "nLtv": "\u226A\u0338", "nmid": "\u2224", "NoBreak": "\u2060", "NonBreakingSpace": "\xA0", "nopf": "\u{1D55F}", "Nopf": "\u2115", "not": "\xAC", "Not": "\u2AEC", "NotCongruent": "\u2262", "NotCupCap": "\u226D", "NotDoubleVerticalBar": "\u2226", "NotElement": "\u2209", "NotEqual": "\u2260", "NotEqualTilde": "\u2242\u0338", "NotExists": "\u2204", "NotGreater": "\u226F", "NotGreaterEqual": "\u2271", "NotGreaterFullEqual": "\u2267\u0338", "NotGreaterGreater": "\u226B\u0338", "NotGreaterLess": "\u2279", "NotGreaterSlantEqual": "\u2A7E\u0338", "NotGreaterTilde": "\u2275", "NotHumpDownHump": "\u224E\u0338", "NotHumpEqual": "\u224F\u0338", "notin": "\u2209", "notindot": "\u22F5\u0338", "notinE": "\u22F9\u0338", "notinva": "\u2209", "notinvb": "\u22F7", "notinvc": "\u22F6", "NotLeftTriangle": "\u22EA", "NotLeftTriangleBar": "\u29CF\u0338", "NotLeftTriangleEqual": "\u22EC", "NotLess": "\u226E", "NotLessEqual": "\u2270", "NotLessGreater": "\u2278", "NotLessLess": "\u226A\u0338", "NotLessSlantEqual": "\u2A7D\u0338", "NotLessTilde": "\u2274", "NotNestedGreaterGreater": "\u2AA2\u0338", "NotNestedLessLess": "\u2AA1\u0338", "notni": "\u220C", "notniva": "\u220C", "notnivb": "\u22FE", "notnivc": "\u22FD", "NotPrecedes": "\u2280", "NotPrecedesEqual": "\u2AAF\u0338", "NotPrecedesSlantEqual": "\u22E0", "NotReverseElement": "\u220C", "NotRightTriangle": "\u22EB", "NotRightTriangleBar": "\u29D0\u0338", "NotRightTriangleEqual": "\u22ED", "NotSquareSubset": "\u228F\u0338", "NotSquareSubsetEqual": "\u22E2", "NotSquareSuperset": "\u2290\u0338", "NotSquareSupersetEqual": "\u22E3", "NotSubset": "\u2282\u20D2", "NotSubsetEqual": "\u2288", "NotSucceeds": "\u2281", "NotSucceedsEqual": "\u2AB0\u0338", "NotSucceedsSlantEqual": "\u22E1", "NotSucceedsTilde": "\u227F\u0338", "NotSuperset": "\u2283\u20D2", "NotSupersetEqual": "\u2289", "NotTilde": "\u2241", "NotTildeEqual": "\u2244", "NotTildeFullEqual": "\u2247", "NotTildeTilde": "\u2249", "NotVerticalBar": "\u2224", "npar": "\u2226", "nparallel": "\u2226", "nparsl": "\u2AFD\u20E5", "npart": "\u2202\u0338", "npolint": "\u2A14", "npr": "\u2280", "nprcue": "\u22E0", "npre": "\u2AAF\u0338", "nprec": "\u2280", "npreceq": "\u2AAF\u0338", "nrarr": "\u219B", "nrArr": "\u21CF", "nrarrc": "\u2933\u0338", "nrarrw": "\u219D\u0338", "nrightarrow": "\u219B", "nRightarrow": "\u21CF", "nrtri": "\u22EB", "nrtrie": "\u22ED", "nsc": "\u2281", "nsccue": "\u22E1", "nsce": "\u2AB0\u0338", "nscr": "\u{1D4C3}", "Nscr": "\u{1D4A9}", "nshortmid": "\u2224", "nshortparallel": "\u2226", "nsim": "\u2241", "nsime": "\u2244", "nsimeq": "\u2244", "nsmid": "\u2224", "nspar": "\u2226", "nsqsube": "\u22E2", "nsqsupe": "\u22E3", "nsub": "\u2284", "nsube": "\u2288", "nsubE": "\u2AC5\u0338", "nsubset": "\u2282\u20D2", "nsubseteq": "\u2288", "nsubseteqq": "\u2AC5\u0338", "nsucc": "\u2281", "nsucceq": "\u2AB0\u0338", "nsup": "\u2285", "nsupe": "\u2289", "nsupE": "\u2AC6\u0338", "nsupset": "\u2283\u20D2", "nsupseteq": "\u2289", "nsupseteqq": "\u2AC6\u0338", "ntgl": "\u2279", "ntilde": "\xF1", "Ntilde": "\xD1", "ntlg": "\u2278", "ntriangleleft": "\u22EA", "ntrianglelefteq": "\u22EC", "ntriangleright": "\u22EB", "ntrianglerighteq": "\u22ED", "nu": "\u03BD", "Nu": "\u039D", "num": "#", "numero": "\u2116", "numsp": "\u2007", "nvap": "\u224D\u20D2", "nvdash": "\u22AC", "nvDash": "\u22AD", "nVdash": "\u22AE", "nVDash": "\u22AF", "nvge": "\u2265\u20D2", "nvgt": ">\u20D2", "nvHarr": "\u2904", "nvinfin": "\u29DE", "nvlArr": "\u2902", "nvle": "\u2264\u20D2", "nvlt": "<\u20D2", "nvltrie": "\u22B4\u20D2", "nvrArr": "\u2903", "nvrtrie": "\u22B5\u20D2", "nvsim": "\u223C\u20D2", "nwarhk": "\u2923", "nwarr": "\u2196", "nwArr": "\u21D6", "nwarrow": "\u2196", "nwnear": "\u2927", "oacute": "\xF3", "Oacute": "\xD3", "oast": "\u229B", "ocir": "\u229A", "ocirc": "\xF4", "Ocirc": "\xD4", "ocy": "\u043E", "Ocy": "\u041E", "odash": "\u229D", "odblac": "\u0151", "Odblac": "\u0150", "odiv": "\u2A38", "odot": "\u2299", "odsold": "\u29BC", "oelig": "\u0153", "OElig": "\u0152", "ofcir": "\u29BF", "ofr": "\u{1D52C}", "Ofr": "\u{1D512}", "ogon": "\u02DB", "ograve": "\xF2", "Ograve": "\xD2", "ogt": "\u29C1", "ohbar": "\u29B5", "ohm": "\u03A9", "oint": "\u222E", "olarr": "\u21BA", "olcir": "\u29BE", "olcross": "\u29BB", "oline": "\u203E", "olt": "\u29C0", "omacr": "\u014D", "Omacr": "\u014C", "omega": "\u03C9", "Omega": "\u03A9", "omicron": "\u03BF", "Omicron": "\u039F", "omid": "\u29B6", "ominus": "\u2296", "oopf": "\u{1D560}", "Oopf": "\u{1D546}", "opar": "\u29B7", "OpenCurlyDoubleQuote": "\u201C", "OpenCurlyQuote": "\u2018", "operp": "\u29B9", "oplus": "\u2295", "or": "\u2228", "Or": "\u2A54", "orarr": "\u21BB", "ord": "\u2A5D", "order": "\u2134", "orderof": "\u2134", "ordf": "\xAA", "ordm": "\xBA", "origof": "\u22B6", "oror": "\u2A56", "orslope": "\u2A57", "orv": "\u2A5B", "oS": "\u24C8", "oscr": "\u2134", "Oscr": "\u{1D4AA}", "oslash": "\xF8", "Oslash": "\xD8", "osol": "\u2298", "otilde": "\xF5", "Otilde": "\xD5", "otimes": "\u2297", "Otimes": "\u2A37", "otimesas": "\u2A36", "ouml": "\xF6", "Ouml": "\xD6", "ovbar": "\u233D", "OverBar": "\u203E", "OverBrace": "\u23DE", "OverBracket": "\u23B4", "OverParenthesis": "\u23DC", "par": "\u2225", "para": "\xB6", "parallel": "\u2225", "parsim": "\u2AF3", "parsl": "\u2AFD", "part": "\u2202", "PartialD": "\u2202", "pcy": "\u043F", "Pcy": "\u041F", "percnt": "%", "period": ".", "permil": "\u2030", "perp": "\u22A5", "pertenk": "\u2031", "pfr": "\u{1D52D}", "Pfr": "\u{1D513}", "phi": "\u03C6", "Phi": "\u03A6", "phiv": "\u03D5", "phmmat": "\u2133", "phone": "\u260E", "pi": "\u03C0", "Pi": "\u03A0", "pitchfork": "\u22D4", "piv": "\u03D6", "planck": "\u210F", "planckh": "\u210E", "plankv": "\u210F", "plus": "+", "plusacir": "\u2A23", "plusb": "\u229E", "pluscir": "\u2A22", "plusdo": "\u2214", "plusdu": "\u2A25", "pluse": "\u2A72", "PlusMinus": "\xB1", "plusmn": "\xB1", "plussim": "\u2A26", "plustwo": "\u2A27", "pm": "\xB1", "Poincareplane": "\u210C", "pointint": "\u2A15", "popf": "\u{1D561}", "Popf": "\u2119", "pound": "\xA3", "pr": "\u227A", "Pr": "\u2ABB", "prap": "\u2AB7", "prcue": "\u227C", "pre": "\u2AAF", "prE": "\u2AB3", "prec": "\u227A", "precapprox": "\u2AB7", "preccurlyeq": "\u227C", "Precedes": "\u227A", "PrecedesEqual": "\u2AAF", "PrecedesSlantEqual": "\u227C", "PrecedesTilde": "\u227E", "preceq": "\u2AAF", "precnapprox": "\u2AB9", "precneqq": "\u2AB5", "precnsim": "\u22E8", "precsim": "\u227E", "prime": "\u2032", "Prime": "\u2033", "primes": "\u2119", "prnap": "\u2AB9", "prnE": "\u2AB5", "prnsim": "\u22E8", "prod": "\u220F", "Product": "\u220F", "profalar": "\u232E", "profline": "\u2312", "profsurf": "\u2313", "prop": "\u221D", "Proportion": "\u2237", "Proportional": "\u221D", "propto": "\u221D", "prsim": "\u227E", "prurel": "\u22B0", "pscr": "\u{1D4C5}", "Pscr": "\u{1D4AB}", "psi": "\u03C8", "Psi": "\u03A8", "puncsp": "\u2008", "qfr": "\u{1D52E}", "Qfr": "\u{1D514}", "qint": "\u2A0C", "qopf": "\u{1D562}", "Qopf": "\u211A", "qprime": "\u2057", "qscr": "\u{1D4C6}", "Qscr": "\u{1D4AC}", "quaternions": "\u210D", "quatint": "\u2A16", "quest": "?", "questeq": "\u225F", "quot": '"', "QUOT": '"', "rAarr": "\u21DB", "race": "\u223D\u0331", "racute": "\u0155", "Racute": "\u0154", "radic": "\u221A", "raemptyv": "\u29B3", "rang": "\u27E9", "Rang": "\u27EB", "rangd": "\u2992", "range": "\u29A5", "rangle": "\u27E9", "raquo": "\xBB", "rarr": "\u2192", "rArr": "\u21D2", "Rarr": "\u21A0", "rarrap": "\u2975", "rarrb": "\u21E5", "rarrbfs": "\u2920", "rarrc": "\u2933", "rarrfs": "\u291E", "rarrhk": "\u21AA", "rarrlp": "\u21AC", "rarrpl": "\u2945", "rarrsim": "\u2974", "rarrtl": "\u21A3", "Rarrtl": "\u2916", "rarrw": "\u219D", "ratail": "\u291A", "rAtail": "\u291C", "ratio": "\u2236", "rationals": "\u211A", "rbarr": "\u290D", "rBarr": "\u290F", "RBarr": "\u2910", "rbbrk": "\u2773", "rbrace": "}", "rbrack": "]", "rbrke": "\u298C", "rbrksld": "\u298E", "rbrkslu": "\u2990", "rcaron": "\u0159", "Rcaron": "\u0158", "rcedil": "\u0157", "Rcedil": "\u0156", "rceil": "\u2309", "rcub": "}", "rcy": "\u0440", "Rcy": "\u0420", "rdca": "\u2937", "rdldhar": "\u2969", "rdquo": "\u201D", "rdquor": "\u201D", "rdsh": "\u21B3", "Re": "\u211C", "real": "\u211C", "realine": "\u211B", "realpart": "\u211C", "reals": "\u211D", "rect": "\u25AD", "reg": "\xAE", "REG": "\xAE", "ReverseElement": "\u220B", "ReverseEquilibrium": "\u21CB", "ReverseUpEquilibrium": "\u296F", "rfisht": "\u297D", "rfloor": "\u230B", "rfr": "\u{1D52F}", "Rfr": "\u211C", "rHar": "\u2964", "rhard": "\u21C1", "rharu": "\u21C0", "rharul": "\u296C", "rho": "\u03C1", "Rho": "\u03A1", "rhov": "\u03F1", "RightAngleBracket": "\u27E9", "rightarrow": "\u2192", "Rightarrow": "\u21D2", "RightArrow": "\u2192", "RightArrowBar": "\u21E5", "RightArrowLeftArrow": "\u21C4", "rightarrowtail": "\u21A3", "RightCeiling": "\u2309", "RightDoubleBracket": "\u27E7", "RightDownTeeVector": "\u295D", "RightDownVector": "\u21C2", "RightDownVectorBar": "\u2955", "RightFloor": "\u230B", "rightharpoondown": "\u21C1", "rightharpoonup": "\u21C0", "rightleftarrows": "\u21C4", "rightleftharpoons": "\u21CC", "rightrightarrows": "\u21C9", "rightsquigarrow": "\u219D", "RightTee": "\u22A2", "RightTeeArrow": "\u21A6", "RightTeeVector": "\u295B", "rightthreetimes": "\u22CC", "RightTriangle": "\u22B3", "RightTriangleBar": "\u29D0", "RightTriangleEqual": "\u22B5", "RightUpDownVector": "\u294F", "RightUpTeeVector": "\u295C", "RightUpVector": "\u21BE", "RightUpVectorBar": "\u2954", "RightVector": "\u21C0", "RightVectorBar": "\u2953", "ring": "\u02DA", "risingdotseq": "\u2253", "rlarr": "\u21C4", "rlhar": "\u21CC", "rlm": "\u200F", "rmoust": "\u23B1", "rmoustache": "\u23B1", "rnmid": "\u2AEE", "roang": "\u27ED", "roarr": "\u21FE", "robrk": "\u27E7", "ropar": "\u2986", "ropf": "\u{1D563}", "Ropf": "\u211D", "roplus": "\u2A2E", "rotimes": "\u2A35", "RoundImplies": "\u2970", "rpar": ")", "rpargt": "\u2994", "rppolint": "\u2A12", "rrarr": "\u21C9", "Rrightarrow": "\u21DB", "rsaquo": "\u203A", "rscr": "\u{1D4C7}", "Rscr": "\u211B", "rsh": "\u21B1", "Rsh": "\u21B1", "rsqb": "]", "rsquo": "\u2019", "rsquor": "\u2019", "rthree": "\u22CC", "rtimes": "\u22CA", "rtri": "\u25B9", "rtrie": "\u22B5", "rtrif": "\u25B8", "rtriltri": "\u29CE", "RuleDelayed": "\u29F4", "ruluhar": "\u2968", "rx": "\u211E", "sacute": "\u015B", "Sacute": "\u015A", "sbquo": "\u201A", "sc": "\u227B", "Sc": "\u2ABC", "scap": "\u2AB8", "scaron": "\u0161", "Scaron": "\u0160", "sccue": "\u227D", "sce": "\u2AB0", "scE": "\u2AB4", "scedil": "\u015F", "Scedil": "\u015E", "scirc": "\u015D", "Scirc": "\u015C", "scnap": "\u2ABA", "scnE": "\u2AB6", "scnsim": "\u22E9", "scpolint": "\u2A13", "scsim": "\u227F", "scy": "\u0441", "Scy": "\u0421", "sdot": "\u22C5", "sdotb": "\u22A1", "sdote": "\u2A66", "searhk": "\u2925", "searr": "\u2198", "seArr": "\u21D8", "searrow": "\u2198", "sect": "\xA7", "semi": ";", "seswar": "\u2929", "setminus": "\u2216", "setmn": "\u2216", "sext": "\u2736", "sfr": "\u{1D530}", "Sfr": "\u{1D516}", "sfrown": "\u2322", "sharp": "\u266F", "shchcy": "\u0449", "SHCHcy": "\u0429", "shcy": "\u0448", "SHcy": "\u0428", "ShortDownArrow": "\u2193", "ShortLeftArrow": "\u2190", "shortmid": "\u2223", "shortparallel": "\u2225", "ShortRightArrow": "\u2192", "ShortUpArrow": "\u2191", "shy": "\xAD", "sigma": "\u03C3", "Sigma": "\u03A3", "sigmaf": "\u03C2", "sigmav": "\u03C2", "sim": "\u223C", "simdot": "\u2A6A", "sime": "\u2243", "simeq": "\u2243", "simg": "\u2A9E", "simgE": "\u2AA0", "siml": "\u2A9D", "simlE": "\u2A9F", "simne": "\u2246", "simplus": "\u2A24", "simrarr": "\u2972", "slarr": "\u2190", "SmallCircle": "\u2218", "smallsetminus": "\u2216", "smashp": "\u2A33", "smeparsl": "\u29E4", "smid": "\u2223", "smile": "\u2323", "smt": "\u2AAA", "smte": "\u2AAC", "smtes": "\u2AAC\uFE00", "softcy": "\u044C", "SOFTcy": "\u042C", "sol": "/", "solb": "\u29C4", "solbar": "\u233F", "sopf": "\u{1D564}", "Sopf": "\u{1D54A}", "spades": "\u2660", "spadesuit": "\u2660", "spar": "\u2225", "sqcap": "\u2293", "sqcaps": "\u2293\uFE00", "sqcup": "\u2294", "sqcups": "\u2294\uFE00", "Sqrt": "\u221A", "sqsub": "\u228F", "sqsube": "\u2291", "sqsubset": "\u228F", "sqsubseteq": "\u2291", "sqsup": "\u2290", "sqsupe": "\u2292", "sqsupset": "\u2290", "sqsupseteq": "\u2292", "squ": "\u25A1", "square": "\u25A1", "Square": "\u25A1", "SquareIntersection": "\u2293", "SquareSubset": "\u228F", "SquareSubsetEqual": "\u2291", "SquareSuperset": "\u2290", "SquareSupersetEqual": "\u2292", "SquareUnion": "\u2294", "squarf": "\u25AA", "squf": "\u25AA", "srarr": "\u2192", "sscr": "\u{1D4C8}", "Sscr": "\u{1D4AE}", "ssetmn": "\u2216", "ssmile": "\u2323", "sstarf": "\u22C6", "star": "\u2606", "Star": "\u22C6", "starf": "\u2605", "straightepsilon": "\u03F5", "straightphi": "\u03D5", "strns": "\xAF", "sub": "\u2282", "Sub": "\u22D0", "subdot": "\u2ABD", "sube": "\u2286", "subE": "\u2AC5", "subedot": "\u2AC3", "submult": "\u2AC1", "subne": "\u228A", "subnE": "\u2ACB", "subplus": "\u2ABF", "subrarr": "\u2979", "subset": "\u2282", "Subset": "\u22D0", "subseteq": "\u2286", "subseteqq": "\u2AC5", "SubsetEqual": "\u2286", "subsetneq": "\u228A", "subsetneqq": "\u2ACB", "subsim": "\u2AC7", "subsub": "\u2AD5", "subsup": "\u2AD3", "succ": "\u227B", "succapprox": "\u2AB8", "succcurlyeq": "\u227D", "Succeeds": "\u227B", "SucceedsEqual": "\u2AB0", "SucceedsSlantEqual": "\u227D", "SucceedsTilde": "\u227F", "succeq": "\u2AB0", "succnapprox": "\u2ABA", "succneqq": "\u2AB6", "succnsim": "\u22E9", "succsim": "\u227F", "SuchThat": "\u220B", "sum": "\u2211", "Sum": "\u2211", "sung": "\u266A", "sup": "\u2283", "Sup": "\u22D1", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "supdot": "\u2ABE", "supdsub": "\u2AD8", "supe": "\u2287", "supE": "\u2AC6", "supedot": "\u2AC4", "Superset": "\u2283", "SupersetEqual": "\u2287", "suphsol": "\u27C9", "suphsub": "\u2AD7", "suplarr": "\u297B", "supmult": "\u2AC2", "supne": "\u228B", "supnE": "\u2ACC", "supplus": "\u2AC0", "supset": "\u2283", "Supset": "\u22D1", "supseteq": "\u2287", "supseteqq": "\u2AC6", "supsetneq": "\u228B", "supsetneqq": "\u2ACC", "supsim": "\u2AC8", "supsub": "\u2AD4", "supsup": "\u2AD6", "swarhk": "\u2926", "swarr": "\u2199", "swArr": "\u21D9", "swarrow": "\u2199", "swnwar": "\u292A", "szlig": "\xDF", "Tab": "	", "target": "\u2316", "tau": "\u03C4", "Tau": "\u03A4", "tbrk": "\u23B4", "tcaron": "\u0165", "Tcaron": "\u0164", "tcedil": "\u0163", "Tcedil": "\u0162", "tcy": "\u0442", "Tcy": "\u0422", "tdot": "\u20DB", "telrec": "\u2315", "tfr": "\u{1D531}", "Tfr": "\u{1D517}", "there4": "\u2234", "therefore": "\u2234", "Therefore": "\u2234", "theta": "\u03B8", "Theta": "\u0398", "thetasym": "\u03D1", "thetav": "\u03D1", "thickapprox": "\u2248", "thicksim": "\u223C", "ThickSpace": "\u205F\u200A", "thinsp": "\u2009", "ThinSpace": "\u2009", "thkap": "\u2248", "thksim": "\u223C", "thorn": "\xFE", "THORN": "\xDE", "tilde": "\u02DC", "Tilde": "\u223C", "TildeEqual": "\u2243", "TildeFullEqual": "\u2245", "TildeTilde": "\u2248", "times": "\xD7", "timesb": "\u22A0", "timesbar": "\u2A31", "timesd": "\u2A30", "tint": "\u222D", "toea": "\u2928", "top": "\u22A4", "topbot": "\u2336", "topcir": "\u2AF1", "topf": "\u{1D565}", "Topf": "\u{1D54B}", "topfork": "\u2ADA", "tosa": "\u2929", "tprime": "\u2034", "trade": "\u2122", "TRADE": "\u2122", "triangle": "\u25B5", "triangledown": "\u25BF", "triangleleft": "\u25C3", "trianglelefteq": "\u22B4", "triangleq": "\u225C", "triangleright": "\u25B9", "trianglerighteq": "\u22B5", "tridot": "\u25EC", "trie": "\u225C", "triminus": "\u2A3A", "TripleDot": "\u20DB", "triplus": "\u2A39", "trisb": "\u29CD", "tritime": "\u2A3B", "trpezium": "\u23E2", "tscr": "\u{1D4C9}", "Tscr": "\u{1D4AF}", "tscy": "\u0446", "TScy": "\u0426", "tshcy": "\u045B", "TSHcy": "\u040B", "tstrok": "\u0167", "Tstrok": "\u0166", "twixt": "\u226C", "twoheadleftarrow": "\u219E", "twoheadrightarrow": "\u21A0", "uacute": "\xFA", "Uacute": "\xDA", "uarr": "\u2191", "uArr": "\u21D1", "Uarr": "\u219F", "Uarrocir": "\u2949", "ubrcy": "\u045E", "Ubrcy": "\u040E", "ubreve": "\u016D", "Ubreve": "\u016C", "ucirc": "\xFB", "Ucirc": "\xDB", "ucy": "\u0443", "Ucy": "\u0423", "udarr": "\u21C5", "udblac": "\u0171", "Udblac": "\u0170", "udhar": "\u296E", "ufisht": "\u297E", "ufr": "\u{1D532}", "Ufr": "\u{1D518}", "ugrave": "\xF9", "Ugrave": "\xD9", "uHar": "\u2963", "uharl": "\u21BF", "uharr": "\u21BE", "uhblk": "\u2580", "ulcorn": "\u231C", "ulcorner": "\u231C", "ulcrop": "\u230F", "ultri": "\u25F8", "umacr": "\u016B", "Umacr": "\u016A", "uml": "\xA8", "UnderBar": "_", "UnderBrace": "\u23DF", "UnderBracket": "\u23B5", "UnderParenthesis": "\u23DD", "Union": "\u22C3", "UnionPlus": "\u228E", "uogon": "\u0173", "Uogon": "\u0172", "uopf": "\u{1D566}", "Uopf": "\u{1D54C}", "uparrow": "\u2191", "Uparrow": "\u21D1", "UpArrow": "\u2191", "UpArrowBar": "\u2912", "UpArrowDownArrow": "\u21C5", "updownarrow": "\u2195", "Updownarrow": "\u21D5", "UpDownArrow": "\u2195", "UpEquilibrium": "\u296E", "upharpoonleft": "\u21BF", "upharpoonright": "\u21BE", "uplus": "\u228E", "UpperLeftArrow": "\u2196", "UpperRightArrow": "\u2197", "upsi": "\u03C5", "Upsi": "\u03D2", "upsih": "\u03D2", "upsilon": "\u03C5", "Upsilon": "\u03A5", "UpTee": "\u22A5", "UpTeeArrow": "\u21A5", "upuparrows": "\u21C8", "urcorn": "\u231D", "urcorner": "\u231D", "urcrop": "\u230E", "uring": "\u016F", "Uring": "\u016E", "urtri": "\u25F9", "uscr": "\u{1D4CA}", "Uscr": "\u{1D4B0}", "utdot": "\u22F0", "utilde": "\u0169", "Utilde": "\u0168", "utri": "\u25B5", "utrif": "\u25B4", "uuarr": "\u21C8", "uuml": "\xFC", "Uuml": "\xDC", "uwangle": "\u29A7", "vangrt": "\u299C", "varepsilon": "\u03F5", "varkappa": "\u03F0", "varnothing": "\u2205", "varphi": "\u03D5", "varpi": "\u03D6", "varpropto": "\u221D", "varr": "\u2195", "vArr": "\u21D5", "varrho": "\u03F1", "varsigma": "\u03C2", "varsubsetneq": "\u228A\uFE00", "varsubsetneqq": "\u2ACB\uFE00", "varsupsetneq": "\u228B\uFE00", "varsupsetneqq": "\u2ACC\uFE00", "vartheta": "\u03D1", "vartriangleleft": "\u22B2", "vartriangleright": "\u22B3", "vBar": "\u2AE8", "Vbar": "\u2AEB", "vBarv": "\u2AE9", "vcy": "\u0432", "Vcy": "\u0412", "vdash": "\u22A2", "vDash": "\u22A8", "Vdash": "\u22A9", "VDash": "\u22AB", "Vdashl": "\u2AE6", "vee": "\u2228", "Vee": "\u22C1", "veebar": "\u22BB", "veeeq": "\u225A", "vellip": "\u22EE", "verbar": "|", "Verbar": "\u2016", "vert": "|", "Vert": "\u2016", "VerticalBar": "\u2223", "VerticalLine": "|", "VerticalSeparator": "\u2758", "VerticalTilde": "\u2240", "VeryThinSpace": "\u200A", "vfr": "\u{1D533}", "Vfr": "\u{1D519}", "vltri": "\u22B2", "vnsub": "\u2282\u20D2", "vnsup": "\u2283\u20D2", "vopf": "\u{1D567}", "Vopf": "\u{1D54D}", "vprop": "\u221D", "vrtri": "\u22B3", "vscr": "\u{1D4CB}", "Vscr": "\u{1D4B1}", "vsubne": "\u228A\uFE00", "vsubnE": "\u2ACB\uFE00", "vsupne": "\u228B\uFE00", "vsupnE": "\u2ACC\uFE00", "Vvdash": "\u22AA", "vzigzag": "\u299A", "wcirc": "\u0175", "Wcirc": "\u0174", "wedbar": "\u2A5F", "wedge": "\u2227", "Wedge": "\u22C0", "wedgeq": "\u2259", "weierp": "\u2118", "wfr": "\u{1D534}", "Wfr": "\u{1D51A}", "wopf": "\u{1D568}", "Wopf": "\u{1D54E}", "wp": "\u2118", "wr": "\u2240", "wreath": "\u2240", "wscr": "\u{1D4CC}", "Wscr": "\u{1D4B2}", "xcap": "\u22C2", "xcirc": "\u25EF", "xcup": "\u22C3", "xdtri": "\u25BD", "xfr": "\u{1D535}", "Xfr": "\u{1D51B}", "xharr": "\u27F7", "xhArr": "\u27FA", "xi": "\u03BE", "Xi": "\u039E", "xlarr": "\u27F5", "xlArr": "\u27F8", "xmap": "\u27FC", "xnis": "\u22FB", "xodot": "\u2A00", "xopf": "\u{1D569}", "Xopf": "\u{1D54F}", "xoplus": "\u2A01", "xotime": "\u2A02", "xrarr": "\u27F6", "xrArr": "\u27F9", "xscr": "\u{1D4CD}", "Xscr": "\u{1D4B3}", "xsqcup": "\u2A06", "xuplus": "\u2A04", "xutri": "\u25B3", "xvee": "\u22C1", "xwedge": "\u22C0", "yacute": "\xFD", "Yacute": "\xDD", "yacy": "\u044F", "YAcy": "\u042F", "ycirc": "\u0177", "Ycirc": "\u0176", "ycy": "\u044B", "Ycy": "\u042B", "yen": "\xA5", "yfr": "\u{1D536}", "Yfr": "\u{1D51C}", "yicy": "\u0457", "YIcy": "\u0407", "yopf": "\u{1D56A}", "Yopf": "\u{1D550}", "yscr": "\u{1D4CE}", "Yscr": "\u{1D4B4}", "yucy": "\u044E", "YUcy": "\u042E", "yuml": "\xFF", "Yuml": "\u0178", "zacute": "\u017A", "Zacute": "\u0179", "zcaron": "\u017E", "Zcaron": "\u017D", "zcy": "\u0437", "Zcy": "\u0417", "zdot": "\u017C", "Zdot": "\u017B", "zeetrf": "\u2128", "ZeroWidthSpace": "\u200B", "zeta": "\u03B6", "Zeta": "\u0396", "zfr": "\u{1D537}", "Zfr": "\u2128", "zhcy": "\u0436", "ZHcy": "\u0416", "zigrarr": "\u21DD", "zopf": "\u{1D56B}", "Zopf": "\u2124", "zscr": "\u{1D4CF}", "Zscr": "\u{1D4B5}", "zwj": "\u200D", "zwnj": "\u200C" };
        var decodeMapLegacy = { "aacute": "\xE1", "Aacute": "\xC1", "acirc": "\xE2", "Acirc": "\xC2", "acute": "\xB4", "aelig": "\xE6", "AElig": "\xC6", "agrave": "\xE0", "Agrave": "\xC0", "amp": "&", "AMP": "&", "aring": "\xE5", "Aring": "\xC5", "atilde": "\xE3", "Atilde": "\xC3", "auml": "\xE4", "Auml": "\xC4", "brvbar": "\xA6", "ccedil": "\xE7", "Ccedil": "\xC7", "cedil": "\xB8", "cent": "\xA2", "copy": "\xA9", "COPY": "\xA9", "curren": "\xA4", "deg": "\xB0", "divide": "\xF7", "eacute": "\xE9", "Eacute": "\xC9", "ecirc": "\xEA", "Ecirc": "\xCA", "egrave": "\xE8", "Egrave": "\xC8", "eth": "\xF0", "ETH": "\xD0", "euml": "\xEB", "Euml": "\xCB", "frac12": "\xBD", "frac14": "\xBC", "frac34": "\xBE", "gt": ">", "GT": ">", "iacute": "\xED", "Iacute": "\xCD", "icirc": "\xEE", "Icirc": "\xCE", "iexcl": "\xA1", "igrave": "\xEC", "Igrave": "\xCC", "iquest": "\xBF", "iuml": "\xEF", "Iuml": "\xCF", "laquo": "\xAB", "lt": "<", "LT": "<", "macr": "\xAF", "micro": "\xB5", "middot": "\xB7", "nbsp": "\xA0", "not": "\xAC", "ntilde": "\xF1", "Ntilde": "\xD1", "oacute": "\xF3", "Oacute": "\xD3", "ocirc": "\xF4", "Ocirc": "\xD4", "ograve": "\xF2", "Ograve": "\xD2", "ordf": "\xAA", "ordm": "\xBA", "oslash": "\xF8", "Oslash": "\xD8", "otilde": "\xF5", "Otilde": "\xD5", "ouml": "\xF6", "Ouml": "\xD6", "para": "\xB6", "plusmn": "\xB1", "pound": "\xA3", "quot": '"', "QUOT": '"', "raquo": "\xBB", "reg": "\xAE", "REG": "\xAE", "sect": "\xA7", "shy": "\xAD", "sup1": "\xB9", "sup2": "\xB2", "sup3": "\xB3", "szlig": "\xDF", "thorn": "\xFE", "THORN": "\xDE", "times": "\xD7", "uacute": "\xFA", "Uacute": "\xDA", "ucirc": "\xFB", "Ucirc": "\xDB", "ugrave": "\xF9", "Ugrave": "\xD9", "uml": "\xA8", "uuml": "\xFC", "Uuml": "\xDC", "yacute": "\xFD", "Yacute": "\xDD", "yen": "\xA5", "yuml": "\xFF" };
        var decodeMapNumeric = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
        var invalidReferenceCodePoints = [1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 64976, 64977, 64978, 64979, 64980, 64981, 64982, 64983, 64984, 64985, 64986, 64987, 64988, 64989, 64990, 64991, 64992, 64993, 64994, 64995, 64996, 64997, 64998, 64999, 65e3, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111];
        var stringFromCharCode = String.fromCharCode;
        var object = {};
        var hasOwnProperty2 = object.hasOwnProperty;
        var has = /* @__PURE__ */ __name(function(object2, propertyName) {
          return hasOwnProperty2.call(object2, propertyName);
        }, "has");
        var contains = /* @__PURE__ */ __name(function(array, value) {
          var index = -1;
          var length = array.length;
          while (++index < length) {
            if (array[index] == value) {
              return true;
            }
          }
          return false;
        }, "contains");
        var merge = /* @__PURE__ */ __name(function(options, defaults) {
          if (!options) {
            return defaults;
          }
          var result = {};
          var key2;
          for (key2 in defaults) {
            result[key2] = has(options, key2) ? options[key2] : defaults[key2];
          }
          return result;
        }, "merge");
        var codePointToSymbol = /* @__PURE__ */ __name(function(codePoint, strict) {
          var output = "";
          if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
            if (strict) {
              parseError5("character reference outside the permissible Unicode range");
            }
            return "\uFFFD";
          }
          if (has(decodeMapNumeric, codePoint)) {
            if (strict) {
              parseError5("disallowed character reference");
            }
            return decodeMapNumeric[codePoint];
          }
          if (strict && contains(invalidReferenceCodePoints, codePoint)) {
            parseError5("disallowed character reference");
          }
          if (codePoint > 65535) {
            codePoint -= 65536;
            output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          output += stringFromCharCode(codePoint);
          return output;
        }, "codePointToSymbol");
        var hexEscape = /* @__PURE__ */ __name(function(codePoint) {
          return "&#x" + codePoint.toString(16).toUpperCase() + ";";
        }, "hexEscape");
        var decEscape = /* @__PURE__ */ __name(function(codePoint) {
          return "&#" + codePoint + ";";
        }, "decEscape");
        var parseError5 = /* @__PURE__ */ __name(function(message) {
          throw Error("Parse error: " + message);
        }, "parseError");
        var encode = /* @__PURE__ */ __name(function(string, options) {
          options = merge(options, encode.options);
          var strict = options.strict;
          if (strict && regexInvalidRawCodePoint.test(string)) {
            parseError5("forbidden code point");
          }
          var encodeEverything = options.encodeEverything;
          var useNamedReferences = options.useNamedReferences;
          var allowUnsafeSymbols = options.allowUnsafeSymbols;
          var escapeCodePoint = options.decimal ? decEscape : hexEscape;
          var escapeBmpSymbol = /* @__PURE__ */ __name(function(symbol) {
            return escapeCodePoint(symbol.charCodeAt(0));
          }, "escapeBmpSymbol");
          if (encodeEverything) {
            string = string.replace(regexAsciiWhitelist, function(symbol) {
              if (useNamedReferences && has(encodeMap, symbol)) {
                return "&" + encodeMap[symbol] + ";";
              }
              return escapeBmpSymbol(symbol);
            });
            if (useNamedReferences) {
              string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;");
            }
            if (useNamedReferences) {
              string = string.replace(regexEncodeNonAscii, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
          } else if (useNamedReferences) {
            if (!allowUnsafeSymbols) {
              string = string.replace(regexEscape, function(string2) {
                return "&" + encodeMap[string2] + ";";
              });
            }
            string = string.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
            string = string.replace(regexEncodeNonAscii, function(string2) {
              return "&" + encodeMap[string2] + ";";
            });
          } else if (!allowUnsafeSymbols) {
            string = string.replace(regexEscape, escapeBmpSymbol);
          }
          return string.replace(regexAstralSymbols, function($0) {
            var high = $0.charCodeAt(0);
            var low = $0.charCodeAt(1);
            var codePoint = (high - 55296) * 1024 + low - 56320 + 65536;
            return escapeCodePoint(codePoint);
          }).replace(regexBmpWhitelist, escapeBmpSymbol);
        }, "encode");
        encode.options = {
          "allowUnsafeSymbols": false,
          "encodeEverything": false,
          "strict": false,
          "useNamedReferences": false,
          "decimal": false
        };
        var decode = /* @__PURE__ */ __name(function(html, options) {
          options = merge(options, decode.options);
          var strict = options.strict;
          if (strict && regexInvalidEntity.test(html)) {
            parseError5("malformed character reference");
          }
          return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
            var codePoint;
            var semicolon;
            var decDigits;
            var hexDigits;
            var reference;
            var next;
            if ($1) {
              reference = $1;
              return decodeMap[reference];
            }
            if ($2) {
              reference = $2;
              next = $3;
              if (next && options.isAttributeValue) {
                if (strict && next == "=") {
                  parseError5("`&` did not start a character reference");
                }
                return $0;
              } else {
                if (strict) {
                  parseError5(
                    "named character reference was not terminated by a semicolon"
                  );
                }
                return decodeMapLegacy[reference] + (next || "");
              }
            }
            if ($4) {
              decDigits = $4;
              semicolon = $5;
              if (strict && !semicolon) {
                parseError5("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(decDigits, 10);
              return codePointToSymbol(codePoint, strict);
            }
            if ($6) {
              hexDigits = $6;
              semicolon = $7;
              if (strict && !semicolon) {
                parseError5("character reference was not terminated by a semicolon");
              }
              codePoint = parseInt(hexDigits, 16);
              return codePointToSymbol(codePoint, strict);
            }
            if (strict) {
              parseError5(
                "named character reference was not terminated by a semicolon"
              );
            }
            return $0;
          });
        }, "decode");
        decode.options = {
          "isAttributeValue": false,
          "strict": false
        };
        var escape2 = /* @__PURE__ */ __name(function(string) {
          return string.replace(regexEscape, function($0) {
            return escapeMap[$0];
          });
        }, "escape");
        var he2 = {
          "version": "1.2.0",
          "encode": encode,
          "decode": decode,
          "escape": escape2,
          "unescape": decode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define(function() {
            return he2;
          });
        } else if (freeExports && !freeExports.nodeType) {
          if (freeModule) {
            freeModule.exports = he2;
          } else {
            for (var key in he2) {
              has(he2, key) && (freeExports[key] = he2[key]);
            }
          }
        } else {
          root.he = he2;
        }
      })(exports);
    }
  });

  // node_modules/entities/lib/maps/decode.json
  var require_decode = __commonJS({
    "node_modules/entities/lib/maps/decode.json"(exports, module) {
      module.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
    }
  });

  // node_modules/entities/lib/decode_codepoint.js
  var require_decode_codepoint = __commonJS({
    "node_modules/entities/lib/decode_codepoint.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var decode_json_1 = __importDefault(require_decode());
      var fromCodePoint = (
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        String.fromCodePoint || function(codePoint) {
          var output = "";
          if (codePoint > 65535) {
            codePoint -= 65536;
            output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          output += String.fromCharCode(codePoint);
          return output;
        }
      );
      function decodeCodePoint(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          return "\uFFFD";
        }
        if (codePoint in decode_json_1.default) {
          codePoint = decode_json_1.default[codePoint];
        }
        return fromCodePoint(codePoint);
      }
      __name(decodeCodePoint, "decodeCodePoint");
      exports.default = decodeCodePoint;
    }
  });

  // node_modules/entities/lib/maps/entities.json
  var require_entities = __commonJS({
    "node_modules/entities/lib/maps/entities.json"(exports, module) {
      module.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
    }
  });

  // node_modules/entities/lib/maps/legacy.json
  var require_legacy = __commonJS({
    "node_modules/entities/lib/maps/legacy.json"(exports, module) {
      module.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
    }
  });

  // node_modules/entities/lib/maps/xml.json
  var require_xml = __commonJS({
    "node_modules/entities/lib/maps/xml.json"(exports, module) {
      module.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
    }
  });

  // node_modules/htmlparser2/lib/Tokenizer.js
  var require_Tokenizer = __commonJS({
    "node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var decode_codepoint_1 = __importDefault(require_decode_codepoint());
      var entities_json_1 = __importDefault(require_entities());
      var legacy_json_1 = __importDefault(require_legacy());
      var xml_json_1 = __importDefault(require_xml());
      function whitespace(c) {
        return c === " " || c === "\n" || c === "	" || c === "\f" || c === "\r";
      }
      __name(whitespace, "whitespace");
      function isASCIIAlpha(c) {
        return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
      }
      __name(isASCIIAlpha, "isASCIIAlpha");
      function ifElseState(upper, SUCCESS, FAILURE) {
        var lower = upper.toLowerCase();
        if (upper === lower) {
          return function(t, c) {
            if (c === lower) {
              t._state = SUCCESS;
            } else {
              t._state = FAILURE;
              t._index--;
            }
          };
        }
        return function(t, c) {
          if (c === lower || c === upper) {
            t._state = SUCCESS;
          } else {
            t._state = FAILURE;
            t._index--;
          }
        };
      }
      __name(ifElseState, "ifElseState");
      function consumeSpecialNameChar(upper, NEXT_STATE) {
        var lower = upper.toLowerCase();
        return function(t, c) {
          if (c === lower || c === upper) {
            t._state = NEXT_STATE;
          } else {
            t._state = 3;
            t._index--;
          }
        };
      }
      __name(consumeSpecialNameChar, "consumeSpecialNameChar");
      var stateBeforeCdata1 = ifElseState(
        "C",
        24,
        16
        /* InDeclaration */
      );
      var stateBeforeCdata2 = ifElseState(
        "D",
        25,
        16
        /* InDeclaration */
      );
      var stateBeforeCdata3 = ifElseState(
        "A",
        26,
        16
        /* InDeclaration */
      );
      var stateBeforeCdata4 = ifElseState(
        "T",
        27,
        16
        /* InDeclaration */
      );
      var stateBeforeCdata5 = ifElseState(
        "A",
        28,
        16
        /* InDeclaration */
      );
      var stateBeforeScript1 = consumeSpecialNameChar(
        "R",
        35
        /* BeforeScript2 */
      );
      var stateBeforeScript2 = consumeSpecialNameChar(
        "I",
        36
        /* BeforeScript3 */
      );
      var stateBeforeScript3 = consumeSpecialNameChar(
        "P",
        37
        /* BeforeScript4 */
      );
      var stateBeforeScript4 = consumeSpecialNameChar(
        "T",
        38
        /* BeforeScript5 */
      );
      var stateAfterScript1 = ifElseState(
        "R",
        40,
        1
        /* Text */
      );
      var stateAfterScript2 = ifElseState(
        "I",
        41,
        1
        /* Text */
      );
      var stateAfterScript3 = ifElseState(
        "P",
        42,
        1
        /* Text */
      );
      var stateAfterScript4 = ifElseState(
        "T",
        43,
        1
        /* Text */
      );
      var stateBeforeStyle1 = consumeSpecialNameChar(
        "Y",
        45
        /* BeforeStyle2 */
      );
      var stateBeforeStyle2 = consumeSpecialNameChar(
        "L",
        46
        /* BeforeStyle3 */
      );
      var stateBeforeStyle3 = consumeSpecialNameChar(
        "E",
        47
        /* BeforeStyle4 */
      );
      var stateAfterStyle1 = ifElseState(
        "Y",
        49,
        1
        /* Text */
      );
      var stateAfterStyle2 = ifElseState(
        "L",
        50,
        1
        /* Text */
      );
      var stateAfterStyle3 = ifElseState(
        "E",
        51,
        1
        /* Text */
      );
      var stateBeforeSpecialT = consumeSpecialNameChar(
        "I",
        54
        /* BeforeTitle1 */
      );
      var stateBeforeTitle1 = consumeSpecialNameChar(
        "T",
        55
        /* BeforeTitle2 */
      );
      var stateBeforeTitle2 = consumeSpecialNameChar(
        "L",
        56
        /* BeforeTitle3 */
      );
      var stateBeforeTitle3 = consumeSpecialNameChar(
        "E",
        57
        /* BeforeTitle4 */
      );
      var stateAfterSpecialTEnd = ifElseState(
        "I",
        58,
        1
        /* Text */
      );
      var stateAfterTitle1 = ifElseState(
        "T",
        59,
        1
        /* Text */
      );
      var stateAfterTitle2 = ifElseState(
        "L",
        60,
        1
        /* Text */
      );
      var stateAfterTitle3 = ifElseState(
        "E",
        61,
        1
        /* Text */
      );
      var stateBeforeEntity = ifElseState(
        "#",
        63,
        64
        /* InNamedEntity */
      );
      var stateBeforeNumericEntity = ifElseState(
        "X",
        66,
        65
        /* InNumericEntity */
      );
      var Tokenizer = (
        /** @class */
        function() {
          function Tokenizer2(options, cbs) {
            var _a7;
            this._state = 1;
            this.buffer = "";
            this.sectionStart = 0;
            this._index = 0;
            this.bufferOffset = 0;
            this.baseState = 1;
            this.special = 1;
            this.running = true;
            this.ended = false;
            this.cbs = cbs;
            this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);
            this.decodeEntities = (_a7 = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a7 !== void 0 ? _a7 : true;
          }
          __name(Tokenizer2, "Tokenizer");
          Tokenizer2.prototype.reset = function() {
            this._state = 1;
            this.buffer = "";
            this.sectionStart = 0;
            this._index = 0;
            this.bufferOffset = 0;
            this.baseState = 1;
            this.special = 1;
            this.running = true;
            this.ended = false;
          };
          Tokenizer2.prototype.write = function(chunk) {
            if (this.ended)
              this.cbs.onerror(Error(".write() after done!"));
            this.buffer += chunk;
            this.parse();
          };
          Tokenizer2.prototype.end = function(chunk) {
            if (this.ended)
              this.cbs.onerror(Error(".end() after done!"));
            if (chunk)
              this.write(chunk);
            this.ended = true;
            if (this.running)
              this.finish();
          };
          Tokenizer2.prototype.pause = function() {
            this.running = false;
          };
          Tokenizer2.prototype.resume = function() {
            this.running = true;
            if (this._index < this.buffer.length) {
              this.parse();
            }
            if (this.ended) {
              this.finish();
            }
          };
          Tokenizer2.prototype.getAbsoluteIndex = function() {
            return this.bufferOffset + this._index;
          };
          Tokenizer2.prototype.stateText = function(c) {
            if (c === "<") {
              if (this._index > this.sectionStart) {
                this.cbs.ontext(this.getSection());
              }
              this._state = 2;
              this.sectionStart = this._index;
            } else if (this.decodeEntities && c === "&" && (this.special === 1 || this.special === 4)) {
              if (this._index > this.sectionStart) {
                this.cbs.ontext(this.getSection());
              }
              this.baseState = 1;
              this._state = 62;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.isTagStartChar = function(c) {
            return isASCIIAlpha(c) || this.xmlMode && !whitespace(c) && c !== "/" && c !== ">";
          };
          Tokenizer2.prototype.stateBeforeTagName = function(c) {
            if (c === "/") {
              this._state = 5;
            } else if (c === "<") {
              this.cbs.ontext(this.getSection());
              this.sectionStart = this._index;
            } else if (c === ">" || this.special !== 1 || whitespace(c)) {
              this._state = 1;
            } else if (c === "!") {
              this._state = 15;
              this.sectionStart = this._index + 1;
            } else if (c === "?") {
              this._state = 17;
              this.sectionStart = this._index + 1;
            } else if (!this.isTagStartChar(c)) {
              this._state = 1;
            } else {
              this._state = !this.xmlMode && (c === "s" || c === "S") ? 32 : !this.xmlMode && (c === "t" || c === "T") ? 52 : 3;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateInTagName = function(c) {
            if (c === "/" || c === ">" || whitespace(c)) {
              this.emitToken("onopentagname");
              this._state = 8;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
            if (whitespace(c)) {
            } else if (c === ">") {
              this._state = 1;
            } else if (this.special !== 1) {
              if (this.special !== 4 && (c === "s" || c === "S")) {
                this._state = 33;
              } else if (this.special === 4 && (c === "t" || c === "T")) {
                this._state = 53;
              } else {
                this._state = 1;
                this._index--;
              }
            } else if (!this.isTagStartChar(c)) {
              this._state = 20;
              this.sectionStart = this._index;
            } else {
              this._state = 6;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateInClosingTagName = function(c) {
            if (c === ">" || whitespace(c)) {
              this.emitToken("onclosetag");
              this._state = 7;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
            if (c === ">") {
              this._state = 1;
              this.sectionStart = this._index + 1;
            }
          };
          Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
            if (c === ">") {
              this.cbs.onopentagend();
              this._state = 1;
              this.sectionStart = this._index + 1;
            } else if (c === "/") {
              this._state = 4;
            } else if (!whitespace(c)) {
              this._state = 9;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
            if (c === ">") {
              this.cbs.onselfclosingtag();
              this._state = 1;
              this.sectionStart = this._index + 1;
              this.special = 1;
            } else if (!whitespace(c)) {
              this._state = 8;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateInAttributeName = function(c) {
            if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
              this.cbs.onattribname(this.getSection());
              this.sectionStart = -1;
              this._state = 10;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateAfterAttributeName = function(c) {
            if (c === "=") {
              this._state = 11;
            } else if (c === "/" || c === ">") {
              this.cbs.onattribend(void 0);
              this._state = 8;
              this._index--;
            } else if (!whitespace(c)) {
              this.cbs.onattribend(void 0);
              this._state = 9;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
            if (c === '"') {
              this._state = 12;
              this.sectionStart = this._index + 1;
            } else if (c === "'") {
              this._state = 13;
              this.sectionStart = this._index + 1;
            } else if (!whitespace(c)) {
              this._state = 14;
              this.sectionStart = this._index;
              this._index--;
            }
          };
          Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
            if (c === quote) {
              this.emitToken("onattribdata");
              this.cbs.onattribend(quote);
              this._state = 8;
            } else if (this.decodeEntities && c === "&") {
              this.emitToken("onattribdata");
              this.baseState = this._state;
              this._state = 62;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
            this.handleInAttributeValue(c, '"');
          };
          Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
            this.handleInAttributeValue(c, "'");
          };
          Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
            if (whitespace(c) || c === ">") {
              this.emitToken("onattribdata");
              this.cbs.onattribend(null);
              this._state = 8;
              this._index--;
            } else if (this.decodeEntities && c === "&") {
              this.emitToken("onattribdata");
              this.baseState = this._state;
              this._state = 62;
              this.sectionStart = this._index;
            }
          };
          Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
            this._state = c === "[" ? 23 : c === "-" ? 18 : 16;
          };
          Tokenizer2.prototype.stateInDeclaration = function(c) {
            if (c === ">") {
              this.cbs.ondeclaration(this.getSection());
              this._state = 1;
              this.sectionStart = this._index + 1;
            }
          };
          Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
            if (c === ">") {
              this.cbs.onprocessinginstruction(this.getSection());
              this._state = 1;
              this.sectionStart = this._index + 1;
            }
          };
          Tokenizer2.prototype.stateBeforeComment = function(c) {
            if (c === "-") {
              this._state = 19;
              this.sectionStart = this._index + 1;
            } else {
              this._state = 16;
            }
          };
          Tokenizer2.prototype.stateInComment = function(c) {
            if (c === "-")
              this._state = 21;
          };
          Tokenizer2.prototype.stateInSpecialComment = function(c) {
            if (c === ">") {
              this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
              this._state = 1;
              this.sectionStart = this._index + 1;
            }
          };
          Tokenizer2.prototype.stateAfterComment1 = function(c) {
            if (c === "-") {
              this._state = 22;
            } else {
              this._state = 19;
            }
          };
          Tokenizer2.prototype.stateAfterComment2 = function(c) {
            if (c === ">") {
              this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
              this._state = 1;
              this.sectionStart = this._index + 1;
            } else if (c !== "-") {
              this._state = 19;
            }
          };
          Tokenizer2.prototype.stateBeforeCdata6 = function(c) {
            if (c === "[") {
              this._state = 29;
              this.sectionStart = this._index + 1;
            } else {
              this._state = 16;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateInCdata = function(c) {
            if (c === "]")
              this._state = 30;
          };
          Tokenizer2.prototype.stateAfterCdata1 = function(c) {
            if (c === "]")
              this._state = 31;
            else
              this._state = 29;
          };
          Tokenizer2.prototype.stateAfterCdata2 = function(c) {
            if (c === ">") {
              this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
              this._state = 1;
              this.sectionStart = this._index + 1;
            } else if (c !== "]") {
              this._state = 29;
            }
          };
          Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
            if (c === "c" || c === "C") {
              this._state = 34;
            } else if (c === "t" || c === "T") {
              this._state = 44;
            } else {
              this._state = 3;
              this._index--;
            }
          };
          Tokenizer2.prototype.stateBeforeSpecialSEnd = function(c) {
            if (this.special === 2 && (c === "c" || c === "C")) {
              this._state = 39;
            } else if (this.special === 3 && (c === "t" || c === "T")) {
              this._state = 48;
            } else
              this._state = 1;
          };
          Tokenizer2.prototype.stateBeforeSpecialLast = function(c, special) {
            if (c === "/" || c === ">" || whitespace(c)) {
              this.special = special;
            }
            this._state = 3;
            this._index--;
          };
          Tokenizer2.prototype.stateAfterSpecialLast = function(c, sectionStartOffset) {
            if (c === ">" || whitespace(c)) {
              this.special = 1;
              this._state = 6;
              this.sectionStart = this._index - sectionStartOffset;
              this._index--;
            } else
              this._state = 1;
          };
          Tokenizer2.prototype.parseFixedEntity = function(map) {
            if (map === void 0) {
              map = this.xmlMode ? xml_json_1.default : entities_json_1.default;
            }
            if (this.sectionStart + 1 < this._index) {
              var entity = this.buffer.substring(this.sectionStart + 1, this._index);
              if (Object.prototype.hasOwnProperty.call(map, entity)) {
                this.emitPartial(map[entity]);
                this.sectionStart = this._index + 1;
              }
            }
          };
          Tokenizer2.prototype.parseLegacyEntity = function() {
            var start = this.sectionStart + 1;
            var limit = Math.min(this._index - start, 6);
            while (limit >= 2) {
              var entity = this.buffer.substr(start, limit);
              if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
                this.emitPartial(legacy_json_1.default[entity]);
                this.sectionStart += limit + 1;
                return;
              }
              limit--;
            }
          };
          Tokenizer2.prototype.stateInNamedEntity = function(c) {
            if (c === ";") {
              this.parseFixedEntity();
              if (this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode) {
                this.parseLegacyEntity();
              }
              this._state = this.baseState;
            } else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
              if (this.xmlMode || this.sectionStart + 1 === this._index) {
              } else if (this.baseState !== 1) {
                if (c !== "=") {
                  this.parseFixedEntity(legacy_json_1.default);
                }
              } else {
                this.parseLegacyEntity();
              }
              this._state = this.baseState;
              this._index--;
            }
          };
          Tokenizer2.prototype.decodeNumericEntity = function(offset, base, strict) {
            var sectionStart = this.sectionStart + offset;
            if (sectionStart !== this._index) {
              var entity = this.buffer.substring(sectionStart, this._index);
              var parsed = parseInt(entity, base);
              this.emitPartial(decode_codepoint_1.default(parsed));
              this.sectionStart = strict ? this._index + 1 : this._index;
            }
            this._state = this.baseState;
          };
          Tokenizer2.prototype.stateInNumericEntity = function(c) {
            if (c === ";") {
              this.decodeNumericEntity(2, 10, true);
            } else if (c < "0" || c > "9") {
              if (!this.xmlMode) {
                this.decodeNumericEntity(2, 10, false);
              } else {
                this._state = this.baseState;
              }
              this._index--;
            }
          };
          Tokenizer2.prototype.stateInHexEntity = function(c) {
            if (c === ";") {
              this.decodeNumericEntity(3, 16, true);
            } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
              if (!this.xmlMode) {
                this.decodeNumericEntity(3, 16, false);
              } else {
                this._state = this.baseState;
              }
              this._index--;
            }
          };
          Tokenizer2.prototype.cleanup = function() {
            if (this.sectionStart < 0) {
              this.buffer = "";
              this.bufferOffset += this._index;
              this._index = 0;
            } else if (this.running) {
              if (this._state === 1) {
                if (this.sectionStart !== this._index) {
                  this.cbs.ontext(this.buffer.substr(this.sectionStart));
                }
                this.buffer = "";
                this.bufferOffset += this._index;
                this._index = 0;
              } else if (this.sectionStart === this._index) {
                this.buffer = "";
                this.bufferOffset += this._index;
                this._index = 0;
              } else {
                this.buffer = this.buffer.substr(this.sectionStart);
                this._index -= this.sectionStart;
                this.bufferOffset += this.sectionStart;
              }
              this.sectionStart = 0;
            }
          };
          Tokenizer2.prototype.parse = function() {
            while (this._index < this.buffer.length && this.running) {
              var c = this.buffer.charAt(this._index);
              if (this._state === 1) {
                this.stateText(c);
              } else if (this._state === 12) {
                this.stateInAttributeValueDoubleQuotes(c);
              } else if (this._state === 9) {
                this.stateInAttributeName(c);
              } else if (this._state === 19) {
                this.stateInComment(c);
              } else if (this._state === 20) {
                this.stateInSpecialComment(c);
              } else if (this._state === 8) {
                this.stateBeforeAttributeName(c);
              } else if (this._state === 3) {
                this.stateInTagName(c);
              } else if (this._state === 6) {
                this.stateInClosingTagName(c);
              } else if (this._state === 2) {
                this.stateBeforeTagName(c);
              } else if (this._state === 10) {
                this.stateAfterAttributeName(c);
              } else if (this._state === 13) {
                this.stateInAttributeValueSingleQuotes(c);
              } else if (this._state === 11) {
                this.stateBeforeAttributeValue(c);
              } else if (this._state === 5) {
                this.stateBeforeClosingTagName(c);
              } else if (this._state === 7) {
                this.stateAfterClosingTagName(c);
              } else if (this._state === 32) {
                this.stateBeforeSpecialS(c);
              } else if (this._state === 21) {
                this.stateAfterComment1(c);
              } else if (this._state === 14) {
                this.stateInAttributeValueNoQuotes(c);
              } else if (this._state === 4) {
                this.stateInSelfClosingTag(c);
              } else if (this._state === 16) {
                this.stateInDeclaration(c);
              } else if (this._state === 15) {
                this.stateBeforeDeclaration(c);
              } else if (this._state === 22) {
                this.stateAfterComment2(c);
              } else if (this._state === 18) {
                this.stateBeforeComment(c);
              } else if (this._state === 33) {
                this.stateBeforeSpecialSEnd(c);
              } else if (this._state === 53) {
                stateAfterSpecialTEnd(this, c);
              } else if (this._state === 39) {
                stateAfterScript1(this, c);
              } else if (this._state === 40) {
                stateAfterScript2(this, c);
              } else if (this._state === 41) {
                stateAfterScript3(this, c);
              } else if (this._state === 34) {
                stateBeforeScript1(this, c);
              } else if (this._state === 35) {
                stateBeforeScript2(this, c);
              } else if (this._state === 36) {
                stateBeforeScript3(this, c);
              } else if (this._state === 37) {
                stateBeforeScript4(this, c);
              } else if (this._state === 38) {
                this.stateBeforeSpecialLast(
                  c,
                  2
                  /* Script */
                );
              } else if (this._state === 42) {
                stateAfterScript4(this, c);
              } else if (this._state === 43) {
                this.stateAfterSpecialLast(c, 6);
              } else if (this._state === 44) {
                stateBeforeStyle1(this, c);
              } else if (this._state === 29) {
                this.stateInCdata(c);
              } else if (this._state === 45) {
                stateBeforeStyle2(this, c);
              } else if (this._state === 46) {
                stateBeforeStyle3(this, c);
              } else if (this._state === 47) {
                this.stateBeforeSpecialLast(
                  c,
                  3
                  /* Style */
                );
              } else if (this._state === 48) {
                stateAfterStyle1(this, c);
              } else if (this._state === 49) {
                stateAfterStyle2(this, c);
              } else if (this._state === 50) {
                stateAfterStyle3(this, c);
              } else if (this._state === 51) {
                this.stateAfterSpecialLast(c, 5);
              } else if (this._state === 52) {
                stateBeforeSpecialT(this, c);
              } else if (this._state === 54) {
                stateBeforeTitle1(this, c);
              } else if (this._state === 55) {
                stateBeforeTitle2(this, c);
              } else if (this._state === 56) {
                stateBeforeTitle3(this, c);
              } else if (this._state === 57) {
                this.stateBeforeSpecialLast(
                  c,
                  4
                  /* Title */
                );
              } else if (this._state === 58) {
                stateAfterTitle1(this, c);
              } else if (this._state === 59) {
                stateAfterTitle2(this, c);
              } else if (this._state === 60) {
                stateAfterTitle3(this, c);
              } else if (this._state === 61) {
                this.stateAfterSpecialLast(c, 5);
              } else if (this._state === 17) {
                this.stateInProcessingInstruction(c);
              } else if (this._state === 64) {
                this.stateInNamedEntity(c);
              } else if (this._state === 23) {
                stateBeforeCdata1(this, c);
              } else if (this._state === 62) {
                stateBeforeEntity(this, c);
              } else if (this._state === 24) {
                stateBeforeCdata2(this, c);
              } else if (this._state === 25) {
                stateBeforeCdata3(this, c);
              } else if (this._state === 30) {
                this.stateAfterCdata1(c);
              } else if (this._state === 31) {
                this.stateAfterCdata2(c);
              } else if (this._state === 26) {
                stateBeforeCdata4(this, c);
              } else if (this._state === 27) {
                stateBeforeCdata5(this, c);
              } else if (this._state === 28) {
                this.stateBeforeCdata6(c);
              } else if (this._state === 66) {
                this.stateInHexEntity(c);
              } else if (this._state === 65) {
                this.stateInNumericEntity(c);
              } else if (this._state === 63) {
                stateBeforeNumericEntity(this, c);
              } else {
                this.cbs.onerror(Error("unknown _state"), this._state);
              }
              this._index++;
            }
            this.cleanup();
          };
          Tokenizer2.prototype.finish = function() {
            if (this.sectionStart < this._index) {
              this.handleTrailingData();
            }
            this.cbs.onend();
          };
          Tokenizer2.prototype.handleTrailingData = function() {
            var data = this.buffer.substr(this.sectionStart);
            if (this._state === 29 || this._state === 30 || this._state === 31) {
              this.cbs.oncdata(data);
            } else if (this._state === 19 || this._state === 21 || this._state === 22) {
              this.cbs.oncomment(data);
            } else if (this._state === 64 && !this.xmlMode) {
              this.parseLegacyEntity();
              if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
              }
            } else if (this._state === 65 && !this.xmlMode) {
              this.decodeNumericEntity(2, 10, false);
              if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
              }
            } else if (this._state === 66 && !this.xmlMode) {
              this.decodeNumericEntity(3, 16, false);
              if (this.sectionStart < this._index) {
                this._state = this.baseState;
                this.handleTrailingData();
              }
            } else if (this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6) {
              this.cbs.ontext(data);
            }
          };
          Tokenizer2.prototype.getSection = function() {
            return this.buffer.substring(this.sectionStart, this._index);
          };
          Tokenizer2.prototype.emitToken = function(name) {
            this.cbs[name](this.getSection());
            this.sectionStart = -1;
          };
          Tokenizer2.prototype.emitPartial = function(value) {
            if (this.baseState !== 1) {
              this.cbs.onattribdata(value);
            } else {
              this.cbs.ontext(value);
            }
          };
          return Tokenizer2;
        }()
      );
      exports.default = Tokenizer;
    }
  });

  // node_modules/htmlparser2/lib/Parser.js
  var require_Parser = __commonJS({
    "node_modules/htmlparser2/lib/Parser.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parser = void 0;
      var Tokenizer_1 = __importDefault(require_Tokenizer());
      var formTags = /* @__PURE__ */ new Set([
        "input",
        "option",
        "optgroup",
        "select",
        "button",
        "datalist",
        "textarea"
      ]);
      var pTag = /* @__PURE__ */ new Set(["p"]);
      var openImpliesClose = {
        tr: /* @__PURE__ */ new Set(["tr", "th", "td"]),
        th: /* @__PURE__ */ new Set(["th"]),
        td: /* @__PURE__ */ new Set(["thead", "th", "td"]),
        body: /* @__PURE__ */ new Set(["head", "link", "script"]),
        li: /* @__PURE__ */ new Set(["li"]),
        p: pTag,
        h1: pTag,
        h2: pTag,
        h3: pTag,
        h4: pTag,
        h5: pTag,
        h6: pTag,
        select: formTags,
        input: formTags,
        output: formTags,
        button: formTags,
        datalist: formTags,
        textarea: formTags,
        option: /* @__PURE__ */ new Set(["option"]),
        optgroup: /* @__PURE__ */ new Set(["optgroup", "option"]),
        dd: /* @__PURE__ */ new Set(["dt", "dd"]),
        dt: /* @__PURE__ */ new Set(["dt", "dd"]),
        address: pTag,
        article: pTag,
        aside: pTag,
        blockquote: pTag,
        details: pTag,
        div: pTag,
        dl: pTag,
        fieldset: pTag,
        figcaption: pTag,
        figure: pTag,
        footer: pTag,
        form: pTag,
        header: pTag,
        hr: pTag,
        main: pTag,
        nav: pTag,
        ol: pTag,
        pre: pTag,
        section: pTag,
        table: pTag,
        ul: pTag,
        rt: /* @__PURE__ */ new Set(["rt", "rp"]),
        rp: /* @__PURE__ */ new Set(["rt", "rp"]),
        tbody: /* @__PURE__ */ new Set(["thead", "tbody"]),
        tfoot: /* @__PURE__ */ new Set(["thead", "tbody"])
      };
      var voidElements = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
      var htmlIntegrationElements = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title"
      ]);
      var reNameEnd = /\s|\//;
      var Parser = (
        /** @class */
        function() {
          function Parser2(cbs, options) {
            if (options === void 0) {
              options = {};
            }
            var _a7, _b2, _c2, _d, _e2;
            this.startIndex = 0;
            this.endIndex = null;
            this.tagname = "";
            this.attribname = "";
            this.attribvalue = "";
            this.attribs = null;
            this.stack = [];
            this.foreignContext = [];
            this.options = options;
            this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
            this.lowerCaseTagNames = (_a7 = options.lowerCaseTags) !== null && _a7 !== void 0 ? _a7 : !options.xmlMode;
            this.lowerCaseAttributeNames = (_b2 = options.lowerCaseAttributeNames) !== null && _b2 !== void 0 ? _b2 : !options.xmlMode;
            this.tokenizer = new ((_c2 = options.Tokenizer) !== null && _c2 !== void 0 ? _c2 : Tokenizer_1.default)(this.options, this);
            (_e2 = (_d = this.cbs).onparserinit) === null || _e2 === void 0 ? void 0 : _e2.call(_d, this);
          }
          __name(Parser2, "Parser");
          Parser2.prototype.updatePosition = function(initialOffset) {
            if (this.endIndex === null) {
              if (this.tokenizer.sectionStart <= initialOffset) {
                this.startIndex = 0;
              } else {
                this.startIndex = this.tokenizer.sectionStart - initialOffset;
              }
            } else {
              this.startIndex = this.endIndex + 1;
            }
            this.endIndex = this.tokenizer.getAbsoluteIndex();
          };
          Parser2.prototype.ontext = function(data) {
            var _a7, _b2;
            this.updatePosition(1);
            this.endIndex--;
            (_b2 = (_a7 = this.cbs).ontext) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, data);
          };
          Parser2.prototype.onopentagname = function(name) {
            var _a7, _b2;
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            this.tagname = name;
            if (!this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
              var el2 = void 0;
              while (this.stack.length > 0 && openImpliesClose[name].has(el2 = this.stack[this.stack.length - 1])) {
                this.onclosetag(el2);
              }
            }
            if (this.options.xmlMode || !voidElements.has(name)) {
              this.stack.push(name);
              if (foreignContextElements.has(name)) {
                this.foreignContext.push(true);
              } else if (htmlIntegrationElements.has(name)) {
                this.foreignContext.push(false);
              }
            }
            (_b2 = (_a7 = this.cbs).onopentagname) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, name);
            if (this.cbs.onopentag)
              this.attribs = {};
          };
          Parser2.prototype.onopentagend = function() {
            var _a7, _b2;
            this.updatePosition(1);
            if (this.attribs) {
              (_b2 = (_a7 = this.cbs).onopentag) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, this.tagname, this.attribs);
              this.attribs = null;
            }
            if (!this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname)) {
              this.cbs.onclosetag(this.tagname);
            }
            this.tagname = "";
          };
          Parser2.prototype.onclosetag = function(name) {
            this.updatePosition(1);
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
              this.foreignContext.pop();
            }
            if (this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
              var pos = this.stack.lastIndexOf(name);
              if (pos !== -1) {
                if (this.cbs.onclosetag) {
                  pos = this.stack.length - pos;
                  while (pos--) {
                    this.cbs.onclosetag(this.stack.pop());
                  }
                } else
                  this.stack.length = pos;
              } else if (name === "p" && !this.options.xmlMode) {
                this.onopentagname(name);
                this.closeCurrentTag();
              }
            } else if (!this.options.xmlMode && (name === "br" || name === "p")) {
              this.onopentagname(name);
              this.closeCurrentTag();
            }
          };
          Parser2.prototype.onselfclosingtag = function() {
            if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
              this.closeCurrentTag();
            } else {
              this.onopentagend();
            }
          };
          Parser2.prototype.closeCurrentTag = function() {
            var _a7, _b2;
            var name = this.tagname;
            this.onopentagend();
            if (this.stack[this.stack.length - 1] === name) {
              (_b2 = (_a7 = this.cbs).onclosetag) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, name);
              this.stack.pop();
            }
          };
          Parser2.prototype.onattribname = function(name) {
            if (this.lowerCaseAttributeNames) {
              name = name.toLowerCase();
            }
            this.attribname = name;
          };
          Parser2.prototype.onattribdata = function(value) {
            this.attribvalue += value;
          };
          Parser2.prototype.onattribend = function(quote) {
            var _a7, _b2;
            (_b2 = (_a7 = this.cbs).onattribute) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, this.attribname, this.attribvalue, quote);
            if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
              this.attribs[this.attribname] = this.attribvalue;
            }
            this.attribname = "";
            this.attribvalue = "";
          };
          Parser2.prototype.getInstructionName = function(value) {
            var idx = value.search(reNameEnd);
            var name = idx < 0 ? value : value.substr(0, idx);
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            return name;
          };
          Parser2.prototype.ondeclaration = function(value) {
            if (this.cbs.onprocessinginstruction) {
              var name_1 = this.getInstructionName(value);
              this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
            }
          };
          Parser2.prototype.onprocessinginstruction = function(value) {
            if (this.cbs.onprocessinginstruction) {
              var name_2 = this.getInstructionName(value);
              this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
            }
          };
          Parser2.prototype.oncomment = function(value) {
            var _a7, _b2, _c2, _d;
            this.updatePosition(4);
            (_b2 = (_a7 = this.cbs).oncomment) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, value);
            (_d = (_c2 = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c2);
          };
          Parser2.prototype.oncdata = function(value) {
            var _a7, _b2, _c2, _d, _e2, _f;
            this.updatePosition(1);
            if (this.options.xmlMode || this.options.recognizeCDATA) {
              (_b2 = (_a7 = this.cbs).oncdatastart) === null || _b2 === void 0 ? void 0 : _b2.call(_a7);
              (_d = (_c2 = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c2, value);
              (_f = (_e2 = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e2);
            } else {
              this.oncomment("[CDATA[" + value + "]]");
            }
          };
          Parser2.prototype.onerror = function(err) {
            var _a7, _b2;
            (_b2 = (_a7 = this.cbs).onerror) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, err);
          };
          Parser2.prototype.onend = function() {
            var _a7, _b2;
            if (this.cbs.onclosetag) {
              for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
                ;
            }
            (_b2 = (_a7 = this.cbs).onend) === null || _b2 === void 0 ? void 0 : _b2.call(_a7);
          };
          Parser2.prototype.reset = function() {
            var _a7, _b2, _c2, _d;
            (_b2 = (_a7 = this.cbs).onreset) === null || _b2 === void 0 ? void 0 : _b2.call(_a7);
            this.tokenizer.reset();
            this.tagname = "";
            this.attribname = "";
            this.attribs = null;
            this.stack = [];
            (_d = (_c2 = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c2, this);
          };
          Parser2.prototype.parseComplete = function(data) {
            this.reset();
            this.end(data);
          };
          Parser2.prototype.write = function(chunk) {
            this.tokenizer.write(chunk);
          };
          Parser2.prototype.end = function(chunk) {
            this.tokenizer.end(chunk);
          };
          Parser2.prototype.pause = function() {
            this.tokenizer.pause();
          };
          Parser2.prototype.resume = function() {
            this.tokenizer.resume();
          };
          Parser2.prototype.parseChunk = function(chunk) {
            this.write(chunk);
          };
          Parser2.prototype.done = function(chunk) {
            this.end(chunk);
          };
          return Parser2;
        }()
      );
      exports.Parser = Parser;
    }
  });

  // node_modules/entities/lib/decode.js
  var require_decode2 = __commonJS({
    "node_modules/entities/lib/decode.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
      var entities_json_1 = __importDefault(require_entities());
      var legacy_json_1 = __importDefault(require_legacy());
      var xml_json_1 = __importDefault(require_xml());
      var decode_codepoint_1 = __importDefault(require_decode_codepoint());
      var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
      exports.decodeXML = getStrictDecoder(xml_json_1.default);
      exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
      function getStrictDecoder(map) {
        var replace = getReplacer(map);
        return function(str) {
          return String(str).replace(strictEntityRe, replace);
        };
      }
      __name(getStrictDecoder, "getStrictDecoder");
      var sorter = /* @__PURE__ */ __name(function(a, b) {
        return a < b ? 1 : -1;
      }, "sorter");
      exports.decodeHTML = function() {
        var legacy = Object.keys(legacy_json_1.default).sort(sorter);
        var keys = Object.keys(entities_json_1.default).sort(sorter);
        for (var i = 0, j = 0; i < keys.length; i++) {
          if (legacy[j] === keys[i]) {
            keys[i] += ";?";
            j++;
          } else {
            keys[i] += ";";
          }
        }
        var re2 = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
        var replace = getReplacer(entities_json_1.default);
        function replacer(str) {
          if (str.substr(-1) !== ";")
            str += ";";
          return replace(str);
        }
        __name(replacer, "replacer");
        return function(str) {
          return String(str).replace(re2, replacer);
        };
      }();
      function getReplacer(map) {
        return /* @__PURE__ */ __name(function replace(str) {
          if (str.charAt(1) === "#") {
            var secondChar = str.charAt(2);
            if (secondChar === "X" || secondChar === "x") {
              return decode_codepoint_1.default(parseInt(str.substr(3), 16));
            }
            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
          }
          return map[str.slice(1, -1)] || str;
        }, "replace");
      }
      __name(getReplacer, "getReplacer");
    }
  });

  // node_modules/entities/lib/encode.js
  var require_encode = __commonJS({
    "node_modules/entities/lib/encode.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
      var xml_json_1 = __importDefault(require_xml());
      var inverseXML = getInverseObj(xml_json_1.default);
      var xmlReplacer = getInverseReplacer(inverseXML);
      exports.encodeXML = getASCIIEncoder(inverseXML);
      var entities_json_1 = __importDefault(require_entities());
      var inverseHTML = getInverseObj(entities_json_1.default);
      var htmlReplacer = getInverseReplacer(inverseHTML);
      exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
      exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
      function getInverseObj(obj) {
        return Object.keys(obj).sort().reduce(function(inverse, name) {
          inverse[obj[name]] = "&" + name + ";";
          return inverse;
        }, {});
      }
      __name(getInverseObj, "getInverseObj");
      function getInverseReplacer(inverse) {
        var single = [];
        var multiple = [];
        for (var _i2 = 0, _a7 = Object.keys(inverse); _i2 < _a7.length; _i2++) {
          var k = _a7[_i2];
          if (k.length === 1) {
            single.push("\\" + k);
          } else {
            multiple.push(k);
          }
        }
        single.sort();
        for (var start = 0; start < single.length - 1; start++) {
          var end = start;
          while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
            end += 1;
          }
          var count = 1 + end - start;
          if (count < 3)
            continue;
          single.splice(start, count, single[start] + "-" + single[end]);
        }
        multiple.unshift("[" + single.join("") + "]");
        return new RegExp(multiple.join("|"), "g");
      }
      __name(getInverseReplacer, "getInverseReplacer");
      var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
      var getCodePoint = (
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        String.prototype.codePointAt != null ? (
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          function(str) {
            return str.codePointAt(0);
          }
        ) : (
          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          function(c) {
            return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
          }
        )
      );
      function singleCharReplacer(c) {
        return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
      }
      __name(singleCharReplacer, "singleCharReplacer");
      function getInverse(inverse, re2) {
        return function(data) {
          return data.replace(re2, function(name) {
            return inverse[name];
          }).replace(reNonASCII, singleCharReplacer);
        };
      }
      __name(getInverse, "getInverse");
      var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
      function escape2(data) {
        return data.replace(reEscapeChars, singleCharReplacer);
      }
      __name(escape2, "escape");
      exports.escape = escape2;
      function escapeUTF8(data) {
        return data.replace(xmlReplacer, singleCharReplacer);
      }
      __name(escapeUTF8, "escapeUTF8");
      exports.escapeUTF8 = escapeUTF8;
      function getASCIIEncoder(obj) {
        return function(data) {
          return data.replace(reEscapeChars, function(c) {
            return obj[c] || singleCharReplacer(c);
          });
        };
      }
      __name(getASCIIEncoder, "getASCIIEncoder");
    }
  });

  // node_modules/entities/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/entities/lib/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
      var decode_1 = require_decode2();
      var encode_1 = require_encode();
      function decode(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
      }
      __name(decode, "decode");
      exports.decode = decode;
      function decodeStrict(data, level) {
        return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
      }
      __name(decodeStrict, "decodeStrict");
      exports.decodeStrict = decodeStrict;
      function encode(data, level) {
        return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
      }
      __name(encode, "encode");
      exports.encode = encode;
      var encode_2 = require_encode();
      Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
        return encode_2.encodeXML;
      } });
      Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
        return encode_2.encodeNonAsciiHTML;
      } });
      Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
        return encode_2.escape;
      } });
      Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
        return encode_2.escapeUTF8;
      } });
      Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
        return encode_2.encodeHTML;
      } });
      var decode_2 = require_decode2();
      Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
      Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
        return decode_2.decodeHTML;
      } });
      Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
        return decode_2.decodeHTMLStrict;
      } });
      Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
        return decode_2.decodeXML;
      } });
    }
  });

  // node_modules/dom-serializer/lib/foreignNames.js
  var require_foreignNames = __commonJS({
    "node_modules/dom-serializer/lib/foreignNames.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.attributeNames = exports.elementNames = void 0;
      exports.elementNames = /* @__PURE__ */ new Map([
        ["altglyph", "altGlyph"],
        ["altglyphdef", "altGlyphDef"],
        ["altglyphitem", "altGlyphItem"],
        ["animatecolor", "animateColor"],
        ["animatemotion", "animateMotion"],
        ["animatetransform", "animateTransform"],
        ["clippath", "clipPath"],
        ["feblend", "feBlend"],
        ["fecolormatrix", "feColorMatrix"],
        ["fecomponenttransfer", "feComponentTransfer"],
        ["fecomposite", "feComposite"],
        ["feconvolvematrix", "feConvolveMatrix"],
        ["fediffuselighting", "feDiffuseLighting"],
        ["fedisplacementmap", "feDisplacementMap"],
        ["fedistantlight", "feDistantLight"],
        ["fedropshadow", "feDropShadow"],
        ["feflood", "feFlood"],
        ["fefunca", "feFuncA"],
        ["fefuncb", "feFuncB"],
        ["fefuncg", "feFuncG"],
        ["fefuncr", "feFuncR"],
        ["fegaussianblur", "feGaussianBlur"],
        ["feimage", "feImage"],
        ["femerge", "feMerge"],
        ["femergenode", "feMergeNode"],
        ["femorphology", "feMorphology"],
        ["feoffset", "feOffset"],
        ["fepointlight", "fePointLight"],
        ["fespecularlighting", "feSpecularLighting"],
        ["fespotlight", "feSpotLight"],
        ["fetile", "feTile"],
        ["feturbulence", "feTurbulence"],
        ["foreignobject", "foreignObject"],
        ["glyphref", "glyphRef"],
        ["lineargradient", "linearGradient"],
        ["radialgradient", "radialGradient"],
        ["textpath", "textPath"]
      ]);
      exports.attributeNames = /* @__PURE__ */ new Map([
        ["definitionurl", "definitionURL"],
        ["attributename", "attributeName"],
        ["attributetype", "attributeType"],
        ["basefrequency", "baseFrequency"],
        ["baseprofile", "baseProfile"],
        ["calcmode", "calcMode"],
        ["clippathunits", "clipPathUnits"],
        ["diffuseconstant", "diffuseConstant"],
        ["edgemode", "edgeMode"],
        ["filterunits", "filterUnits"],
        ["glyphref", "glyphRef"],
        ["gradienttransform", "gradientTransform"],
        ["gradientunits", "gradientUnits"],
        ["kernelmatrix", "kernelMatrix"],
        ["kernelunitlength", "kernelUnitLength"],
        ["keypoints", "keyPoints"],
        ["keysplines", "keySplines"],
        ["keytimes", "keyTimes"],
        ["lengthadjust", "lengthAdjust"],
        ["limitingconeangle", "limitingConeAngle"],
        ["markerheight", "markerHeight"],
        ["markerunits", "markerUnits"],
        ["markerwidth", "markerWidth"],
        ["maskcontentunits", "maskContentUnits"],
        ["maskunits", "maskUnits"],
        ["numoctaves", "numOctaves"],
        ["pathlength", "pathLength"],
        ["patterncontentunits", "patternContentUnits"],
        ["patterntransform", "patternTransform"],
        ["patternunits", "patternUnits"],
        ["pointsatx", "pointsAtX"],
        ["pointsaty", "pointsAtY"],
        ["pointsatz", "pointsAtZ"],
        ["preservealpha", "preserveAlpha"],
        ["preserveaspectratio", "preserveAspectRatio"],
        ["primitiveunits", "primitiveUnits"],
        ["refx", "refX"],
        ["refy", "refY"],
        ["repeatcount", "repeatCount"],
        ["repeatdur", "repeatDur"],
        ["requiredextensions", "requiredExtensions"],
        ["requiredfeatures", "requiredFeatures"],
        ["specularconstant", "specularConstant"],
        ["specularexponent", "specularExponent"],
        ["spreadmethod", "spreadMethod"],
        ["startoffset", "startOffset"],
        ["stddeviation", "stdDeviation"],
        ["stitchtiles", "stitchTiles"],
        ["surfacescale", "surfaceScale"],
        ["systemlanguage", "systemLanguage"],
        ["tablevalues", "tableValues"],
        ["targetx", "targetX"],
        ["targety", "targetY"],
        ["textlength", "textLength"],
        ["viewbox", "viewBox"],
        ["viewtarget", "viewTarget"],
        ["xchannelselector", "xChannelSelector"],
        ["ychannelselector", "yChannelSelector"],
        ["zoomandpan", "zoomAndPan"]
      ]);
    }
  });

  // node_modules/dom-serializer/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/dom-serializer/lib/index.js"(exports) {
      "use strict";
      var __assign2 = exports && exports.__assign || function() {
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign2.apply(this, arguments);
      };
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var ElementType = __importStar(require_lib());
      var entities_1 = require_lib3();
      var foreignNames_1 = require_foreignNames();
      var unencodedElements = /* @__PURE__ */ new Set([
        "style",
        "script",
        "xmp",
        "iframe",
        "noembed",
        "noframes",
        "plaintext",
        "noscript"
      ]);
      function formatAttributes(attributes, opts) {
        if (!attributes)
          return;
        return Object.keys(attributes).map(function(key) {
          var _a7, _b2;
          var value = (_a7 = attributes[key]) !== null && _a7 !== void 0 ? _a7 : "";
          if (opts.xmlMode === "foreign") {
            key = (_b2 = foreignNames_1.attributeNames.get(key)) !== null && _b2 !== void 0 ? _b2 : key;
          }
          if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
          }
          return key + '="' + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
        }).join(" ");
      }
      __name(formatAttributes, "formatAttributes");
      var singleTag = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      function render(node, options) {
        if (options === void 0) {
          options = {};
        }
        var nodes = Array.isArray(node) || node.cheerio ? node : [node];
        var output = "";
        for (var i = 0; i < nodes.length; i++) {
          output += renderNode(nodes[i], options);
        }
        return output;
      }
      __name(render, "render");
      exports.default = render;
      function renderNode(node, options) {
        switch (node.type) {
          case ElementType.Root:
            return render(node.children, options);
          case ElementType.Directive:
          case ElementType.Doctype:
            return renderDirective(node);
          case ElementType.Comment:
            return renderComment(node);
          case ElementType.CDATA:
            return renderCdata(node);
          case ElementType.Script:
          case ElementType.Style:
          case ElementType.Tag:
            return renderTag(node, options);
          case ElementType.Text:
            return renderText(node, options);
        }
      }
      __name(renderNode, "renderNode");
      var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title"
      ]);
      var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
      function renderTag(elem, opts) {
        var _a7;
        if (opts.xmlMode === "foreign") {
          elem.name = (_a7 = foreignNames_1.elementNames.get(elem.name)) !== null && _a7 !== void 0 ? _a7 : elem.name;
          if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign2(__assign2({}, opts), { xmlMode: false });
          }
        }
        if (!opts.xmlMode && foreignElements.has(elem.name)) {
          opts = __assign2(__assign2({}, opts), { xmlMode: "foreign" });
        }
        var tag = "<" + elem.name;
        var attribs = formatAttributes(elem.attribs, opts);
        if (attribs) {
          tag += " " + attribs;
        }
        if (elem.children.length === 0 && (opts.xmlMode ? (
          // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
          opts.selfClosingTags !== false
        ) : (
          // User explicitly asked for self-closing tags, even in HTML mode
          opts.selfClosingTags && singleTag.has(elem.name)
        ))) {
          if (!opts.xmlMode)
            tag += " ";
          tag += "/>";
        } else {
          tag += ">";
          if (elem.children.length > 0) {
            tag += render(elem.children, opts);
          }
          if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</" + elem.name + ">";
          }
        }
        return tag;
      }
      __name(renderTag, "renderTag");
      function renderDirective(elem) {
        return "<" + elem.data + ">";
      }
      __name(renderDirective, "renderDirective");
      function renderText(elem, opts) {
        var data = elem.data || "";
        if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
          data = entities_1.encodeXML(data);
        }
        return data;
      }
      __name(renderText, "renderText");
      function renderCdata(elem) {
        return "<![CDATA[" + elem.children[0].data + "]]>";
      }
      __name(renderCdata, "renderCdata");
      function renderComment(elem) {
        return "<!--" + elem.data + "-->";
      }
      __name(renderComment, "renderComment");
    }
  });

  // node_modules/domutils/lib/stringify.js
  var require_stringify2 = __commonJS({
    "node_modules/domutils/lib/stringify.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
      var domhandler_1 = require_lib2();
      var dom_serializer_1 = __importDefault(require_lib4());
      function getOuterHTML(node, options) {
        return dom_serializer_1.default(node, options);
      }
      __name(getOuterHTML, "getOuterHTML");
      exports.getOuterHTML = getOuterHTML;
      function getInnerHTML(node, options) {
        return domhandler_1.hasChildren(node) ? node.children.map(function(node2) {
          return getOuterHTML(node2, options);
        }).join("") : "";
      }
      __name(getInnerHTML, "getInnerHTML");
      exports.getInnerHTML = getInnerHTML;
      function getText(node) {
        if (Array.isArray(node))
          return node.map(getText).join("");
        if (domhandler_1.isTag(node))
          return node.name === "br" ? "\n" : getText(node.children);
        if (domhandler_1.isCDATA(node))
          return getText(node.children);
        if (domhandler_1.isText(node))
          return node.data;
        return "";
      }
      __name(getText, "getText");
      exports.getText = getText;
    }
  });

  // node_modules/domutils/lib/traversal.js
  var require_traversal = __commonJS({
    "node_modules/domutils/lib/traversal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
      var domhandler_1 = require_lib2();
      var emptyArray = [];
      function getChildren(elem) {
        var _a7;
        return (_a7 = elem.children) !== null && _a7 !== void 0 ? _a7 : emptyArray;
      }
      __name(getChildren, "getChildren");
      exports.getChildren = getChildren;
      function getParent(elem) {
        return elem.parent || null;
      }
      __name(getParent, "getParent");
      exports.getParent = getParent;
      function getSiblings(elem) {
        var _a7, _b2;
        var parent = getParent(elem);
        if (parent != null)
          return getChildren(parent);
        var siblings = [elem];
        var prev = elem.prev, next = elem.next;
        while (prev != null) {
          siblings.unshift(prev);
          _a7 = prev, prev = _a7.prev;
        }
        while (next != null) {
          siblings.push(next);
          _b2 = next, next = _b2.next;
        }
        return siblings;
      }
      __name(getSiblings, "getSiblings");
      exports.getSiblings = getSiblings;
      function getAttributeValue(elem, name) {
        var _a7;
        return (_a7 = elem.attribs) === null || _a7 === void 0 ? void 0 : _a7[name];
      }
      __name(getAttributeValue, "getAttributeValue");
      exports.getAttributeValue = getAttributeValue;
      function hasAttrib(elem, name) {
        return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
      }
      __name(hasAttrib, "hasAttrib");
      exports.hasAttrib = hasAttrib;
      function getName2(elem) {
        return elem.name;
      }
      __name(getName2, "getName");
      exports.getName = getName2;
      function nextElementSibling(elem) {
        var _a7;
        var next = elem.next;
        while (next !== null && !domhandler_1.isTag(next))
          _a7 = next, next = _a7.next;
        return next;
      }
      __name(nextElementSibling, "nextElementSibling");
      exports.nextElementSibling = nextElementSibling;
      function prevElementSibling(elem) {
        var _a7;
        var prev = elem.prev;
        while (prev !== null && !domhandler_1.isTag(prev))
          _a7 = prev, prev = _a7.prev;
        return prev;
      }
      __name(prevElementSibling, "prevElementSibling");
      exports.prevElementSibling = prevElementSibling;
    }
  });

  // node_modules/domutils/lib/manipulation.js
  var require_manipulation = __commonJS({
    "node_modules/domutils/lib/manipulation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
      function removeElement(elem) {
        if (elem.prev)
          elem.prev.next = elem.next;
        if (elem.next)
          elem.next.prev = elem.prev;
        if (elem.parent) {
          var childs = elem.parent.children;
          childs.splice(childs.lastIndexOf(elem), 1);
        }
      }
      __name(removeElement, "removeElement");
      exports.removeElement = removeElement;
      function replaceElement(elem, replacement) {
        var prev = replacement.prev = elem.prev;
        if (prev) {
          prev.next = replacement;
        }
        var next = replacement.next = elem.next;
        if (next) {
          next.prev = replacement;
        }
        var parent = replacement.parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs[childs.lastIndexOf(elem)] = replacement;
        }
      }
      __name(replaceElement, "replaceElement");
      exports.replaceElement = replaceElement;
      function appendChild(elem, child) {
        removeElement(child);
        child.next = null;
        child.parent = elem;
        if (elem.children.push(child) > 1) {
          var sibling = elem.children[elem.children.length - 2];
          sibling.next = child;
          child.prev = sibling;
        } else {
          child.prev = null;
        }
      }
      __name(appendChild, "appendChild");
      exports.appendChild = appendChild;
      function append(elem, next) {
        removeElement(next);
        var parent = elem.parent;
        var currNext = elem.next;
        next.next = currNext;
        next.prev = elem;
        elem.next = next;
        next.parent = parent;
        if (currNext) {
          currNext.prev = next;
          if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
          }
        } else if (parent) {
          parent.children.push(next);
        }
      }
      __name(append, "append");
      exports.append = append;
      function prependChild(elem, child) {
        removeElement(child);
        child.parent = elem;
        child.prev = null;
        if (elem.children.unshift(child) !== 1) {
          var sibling = elem.children[1];
          sibling.prev = child;
          child.next = sibling;
        } else {
          child.next = null;
        }
      }
      __name(prependChild, "prependChild");
      exports.prependChild = prependChild;
      function prepend(elem, prev) {
        removeElement(prev);
        var parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs.splice(childs.indexOf(elem), 0, prev);
        }
        if (elem.prev) {
          elem.prev.next = prev;
        }
        prev.parent = parent;
        prev.prev = elem.prev;
        prev.next = elem;
        elem.prev = prev;
      }
      __name(prepend, "prepend");
      exports.prepend = prepend;
    }
  });

  // node_modules/domutils/lib/querying.js
  var require_querying = __commonJS({
    "node_modules/domutils/lib/querying.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
      var domhandler_1 = require_lib2();
      function filter4(test, node, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        if (!Array.isArray(node))
          node = [node];
        return find(test, node, recurse, limit);
      }
      __name(filter4, "filter");
      exports.filter = filter4;
      function find(test, nodes, recurse, limit) {
        var result = [];
        for (var _i2 = 0, nodes_1 = nodes; _i2 < nodes_1.length; _i2++) {
          var elem = nodes_1[_i2];
          if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
              break;
          }
          if (recurse && domhandler_1.hasChildren(elem) && elem.children.length > 0) {
            var children = find(test, elem.children, recurse, limit);
            result.push.apply(result, children);
            limit -= children.length;
            if (limit <= 0)
              break;
          }
        }
        return result;
      }
      __name(find, "find");
      exports.find = find;
      function findOneChild(test, nodes) {
        return nodes.find(test);
      }
      __name(findOneChild, "findOneChild");
      exports.findOneChild = findOneChild;
      function findOne(test, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        var elem = null;
        for (var i = 0; i < nodes.length && !elem; i++) {
          var checked = nodes[i];
          if (!domhandler_1.isTag(checked)) {
            continue;
          } else if (test(checked)) {
            elem = checked;
          } else if (recurse && checked.children.length > 0) {
            elem = findOne(test, checked.children);
          }
        }
        return elem;
      }
      __name(findOne, "findOne");
      exports.findOne = findOne;
      function existsOne(test, nodes) {
        return nodes.some(function(checked) {
          return domhandler_1.isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
        });
      }
      __name(existsOne, "existsOne");
      exports.existsOne = existsOne;
      function findAll(test, nodes) {
        var _a7;
        var result = [];
        var stack = nodes.filter(domhandler_1.isTag);
        var elem;
        while (elem = stack.shift()) {
          var children = (_a7 = elem.children) === null || _a7 === void 0 ? void 0 : _a7.filter(domhandler_1.isTag);
          if (children && children.length > 0) {
            stack.unshift.apply(stack, children);
          }
          if (test(elem))
            result.push(elem);
        }
        return result;
      }
      __name(findAll, "findAll");
      exports.findAll = findAll;
    }
  });

  // node_modules/domutils/lib/legacy.js
  var require_legacy2 = __commonJS({
    "node_modules/domutils/lib/legacy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
      var domhandler_1 = require_lib2();
      var querying_1 = require_querying();
      var Checks = {
        tag_name: function(name) {
          if (typeof name === "function") {
            return function(elem) {
              return domhandler_1.isTag(elem) && name(elem.name);
            };
          } else if (name === "*") {
            return domhandler_1.isTag;
          }
          return function(elem) {
            return domhandler_1.isTag(elem) && elem.name === name;
          };
        },
        tag_type: function(type) {
          if (typeof type === "function") {
            return function(elem) {
              return type(elem.type);
            };
          }
          return function(elem) {
            return elem.type === type;
          };
        },
        tag_contains: function(data) {
          if (typeof data === "function") {
            return function(elem) {
              return domhandler_1.isText(elem) && data(elem.data);
            };
          }
          return function(elem) {
            return domhandler_1.isText(elem) && elem.data === data;
          };
        }
      };
      function getAttribCheck(attrib, value) {
        if (typeof value === "function") {
          return function(elem) {
            return domhandler_1.isTag(elem) && value(elem.attribs[attrib]);
          };
        }
        return function(elem) {
          return domhandler_1.isTag(elem) && elem.attribs[attrib] === value;
        };
      }
      __name(getAttribCheck, "getAttribCheck");
      function combineFuncs(a, b) {
        return function(elem) {
          return a(elem) || b(elem);
        };
      }
      __name(combineFuncs, "combineFuncs");
      function compileTest(options) {
        var funcs = Object.keys(options).map(function(key) {
          var value = options[key];
          return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
        });
        return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
      }
      __name(compileTest, "compileTest");
      function testElement(options, node) {
        var test = compileTest(options);
        return test ? test(node) : true;
      }
      __name(testElement, "testElement");
      exports.testElement = testElement;
      function getElements(options, nodes, recurse, limit) {
        if (limit === void 0) {
          limit = Infinity;
        }
        var test = compileTest(options);
        return test ? querying_1.filter(test, nodes, recurse, limit) : [];
      }
      __name(getElements, "getElements");
      exports.getElements = getElements;
      function getElementById(id, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (!Array.isArray(nodes))
          nodes = [nodes];
        return querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
      }
      __name(getElementById, "getElementById");
      exports.getElementById = getElementById;
      function getElementsByTagName(tagName3, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return querying_1.filter(Checks.tag_name(tagName3), nodes, recurse, limit);
      }
      __name(getElementsByTagName, "getElementsByTagName");
      exports.getElementsByTagName = getElementsByTagName;
      function getElementsByTagType(type, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
      }
      __name(getElementsByTagType, "getElementsByTagType");
      exports.getElementsByTagType = getElementsByTagType;
    }
  });

  // node_modules/domutils/lib/helpers.js
  var require_helpers = __commonJS({
    "node_modules/domutils/lib/helpers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
      var domhandler_1 = require_lib2();
      function removeSubsets(nodes) {
        var idx = nodes.length;
        while (--idx >= 0) {
          var node = nodes[idx];
          if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
          }
          for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
              nodes.splice(idx, 1);
              break;
            }
          }
        }
        return nodes;
      }
      __name(removeSubsets, "removeSubsets");
      exports.removeSubsets = removeSubsets;
      function compareDocumentPosition(nodeA, nodeB) {
        var aParents = [];
        var bParents = [];
        if (nodeA === nodeB) {
          return 0;
        }
        var current = domhandler_1.hasChildren(nodeA) ? nodeA : nodeA.parent;
        while (current) {
          aParents.unshift(current);
          current = current.parent;
        }
        current = domhandler_1.hasChildren(nodeB) ? nodeB : nodeB.parent;
        while (current) {
          bParents.unshift(current);
          current = current.parent;
        }
        var maxIdx = Math.min(aParents.length, bParents.length);
        var idx = 0;
        while (idx < maxIdx && aParents[idx] === bParents[idx]) {
          idx++;
        }
        if (idx === 0) {
          return 1;
        }
        var sharedParent = aParents[idx - 1];
        var siblings = sharedParent.children;
        var aSibling = aParents[idx];
        var bSibling = bParents[idx];
        if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
          if (sharedParent === nodeB) {
            return 4 | 16;
          }
          return 4;
        }
        if (sharedParent === nodeA) {
          return 2 | 8;
        }
        return 2;
      }
      __name(compareDocumentPosition, "compareDocumentPosition");
      exports.compareDocumentPosition = compareDocumentPosition;
      function uniqueSort(nodes) {
        nodes = nodes.filter(function(node, i, arr) {
          return !arr.includes(node, i + 1);
        });
        nodes.sort(function(a, b) {
          var relative = compareDocumentPosition(a, b);
          if (relative & 2) {
            return -1;
          } else if (relative & 4) {
            return 1;
          }
          return 0;
        });
        return nodes;
      }
      __name(uniqueSort, "uniqueSort");
      exports.uniqueSort = uniqueSort;
    }
  });

  // node_modules/domutils/lib/index.js
  var require_lib5 = __commonJS({
    "node_modules/domutils/lib/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
      __exportStar(require_stringify2(), exports);
      __exportStar(require_traversal(), exports);
      __exportStar(require_manipulation(), exports);
      __exportStar(require_querying(), exports);
      __exportStar(require_legacy2(), exports);
      __exportStar(require_helpers(), exports);
      var domhandler_1 = require_lib2();
      Object.defineProperty(exports, "isTag", { enumerable: true, get: function() {
        return domhandler_1.isTag;
      } });
      Object.defineProperty(exports, "isCDATA", { enumerable: true, get: function() {
        return domhandler_1.isCDATA;
      } });
      Object.defineProperty(exports, "isText", { enumerable: true, get: function() {
        return domhandler_1.isText;
      } });
      Object.defineProperty(exports, "isComment", { enumerable: true, get: function() {
        return domhandler_1.isComment;
      } });
      Object.defineProperty(exports, "isDocument", { enumerable: true, get: function() {
        return domhandler_1.isDocument;
      } });
      Object.defineProperty(exports, "hasChildren", { enumerable: true, get: function() {
        return domhandler_1.hasChildren;
      } });
    }
  });

  // node_modules/htmlparser2/lib/FeedHandler.js
  var require_FeedHandler = __commonJS({
    "node_modules/htmlparser2/lib/FeedHandler.js"(exports) {
      "use strict";
      var __extends3 = exports && exports.__extends || function() {
        var extendStatics2 = /* @__PURE__ */ __name(function(d, b) {
          extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics2(d, b);
        }, "extendStatics");
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics2(d, b);
          function __() {
            this.constructor = d;
          }
          __name(__, "__");
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseFeed = exports.FeedHandler = void 0;
      var domhandler_1 = __importDefault(require_lib2());
      var DomUtils = __importStar(require_lib5());
      var Parser_1 = require_Parser();
      var FeedItemMediaMedium;
      (function(FeedItemMediaMedium2) {
        FeedItemMediaMedium2[FeedItemMediaMedium2["image"] = 0] = "image";
        FeedItemMediaMedium2[FeedItemMediaMedium2["audio"] = 1] = "audio";
        FeedItemMediaMedium2[FeedItemMediaMedium2["video"] = 2] = "video";
        FeedItemMediaMedium2[FeedItemMediaMedium2["document"] = 3] = "document";
        FeedItemMediaMedium2[FeedItemMediaMedium2["executable"] = 4] = "executable";
      })(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
      var FeedItemMediaExpression;
      (function(FeedItemMediaExpression2) {
        FeedItemMediaExpression2[FeedItemMediaExpression2["sample"] = 0] = "sample";
        FeedItemMediaExpression2[FeedItemMediaExpression2["full"] = 1] = "full";
        FeedItemMediaExpression2[FeedItemMediaExpression2["nonstop"] = 2] = "nonstop";
      })(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
      var FeedHandler = (
        /** @class */
        function(_super) {
          __extends3(FeedHandler2, _super);
          function FeedHandler2(callback, options) {
            var _this = this;
            if (typeof callback === "object") {
              callback = void 0;
              options = callback;
            }
            _this = _super.call(this, callback, options) || this;
            return _this;
          }
          __name(FeedHandler2, "FeedHandler");
          FeedHandler2.prototype.onend = function() {
            var _a7, _b2;
            var feedRoot = getOneElement(isValidFeed, this.dom);
            if (!feedRoot) {
              this.handleCallback(new Error("couldn't find root of feed"));
              return;
            }
            var feed = {};
            if (feedRoot.name === "feed") {
              var childs = feedRoot.children;
              feed.type = "atom";
              addConditionally(feed, "id", "id", childs);
              addConditionally(feed, "title", "title", childs);
              var href = getAttribute("href", getOneElement("link", childs));
              if (href) {
                feed.link = href;
              }
              addConditionally(feed, "description", "subtitle", childs);
              var updated = fetch2("updated", childs);
              if (updated) {
                feed.updated = new Date(updated);
              }
              addConditionally(feed, "author", "email", childs, true);
              feed.items = getElements("entry", childs).map(function(item) {
                var entry = {};
                var children = item.children;
                addConditionally(entry, "id", "id", children);
                addConditionally(entry, "title", "title", children);
                var href2 = getAttribute("href", getOneElement("link", children));
                if (href2) {
                  entry.link = href2;
                }
                var description = fetch2("summary", children) || fetch2("content", children);
                if (description) {
                  entry.description = description;
                }
                var pubDate = fetch2("updated", children);
                if (pubDate) {
                  entry.pubDate = new Date(pubDate);
                }
                entry.media = getMediaElements(children);
                return entry;
              });
            } else {
              var childs = (_b2 = (_a7 = getOneElement("channel", feedRoot.children)) === null || _a7 === void 0 ? void 0 : _a7.children) !== null && _b2 !== void 0 ? _b2 : [];
              feed.type = feedRoot.name.substr(0, 3);
              feed.id = "";
              addConditionally(feed, "title", "title", childs);
              addConditionally(feed, "link", "link", childs);
              addConditionally(feed, "description", "description", childs);
              var updated = fetch2("lastBuildDate", childs);
              if (updated) {
                feed.updated = new Date(updated);
              }
              addConditionally(feed, "author", "managingEditor", childs, true);
              feed.items = getElements("item", feedRoot.children).map(function(item) {
                var entry = {};
                var children = item.children;
                addConditionally(entry, "id", "guid", children);
                addConditionally(entry, "title", "title", children);
                addConditionally(entry, "link", "link", children);
                addConditionally(entry, "description", "description", children);
                var pubDate = fetch2("pubDate", children);
                if (pubDate)
                  entry.pubDate = new Date(pubDate);
                entry.media = getMediaElements(children);
                return entry;
              });
            }
            this.feed = feed;
            this.handleCallback(null);
          };
          return FeedHandler2;
        }(domhandler_1.default)
      );
      exports.FeedHandler = FeedHandler;
      function getMediaElements(where) {
        return getElements("media:content", where).map(function(elem) {
          var media = {
            medium: elem.attribs.medium,
            isDefault: !!elem.attribs.isDefault
          };
          if (elem.attribs.url) {
            media.url = elem.attribs.url;
          }
          if (elem.attribs.fileSize) {
            media.fileSize = parseInt(elem.attribs.fileSize, 10);
          }
          if (elem.attribs.type) {
            media.type = elem.attribs.type;
          }
          if (elem.attribs.expression) {
            media.expression = elem.attribs.expression;
          }
          if (elem.attribs.bitrate) {
            media.bitrate = parseInt(elem.attribs.bitrate, 10);
          }
          if (elem.attribs.framerate) {
            media.framerate = parseInt(elem.attribs.framerate, 10);
          }
          if (elem.attribs.samplingrate) {
            media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
          }
          if (elem.attribs.channels) {
            media.channels = parseInt(elem.attribs.channels, 10);
          }
          if (elem.attribs.duration) {
            media.duration = parseInt(elem.attribs.duration, 10);
          }
          if (elem.attribs.height) {
            media.height = parseInt(elem.attribs.height, 10);
          }
          if (elem.attribs.width) {
            media.width = parseInt(elem.attribs.width, 10);
          }
          if (elem.attribs.lang) {
            media.lang = elem.attribs.lang;
          }
          return media;
        });
      }
      __name(getMediaElements, "getMediaElements");
      function getElements(tagName3, where) {
        return DomUtils.getElementsByTagName(tagName3, where, true);
      }
      __name(getElements, "getElements");
      function getOneElement(tagName3, node) {
        return DomUtils.getElementsByTagName(tagName3, node, true, 1)[0];
      }
      __name(getOneElement, "getOneElement");
      function fetch2(tagName3, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        return DomUtils.getText(DomUtils.getElementsByTagName(tagName3, where, recurse, 1)).trim();
      }
      __name(fetch2, "fetch");
      function getAttribute(name, elem) {
        if (!elem) {
          return null;
        }
        var attribs = elem.attribs;
        return attribs[name];
      }
      __name(getAttribute, "getAttribute");
      function addConditionally(obj, prop, what, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        var tmp = fetch2(what, where, recurse);
        if (tmp)
          obj[prop] = tmp;
      }
      __name(addConditionally, "addConditionally");
      function isValidFeed(value) {
        return value === "rss" || value === "feed" || value === "rdf:RDF";
      }
      __name(isValidFeed, "isValidFeed");
      function parseFeed(feed, options) {
        if (options === void 0) {
          options = { xmlMode: true };
        }
        var handler = new FeedHandler(options);
        new Parser_1.Parser(handler, options).end(feed);
        return handler.feed;
      }
      __name(parseFeed, "parseFeed");
      exports.parseFeed = parseFeed;
    }
  });

  // node_modules/htmlparser2/lib/index.js
  var require_lib6 = __commonJS({
    "node_modules/htmlparser2/lib/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
      var Parser_1 = require_Parser();
      Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
        return Parser_1.Parser;
      } });
      var domhandler_1 = require_lib2();
      Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
        return domhandler_1.DomHandler;
      } });
      Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
        return domhandler_1.DomHandler;
      } });
      function parseDocument(data, options) {
        var handler = new domhandler_1.DomHandler(void 0, options);
        new Parser_1.Parser(handler, options).end(data);
        return handler.root;
      }
      __name(parseDocument, "parseDocument");
      exports.parseDocument = parseDocument;
      function parseDOM(data, options) {
        return parseDocument(data, options).children;
      }
      __name(parseDOM, "parseDOM");
      exports.parseDOM = parseDOM;
      function createDomStream(cb, options, elementCb) {
        var handler = new domhandler_1.DomHandler(cb, options, elementCb);
        return new Parser_1.Parser(handler, options);
      }
      __name(createDomStream, "createDomStream");
      exports.createDomStream = createDomStream;
      var Tokenizer_1 = require_Tokenizer();
      Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
        return __importDefault(Tokenizer_1).default;
      } });
      var ElementType = __importStar(require_lib());
      exports.ElementType = ElementType;
      __exportStar(require_FeedHandler(), exports);
      exports.DomUtils = __importStar(require_lib5());
      var FeedHandler_1 = require_FeedHandler();
      Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function() {
        return FeedHandler_1.FeedHandler;
      } });
    }
  });

  // node_modules/html-to-text/lib/helper.js
  var require_helper = __commonJS({
    "node_modules/html-to-text/lib/helper.js"(exports, module) {
      var merge = require_cjs();
      function splitClassesAndIds(selectors) {
        const classes = [];
        const ids = [];
        for (const selector of selectors) {
          if (selector.startsWith(".")) {
            classes.push(selector.substring(1));
          } else if (selector.startsWith("#")) {
            ids.push(selector.substring(1));
          }
        }
        return { classes, ids };
      }
      __name(splitClassesAndIds, "splitClassesAndIds");
      function limitedDepthRecursive(n, f2, g = () => void 0) {
        if (n === void 0) {
          const f1 = /* @__PURE__ */ __name(function(...args) {
            return f2(f1, ...args);
          }, "f1");
          return f1;
        }
        if (n >= 0) {
          return function(...args) {
            return f2(limitedDepthRecursive(n - 1, f2, g), ...args);
          };
        }
        return g;
      }
      __name(limitedDepthRecursive, "limitedDepthRecursive");
      function numberToLetterSequence(num, baseChar = "a", base = 26) {
        const digits = [];
        do {
          num -= 1;
          digits.push(num % base);
          num = num / base >> 0;
        } while (num > 0);
        const baseCode = baseChar.charCodeAt(0);
        return digits.reverse().map((n) => String.fromCharCode(baseCode + n)).join("");
      }
      __name(numberToLetterSequence, "numberToLetterSequence");
      var I2 = ["I", "X", "C", "M"];
      var V = ["V", "L", "D"];
      function numberToRoman(num) {
        return [...num + ""].map((n) => +n).reverse().map((v, i) => v % 5 < 4 ? (v < 5 ? "" : V[i]) + I2[i].repeat(v % 5) : I2[i] + (v < 5 ? V[i] : I2[i + 1])).reverse().join("");
      }
      __name(numberToRoman, "numberToRoman");
      function trimCharacter(str, char) {
        let start = 0;
        let end = str.length;
        while (start < end && str[start] === char) {
          ++start;
        }
        while (end > start && str[end - 1] === char) {
          --end;
        }
        return start > 0 || end < str.length ? str.substring(start, end) : str;
      }
      __name(trimCharacter, "trimCharacter");
      function get(obj, path) {
        for (const key of path) {
          if (!obj) {
            return void 0;
          }
          obj = obj[key];
        }
        return obj;
      }
      __name(get, "get");
      function mergeDuplicatesPreferLast(items, getKey) {
        const map = /* @__PURE__ */ new Map();
        for (let i = items.length; i-- > 0; ) {
          const item = items[i];
          const key = getKey(item);
          map.set(
            key,
            map.has(key) ? merge(item, map.get(key), { arrayMerge: overwriteMerge }) : item
          );
        }
        return [...map.values()].reverse();
      }
      __name(mergeDuplicatesPreferLast, "mergeDuplicatesPreferLast");
      var overwriteMerge = /* @__PURE__ */ __name((acc, src, options) => [...src], "overwriteMerge");
      module.exports = {
        get,
        limitedDepthRecursive,
        mergeDuplicatesPreferLast,
        numberToLetterSequence,
        numberToRoman,
        splitClassesAndIds,
        trimCharacter
      };
    }
  });

  // node_modules/html-to-text/lib/typedefs.js
  var require_typedefs = __commonJS({
    "node_modules/html-to-text/lib/typedefs.js"() {
    }
  });

  // node_modules/html-to-text/lib/inline-text-builder.js
  var require_inline_text_builder = __commonJS({
    "node_modules/html-to-text/lib/inline-text-builder.js"(exports, module) {
      require_typedefs();
      var InlineTextBuilder = class {
        /**
         * Creates an instance of InlineTextBuilder.
         *
         * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.
         *
         * @param { Options } options           HtmlToText options.
         * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.
         */
        constructor(options, maxLineLength = void 0) {
          this.lines = [];
          this.nextLineWords = [];
          this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;
          this.nextLineAvailableChars = this.maxLineLength;
          this.wrapCharacters = options.longWordSplit.wrapCharacters || [];
          this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;
          this.stashedSpace = false;
          this.wordBreakOpportunity = false;
        }
        /**
         * Add a new word.
         *
         * @param { string } word A word to add.
         */
        pushWord(word) {
          if (this.nextLineAvailableChars <= 0) {
            this.startNewLine();
          }
          const isLineStart = this.nextLineWords.length === 0;
          const cost = word.length + (isLineStart ? 0 : 1);
          if (cost <= this.nextLineAvailableChars) {
            this.nextLineWords.push(word);
            this.nextLineAvailableChars -= cost;
          } else {
            const [first, ...rest] = this.splitLongWord(word);
            if (!isLineStart) {
              this.startNewLine();
            }
            this.nextLineWords.push(first);
            this.nextLineAvailableChars -= first.length;
            for (const part of rest) {
              this.startNewLine();
              this.nextLineWords.push(part);
              this.nextLineAvailableChars -= part.length;
            }
          }
        }
        /**
         * Pop a word from the currently built line.
         * This doesn't affect completed lines.
         *
         * @returns { string }
         */
        popWord() {
          const lastWord = this.nextLineWords.pop();
          if (lastWord !== void 0) {
            const isLineStart = this.nextLineWords.length === 0;
            const cost = lastWord.length + (isLineStart ? 0 : 1);
            this.nextLineAvailableChars += cost;
          }
          return lastWord;
        }
        /**
         * Concat a word to the last word already in the builder.
         * Adds a new word in case there are no words yet in the last line.
         *
         * @param { string } word A word to be concatenated.
         */
        concatWord(word) {
          if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {
            this.pushWord(word);
            this.wordBreakOpportunity = false;
          } else {
            const lastWord = this.popWord();
            this.pushWord(lastWord ? lastWord.concat(word) : word);
          }
        }
        /**
         * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.
         *
         * @param { number } n Number of line breaks that will be added to the resulting string.
         */
        startNewLine(n = 1) {
          this.lines.push(this.nextLineWords);
          if (n > 1) {
            this.lines.push(...Array.from({ length: n - 1 }, () => []));
          }
          this.nextLineWords = [];
          this.nextLineAvailableChars = this.maxLineLength;
        }
        /**
         * No words in this builder.
         *
         * @returns { boolean }
         */
        isEmpty() {
          return this.lines.length === 0 && this.nextLineWords.length === 0;
        }
        clear() {
          this.lines.length = 0;
          this.nextLineWords.length = 0;
          this.nextLineAvailableChars = this.maxLineLength;
        }
        /**
         * Join all lines of words inside the InlineTextBuilder into a complete string.
         *
         * @returns { string }
         */
        toString() {
          return [...this.lines, this.nextLineWords].map((words) => words.join(" ")).join("\n");
        }
        /**
         * Split a long word up to fit within the word wrap limit.
         * Use either a character to split looking back from the word wrap limit,
         * or truncate to the word wrap limit.
         *
         * @param   { string }   word Input word.
         * @returns { string[] }      Parts of the word.
         */
        splitLongWord(word) {
          const parts = [];
          let idx = 0;
          while (word.length > this.maxLineLength) {
            const firstLine = word.substring(0, this.maxLineLength);
            const remainingChars = word.substring(this.maxLineLength);
            const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);
            if (splitIndex > -1) {
              word = firstLine.substring(splitIndex + 1) + remainingChars;
              parts.push(firstLine.substring(0, splitIndex + 1));
            } else {
              idx++;
              if (idx < this.wrapCharacters.length) {
                word = firstLine + remainingChars;
              } else {
                if (this.forceWrapOnLimit) {
                  parts.push(firstLine);
                  word = remainingChars;
                  if (word.length > this.maxLineLength) {
                    continue;
                  }
                } else {
                  word = firstLine + remainingChars;
                }
                break;
              }
            }
          }
          parts.push(word);
          return parts;
        }
      };
      __name(InlineTextBuilder, "InlineTextBuilder");
      module.exports = { InlineTextBuilder };
    }
  });

  // node_modules/html-to-text/lib/stack-item.js
  var require_stack_item = __commonJS({
    "node_modules/html-to-text/lib/stack-item.js"(exports, module) {
      var { InlineTextBuilder } = require_inline_text_builder();
      var StackItem = class {
        constructor(next = null) {
          this.next = next;
        }
        getRoot() {
          return this.next ? this.next : this;
        }
      };
      __name(StackItem, "StackItem");
      var BlockStackItem = class extends StackItem {
        constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = void 0) {
          super(next);
          this.leadingLineBreaks = leadingLineBreaks;
          this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);
          this.rawText = "";
          this.stashedLineBreaks = 0;
          this.isPre = next && next.isPre;
        }
      };
      __name(BlockStackItem, "BlockStackItem");
      var TableStackItem = class extends StackItem {
        constructor(next = null) {
          super(next);
          this.rows = [];
          this.isPre = next && next.isPre;
        }
      };
      __name(TableStackItem, "TableStackItem");
      var TableRowStackItem = class extends StackItem {
        constructor(next = null) {
          super(next);
          this.cells = [];
          this.isPre = next && next.isPre;
        }
      };
      __name(TableRowStackItem, "TableRowStackItem");
      var TableCellStackItem = class extends StackItem {
        constructor(options, next = null, maxColumnWidth = void 0) {
          super(next);
          this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);
          this.rawText = "";
          this.stashedLineBreaks = 0;
          this.isPre = next && next.isPre;
        }
      };
      __name(TableCellStackItem, "TableCellStackItem");
      var TransformerStackItem = class extends StackItem {
        constructor(next = null, transform) {
          super(next);
          this.transform = transform;
        }
      };
      __name(TransformerStackItem, "TransformerStackItem");
      module.exports = {
        BlockStackItem,
        StackItem,
        TableCellStackItem,
        TableRowStackItem,
        TableStackItem,
        TransformerStackItem
      };
    }
  });

  // node_modules/html-to-text/lib/table-printer.js
  var require_table_printer = __commonJS({
    "node_modules/html-to-text/lib/table-printer.js"(exports, module) {
      function getRow(matrix, j) {
        if (!matrix[j]) {
          matrix[j] = [];
        }
        return matrix[j];
      }
      __name(getRow, "getRow");
      function findFirstVacantIndex(row, x2 = 0) {
        while (row[x2]) {
          x2++;
        }
        return x2;
      }
      __name(findFirstVacantIndex, "findFirstVacantIndex");
      function transposeInPlace(matrix, maxSize) {
        for (let i = 0; i < maxSize; i++) {
          const rowI = getRow(matrix, i);
          for (let j = 0; j < i; j++) {
            const rowJ = getRow(matrix, j);
            const temp = rowI[j];
            rowI[j] = rowJ[i];
            rowJ[i] = temp;
          }
        }
      }
      __name(transposeInPlace, "transposeInPlace");
      function putCellIntoLayout(cell, layout, baseRow, baseCol) {
        for (let r = 0; r < cell.rowspan; r++) {
          const layoutRow = getRow(layout, baseRow + r);
          for (let c = 0; c < cell.colspan; c++) {
            layoutRow[baseCol + c] = cell;
          }
        }
      }
      __name(putCellIntoLayout, "putCellIntoLayout");
      function updateOffset(offsets, base, span, value) {
        offsets[base + span] = Math.max(
          offsets[base + span] || 0,
          offsets[base] + value
        );
      }
      __name(updateOffset, "updateOffset");
      function tableToString(tableRows, rowSpacing, colSpacing) {
        const layout = [];
        let colNumber = 0;
        const rowNumber = tableRows.length;
        const rowOffsets = [0];
        for (let j = 0; j < rowNumber; j++) {
          const layoutRow = getRow(layout, j);
          const cells = tableRows[j];
          let x2 = 0;
          for (let i = 0; i < cells.length; i++) {
            const cell = cells[i];
            x2 = findFirstVacantIndex(layoutRow, x2);
            putCellIntoLayout(cell, layout, j, x2);
            x2 += cell.colspan;
            cell.lines = cell.text.split("\n");
            const cellHeight = cell.lines.length;
            updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);
          }
          colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;
        }
        transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);
        const outputLines = [];
        const colOffsets = [0];
        for (let x2 = 0; x2 < colNumber; x2++) {
          let y = 0;
          let cell;
          while (y < rowNumber && (cell = layout[x2][y])) {
            if (!cell.rendered) {
              let cellWidth = 0;
              for (let j = 0; j < cell.lines.length; j++) {
                const line = cell.lines[j];
                const lineOffset = rowOffsets[y] + j;
                outputLines[lineOffset] = (outputLines[lineOffset] || "").padEnd(colOffsets[x2]) + line;
                cellWidth = line.length > cellWidth ? line.length : cellWidth;
              }
              updateOffset(colOffsets, x2, cell.colspan, cellWidth + colSpacing);
              cell.rendered = true;
            }
            y += cell.rowspan;
          }
        }
        return outputLines.join("\n");
      }
      __name(tableToString, "tableToString");
      module.exports = { tableToString };
    }
  });

  // node_modules/html-to-text/lib/whitespace-processor.js
  var require_whitespace_processor = __commonJS({
    "node_modules/html-to-text/lib/whitespace-processor.js"(exports, module) {
      var { InlineTextBuilder } = require_inline_text_builder();
      require_typedefs();
      function charactersToCodes(str) {
        return [...str].map((c) => "\\u" + c.charCodeAt(0).toString(16).padStart(4, "0")).join("");
      }
      __name(charactersToCodes, "charactersToCodes");
      var WhitespaceProcessor = class {
        /**
         * Creates an instance of WhitespaceProcessor.
         *
         * @param { Options } options    HtmlToText options.
         * @memberof WhitespaceProcessor
         */
        constructor(options) {
          this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\n/g, "") : options.whitespaceCharacters;
          const whitespaceCodes = charactersToCodes(this.whitespaceChars);
          this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);
          this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);
          this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);
          this.newlineOrNonWhitespaceRe = new RegExp(`(\\n|[^\\n${whitespaceCodes}])`, "g");
          if (options.preserveNewlines) {
            const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, "gm");
            this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str) => str) {
              if (!text) {
                return;
              }
              const previouslyStashedSpace = inlineTextBuilder.stashedSpace;
              let anyMatch = false;
              let m = wordOrNewlineRe.exec(text);
              if (m) {
                anyMatch = true;
                if (m[0] === "\n") {
                  inlineTextBuilder.startNewLine();
                } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {
                  inlineTextBuilder.pushWord(transform(m[0]));
                } else {
                  inlineTextBuilder.concatWord(transform(m[0]));
                }
                while ((m = wordOrNewlineRe.exec(text)) !== null) {
                  if (m[0] === "\n") {
                    inlineTextBuilder.startNewLine();
                  } else {
                    inlineTextBuilder.pushWord(transform(m[0]));
                  }
                }
              }
              inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);
            };
          } else {
            const wordRe = new RegExp(`[^${whitespaceCodes}]+`, "g");
            this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str) => str) {
              if (!text) {
                return;
              }
              const previouslyStashedSpace = inlineTextBuilder.stashedSpace;
              let anyMatch = false;
              let m = wordRe.exec(text);
              if (m) {
                anyMatch = true;
                if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {
                  inlineTextBuilder.pushWord(transform(m[0]));
                } else {
                  inlineTextBuilder.concatWord(transform(m[0]));
                }
                while ((m = wordRe.exec(text)) !== null) {
                  inlineTextBuilder.pushWord(transform(m[0]));
                }
              }
              inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);
            };
          }
        }
        /**
         * Test whether the given text starts with HTML whitespace character.
         *
         * @param   { string }  text  The string to test.
         * @returns { boolean }
         */
        testLeadingWhitespace(text) {
          return this.leadingWhitespaceRe.test(text);
        }
        /**
         * Test whether the given text ends with HTML whitespace character.
         *
         * @param   { string }  text  The string to test.
         * @returns { boolean }
         */
        testTrailingWhitespace(text) {
          return this.trailingWhitespaceRe.test(text);
        }
        /**
         * Test whether the given text contains any non-whitespace characters.
         *
         * @param   { string }  text  The string to test.
         * @returns { boolean }
         */
        testContainsWords(text) {
          return !this.allWhitespaceOrEmptyRe.test(text);
        }
        /**
         * Return the number of newlines if there are no words.
         *
         * If any word is found then return zero regardless of the actual number of newlines.
         *
         * @param   { string }  text  Input string.
         * @returns { number }
         */
        countNewlinesNoWords(text) {
          this.newlineOrNonWhitespaceRe.lastIndex = 0;
          let counter = 0;
          let match;
          while ((match = this.newlineOrNonWhitespaceRe.exec(text)) !== null) {
            if (match[0] === "\n") {
              counter++;
            } else {
              return 0;
            }
          }
          return counter;
        }
      };
      __name(WhitespaceProcessor, "WhitespaceProcessor");
      module.exports = { WhitespaceProcessor };
    }
  });

  // node_modules/html-to-text/lib/block-text-builder.js
  var require_block_text_builder = __commonJS({
    "node_modules/html-to-text/lib/block-text-builder.js"(exports, module) {
      var { Picker } = require_selderee();
      var { trimCharacter } = require_helper();
      var { StackItem, BlockStackItem, TableCellStackItem, TableRowStackItem, TableStackItem, TransformerStackItem } = require_stack_item();
      var { tableToString } = require_table_printer();
      var { WhitespaceProcessor } = require_whitespace_processor();
      require_typedefs();
      var BlockTextBuilder = class {
        /**
         * Creates an instance of BlockTextBuilder.
         *
         * @param { Options } options HtmlToText options.
         * @param { Picker<DomNode, TagDefinition> } picker Selectors decision tree picker.
         */
        constructor(options, picker) {
          this.options = options;
          this.picker = picker;
          this.whitespaceProcessor = new WhitespaceProcessor(options);
          this._stackItem = new BlockStackItem(options);
          this._wordTransformer = void 0;
        }
        /**
         * Put a word-by-word transform function onto the transformations stack.
         *
         * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.
         *
         * Word transformations applied before wrapping.
         *
         * @param { (str: string) => string } wordTransform Word transformation function.
         */
        pushWordTransform(wordTransform) {
          this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);
        }
        /**
         * Remove a function from the word transformations stack.
         *
         * @returns { (str: string) => string } A function that was removed.
         */
        popWordTransform() {
          if (!this._wordTransformer) {
            return void 0;
          }
          const transform = this._wordTransformer.transform;
          this._wordTransformer = this._wordTransformer.next;
          return transform;
        }
        /** @returns { (str: string) => string } */
        _getCombinedWordTransformer() {
          const applyTransformer = /* @__PURE__ */ __name((str, transformer) => transformer ? applyTransformer(transformer.transform(str), transformer.next) : str, "applyTransformer");
          return (str) => applyTransformer(str, this._wordTransformer);
        }
        _popStackItem() {
          const item = this._stackItem;
          this._stackItem = item.next;
          return item;
        }
        /**
         * Add a line break into currently built block.
         */
        addLineBreak() {
          if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {
            return;
          }
          if (this._stackItem.isPre) {
            this._stackItem.rawText += "\n";
          } else {
            this._stackItem.inlineTextBuilder.startNewLine();
          }
        }
        /**
         * Allow to break line in case directly following text will not fit.
         */
        addWordBreakOpportunity() {
          if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem) {
            this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;
          }
        }
        /**
         * Add a node inline into the currently built block.
         *
         * @param { string } str
         * Text content of a node to add.
         *
         * @param { object | boolean } [ optionsObjectOrNoWordTransform ]
         * Object holding the parameters of the operation.
         *
         * Boolean value is deprecated.
         *
         * @param { boolean } [ optionsObjectOrNoWordTransform.noWordTransform = false ]
         * Ignore word transformers if there are any.
         */
        addInline(str, optionsObjectOrNoWordTransform = {}) {
          if (typeof optionsObjectOrNoWordTransform === "object") {
            this._addInline(str, optionsObjectOrNoWordTransform);
          } else {
            this._addInline(str, { noWordTransform: optionsObjectOrNoWordTransform });
          }
        }
        _addInline(str, { noWordTransform = false } = {}) {
          if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {
            return;
          }
          if (this._stackItem.isPre) {
            this._stackItem.rawText += str;
            return;
          }
          if (str.length === 0 || // empty string
          this._stackItem.stashedLineBreaks && // stashed linebreaks make whitespace irrelevant
          !this.whitespaceProcessor.testContainsWords(str)) {
            return;
          }
          if (this.options.preserveNewlines) {
            const newlinesNumber = this.whitespaceProcessor.countNewlinesNoWords(str);
            if (newlinesNumber > 0) {
              this._stackItem.inlineTextBuilder.startNewLine(newlinesNumber);
              return;
            }
          }
          if (this._stackItem.stashedLineBreaks) {
            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);
          }
          this.whitespaceProcessor.shrinkWrapAdd(
            str,
            this._stackItem.inlineTextBuilder,
            this._wordTransformer && !noWordTransform ? this._getCombinedWordTransformer() : void 0
          );
          this._stackItem.stashedLineBreaks = 0;
        }
        /**
         * Start building a new block.
         *
         * @param { object | number } [optionsObjectOrLeadingLineBreaks]
         * Object holding the parameters of the block.
         *
         * Number value is deprecated.
         *
         * @param { number }  [optionsObjectOrLeadingLineBreaks.leadingLineBreaks = 1]
         * This block should have at least this number of line breaks to separate if from any preceding block.
         *
         * @param { number }  [optionsObjectOrLeadingLineBreaks.reservedLineLength = 0]
         * Reserve this number of characters on each line for block markup.
         *
         * @param { boolean } [optionsObjectOrLeadingLineBreaks.isPre = false]
         * Should HTML whitespace be preserved inside this block.
         *
         * @param { number }  [reservedLineLength]
         * Deprecated.
         *
         * @param { boolean } [isPre]
         * Deprecated.
         */
        openBlock(optionsObjectOrLeadingLineBreaks = {}, reservedLineLength = void 0, isPre = void 0) {
          if (typeof optionsObjectOrLeadingLineBreaks === "object") {
            this._openBlock(optionsObjectOrLeadingLineBreaks);
          } else {
            this._openBlock({
              isPre,
              leadingLineBreaks: optionsObjectOrLeadingLineBreaks,
              reservedLineLength
            });
          }
        }
        _openBlock({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {
          const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);
          this._stackItem = new BlockStackItem(
            this.options,
            this._stackItem,
            leadingLineBreaks,
            maxLineLength
          );
          if (isPre) {
            this._stackItem.isPre = true;
          }
        }
        /**
         * Finalize currently built block, add it's content to the parent block.
         *
         * @param { object | number }         [optionsObjectOrTrailingLineBreaks]
         * Object holding the parameters of the block.
         *
         * Number value is deprecated.
         *
         * @param { number }                  [optionsObjectOrTrailingLineBreaks.trailingLineBreaks = 1]
         * This block should have at least this number of line breaks to separate it from any following block.
         *
         * @param { (str: string) => string } [optionsObjectOrTrailingLineBreaks.blockTransform = undefined]
         * A function to transform the block text before adding to the parent block.
         * This happens after word wrap and should be used in combination with reserved line length
         * in order to keep line lengths correct.
         * Used for whole block markup.
         *
         * @param { (str: string) => string } [blockTransform]
         * Deprecated.
         */
        closeBlock(optionsObjectOrTrailingLineBreaks = {}, blockTransform = void 0) {
          if (typeof optionsObjectOrTrailingLineBreaks === "object") {
            this._closeBlock(optionsObjectOrTrailingLineBreaks);
          } else {
            this._closeBlock({
              trailingLineBreaks: optionsObjectOrTrailingLineBreaks,
              blockTransform
            });
          }
        }
        _closeBlock({ trailingLineBreaks = 1, blockTransform = void 0 } = {}) {
          const block = this._popStackItem();
          const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);
          addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));
        }
        /**
         * Start building a table.
         */
        openTable() {
          this._stackItem = new TableStackItem(this._stackItem);
        }
        /**
         * Start building a table row.
         */
        openTableRow() {
          if (!(this._stackItem instanceof TableStackItem)) {
            throw new Error("Can't add table row to something that is not a table! Check the formatter.");
          }
          this._stackItem = new TableRowStackItem(this._stackItem);
        }
        /**
         * Start building a table cell.
         *
         * @param { object | number } [optionsObjectOrMaxColumnWidth = undefined]
         * Object holding the parameters of the cell.
         *
         * Number value is deprecated.
         *
         * @param { number } [optionsObjectOrMaxColumnWidth.maxColumnWidth = undefined]
         * Wrap cell content to this width. Fall back to global wordwrap value if undefined.
         */
        openTableCell(optionsObjectOrMaxColumnWidth = {}) {
          if (typeof optionsObjectOrMaxColumnWidth === "object") {
            this._openTableCell(optionsObjectOrMaxColumnWidth);
          } else {
            this._openTableCell({ maxColumnWidth: optionsObjectOrMaxColumnWidth });
          }
        }
        _openTableCell({ maxColumnWidth = void 0 } = {}) {
          if (!(this._stackItem instanceof TableRowStackItem)) {
            throw new Error("Can't add table cell to something that is not a table row! Check the formatter.");
          }
          this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);
        }
        /**
         * Finalize currently built table cell and add it to parent table row's cells.
         *
         * @param { object | number } [optionsObjectOrColspan]
         * Object holding the parameters of the cell.
         *
         * Number value is deprecated.
         *
         * @param { number } [optionsObjectOrColspan.colspan = 1] How many columns this cell should occupy.
         * @param { number } [optionsObjectOrColspan.rowspan = 1] How many rows this cell should occupy.
         *
         * @param { number } [rowspan] Deprecated.
         */
        closeTableCell(optionsObjectOrColspan = {}, rowspan = void 0) {
          if (typeof optionsObjectOrColspan === "object") {
            this._closeTableCell(optionsObjectOrColspan);
          } else {
            this._closeTableCell({
              colspan: optionsObjectOrColspan,
              rowspan
            });
          }
        }
        _closeTableCell({ colspan = 1, rowspan = 1 } = {}) {
          const cell = this._popStackItem();
          const text = trimCharacter(getText(cell), "\n");
          cell.next.cells.push({ colspan, rowspan, text });
        }
        /**
         * Finalize currently built table row and add it to parent table's rows.
         */
        closeTableRow() {
          const row = this._popStackItem();
          row.next.rows.push(row.cells);
        }
        /**
         * Finalize currently built table and add the rendered text to the parent block.
         *
         * @param { object | number } [optionsObjectOrColSpacing]
         * Object holding the parameters of the table.
         *
         * Number value is deprecated.
         *
         * @param { number } [optionsObjectOrColSpacing.colSpacing = 3]
         * Number of spaces between table columns.
         *
         * @param { number } [optionsObjectOrColSpacing.rowSpacing = 0]
         * Number of empty lines between table rows.
         *
         * @param { number } [optionsObjectOrColSpacing.leadingLineBreaks = 2]
         * This table should have at least this number of line breaks to separate if from any preceding block.
         *
         * @param { number } [optionsObjectOrColSpacing.trailingLineBreaks = 2]
         * This table should have at least this number of line breaks to separate it from any following block.
         *
         * @param { number } [rowSpacing]
         * Deprecated.
         *
         * @param { number } [leadingLineBreaks]
         * Deprecated.
         *
         * @param { number } [trailingLineBreaks]
         * Deprecated.
         */
        closeTable(optionsObjectOrColSpacing = {}, rowSpacing = void 0, leadingLineBreaks = void 0, trailingLineBreaks = void 0) {
          if (typeof optionsObjectOrColSpacing === "object") {
            this._closeTable(optionsObjectOrColSpacing);
          } else {
            this._closeTable({
              colSpacing: optionsObjectOrColSpacing,
              leadingLineBreaks,
              rowSpacing,
              trailingLineBreaks
            });
          }
        }
        _closeTable({ colSpacing = 3, rowSpacing = 0, leadingLineBreaks = 2, trailingLineBreaks = 2 } = {}) {
          const table = this._popStackItem();
          const output = tableToString(table.rows, rowSpacing, colSpacing);
          if (output) {
            addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);
          }
        }
        /**
         * Return the rendered text content of this builder.
         *
         * @returns { string }
         */
        toString() {
          return getText(this._stackItem.getRoot());
        }
      };
      __name(BlockTextBuilder, "BlockTextBuilder");
      function getText(stackItem) {
        if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {
          throw new Error("Only blocks and table cells can be requested for text contents.");
        }
        return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();
      }
      __name(getText, "getText");
      function addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {
        if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {
          throw new Error("Only blocks and table cells can contain text.");
        }
        const parentText = getText(stackItem);
        const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);
        stackItem.inlineTextBuilder.clear();
        if (parentText) {
          stackItem.rawText = parentText + "\n".repeat(lineBreaks) + text;
        } else {
          stackItem.rawText = text;
          stackItem.leadingLineBreaks = lineBreaks;
        }
        stackItem.stashedLineBreaks = trailingLineBreaks;
      }
      __name(addText, "addText");
      module.exports = { BlockTextBuilder };
    }
  });

  // node_modules/html-to-text/lib/formatter.js
  var require_formatter = __commonJS({
    "node_modules/html-to-text/lib/formatter.js"(exports, module) {
      var he2 = require_he();
      var { get, numberToLetterSequence, numberToRoman, splitClassesAndIds, trimCharacter } = require_helper();
      require_typedefs();
      function formatSkip(elem, walk, builder, formatOptions) {
      }
      __name(formatSkip, "formatSkip");
      function formatInline(elem, walk, builder, formatOptions) {
        walk(elem.children, builder);
      }
      __name(formatInline, "formatInline");
      function formatBlock(elem, walk, builder, formatOptions) {
        builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks });
        walk(elem.children, builder);
        builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks });
      }
      __name(formatBlock, "formatBlock");
      function formatLineBreak(elem, walk, builder, formatOptions) {
        builder.addLineBreak();
      }
      __name(formatLineBreak, "formatLineBreak");
      function formatWbr(elem, walk, builder, formatOptions) {
        builder.addWordBreakOpportunity();
      }
      __name(formatWbr, "formatWbr");
      function formatHorizontalLine(elem, walk, builder, formatOptions) {
        builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });
        builder.addInline("-".repeat(formatOptions.length || builder.options.wordwrap || 40));
        builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });
      }
      __name(formatHorizontalLine, "formatHorizontalLine");
      function formatParagraph(elem, walk, builder, formatOptions) {
        builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });
        walk(elem.children, builder);
        builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });
      }
      __name(formatParagraph, "formatParagraph");
      function formatPre(elem, walk, builder, formatOptions) {
        builder.openBlock({
          isPre: true,
          leadingLineBreaks: formatOptions.leadingLineBreaks || 2
        });
        walk(elem.children, builder);
        builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });
      }
      __name(formatPre, "formatPre");
      function formatHeading(elem, walk, builder, formatOptions) {
        builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });
        if (formatOptions.uppercase !== false) {
          builder.pushWordTransform((str) => str.toUpperCase());
          walk(elem.children, builder);
          builder.popWordTransform();
        } else {
          walk(elem.children, builder);
        }
        builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });
      }
      __name(formatHeading, "formatHeading");
      function formatBlockquote(elem, walk, builder, formatOptions) {
        builder.openBlock({
          leadingLineBreaks: formatOptions.leadingLineBreaks || 2,
          reservedLineLength: 2
        });
        walk(elem.children, builder);
        builder.closeBlock({
          trailingLineBreaks: formatOptions.trailingLineBreaks || 2,
          blockTransform: (str) => (formatOptions.trimEmptyLines !== false ? trimCharacter(str, "\n") : str).split("\n").map((line) => "> " + line).join("\n")
        });
      }
      __name(formatBlockquote, "formatBlockquote");
      function withBrackets(str, brackets) {
        if (!brackets) {
          return str;
        }
        const lbr2 = typeof brackets[0] === "string" ? brackets[0] : "[";
        const rbr2 = typeof brackets[1] === "string" ? brackets[1] : "]";
        return lbr2 + str + rbr2;
      }
      __name(withBrackets, "withBrackets");
      function formatImage(elem, walk, builder, formatOptions) {
        const attribs = elem.attribs || {};
        const alt = attribs.alt ? he2.decode(attribs.alt, builder.options.decodeOptions) : "";
        const src = !attribs.src ? "" : formatOptions.baseUrl && attribs.src.indexOf("/") === 0 ? formatOptions.baseUrl + attribs.src : attribs.src;
        const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + " " + withBrackets(src, formatOptions.linkBrackets);
        builder.addInline(text);
      }
      __name(formatImage, "formatImage");
      function formatAnchor(elem, walk, builder, formatOptions) {
        function getHref() {
          if (formatOptions.ignoreHref) {
            return "";
          }
          if (!elem.attribs || !elem.attribs.href) {
            return "";
          }
          let href2 = elem.attribs.href.replace(/^mailto:/, "");
          if (formatOptions.noAnchorUrl && href2[0] === "#") {
            return "";
          }
          href2 = formatOptions.baseUrl && href2[0] === "/" ? formatOptions.baseUrl + href2 : href2;
          return he2.decode(href2, builder.options.decodeOptions);
        }
        __name(getHref, "getHref");
        const href = getHref();
        if (!href) {
          walk(elem.children, builder);
        } else {
          let text = "";
          builder.pushWordTransform(
            (str) => {
              if (str) {
                text += str;
              }
              return str;
            }
          );
          walk(elem.children, builder);
          builder.popWordTransform();
          const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;
          if (!hideSameLink) {
            builder.addInline(
              !text ? href : " " + withBrackets(href, formatOptions.linkBrackets),
              { noWordTransform: true }
            );
          }
        }
      }
      __name(formatAnchor, "formatAnchor");
      function formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {
        const isNestedList = get(elem, ["parent", "name"]) === "li";
        let maxPrefixLength = 0;
        const listItems = (elem.children || []).filter((child) => child.type !== "text" || !/^\s*$/.test(child.data)).map(function(child) {
          if (child.name !== "li") {
            return { node: child, prefix: "" };
          }
          const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();
          if (prefix.length > maxPrefixLength) {
            maxPrefixLength = prefix.length;
          }
          return { node: child, prefix };
        });
        if (!listItems.length) {
          return;
        }
        const reservedLineLength = maxPrefixLength;
        const spacing = "\n" + " ".repeat(reservedLineLength);
        builder.openBlock({ leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2 });
        for (const { node, prefix } of listItems) {
          builder.openBlock({
            leadingLineBreaks: 1,
            reservedLineLength
          });
          walk([node], builder);
          builder.closeBlock({
            trailingLineBreaks: 1,
            blockTransform: (str) => prefix + " ".repeat(reservedLineLength - prefix.length) + str.replace(/\n/g, spacing)
          });
        }
        builder.closeBlock({ trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2 });
      }
      __name(formatList, "formatList");
      function formatUnorderedList(elem, walk, builder, formatOptions) {
        const prefix = formatOptions.itemPrefix || " * ";
        return formatList(elem, walk, builder, formatOptions, () => prefix);
      }
      __name(formatUnorderedList, "formatUnorderedList");
      function formatOrderedList(elem, walk, builder, formatOptions) {
        let nextIndex = Number(elem.attribs.start || "1");
        const indexFunction = getOrderedListIndexFunction(elem.attribs.type);
        const nextPrefixCallback = /* @__PURE__ */ __name(() => " " + indexFunction(nextIndex++) + ". ", "nextPrefixCallback");
        return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);
      }
      __name(formatOrderedList, "formatOrderedList");
      function getOrderedListIndexFunction(olType = "1") {
        switch (olType) {
          case "a":
            return (i) => numberToLetterSequence(i, "a");
          case "A":
            return (i) => numberToLetterSequence(i, "A");
          case "i":
            return (i) => numberToRoman(i).toLowerCase();
          case "I":
            return (i) => numberToRoman(i);
          case "1":
          default:
            return (i) => i.toString();
        }
      }
      __name(getOrderedListIndexFunction, "getOrderedListIndexFunction");
      function isDataTable(attr, tables) {
        if (tables === true) {
          return true;
        }
        if (!attr) {
          return false;
        }
        const { classes, ids } = splitClassesAndIds(tables);
        const attrClasses = (attr["class"] || "").split(" ");
        const attrIds = (attr["id"] || "").split(" ");
        return attrClasses.some((x2) => classes.includes(x2)) || attrIds.some((x2) => ids.includes(x2));
      }
      __name(isDataTable, "isDataTable");
      function formatTable(elem, walk, builder, formatOptions) {
        return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);
      }
      __name(formatTable, "formatTable");
      function formatDataTable(elem, walk, builder, formatOptions) {
        builder.openTable();
        elem.children.forEach(walkTable);
        builder.closeTable({
          colSpacing: formatOptions.colSpacing,
          leadingLineBreaks: formatOptions.leadingLineBreaks,
          rowSpacing: formatOptions.rowSpacing,
          trailingLineBreaks: formatOptions.trailingLineBreaks
        });
        function formatCell(cellNode) {
          const colspan = +get(cellNode, ["attribs", "colspan"]) || 1;
          const rowspan = +get(cellNode, ["attribs", "rowspan"]) || 1;
          builder.openTableCell({ maxColumnWidth: formatOptions.maxColumnWidth });
          walk(cellNode.children, builder);
          builder.closeTableCell({ colspan, rowspan });
        }
        __name(formatCell, "formatCell");
        function walkTable(elem2) {
          if (elem2.type !== "tag") {
            return;
          }
          const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? (cellNode) => {
            builder.pushWordTransform((str) => str.toUpperCase());
            formatCell(cellNode);
            builder.popWordTransform();
          } : formatCell;
          switch (elem2.name) {
            case "thead":
            case "tbody":
            case "tfoot":
            case "center":
              elem2.children.forEach(walkTable);
              return;
            case "tr": {
              builder.openTableRow();
              for (const childOfTr of elem2.children) {
                if (childOfTr.type !== "tag") {
                  continue;
                }
                switch (childOfTr.name) {
                  case "th": {
                    formatHeaderCell(childOfTr);
                    break;
                  }
                  case "td": {
                    formatCell(childOfTr);
                    break;
                  }
                  default:
                }
              }
              builder.closeTableRow();
              break;
            }
            default:
          }
        }
        __name(walkTable, "walkTable");
      }
      __name(formatDataTable, "formatDataTable");
      module.exports = {
        anchor: formatAnchor,
        block: formatBlock,
        blockquote: formatBlockquote,
        dataTable: formatDataTable,
        heading: formatHeading,
        horizontalLine: formatHorizontalLine,
        image: formatImage,
        inline: formatInline,
        lineBreak: formatLineBreak,
        orderedList: formatOrderedList,
        paragraph: formatParagraph,
        pre: formatPre,
        skip: formatSkip,
        table: formatTable,
        unorderedList: formatUnorderedList,
        wbr: formatWbr
      };
    }
  });

  // node_modules/html-to-text/lib/html-to-text.js
  var require_html_to_text = __commonJS({
    "node_modules/html-to-text/lib/html-to-text.js"(exports, module) {
      var { hp2Builder } = require_hp2_builder();
      var merge = require_cjs();
      var he2 = require_he();
      var htmlparser = require_lib6();
      var selderee = require_selderee();
      var { BlockTextBuilder } = require_block_text_builder();
      var defaultFormatters = require_formatter();
      var { limitedDepthRecursive, mergeDuplicatesPreferLast, get } = require_helper();
      require_typedefs();
      var DEFAULT_OPTIONS = {
        baseElements: {
          selectors: ["body"],
          orderBy: "selectors",
          // 'selectors' | 'occurrence'
          returnDomByDefault: true
        },
        decodeOptions: {
          isAttributeValue: false,
          strict: false
        },
        formatters: {},
        limits: {
          ellipsis: "...",
          maxBaseElements: void 0,
          maxChildNodes: void 0,
          maxDepth: void 0,
          maxInputLength: 1 << 24
          // 16_777_216
        },
        longWordSplit: {
          forceWrapOnLimit: false,
          wrapCharacters: []
        },
        preserveNewlines: false,
        selectors: [
          { selector: "*", format: "inline" },
          {
            selector: "a",
            format: "anchor",
            options: {
              baseUrl: null,
              hideLinkHrefIfSameAsText: false,
              ignoreHref: false,
              linkBrackets: ["[", "]"],
              noAnchorUrl: true
            }
          },
          { selector: "article", format: "block" },
          { selector: "aside", format: "block" },
          {
            selector: "blockquote",
            format: "blockquote",
            options: { leadingLineBreaks: 2, trailingLineBreaks: 2, trimEmptyLines: true }
          },
          { selector: "br", format: "lineBreak" },
          { selector: "div", format: "block" },
          { selector: "footer", format: "block" },
          { selector: "form", format: "block" },
          { selector: "h1", format: "heading", options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },
          { selector: "h2", format: "heading", options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },
          { selector: "h3", format: "heading", options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },
          { selector: "h4", format: "heading", options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },
          { selector: "h5", format: "heading", options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },
          { selector: "h6", format: "heading", options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },
          { selector: "header", format: "block" },
          {
            selector: "hr",
            format: "horizontalLine",
            options: { leadingLineBreaks: 2, length: void 0, trailingLineBreaks: 2 }
          },
          {
            selector: "img",
            format: "image",
            options: { baseUrl: null, linkBrackets: ["[", "]"] }
          },
          { selector: "main", format: "block" },
          { selector: "nav", format: "block" },
          {
            selector: "ol",
            format: "orderedList",
            options: { leadingLineBreaks: 2, trailingLineBreaks: 2 }
          },
          { selector: "p", format: "paragraph", options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },
          { selector: "pre", format: "pre", options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },
          { selector: "section", format: "block" },
          {
            selector: "table",
            format: "table",
            options: {
              colSpacing: 3,
              leadingLineBreaks: 2,
              maxColumnWidth: 60,
              rowSpacing: 0,
              trailingLineBreaks: 2,
              uppercaseHeaderCells: true
            }
          },
          {
            selector: "ul",
            format: "unorderedList",
            options: { itemPrefix: " * ", leadingLineBreaks: 2, trailingLineBreaks: 2 }
          },
          { selector: "wbr", format: "wbr" }
        ],
        tables: [],
        // deprecated
        whitespaceCharacters: " 	\r\n\f\u200B",
        wordwrap: 80
      };
      var concatMerge = /* @__PURE__ */ __name((acc, src, options) => [...acc, ...src], "concatMerge");
      var overwriteMerge = /* @__PURE__ */ __name((acc, src, options) => [...src], "overwriteMerge");
      var selectorsMerge = /* @__PURE__ */ __name((acc, src, options) => acc.some((s) => typeof s === "object") ? concatMerge(acc, src, options) : overwriteMerge(acc, src, options), "selectorsMerge");
      function compile(options = {}) {
        options = merge(
          DEFAULT_OPTIONS,
          options,
          {
            arrayMerge: overwriteMerge,
            customMerge: (key) => key === "selectors" ? selectorsMerge : void 0
          }
        );
        options.formatters = Object.assign({}, defaultFormatters, options.formatters);
        options.selectors = mergeDuplicatesPreferLast(options.selectors, (s) => s.selector);
        handleDeprecatedOptions(options);
        const selectorsWithoutFormat = options.selectors.filter((s) => !s.format);
        if (selectorsWithoutFormat.length) {
          throw new Error(
            "Following selectors have no specified format: " + selectorsWithoutFormat.map((s) => `\`${s.selector}\``).join(", ")
          );
        }
        const picker = new selderee.DecisionTree(
          options.selectors.map((s) => [s.selector, s])
        ).build(hp2Builder);
        const baseSelectorsPicker = new selderee.DecisionTree(
          options.baseElements.selectors.map((s, i) => [s, i + 1])
        ).build(hp2Builder);
        function findBaseElements(dom) {
          return findBases(dom, options, baseSelectorsPicker);
        }
        __name(findBaseElements, "findBaseElements");
        const limitedWalk = limitedDepthRecursive(
          options.limits.maxDepth,
          recursiveWalk,
          function(dom, builder) {
            builder.addInline(options.limits.ellipsis || "");
          }
        );
        return function(html) {
          return process2(html, options, picker, findBaseElements, limitedWalk);
        };
      }
      __name(compile, "compile");
      function process2(html, options, picker, findBaseElements, walk) {
        const maxInputLength = options.limits.maxInputLength;
        if (maxInputLength && html && html.length > maxInputLength) {
          console.warn(
            `Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`
          );
          html = html.substring(0, maxInputLength);
        }
        const handler = new htmlparser.DomHandler();
        new htmlparser.Parser(handler, { decodeEntities: false }).parseComplete(html);
        const bases = findBaseElements(handler.dom);
        const builder = new BlockTextBuilder(options, picker);
        walk(bases, builder);
        return builder.toString();
      }
      __name(process2, "process");
      function convert(html, options = {}) {
        return compile(options)(html);
      }
      __name(convert, "convert");
      function handleDeprecatedOptions(options) {
        const selectorDefinitions = options.selectors;
        if (options.tags) {
          const tagDefinitions = Object.entries(options.tags).map(
            ([selector, definition]) => ({ ...definition, selector: selector || "*" })
          );
          selectorDefinitions.push(...tagDefinitions);
        }
        function set(obj, path, value) {
          const valueKey = path.pop();
          for (const key of path) {
            let nested = obj[key];
            if (!nested) {
              nested = {};
              obj[key] = nested;
            }
            obj = nested;
          }
          obj[valueKey] = value;
        }
        __name(set, "set");
        function copyFormatterOption(source, format2, target) {
          if (options[source] === void 0) {
            return;
          }
          for (const definition of selectorDefinitions) {
            if (definition.format === format2) {
              set(definition, ["options", target], options[source]);
            }
          }
        }
        __name(copyFormatterOption, "copyFormatterOption");
        copyFormatterOption("hideLinkHrefIfSameAsText", "anchor", "hideLinkHrefIfSameAsText");
        copyFormatterOption("ignoreHref", "anchor", "ignoreHref");
        copyFormatterOption("linkHrefBaseUrl", "anchor", "baseUrl");
        copyFormatterOption("noAnchorUrl", "anchor", "noAnchorUrl");
        copyFormatterOption("noLinkBrackets", "anchor", "noLinkBrackets");
        copyFormatterOption("linkHrefBaseUrl", "image", "baseUrl");
        copyFormatterOption("unorderedListItemPrefix", "unorderedList", "itemPrefix");
        copyFormatterOption("uppercaseHeadings", "heading", "uppercase");
        copyFormatterOption("uppercaseHeadings", "table", "uppercaseHeadings");
        copyFormatterOption("uppercaseHeadings", "dataTable", "uppercaseHeadings");
        if (options["ignoreImage"]) {
          for (const definition of selectorDefinitions) {
            if (definition.format === "image") {
              definition.format = "skip";
            }
          }
        }
        if (options["singleNewLineParagraphs"]) {
          for (const definition of selectorDefinitions) {
            if (definition.format === "paragraph" || definition.format === "pre") {
              set(definition, ["options", "leadingLineBreaks"], 1);
              set(definition, ["options", "trailingLineBreaks"], 1);
            }
          }
        }
        if (options["baseElement"]) {
          const baseElement = options["baseElement"];
          set(
            options,
            ["baseElements", "selectors"],
            Array.isArray(baseElement) ? baseElement : [baseElement]
          );
        }
        if (options["returnDomByDefault"] !== void 0) {
          set(options, ["baseElements", "returnDomByDefault"], options["returnDomByDefault"]);
        }
        for (const definition of selectorDefinitions) {
          if (definition.format === "anchor" && get(definition, ["options", "noLinkBrackets"])) {
            set(definition, ["options", "linkBrackets"], false);
          }
        }
      }
      __name(handleDeprecatedOptions, "handleDeprecatedOptions");
      function findBases(dom, options, baseSelectorsPicker) {
        const results = [];
        function recursiveWalk2(walk, dom2) {
          dom2 = dom2.slice(0, options.limits.maxChildNodes);
          for (const elem of dom2) {
            if (elem.type !== "tag") {
              continue;
            }
            const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);
            if (pickedSelectorIndex > 0) {
              results.push({ selectorIndex: pickedSelectorIndex, element: elem });
            } else if (elem.children) {
              walk(elem.children);
            }
            if (results.length >= options.limits.maxBaseElements) {
              return;
            }
          }
        }
        __name(recursiveWalk2, "recursiveWalk");
        const limitedWalk = limitedDepthRecursive(
          options.limits.maxDepth,
          recursiveWalk2
        );
        limitedWalk(dom);
        if (options.baseElements.orderBy !== "occurrence") {
          results.sort((a, b) => a.selectorIndex - b.selectorIndex);
        }
        return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map((x2) => x2.element);
      }
      __name(findBases, "findBases");
      function recursiveWalk(walk, dom, builder) {
        if (!dom) {
          return;
        }
        const options = builder.options;
        const tooManyChildNodes = dom.length > options.limits.maxChildNodes;
        if (tooManyChildNodes) {
          dom = dom.slice(0, options.limits.maxChildNodes);
          dom.push({
            data: options.limits.ellipsis,
            type: "text"
          });
        }
        for (const elem of dom) {
          switch (elem.type) {
            case "text": {
              builder.addInline(he2.decode(elem.data, options.decodeOptions));
              break;
            }
            case "tag": {
              const tagDefinition = builder.picker.pick1(elem);
              const format2 = options.formatters[tagDefinition.format];
              format2(elem, walk, builder, tagDefinition.options || {});
              break;
            }
            default:
              break;
          }
        }
        return;
      }
      __name(recursiveWalk, "recursiveWalk");
      var fromString = /* @__PURE__ */ __name((html, options = {}) => convert(html, options), "fromString");
      module.exports = {
        compile,
        convert,
        fromString,
        htmlToText: convert
      };
    }
  });

  // node_modules/html-to-text/index.js
  var require_html_to_text2 = __commonJS({
    "node_modules/html-to-text/index.js"(exports, module) {
      module.exports = require_html_to_text();
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/parseJson.js
  var require_parseJson = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/parseJson.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeBom = exports.parseJson = void 0;
      function parseJson(data) {
        return JSON.parse(removeBom(data));
      }
      __name(parseJson, "parseJson");
      exports.parseJson = parseJson;
      function removeBom(data) {
        return data.charCodeAt(0) === 65279 ? data.slice(1) : data;
      }
      __name(removeBom, "removeBom");
      exports.removeBom = removeBom;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/parseError.js
  var require_parseError = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/parseError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseError = void 0;
      var htmlToText = require_html_to_text2();
      var localize_1 = require_localize();
      var parseJson_1 = require_parseJson();
      function parseError5(error) {
        let errorType = "";
        let message = "";
        let stack;
        let stepName;
        if (typeof error === "object" && error !== null) {
          if (error.constructor !== Object) {
            errorType = error.constructor.name;
          }
          stack = getCallstack(error);
          errorType = getCode(error, errorType);
          error = unpackErrorFromField(error, "value");
          error = unpackErrorFromField(error, "_value");
          error = unpackErrorFromField(error, "error");
          error = unpackErrorFromField(error, "error");
          if (Array.isArray(error.errors) && error.errors.length) {
            error = error.errors[0];
          }
          errorType = getCode(error, errorType);
          message = getMessage(error, message);
          if (!errorType || !message || /error.*deserializing.*response.*body/i.test(message)) {
            error = unpackErrorFromField(error, "response");
            error = unpackErrorFromField(error, "body");
            errorType = getCode(error, errorType);
            message = getMessage(error, message);
          }
          let parsedMessage = parseIfJson(error.message);
          parsedMessage = parseIfJson(parsedMessage);
          if (parsedMessage && parsedMessage.error) {
            parsedMessage = parsedMessage.error;
          }
          errorType = getCode(parsedMessage, errorType);
          message = getMessage(parsedMessage, message);
          message || (message = convertCodeToError(errorType) || JSON.stringify(error));
          if ("stepName" in error && typeof error.stepName === "string") {
            stepName = error.stepName;
          }
        } else if (error !== void 0 && error !== null && error.toString && error.toString().trim() !== "") {
          errorType = typeof error;
          message = error.toString();
        }
        message = unpackErrorsInMessage(message);
        [message, errorType] = parseIfFileSystemError(message, errorType);
        errorType || (errorType = typeof error);
        message || (message = (0, localize_1.localize)("unknownError", "Unknown Error"));
        message = parseIfHtml(message);
        message = parseIfXml(message);
        return {
          errorType,
          message,
          stack,
          stepName,
          // NOTE: Intentionally not using 'error instanceof UserCancelledError' because that doesn't work if multiple versions of the UI package are used in one extension
          // See https://github.com/Microsoft/vscode-azuretools/issues/51 for more info
          isUserCancelledError: errorType === "UserCancelledError"
        };
      }
      __name(parseError5, "parseError");
      exports.parseError = parseError5;
      function convertCodeToError(errorType) {
        if (errorType) {
          const code = parseInt(errorType, 10);
          if (!isNaN(code)) {
            return (0, localize_1.localize)("failedWithCode", 'Failed with code "{0}".', code);
          }
        }
        return void 0;
      }
      __name(convertCodeToError, "convertCodeToError");
      function parseIfJson(o) {
        if (typeof o === "string" && o.indexOf("{") >= 0) {
          try {
            return (0, parseJson_1.parseJson)(o);
          } catch (err) {
          }
        }
        return o;
      }
      __name(parseIfJson, "parseIfJson");
      function parseIfHtml(message) {
        if (/<html/i.test(message)) {
          try {
            var headerOptions = { leadingLineBreaks: 1, trailingLineBreaks: 1, uppercase: false };
            return htmlToText.convert(message, {
              selectors: [
                { selector: "h1", options: headerOptions },
                { selector: "h2", options: headerOptions },
                { selector: "h3", options: headerOptions },
                { selector: "h4", options: headerOptions },
                { selector: "h5", options: headerOptions },
                { selector: "h6", options: headerOptions },
                { selector: "img", format: "skip" },
                { selector: "table", options: { uppercaseHeaderCells: false } }
              ],
              wordwrap: false
            });
          } catch (err) {
          }
        }
        return message;
      }
      __name(parseIfHtml, "parseIfHtml");
      function parseIfXml(message) {
        const matches = message.match(/<Message>(.*)<\/Message>/si);
        if (matches) {
          return matches[1];
        }
        return message;
      }
      __name(parseIfXml, "parseIfXml");
      function getMessage(o, defaultMessage) {
        return o && (o.message || o.Message || o.detail || typeof parseIfJson(o.body) === "string" && o.body) || defaultMessage;
      }
      __name(getMessage, "getMessage");
      function getCode(o, defaultCode) {
        const code = o && (o.code || o.Code || o.errorCode || o.statusCode);
        return code ? String(code) : defaultCode;
      }
      __name(getCode, "getCode");
      function unpackErrorsInMessage(message) {
        if (message) {
          const errorsInMessage = message.match(/"Errors":\[\s*"([^"]+)"/);
          if (errorsInMessage !== null) {
            const [, firstError] = errorsInMessage;
            return firstError;
          }
        }
        return message;
      }
      __name(unpackErrorsInMessage, "unpackErrorsInMessage");
      function unpackErrorFromField(error, prop) {
        let field = error && error[prop];
        if (field) {
          if (typeof field === "string" && field.indexOf("{") >= 0) {
            try {
              field = (0, parseJson_1.parseJson)(field);
            } catch (err) {
            }
          }
          if (typeof field === "object") {
            return field;
          }
        }
        return error;
      }
      __name(unpackErrorFromField, "unpackErrorFromField");
      function getCallstack(error) {
        const stack = typeof error.stack === "string" ? error.stack : "";
        const minifiedLines = stack.split(/(\r\n|\n)/g).map((l) => {
          let result = "";
          const fileMatch = l.match(/[^\/\\\(\s]+\.(t|j)s:[0-9]+:[0-9]+/i);
          if (fileMatch) {
            const functionMatch = l.match(/^[\s]*at ([^\(\\\/]+(?:\\|\/)?)+/i);
            if (functionMatch) {
              result += functionMatch[1];
            }
            const parts = [];
            const moduleRegExp = /node_modules(?:\\|\/)([^\\\/]+)/ig;
            let moduleMatch;
            do {
              moduleMatch = moduleRegExp.exec(l);
              if (moduleMatch) {
                parts.push(moduleMatch[1]);
              }
            } while (moduleMatch);
            parts.push(fileMatch[0]);
            result += parts.join("/");
          }
          return result;
        }).filter((l) => !!l);
        return minifiedLines.length > 0 ? minifiedLines.join("\n") : void 0;
      }
      __name(getCallstack, "getCallstack");
      function parseIfFileSystemError(message, errorType) {
        const match = message.match(/\((([a-z]*) \(FileSystemError\).*)\)$/i);
        if (match) {
          message = match[1];
          errorType = match[2];
        }
        return [message, errorType];
      }
      __name(parseIfFileSystemError, "parseIfFileSystemError");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/activityLog/Activity.js
  var require_Activity = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/activityLog/Activity.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivityBase = exports.ActivityStatus = void 0;
      var uuid_1 = require_commonjs_browser();
      var vscode_1 = __require("vscode");
      var parseError_1 = require_parseError();
      var ActivityStatus2;
      (function(ActivityStatus3) {
        ActivityStatus3["NotStarted"] = "NotStarted";
        ActivityStatus3["Running"] = "Running";
        ActivityStatus3["Succeeded"] = "Succeeded";
        ActivityStatus3["Failed"] = "Failed";
        ActivityStatus3["Cancelled"] = "Cancelled";
      })(ActivityStatus2 = exports.ActivityStatus || (exports.ActivityStatus = {}));
      var ActivityBase = class {
        constructor(task) {
          this._onStartEmitter = new vscode_1.EventEmitter();
          this._onProgressEmitter = new vscode_1.EventEmitter();
          this._onSuccessEmitter = new vscode_1.EventEmitter();
          this._onErrorEmitter = new vscode_1.EventEmitter();
          this.status = ActivityStatus2.NotStarted;
          this.cancellationTokenSource = new vscode_1.CancellationTokenSource();
          this.id = (0, uuid_1.v4)();
          this.task = task;
          this.onStart = this._onStartEmitter.event;
          this.onProgress = this._onProgressEmitter.event;
          this.onSuccess = this._onSuccessEmitter.event;
          this.onError = this._onErrorEmitter.event;
        }
        report(progress) {
          this._onProgressEmitter.fire(Object.assign(Object.assign({}, this.getState()), { message: progress.message }));
        }
        run() {
          return __awaiter6(this, void 0, void 0, function* () {
            try {
              this._onStartEmitter.fire(this.getState());
              const result = yield this.task({ report: this.report.bind(this) }, this.cancellationTokenSource.token);
              this.status = ActivityStatus2.Succeeded;
              this._onSuccessEmitter.fire(this.getState());
              return result;
            } catch (e) {
              this.error = (0, parseError_1.parseError)(e);
              this.status = ActivityStatus2.Failed;
              this._onErrorEmitter.fire(Object.assign(Object.assign({}, this.getState()), { error: e }));
              throw e;
            }
          });
        }
        getState() {
          switch (this.status) {
            case ActivityStatus2.Failed:
              return this.errorState(this.error);
            case ActivityStatus2.Succeeded:
              return this.successState();
            default:
              return this.initialState();
          }
        }
      };
      __name(ActivityBase, "ActivityBase");
      exports.ActivityBase = ActivityBase;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/activityLog/activities/ExecuteActivity.js
  var require_ExecuteActivity = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/activityLog/activities/ExecuteActivity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ExecuteActivity = void 0;
      var localize_1 = require_localize();
      var GenericTreeItem_1 = require_GenericTreeItem();
      var Activity_1 = require_Activity();
      var ExecuteActivity = class extends Activity_1.ActivityBase {
        constructor(context, task) {
          super(task);
          this.context = context;
        }
        initialState() {
          return {
            label: this.label
          };
        }
        successState() {
          const activityResult = this.context.activityResult;
          const resourceId3 = typeof activityResult === "string" ? activityResult : activityResult === null || activityResult === void 0 ? void 0 : activityResult.id;
          return {
            label: this.label,
            getChildren: activityResult ? (parent) => {
              const ti2 = new GenericTreeItem_1.GenericTreeItem(parent, {
                contextValue: "executeResult",
                label: (0, localize_1.localize)("clickToView", "Click to view resource"),
                commandId: "azureResourceGroups.revealResource"
              });
              ti2.commandArgs = [resourceId3];
              return [ti2];
            } : void 0
          };
        }
        errorState(error) {
          return {
            label: this.label,
            getChildren: (parent) => {
              return [
                new GenericTreeItem_1.GenericTreeItem(parent, {
                  contextValue: "executeError",
                  label: error.message
                })
              ];
            }
          };
        }
        get label() {
          var _a7;
          return (_a7 = this.context.activityTitle) !== null && _a7 !== void 0 ? _a7 : (0, localize_1.localize)("azureActivity", "Azure Activity");
        }
      };
      __name(ExecuteActivity, "ExecuteActivity");
      exports.ExecuteActivity = ExecuteActivity;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/AzExtOutputChannel.js
  var require_AzExtOutputChannel = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/AzExtOutputChannel.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createAzExtOutputChannel = exports.createAzExtLogOutputChannel = void 0;
      var vscode_1 = __require("vscode");
      function createAzExtLogOutputChannel(name) {
        return new AzExtLogOutputChannel(name);
      }
      __name(createAzExtLogOutputChannel, "createAzExtLogOutputChannel");
      exports.createAzExtLogOutputChannel = createAzExtLogOutputChannel;
      function createAzExtOutputChannel2(name, extensionPrefix) {
        const outputChannel = new AzExtOutputChannel(name);
        outputChannel.extensionPrefix = extensionPrefix;
        return outputChannel;
      }
      __name(createAzExtOutputChannel2, "createAzExtOutputChannel");
      exports.createAzExtOutputChannel = createAzExtOutputChannel2;
      var AzExtOutputChannel = class {
        constructor(name) {
          this.name = name;
          this._outputChannel = this.createOutputChannel(name);
        }
        createOutputChannel(name) {
          return vscode_1.window.createOutputChannel(name);
        }
        append(value) {
          this._outputChannel.append(value);
        }
        appendLine(value) {
          this._outputChannel.appendLine(value);
        }
        shouldIncludeTimestamps() {
          const enableOutputTimestampsSetting = "enableOutputTimestamps";
          const projectConfiguration = vscode_1.workspace.getConfiguration(this.extensionPrefix);
          return !!projectConfiguration.get(enableOutputTimestampsSetting);
        }
        appendLog(value, options) {
          if (!this.shouldIncludeTimestamps()) {
            this.appendLine(value);
          } else {
            options || (options = {});
            const date = options.date || /* @__PURE__ */ new Date();
            this.appendLine(`${date.toLocaleTimeString()}${options.resourceName ? " ".concat(options.resourceName) : ""}: ${value}`);
          }
        }
        clear() {
          this._outputChannel.clear();
        }
        replace(value) {
          this._outputChannel.replace(value);
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        show(_column, preserveFocus) {
          this._outputChannel.show(preserveFocus);
        }
        hide() {
          this._outputChannel.hide();
        }
        dispose() {
          this._outputChannel.dispose();
        }
      };
      __name(AzExtOutputChannel, "AzExtOutputChannel");
      var AzExtLogOutputChannel = class extends AzExtOutputChannel {
        constructor(name) {
          super(name);
          this.onDidChangeLogLevel = this._outputChannel.onDidChangeLogLevel;
        }
        get logLevel() {
          return this._outputChannel.logLevel;
        }
        shouldIncludeTimestamps() {
          return false;
        }
        createOutputChannel(name) {
          return vscode_1.window.createOutputChannel(name, {
            log: true
          });
        }
        trace(message, ...args) {
          this._outputChannel.trace(message, ...args);
        }
        debug(message, ...args) {
          this._outputChannel.debug(message, ...args);
        }
        info(message, ...args) {
          this._outputChannel.info(message, ...args);
        }
        warn(message, ...args) {
          this._outputChannel.warn(message, ...args);
        }
        error(error, ...args) {
          this._outputChannel.error(error, ...args);
        }
      };
      __name(AzExtLogOutputChannel, "AzExtLogOutputChannel");
    }
  });

  // node_modules/querystring-es3/decode.js
  var require_decode3 = __commonJS({
    "node_modules/querystring-es3/decode.js"(exports, module) {
      "use strict";
      function hasOwnProperty2(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      __name(hasOwnProperty2, "hasOwnProperty");
      module.exports = function(qs2, sep, eq2, options) {
        sep = sep || "&";
        eq2 = eq2 || "=";
        var obj = {};
        if (typeof qs2 !== "string" || qs2.length === 0) {
          return obj;
        }
        var regexp = /\+/g;
        qs2 = qs2.split(sep);
        var maxKeys = 1e3;
        if (options && typeof options.maxKeys === "number") {
          maxKeys = options.maxKeys;
        }
        var len = qs2.length;
        if (maxKeys > 0 && len > maxKeys) {
          len = maxKeys;
        }
        for (var i = 0; i < len; ++i) {
          var x2 = qs2[i].replace(regexp, "%20"), idx = x2.indexOf(eq2), kstr, vstr, k, v;
          if (idx >= 0) {
            kstr = x2.substr(0, idx);
            vstr = x2.substr(idx + 1);
          } else {
            kstr = x2;
            vstr = "";
          }
          k = decodeURIComponent(kstr);
          v = decodeURIComponent(vstr);
          if (!hasOwnProperty2(obj, k)) {
            obj[k] = v;
          } else if (isArray3(obj[k])) {
            obj[k].push(v);
          } else {
            obj[k] = [obj[k], v];
          }
        }
        return obj;
      };
      var isArray3 = Array.isArray || function(xs2) {
        return Object.prototype.toString.call(xs2) === "[object Array]";
      };
    }
  });

  // node_modules/querystring-es3/encode.js
  var require_encode2 = __commonJS({
    "node_modules/querystring-es3/encode.js"(exports, module) {
      "use strict";
      var stringifyPrimitive = /* @__PURE__ */ __name(function(v) {
        switch (typeof v) {
          case "string":
            return v;
          case "boolean":
            return v ? "true" : "false";
          case "number":
            return isFinite(v) ? v : "";
          default:
            return "";
        }
      }, "stringifyPrimitive");
      module.exports = function(obj, sep, eq2, name) {
        sep = sep || "&";
        eq2 = eq2 || "=";
        if (obj === null) {
          obj = void 0;
        }
        if (typeof obj === "object") {
          return map(objectKeys(obj), function(k) {
            var ks2 = encodeURIComponent(stringifyPrimitive(k)) + eq2;
            if (isArray3(obj[k])) {
              return map(obj[k], function(v) {
                return ks2 + encodeURIComponent(stringifyPrimitive(v));
              }).join(sep);
            } else {
              return ks2 + encodeURIComponent(stringifyPrimitive(obj[k]));
            }
          }).join(sep);
        }
        if (!name)
          return "";
        return encodeURIComponent(stringifyPrimitive(name)) + eq2 + encodeURIComponent(stringifyPrimitive(obj));
      };
      var isArray3 = Array.isArray || function(xs2) {
        return Object.prototype.toString.call(xs2) === "[object Array]";
      };
      function map(xs2, f2) {
        if (xs2.map)
          return xs2.map(f2);
        var res = [];
        for (var i = 0; i < xs2.length; i++) {
          res.push(f2(xs2[i], i));
        }
        return res;
      }
      __name(map, "map");
      var objectKeys = Object.keys || function(obj) {
        var res = [];
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            res.push(key);
        }
        return res;
      };
    }
  });

  // node_modules/querystring-es3/index.js
  var require_querystring_es3 = __commonJS({
    "node_modules/querystring-es3/index.js"(exports) {
      "use strict";
      exports.decode = exports.parse = require_decode3();
      exports.encode = exports.stringify = require_encode2();
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/DialogResponses.js
  var require_DialogResponses = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/DialogResponses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DialogResponses = void 0;
      var constants = require_constants();
      var localize_1 = require_localize();
      var DialogResponses;
      (function(DialogResponses2) {
        DialogResponses2.yes = { title: (0, localize_1.localize)("yes", "Yes") };
        DialogResponses2.no = { title: (0, localize_1.localize)("no", "No") };
        DialogResponses2.cancel = { title: (0, localize_1.localize)("cancel", "Cancel"), isCloseAffordance: true };
        DialogResponses2.deleteResponse = { title: (0, localize_1.localize)("delete", "Delete") };
        DialogResponses2.learnMore = { title: constants.learnMore };
        DialogResponses2.dontWarnAgain = { title: (0, localize_1.localize)("dontWarnAgain", "Don't warn again") };
        DialogResponses2.skipForNow = { title: (0, localize_1.localize)("skipForNow", "Skip for now") };
        DialogResponses2.upload = { title: (0, localize_1.localize)("upload", "Upload") };
        DialogResponses2.alwaysUpload = { title: (0, localize_1.localize)("alwaysUpload", "Always upload") };
        DialogResponses2.dontUpload = { title: (0, localize_1.localize)("dontUpload", "Don't upload"), isCloseAffordance: true };
        DialogResponses2.reportAnIssue = { title: (0, localize_1.localize)("reportAnIssue", "Report an issue") };
      })(DialogResponses = exports.DialogResponses || (exports.DialogResponses = {}));
    }
  });

  // node_modules/has-symbols/shams.js
  var require_shams = __commonJS({
    "node_modules/has-symbols/shams.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }
        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }
        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }
        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        }
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }
        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }
        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }
        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }
        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }
        return true;
      }, "hasSymbols");
    }
  });

  // node_modules/has-tostringtag/shams.js
  var require_shams2 = __commonJS({
    "node_modules/has-tostringtag/shams.js"(exports, module) {
      "use strict";
      var hasSymbols = require_shams();
      module.exports = /* @__PURE__ */ __name(function hasToStringTagShams() {
        return hasSymbols() && !!Symbol.toStringTag;
      }, "hasToStringTagShams");
    }
  });

  // node_modules/has-symbols/index.js
  var require_has_symbols = __commonJS({
    "node_modules/has-symbols/index.js"(exports, module) {
      "use strict";
      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = require_shams();
      module.exports = /* @__PURE__ */ __name(function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }
        return hasSymbolSham();
      }, "hasNativeSymbols");
    }
  });

  // node_modules/function-bind/implementation.js
  var require_implementation = __commonJS({
    "node_modules/function-bind/implementation.js"(exports, module) {
      "use strict";
      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = "[object Function]";
      module.exports = /* @__PURE__ */ __name(function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);
        var bound;
        var binder = /* @__PURE__ */ __name(function() {
          if (this instanceof bound) {
            var result = target.apply(
              this,
              args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
              return result;
            }
            return this;
          } else {
            return target.apply(
              that,
              args.concat(slice.call(arguments))
            );
          }
        }, "binder");
        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs.push("$" + i);
        }
        bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
        if (target.prototype) {
          var Empty = /* @__PURE__ */ __name(function Empty2() {
          }, "Empty");
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }
        return bound;
      }, "bind");
    }
  });

  // node_modules/function-bind/index.js
  var require_function_bind = __commonJS({
    "node_modules/function-bind/index.js"(exports, module) {
      "use strict";
      var implementation = require_implementation();
      module.exports = Function.prototype.bind || implementation;
    }
  });

  // node_modules/has/src/index.js
  var require_src = __commonJS({
    "node_modules/has/src/index.js"(exports, module) {
      "use strict";
      var bind = require_function_bind();
      module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/get-intrinsic/index.js
  var require_get_intrinsic = __commonJS({
    "node_modules/get-intrinsic/index.js"(exports, module) {
      "use strict";
      var undefined2;
      var $SyntaxError = SyntaxError;
      var $Function = Function;
      var $TypeError = TypeError;
      var getEvalledConstructor = /* @__PURE__ */ __name(function(expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {
        }
      }, "getEvalledConstructor");
      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null;
        }
      }
      var throwTypeError2 = /* @__PURE__ */ __name(function() {
        throw new $TypeError();
      }, "throwTypeError");
      var ThrowTypeError = $gOPD ? function() {
        try {
          arguments.callee;
          return throwTypeError2;
        } catch (calleeThrows) {
          try {
            return $gOPD(arguments, "callee").get;
          } catch (gOPDthrows) {
            return throwTypeError2;
          }
        }
      }() : throwTypeError2;
      var hasSymbols = require_has_symbols()();
      var getProto = Object.getPrototypeOf || function(x2) {
        return x2.__proto__;
      };
      var needsEval = {};
      var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
      var INTRINSICS = {
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
        "%AsyncFromSyncIteratorPrototype%": undefined2,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
        "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
        "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": Error,
        "%eval%": eval,
        // eslint-disable-line no-eval
        "%EvalError%": EvalError,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
        "%JSON%": typeof JSON === "object" ? JSON : undefined2,
        "%Map%": typeof Map === "undefined" ? undefined2 : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
        "%RangeError%": RangeError,
        "%ReferenceError%": ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined2 : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
        "%Symbol%": hasSymbols ? Symbol : undefined2,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
        "%URIError%": URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
      };
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
      var errorProto;
      var doEval = /* @__PURE__ */ __name(function doEval2(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn2 = doEval2("%AsyncGeneratorFunction%");
          if (fn2) {
            value = fn2.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval2("%AsyncGenerator%");
          if (gen) {
            value = getProto(gen.prototype);
          }
        }
        INTRINSICS[name] = value;
        return value;
      }, "doEval");
      var LEGACY_ALIASES = {
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"]
      };
      var bind = require_function_bind();
      var hasOwn = require_src();
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);
      var $exec = bind.call(Function.call, RegExp.prototype.exec);
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = /* @__PURE__ */ __name(function stringToPath2(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function(match, number, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
        });
        return result;
      }, "stringToPath");
      var getBaseIntrinsic = /* @__PURE__ */ __name(function getBaseIntrinsic2(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }
        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
          }
          return {
            alias,
            name: intrinsicName,
            value
          };
        }
        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      }, "getBaseIntrinsic");
      module.exports = /* @__PURE__ */ __name(function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }
        if ($exec(/^%?[^%]*%?$/, name) === null) {
          throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
        }
        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;
        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }
        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }
          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";
          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
              }
              return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      }, "GetIntrinsic");
    }
  });

  // node_modules/call-bind/index.js
  var require_call_bind = __commonJS({
    "node_modules/call-bind/index.js"(exports, module) {
      "use strict";
      var bind = require_function_bind();
      var GetIntrinsic = require_get_intrinsic();
      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
      var $max = GetIntrinsic("%Math.max%");
      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          $defineProperty = null;
        }
      }
      module.exports = /* @__PURE__ */ __name(function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);
        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, "length");
          if (desc.configurable) {
            $defineProperty(
              func,
              "length",
              { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
            );
          }
        }
        return func;
      }, "callBind");
      var applyBind = /* @__PURE__ */ __name(function applyBind2() {
        return $reflectApply(bind, $apply, arguments);
      }, "applyBind");
      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }
    }
  });

  // node_modules/call-bind/callBound.js
  var require_callBound = __commonJS({
    "node_modules/call-bind/callBound.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var callBind = require_call_bind();
      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
      module.exports = /* @__PURE__ */ __name(function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
          return callBind(intrinsic);
        }
        return intrinsic;
      }, "callBoundIntrinsic");
    }
  });

  // node_modules/is-arguments/index.js
  var require_is_arguments = __commonJS({
    "node_modules/is-arguments/index.js"(exports, module) {
      "use strict";
      var hasToStringTag = require_shams2()();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var isStandardArguments = /* @__PURE__ */ __name(function isArguments(value) {
        if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
          return false;
        }
        return $toString(value) === "[object Arguments]";
      }, "isArguments");
      var isLegacyArguments = /* @__PURE__ */ __name(function isArguments(value) {
        if (isStandardArguments(value)) {
          return true;
        }
        return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
      }, "isArguments");
      var supportsStandardArguments = function() {
        return isStandardArguments(arguments);
      }();
      isStandardArguments.isLegacyArguments = isLegacyArguments;
      module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
    }
  });

  // node_modules/is-generator-function/index.js
  var require_is_generator_function = __commonJS({
    "node_modules/is-generator-function/index.js"(exports, module) {
      "use strict";
      var toStr = Object.prototype.toString;
      var fnToStr = Function.prototype.toString;
      var isFnRegex = /^\s*(?:function)?\*/;
      var hasToStringTag = require_shams2()();
      var getProto = Object.getPrototypeOf;
      var getGeneratorFunc = /* @__PURE__ */ __name(function() {
        if (!hasToStringTag) {
          return false;
        }
        try {
          return Function("return function*() {}")();
        } catch (e) {
        }
      }, "getGeneratorFunc");
      var GeneratorFunction;
      module.exports = /* @__PURE__ */ __name(function isGeneratorFunction(fn2) {
        if (typeof fn2 !== "function") {
          return false;
        }
        if (isFnRegex.test(fnToStr.call(fn2))) {
          return true;
        }
        if (!hasToStringTag) {
          var str = toStr.call(fn2);
          return str === "[object GeneratorFunction]";
        }
        if (!getProto) {
          return false;
        }
        if (typeof GeneratorFunction === "undefined") {
          var generatorFunc = getGeneratorFunc();
          GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
        }
        return getProto(fn2) === GeneratorFunction;
      }, "isGeneratorFunction");
    }
  });

  // node_modules/is-callable/index.js
  var require_is_callable = __commonJS({
    "node_modules/is-callable/index.js"(exports, module) {
      "use strict";
      var fnToStr = Function.prototype.toString;
      var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
      var badArrayLike;
      var isCallableMarker;
      if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
        try {
          badArrayLike = Object.defineProperty({}, "length", {
            get: function() {
              throw isCallableMarker;
            }
          });
          isCallableMarker = {};
          reflectApply(function() {
            throw 42;
          }, null, badArrayLike);
        } catch (_) {
          if (_ !== isCallableMarker) {
            reflectApply = null;
          }
        }
      } else {
        reflectApply = null;
      }
      var constructorRegex = /^\s*class\b/;
      var isES6ClassFn = /* @__PURE__ */ __name(function isES6ClassFunction(value) {
        try {
          var fnStr = fnToStr.call(value);
          return constructorRegex.test(fnStr);
        } catch (e) {
          return false;
        }
      }, "isES6ClassFunction");
      var tryFunctionObject = /* @__PURE__ */ __name(function tryFunctionToStr(value) {
        try {
          if (isES6ClassFn(value)) {
            return false;
          }
          fnToStr.call(value);
          return true;
        } catch (e) {
          return false;
        }
      }, "tryFunctionToStr");
      var toStr = Object.prototype.toString;
      var fnClass = "[object Function]";
      var genClass = "[object GeneratorFunction]";
      var hasToStringTag = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
      var documentDotAll = typeof document === "object" && typeof document.all === "undefined" && document.all !== void 0 ? document.all : {};
      module.exports = reflectApply ? /* @__PURE__ */ __name(function isCallable(value) {
        if (value === documentDotAll) {
          return true;
        }
        if (!value) {
          return false;
        }
        if (typeof value !== "function" && typeof value !== "object") {
          return false;
        }
        if (typeof value === "function" && !value.prototype) {
          return true;
        }
        try {
          reflectApply(value, null, badArrayLike);
        } catch (e) {
          if (e !== isCallableMarker) {
            return false;
          }
        }
        return !isES6ClassFn(value);
      }, "isCallable") : /* @__PURE__ */ __name(function isCallable(value) {
        if (value === documentDotAll) {
          return true;
        }
        if (!value) {
          return false;
        }
        if (typeof value !== "function" && typeof value !== "object") {
          return false;
        }
        if (typeof value === "function" && !value.prototype) {
          return true;
        }
        if (hasToStringTag) {
          return tryFunctionObject(value);
        }
        if (isES6ClassFn(value)) {
          return false;
        }
        var strClass = toStr.call(value);
        return strClass === fnClass || strClass === genClass;
      }, "isCallable");
    }
  });

  // node_modules/for-each/index.js
  var require_for_each = __commonJS({
    "node_modules/for-each/index.js"(exports, module) {
      "use strict";
      var isCallable = require_is_callable();
      var toStr = Object.prototype.toString;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var forEachArray = /* @__PURE__ */ __name(function forEachArray2(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty2.call(array, i)) {
            if (receiver == null) {
              iterator(array[i], i, array);
            } else {
              iterator.call(receiver, array[i], i, array);
            }
          }
        }
      }, "forEachArray");
      var forEachString = /* @__PURE__ */ __name(function forEachString2(string, iterator, receiver) {
        for (var i = 0, len = string.length; i < len; i++) {
          if (receiver == null) {
            iterator(string.charAt(i), i, string);
          } else {
            iterator.call(receiver, string.charAt(i), i, string);
          }
        }
      }, "forEachString");
      var forEachObject = /* @__PURE__ */ __name(function forEachObject2(object, iterator, receiver) {
        for (var k in object) {
          if (hasOwnProperty2.call(object, k)) {
            if (receiver == null) {
              iterator(object[k], k, object);
            } else {
              iterator.call(receiver, object[k], k, object);
            }
          }
        }
      }, "forEachObject");
      var forEach = /* @__PURE__ */ __name(function forEach2(list, iterator, thisArg) {
        if (!isCallable(iterator)) {
          throw new TypeError("iterator must be a function");
        }
        var receiver;
        if (arguments.length >= 3) {
          receiver = thisArg;
        }
        if (toStr.call(list) === "[object Array]") {
          forEachArray(list, iterator, receiver);
        } else if (typeof list === "string") {
          forEachString(list, iterator, receiver);
        } else {
          forEachObject(list, iterator, receiver);
        }
      }, "forEach");
      module.exports = forEach;
    }
  });

  // node_modules/available-typed-arrays/index.js
  var require_available_typed_arrays = __commonJS({
    "node_modules/available-typed-arrays/index.js"(exports, module) {
      "use strict";
      var possibleNames = [
        "BigInt64Array",
        "BigUint64Array",
        "Float32Array",
        "Float64Array",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray"
      ];
      var g = typeof globalThis === "undefined" ? global : globalThis;
      module.exports = /* @__PURE__ */ __name(function availableTypedArrays() {
        var out = [];
        for (var i = 0; i < possibleNames.length; i++) {
          if (typeof g[possibleNames[i]] === "function") {
            out[out.length] = possibleNames[i];
          }
        }
        return out;
      }, "availableTypedArrays");
    }
  });

  // node_modules/gopd/index.js
  var require_gopd = __commonJS({
    "node_modules/gopd/index.js"(exports, module) {
      "use strict";
      var GetIntrinsic = require_get_intrinsic();
      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          $gOPD = null;
        }
      }
      module.exports = $gOPD;
    }
  });

  // node_modules/is-typed-array/index.js
  var require_is_typed_array = __commonJS({
    "node_modules/is-typed-array/index.js"(exports, module) {
      "use strict";
      var forEach = require_for_each();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var gOPD = require_gopd();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $indexOf = callBound("Array.prototype.indexOf", true) || /* @__PURE__ */ __name(function indexOf(array, value) {
        for (var i = 0; i < array.length; i += 1) {
          if (array[i] === value) {
            return i;
          }
        }
        return -1;
      }, "indexOf");
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        });
      }
      var tryTypedArrays = /* @__PURE__ */ __name(function tryAllTypedArrays(value) {
        var anyTrue = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!anyTrue) {
            try {
              anyTrue = getter.call(value) === typedArray;
            } catch (e) {
            }
          }
        });
        return anyTrue;
      }, "tryAllTypedArrays");
      module.exports = /* @__PURE__ */ __name(function isTypedArray(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          var tag = $slice($toString(value), 8, -1);
          return $indexOf(typedArrays, tag) > -1;
        }
        if (!gOPD) {
          return false;
        }
        return tryTypedArrays(value);
      }, "isTypedArray");
    }
  });

  // node_modules/which-typed-array/index.js
  var require_which_typed_array = __commonJS({
    "node_modules/which-typed-array/index.js"(exports, module) {
      "use strict";
      var forEach = require_for_each();
      var availableTypedArrays = require_available_typed_arrays();
      var callBound = require_callBound();
      var gOPD = require_gopd();
      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = require_shams2()();
      var g = typeof globalThis === "undefined" ? global : globalThis;
      var typedArrays = availableTypedArrays();
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var getPrototypeOf = Object.getPrototypeOf;
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
          if (typeof g[typedArray] === "function") {
            var arr = new g[typedArray]();
            if (Symbol.toStringTag in arr) {
              var proto = getPrototypeOf(arr);
              var descriptor = gOPD(proto, Symbol.toStringTag);
              if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
              }
              toStrTags[typedArray] = descriptor.get;
            }
          }
        });
      }
      var tryTypedArrays = /* @__PURE__ */ __name(function tryAllTypedArrays(value) {
        var foundName = false;
        forEach(toStrTags, function(getter, typedArray) {
          if (!foundName) {
            try {
              var name = getter.call(value);
              if (name === typedArray) {
                foundName = name;
              }
            } catch (e) {
            }
          }
        });
        return foundName;
      }, "tryAllTypedArrays");
      var isTypedArray = require_is_typed_array();
      module.exports = /* @__PURE__ */ __name(function whichTypedArray(value) {
        if (!isTypedArray(value)) {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          return $slice($toString(value), 8, -1);
        }
        return tryTypedArrays(value);
      }, "whichTypedArray");
    }
  });

  // node_modules/util/support/types.js
  var require_types = __commonJS({
    "node_modules/util/support/types.js"(exports) {
      "use strict";
      var isArgumentsObject = require_is_arguments();
      var isGeneratorFunction = require_is_generator_function();
      var whichTypedArray = require_which_typed_array();
      var isTypedArray = require_is_typed_array();
      function uncurryThis(f2) {
        return f2.call.bind(f2);
      }
      __name(uncurryThis, "uncurryThis");
      var BigIntSupported = typeof BigInt !== "undefined";
      var SymbolSupported = typeof Symbol !== "undefined";
      var ObjectToString = uncurryThis(Object.prototype.toString);
      var numberValue = uncurryThis(Number.prototype.valueOf);
      var stringValue = uncurryThis(String.prototype.valueOf);
      var booleanValue = uncurryThis(Boolean.prototype.valueOf);
      if (BigIntSupported) {
        bigIntValue = uncurryThis(BigInt.prototype.valueOf);
      }
      var bigIntValue;
      if (SymbolSupported) {
        symbolValue = uncurryThis(Symbol.prototype.valueOf);
      }
      var symbolValue;
      function checkBoxedPrimitive(value, prototypeValueOf) {
        if (typeof value !== "object") {
          return false;
        }
        try {
          prototypeValueOf(value);
          return true;
        } catch (e) {
          return false;
        }
      }
      __name(checkBoxedPrimitive, "checkBoxedPrimitive");
      exports.isArgumentsObject = isArgumentsObject;
      exports.isGeneratorFunction = isGeneratorFunction;
      exports.isTypedArray = isTypedArray;
      function isPromise(input) {
        return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
      }
      __name(isPromise, "isPromise");
      exports.isPromise = isPromise;
      function isArrayBufferView(value) {
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          return ArrayBuffer.isView(value);
        }
        return isTypedArray(value) || isDataView(value);
      }
      __name(isArrayBufferView, "isArrayBufferView");
      exports.isArrayBufferView = isArrayBufferView;
      function isUint8Array(value) {
        return whichTypedArray(value) === "Uint8Array";
      }
      __name(isUint8Array, "isUint8Array");
      exports.isUint8Array = isUint8Array;
      function isUint8ClampedArray(value) {
        return whichTypedArray(value) === "Uint8ClampedArray";
      }
      __name(isUint8ClampedArray, "isUint8ClampedArray");
      exports.isUint8ClampedArray = isUint8ClampedArray;
      function isUint16Array(value) {
        return whichTypedArray(value) === "Uint16Array";
      }
      __name(isUint16Array, "isUint16Array");
      exports.isUint16Array = isUint16Array;
      function isUint32Array(value) {
        return whichTypedArray(value) === "Uint32Array";
      }
      __name(isUint32Array, "isUint32Array");
      exports.isUint32Array = isUint32Array;
      function isInt8Array(value) {
        return whichTypedArray(value) === "Int8Array";
      }
      __name(isInt8Array, "isInt8Array");
      exports.isInt8Array = isInt8Array;
      function isInt16Array(value) {
        return whichTypedArray(value) === "Int16Array";
      }
      __name(isInt16Array, "isInt16Array");
      exports.isInt16Array = isInt16Array;
      function isInt32Array(value) {
        return whichTypedArray(value) === "Int32Array";
      }
      __name(isInt32Array, "isInt32Array");
      exports.isInt32Array = isInt32Array;
      function isFloat32Array(value) {
        return whichTypedArray(value) === "Float32Array";
      }
      __name(isFloat32Array, "isFloat32Array");
      exports.isFloat32Array = isFloat32Array;
      function isFloat64Array(value) {
        return whichTypedArray(value) === "Float64Array";
      }
      __name(isFloat64Array, "isFloat64Array");
      exports.isFloat64Array = isFloat64Array;
      function isBigInt64Array(value) {
        return whichTypedArray(value) === "BigInt64Array";
      }
      __name(isBigInt64Array, "isBigInt64Array");
      exports.isBigInt64Array = isBigInt64Array;
      function isBigUint64Array(value) {
        return whichTypedArray(value) === "BigUint64Array";
      }
      __name(isBigUint64Array, "isBigUint64Array");
      exports.isBigUint64Array = isBigUint64Array;
      function isMapToString(value) {
        return ObjectToString(value) === "[object Map]";
      }
      __name(isMapToString, "isMapToString");
      isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
      function isMap(value) {
        if (typeof Map === "undefined") {
          return false;
        }
        return isMapToString.working ? isMapToString(value) : value instanceof Map;
      }
      __name(isMap, "isMap");
      exports.isMap = isMap;
      function isSetToString(value) {
        return ObjectToString(value) === "[object Set]";
      }
      __name(isSetToString, "isSetToString");
      isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
      function isSet(value) {
        if (typeof Set === "undefined") {
          return false;
        }
        return isSetToString.working ? isSetToString(value) : value instanceof Set;
      }
      __name(isSet, "isSet");
      exports.isSet = isSet;
      function isWeakMapToString(value) {
        return ObjectToString(value) === "[object WeakMap]";
      }
      __name(isWeakMapToString, "isWeakMapToString");
      isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
      function isWeakMap(value) {
        if (typeof WeakMap === "undefined") {
          return false;
        }
        return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
      }
      __name(isWeakMap, "isWeakMap");
      exports.isWeakMap = isWeakMap;
      function isWeakSetToString(value) {
        return ObjectToString(value) === "[object WeakSet]";
      }
      __name(isWeakSetToString, "isWeakSetToString");
      isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
      function isWeakSet(value) {
        return isWeakSetToString(value);
      }
      __name(isWeakSet, "isWeakSet");
      exports.isWeakSet = isWeakSet;
      function isArrayBufferToString(value) {
        return ObjectToString(value) === "[object ArrayBuffer]";
      }
      __name(isArrayBufferToString, "isArrayBufferToString");
      isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
      function isArrayBuffer(value) {
        if (typeof ArrayBuffer === "undefined") {
          return false;
        }
        return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
      }
      __name(isArrayBuffer, "isArrayBuffer");
      exports.isArrayBuffer = isArrayBuffer;
      function isDataViewToString(value) {
        return ObjectToString(value) === "[object DataView]";
      }
      __name(isDataViewToString, "isDataViewToString");
      isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
      function isDataView(value) {
        if (typeof DataView === "undefined") {
          return false;
        }
        return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
      }
      __name(isDataView, "isDataView");
      exports.isDataView = isDataView;
      var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
      function isSharedArrayBufferToString(value) {
        return ObjectToString(value) === "[object SharedArrayBuffer]";
      }
      __name(isSharedArrayBufferToString, "isSharedArrayBufferToString");
      function isSharedArrayBuffer(value) {
        if (typeof SharedArrayBufferCopy === "undefined") {
          return false;
        }
        if (typeof isSharedArrayBufferToString.working === "undefined") {
          isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
        }
        return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
      }
      __name(isSharedArrayBuffer, "isSharedArrayBuffer");
      exports.isSharedArrayBuffer = isSharedArrayBuffer;
      function isAsyncFunction(value) {
        return ObjectToString(value) === "[object AsyncFunction]";
      }
      __name(isAsyncFunction, "isAsyncFunction");
      exports.isAsyncFunction = isAsyncFunction;
      function isMapIterator(value) {
        return ObjectToString(value) === "[object Map Iterator]";
      }
      __name(isMapIterator, "isMapIterator");
      exports.isMapIterator = isMapIterator;
      function isSetIterator(value) {
        return ObjectToString(value) === "[object Set Iterator]";
      }
      __name(isSetIterator, "isSetIterator");
      exports.isSetIterator = isSetIterator;
      function isGeneratorObject(value) {
        return ObjectToString(value) === "[object Generator]";
      }
      __name(isGeneratorObject, "isGeneratorObject");
      exports.isGeneratorObject = isGeneratorObject;
      function isWebAssemblyCompiledModule(value) {
        return ObjectToString(value) === "[object WebAssembly.Module]";
      }
      __name(isWebAssemblyCompiledModule, "isWebAssemblyCompiledModule");
      exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
      function isNumberObject(value) {
        return checkBoxedPrimitive(value, numberValue);
      }
      __name(isNumberObject, "isNumberObject");
      exports.isNumberObject = isNumberObject;
      function isStringObject(value) {
        return checkBoxedPrimitive(value, stringValue);
      }
      __name(isStringObject, "isStringObject");
      exports.isStringObject = isStringObject;
      function isBooleanObject(value) {
        return checkBoxedPrimitive(value, booleanValue);
      }
      __name(isBooleanObject, "isBooleanObject");
      exports.isBooleanObject = isBooleanObject;
      function isBigIntObject(value) {
        return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
      }
      __name(isBigIntObject, "isBigIntObject");
      exports.isBigIntObject = isBigIntObject;
      function isSymbolObject(value) {
        return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
      }
      __name(isSymbolObject, "isSymbolObject");
      exports.isSymbolObject = isSymbolObject;
      function isBoxedPrimitive(value) {
        return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
      }
      __name(isBoxedPrimitive, "isBoxedPrimitive");
      exports.isBoxedPrimitive = isBoxedPrimitive;
      function isAnyArrayBuffer(value) {
        return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
      }
      __name(isAnyArrayBuffer, "isAnyArrayBuffer");
      exports.isAnyArrayBuffer = isAnyArrayBuffer;
      ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
        Object.defineProperty(exports, method, {
          enumerable: false,
          value: function() {
            throw new Error(method + " is not supported in userland");
          }
        });
      });
    }
  });

  // node_modules/util/support/isBufferBrowser.js
  var require_isBufferBrowser = __commonJS({
    "node_modules/util/support/isBufferBrowser.js"(exports, module) {
      module.exports = /* @__PURE__ */ __name(function isBuffer(arg) {
        return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
      }, "isBuffer");
    }
  });

  // node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = /* @__PURE__ */ __name(function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        }, "inherits");
      } else {
        module.exports = /* @__PURE__ */ __name(function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = /* @__PURE__ */ __name(function() {
            }, "TempCtor");
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        }, "inherits");
      }
    }
  });

  // node_modules/util/util.js
  var require_util = __commonJS({
    "node_modules/util/util.js"(exports) {
      var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || /* @__PURE__ */ __name(function getOwnPropertyDescriptors2(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for (var i = 0; i < keys.length; i++) {
          descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        }
        return descriptors;
      }, "getOwnPropertyDescriptors");
      var formatRegExp = /%[sdj%]/g;
      exports.format = function(f2) {
        if (!isString2(f2)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }
          return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f2).replace(formatRegExp, function(x3) {
          if (x3 === "%%")
            return "%";
          if (i >= len)
            return x3;
          switch (x3) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x3;
          }
        });
        for (var x2 = args[i]; i < len; x2 = args[++i]) {
          if (isNull(x2) || !isObject3(x2)) {
            str += " " + x2;
          } else {
            str += " " + inspect(x2);
          }
        }
        return str;
      };
      exports.deprecate = function(fn2, msg) {
        if (typeof process !== "undefined" && process.noDeprecation === true) {
          return fn2;
        }
        if (typeof process === "undefined") {
          return function() {
            return exports.deprecate(fn2, msg).apply(this, arguments);
          };
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn2.apply(this, arguments);
        }
        __name(deprecated, "deprecated");
        return deprecated;
      };
      var debugs = {};
      var debugEnvRegex = /^$/;
      globalThis.process = {
        env: {}
      };
      console.log("Process", process);
      if (process.env.NODE_DEBUG) {
        debugEnv = process.env.NODE_DEBUG;
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
        debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
      }
      var debugEnv;
      exports.debuglog = function(set) {
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
              var msg = exports.format.apply(exports, arguments);
              console.error("%s %d: %s", set, pid, msg);
            };
          } else {
            debugs[set] = function() {
            };
          }
        }
        return debugs[set];
      };
      function inspect(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        };
        if (arguments.length >= 3)
          ctx.depth = arguments[2];
        if (arguments.length >= 4)
          ctx.colors = arguments[3];
        if (isBoolean2(opts)) {
          ctx.showHidden = opts;
        } else if (opts) {
          exports._extend(ctx, opts);
        }
        if (isUndefined2(ctx.showHidden))
          ctx.showHidden = false;
        if (isUndefined2(ctx.depth))
          ctx.depth = 2;
        if (isUndefined2(ctx.colors))
          ctx.colors = false;
        if (isUndefined2(ctx.customInspect))
          ctx.customInspect = true;
        if (ctx.colors)
          ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      __name(inspect, "inspect");
      exports.inspect = inspect;
      inspect.colors = {
        "bold": [1, 22],
        "italic": [3, 23],
        "underline": [4, 24],
        "inverse": [7, 27],
        "white": [37, 39],
        "grey": [90, 39],
        "black": [30, 39],
        "blue": [34, 39],
        "cyan": [36, 39],
        "green": [32, 39],
        "magenta": [35, 39],
        "red": [31, 39],
        "yellow": [33, 39]
      };
      inspect.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        // "name": intentionally not styling
        "regexp": "red"
      };
      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];
        if (style) {
          return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
        } else {
          return str;
        }
      }
      __name(stylizeWithColor, "stylizeWithColor");
      function stylizeNoColor(str, styleType) {
        return str;
      }
      __name(stylizeNoColor, "stylizeNoColor");
      function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
          hash[val] = true;
        });
        return hash;
      }
      __name(arrayToHash, "arrayToHash");
      function formatValue(ctx, value, recurseTimes) {
        if (ctx.customInspect && value && isFunction2(value.inspect) && // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString2(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }
        if (isError3(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }
        if (keys.length === 0) {
          if (isFunction2(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate2(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError3(value)) {
            return formatError(value);
          }
        }
        var base = "", array = false, braces = ["{", "}"];
        if (isArray3(value)) {
          array = true;
          braces = ["[", "]"];
        }
        if (isFunction2(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }
        if (isRegExp(value)) {
          base = " " + RegExp.prototype.toString.call(value);
        }
        if (isDate2(value)) {
          base = " " + Date.prototype.toUTCString.call(value);
        }
        if (isError3(value)) {
          base = " " + formatError(value);
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }
        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx.stylize("[Object]", "special");
          }
        }
        ctx.seen.push(value);
        var output;
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function(key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
      }
      __name(formatValue, "formatValue");
      function formatPrimitive(ctx, value) {
        if (isUndefined2(value))
          return ctx.stylize("undefined", "undefined");
        if (isString2(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber2(value))
          return ctx.stylize("" + value, "number");
        if (isBoolean2(value))
          return ctx.stylize("" + value, "boolean");
        if (isNull(value))
          return ctx.stylize("null", "null");
      }
      __name(formatPrimitive, "formatPrimitive");
      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }
      __name(formatError, "formatError");
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty2(value, String(i))) {
            output.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              String(i),
              true
            ));
          } else {
            output.push("");
          }
        }
        keys.forEach(function(key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              true
            ));
          }
        });
        return output;
      }
      __name(formatArray, "formatArray");
      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty2(visibleKeys, key)) {
          name = "[" + key + "]";
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array) {
                str = str.split("\n").map(function(line) {
                  return "  " + line;
                }).join("\n").slice(2);
              } else {
                str = "\n" + str.split("\n").map(function(line) {
                  return "   " + line;
                }).join("\n");
              }
            }
          } else {
            str = ctx.stylize("[Circular]", "special");
          }
        }
        if (isUndefined2(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.slice(1, -1);
            name = ctx.stylize(name, "name");
          } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
          }
        }
        return name + ": " + str;
      }
      __name(formatProperty, "formatProperty");
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function(prev, cur) {
          numLinesEst++;
          if (cur.indexOf("\n") >= 0)
            numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) {
          return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        }
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }
      __name(reduceToSingleString, "reduceToSingleString");
      exports.types = require_types();
      function isArray3(ar2) {
        return Array.isArray(ar2);
      }
      __name(isArray3, "isArray");
      exports.isArray = isArray3;
      function isBoolean2(arg) {
        return typeof arg === "boolean";
      }
      __name(isBoolean2, "isBoolean");
      exports.isBoolean = isBoolean2;
      function isNull(arg) {
        return arg === null;
      }
      __name(isNull, "isNull");
      exports.isNull = isNull;
      function isNullOrUndefined2(arg) {
        return arg == null;
      }
      __name(isNullOrUndefined2, "isNullOrUndefined");
      exports.isNullOrUndefined = isNullOrUndefined2;
      function isNumber2(arg) {
        return typeof arg === "number";
      }
      __name(isNumber2, "isNumber");
      exports.isNumber = isNumber2;
      function isString2(arg) {
        return typeof arg === "string";
      }
      __name(isString2, "isString");
      exports.isString = isString2;
      function isSymbol2(arg) {
        return typeof arg === "symbol";
      }
      __name(isSymbol2, "isSymbol");
      exports.isSymbol = isSymbol2;
      function isUndefined2(arg) {
        return arg === void 0;
      }
      __name(isUndefined2, "isUndefined");
      exports.isUndefined = isUndefined2;
      function isRegExp(re2) {
        return isObject3(re2) && objectToString(re2) === "[object RegExp]";
      }
      __name(isRegExp, "isRegExp");
      exports.isRegExp = isRegExp;
      exports.types.isRegExp = isRegExp;
      function isObject3(arg) {
        return typeof arg === "object" && arg !== null;
      }
      __name(isObject3, "isObject");
      exports.isObject = isObject3;
      function isDate2(d) {
        return isObject3(d) && objectToString(d) === "[object Date]";
      }
      __name(isDate2, "isDate");
      exports.isDate = isDate2;
      exports.types.isDate = isDate2;
      function isError3(e) {
        return isObject3(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
      }
      __name(isError3, "isError");
      exports.isError = isError3;
      exports.types.isNativeError = isError3;
      function isFunction2(arg) {
        return typeof arg === "function";
      }
      __name(isFunction2, "isFunction");
      exports.isFunction = isFunction2;
      function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
        typeof arg === "undefined";
      }
      __name(isPrimitive, "isPrimitive");
      exports.isPrimitive = isPrimitive;
      exports.isBuffer = require_isBufferBrowser();
      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }
      __name(objectToString, "objectToString");
      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }
      __name(pad, "pad");
      var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      function timestamp() {
        var d = /* @__PURE__ */ new Date();
        var time = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(":");
        return [d.getDate(), months[d.getMonth()], time].join(" ");
      }
      __name(timestamp, "timestamp");
      exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };
      exports.inherits = require_inherits_browser();
      exports._extend = function(origin, add) {
        if (!add || !isObject3(add))
          return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };
      function hasOwnProperty2(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      __name(hasOwnProperty2, "hasOwnProperty");
      var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
      exports.promisify = /* @__PURE__ */ __name(function promisify(original) {
        if (typeof original !== "function")
          throw new TypeError('The "original" argument must be of type Function');
        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
          var fn2 = original[kCustomPromisifiedSymbol];
          if (typeof fn2 !== "function") {
            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
          }
          Object.defineProperty(fn2, kCustomPromisifiedSymbol, {
            value: fn2,
            enumerable: false,
            writable: false,
            configurable: true
          });
          return fn2;
        }
        function fn2() {
          var promiseResolve, promiseReject;
          var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
          });
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          args.push(function(err, value) {
            if (err) {
              promiseReject(err);
            } else {
              promiseResolve(value);
            }
          });
          try {
            original.apply(this, args);
          } catch (err) {
            promiseReject(err);
          }
          return promise;
        }
        __name(fn2, "fn");
        Object.setPrototypeOf(fn2, Object.getPrototypeOf(original));
        if (kCustomPromisifiedSymbol)
          Object.defineProperty(fn2, kCustomPromisifiedSymbol, {
            value: fn2,
            enumerable: false,
            writable: false,
            configurable: true
          });
        return Object.defineProperties(
          fn2,
          getOwnPropertyDescriptors(original)
        );
      }, "promisify");
      exports.promisify.custom = kCustomPromisifiedSymbol;
      function callbackifyOnRejected(reason, cb) {
        if (!reason) {
          var newReason = new Error("Promise was rejected with a falsy value");
          newReason.reason = reason;
          reason = newReason;
        }
        return cb(reason);
      }
      __name(callbackifyOnRejected, "callbackifyOnRejected");
      function callbackify(original) {
        if (typeof original !== "function") {
          throw new TypeError('The "original" argument must be of type Function');
        }
        function callbackified() {
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          var maybeCb = args.pop();
          if (typeof maybeCb !== "function") {
            throw new TypeError("The last argument must be of type Function");
          }
          var self2 = this;
          var cb = /* @__PURE__ */ __name(function() {
            return maybeCb.apply(self2, arguments);
          }, "cb");
          original.apply(this, args).then(
            function(ret) {
              process.nextTick(cb.bind(null, null, ret));
            },
            function(rej) {
              process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
            }
          );
        }
        __name(callbackified, "callbackified");
        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(
          callbackified,
          getOwnPropertyDescriptors(original)
        );
        return callbackified;
      }
      __name(callbackify, "callbackify");
      exports.callbackify = callbackify;
    }
  });

  // node_modules/assert/build/internal/errors.js
  var require_errors2 = __commonJS({
    "node_modules/assert/build/internal/errors.js"(exports, module) {
      "use strict";
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return typeof obj2;
          }, "_typeof");
        } else {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, "_typeof");
        }
        return _typeof(obj);
      }
      __name(_typeof, "_typeof");
      function _classCallCheck(instance, Constructor2) {
        if (!(instance instanceof Constructor2)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck, "_classCallCheck");
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }
        return _assertThisInitialized(self2);
      }
      __name(_possibleConstructorReturn, "_possibleConstructorReturn");
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      __name(_assertThisInitialized, "_assertThisInitialized");
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, "_getPrototypeOf");
        return _getPrototypeOf(o);
      }
      __name(_getPrototypeOf, "_getPrototypeOf");
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      __name(_inherits, "_inherits");
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        }, "_setPrototypeOf");
        return _setPrototypeOf(o, p);
      }
      __name(_setPrototypeOf, "_setPrototypeOf");
      var codes = {};
      var assert;
      var util;
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        __name(getMessage, "getMessage");
        var NodeError = /* @__PURE__ */ function(_Base) {
          _inherits(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            var _this;
            _classCallCheck(this, NodeError2);
            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError2).call(this, getMessage(arg1, arg2, arg3)));
            _this.code = code;
            return _this;
          }
          __name(NodeError2, "NodeError");
          return NodeError2;
        }(Base);
        codes[code] = NodeError;
      }
      __name(createErrorType, "createErrorType");
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      __name(oneOf, "oneOf");
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      __name(startsWith, "startsWith");
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      __name(endsWith, "endsWith");
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      __name(includes, "includes");
      createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
        if (assert === void 0)
          assert = require_assert();
        assert(typeof name === "string", "'name' must be a string");
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name, " argument")) {
          msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type = includes(name, ".") ? "property" : "argument";
          msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(_typeof(actual));
        return msg;
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
        var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
        if (util === void 0)
          util = require_util();
        var inspected = util.inspect(value);
        if (inspected.length > 128) {
          inspected = "".concat(inspected.slice(0, 128), "...");
        }
        return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
      }, TypeError, RangeError);
      createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
        var type;
        if (value && value.constructor && value.constructor.name) {
          type = "instance of ".concat(value.constructor.name);
        } else {
          type = "type ".concat(_typeof(value));
        }
        return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
      }, TypeError);
      createErrorType("ERR_MISSING_ARGS", function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (assert === void 0)
          assert = require_assert();
        assert(args.length > 0, "At least one arg needs to be specified");
        var msg = "The ";
        var len = args.length;
        args = args.map(function(a) {
          return '"'.concat(a, '"');
        });
        switch (len) {
          case 1:
            msg += "".concat(args[0], " argument");
            break;
          case 2:
            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
            break;
          default:
            msg += args.slice(0, len - 1).join(", ");
            msg += ", and ".concat(args[len - 1], " arguments");
            break;
        }
        return "".concat(msg, " must be specified");
      }, TypeError);
      module.exports.codes = codes;
    }
  });

  // node_modules/assert/build/internal/assert/assertion_error.js
  var require_assertion_error = __commonJS({
    "node_modules/assert/build/internal/assert/assertion_error.js"(exports, module) {
      "use strict";
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys = Object.keys(source);
          if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }
          ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        }
        return target;
      }
      __name(_objectSpread, "_objectSpread");
      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      __name(_defineProperty, "_defineProperty");
      function _classCallCheck(instance, Constructor2) {
        if (!(instance instanceof Constructor2)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck, "_classCallCheck");
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      __name(_defineProperties, "_defineProperties");
      function _createClass(Constructor2, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor2.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor2, staticProps);
        return Constructor2;
      }
      __name(_createClass, "_createClass");
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }
        return _assertThisInitialized(self2);
      }
      __name(_possibleConstructorReturn, "_possibleConstructorReturn");
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      __name(_assertThisInitialized, "_assertThisInitialized");
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      __name(_inherits, "_inherits");
      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
        _wrapNativeSuper = /* @__PURE__ */ __name(function _wrapNativeSuper2(Class2) {
          if (Class2 === null || !_isNativeFunction(Class2))
            return Class2;
          if (typeof Class2 !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }
          if (typeof _cache !== "undefined") {
            if (_cache.has(Class2))
              return _cache.get(Class2);
            _cache.set(Class2, Wrapper);
          }
          function Wrapper() {
            return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
          }
          __name(Wrapper, "Wrapper");
          Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
          return _setPrototypeOf(Wrapper, Class2);
        }, "_wrapNativeSuper");
        return _wrapNativeSuper(Class);
      }
      __name(_wrapNativeSuper, "_wrapNativeSuper");
      function isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      __name(isNativeReflectConstruct, "isNativeReflectConstruct");
      function _construct(Parent, args, Class) {
        if (isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = /* @__PURE__ */ __name(function _construct2(Parent2, args2, Class2) {
            var a = [null];
            a.push.apply(a, args2);
            var Constructor2 = Function.bind.apply(Parent2, a);
            var instance = new Constructor2();
            if (Class2)
              _setPrototypeOf(instance, Class2.prototype);
            return instance;
          }, "_construct");
        }
        return _construct.apply(null, arguments);
      }
      __name(_construct, "_construct");
      function _isNativeFunction(fn2) {
        return Function.toString.call(fn2).indexOf("[native code]") !== -1;
      }
      __name(_isNativeFunction, "_isNativeFunction");
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || /* @__PURE__ */ __name(function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        }, "_setPrototypeOf");
        return _setPrototypeOf(o, p);
      }
      __name(_setPrototypeOf, "_setPrototypeOf");
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : /* @__PURE__ */ __name(function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        }, "_getPrototypeOf");
        return _getPrototypeOf(o);
      }
      __name(_getPrototypeOf, "_getPrototypeOf");
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return typeof obj2;
          }, "_typeof");
        } else {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, "_typeof");
        }
        return _typeof(obj);
      }
      __name(_typeof, "_typeof");
      var _require = require_util();
      var inspect = _require.inspect;
      var _require2 = require_errors2();
      var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      __name(endsWith, "endsWith");
      function repeat(str, count) {
        count = Math.floor(count);
        if (str.length == 0 || count == 0)
          return "";
        var maxCount = str.length * count;
        count = Math.floor(Math.log(count) / Math.log(2));
        while (count) {
          str += str;
          count--;
        }
        str += str.substring(0, maxCount - str.length);
        return str;
      }
      __name(repeat, "repeat");
      var blue = "";
      var green = "";
      var red = "";
      var white = "";
      var kReadableOperator = {
        deepStrictEqual: "Expected values to be strictly deep-equal:",
        strictEqual: "Expected values to be strictly equal:",
        strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
        deepEqual: "Expected values to be loosely deep-equal:",
        equal: "Expected values to be loosely equal:",
        notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
        notStrictEqual: 'Expected "actual" to be strictly unequal to:',
        notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
        notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
        notEqual: 'Expected "actual" to be loosely unequal to:',
        notIdentical: "Values identical but not reference-equal:"
      };
      var kMaxShortLength = 10;
      function copyError(source) {
        var keys = Object.keys(source);
        var target = Object.create(Object.getPrototypeOf(source));
        keys.forEach(function(key) {
          target[key] = source[key];
        });
        Object.defineProperty(target, "message", {
          value: source.message
        });
        return target;
      }
      __name(copyError, "copyError");
      function inspectValue(val) {
        return inspect(val, {
          compact: false,
          customInspect: false,
          depth: 1e3,
          maxArrayLength: Infinity,
          // Assert compares only enumerable properties (with a few exceptions).
          showHidden: false,
          // Having a long line as error is better than wrapping the line for
          // comparison for now.
          // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
          // have meta information about the inspected properties (i.e., know where
          // in what line the property starts and ends).
          breakLength: Infinity,
          // Assert does not detect proxies currently.
          showProxy: false,
          sorted: true,
          // Inspect getters as we also check them when comparing entries.
          getters: true
        });
      }
      __name(inspectValue, "inspectValue");
      function createErrDiff(actual, expected, operator) {
        var other = "";
        var res = "";
        var lastPos = 0;
        var end = "";
        var skipped = false;
        var actualInspected = inspectValue(actual);
        var actualLines = actualInspected.split("\n");
        var expectedLines = inspectValue(expected).split("\n");
        var i = 0;
        var indicator = "";
        if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
          operator = "strictEqualObject";
        }
        if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
          var inputLength = actualLines[0].length + expectedLines[0].length;
          if (inputLength <= kMaxShortLength) {
            if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
              return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
            }
          } else if (operator !== "strictEqualObject") {
            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
            if (inputLength < maxLength) {
              while (actualLines[0][i] === expectedLines[0][i]) {
                i++;
              }
              if (i > 2) {
                indicator = "\n  ".concat(repeat(" ", i), "^");
                i = 0;
              }
            }
          }
        }
        var a = actualLines[actualLines.length - 1];
        var b = expectedLines[expectedLines.length - 1];
        while (a === b) {
          if (i++ < 2) {
            end = "\n  ".concat(a).concat(end);
          } else {
            other = a;
          }
          actualLines.pop();
          expectedLines.pop();
          if (actualLines.length === 0 || expectedLines.length === 0)
            break;
          a = actualLines[actualLines.length - 1];
          b = expectedLines[expectedLines.length - 1];
        }
        var maxLines = Math.max(actualLines.length, expectedLines.length);
        if (maxLines === 0) {
          var _actualLines = actualInspected.split("\n");
          if (_actualLines.length > 30) {
            _actualLines[26] = "".concat(blue, "...").concat(white);
            while (_actualLines.length > 27) {
              _actualLines.pop();
            }
          }
          return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
        }
        if (i > 3) {
          end = "\n".concat(blue, "...").concat(white).concat(end);
          skipped = true;
        }
        if (other !== "") {
          end = "\n  ".concat(other).concat(end);
          other = "";
        }
        var printedLines = 0;
        var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
        var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
        for (i = 0; i < maxLines; i++) {
          var cur = i - lastPos;
          if (actualLines.length < i + 1) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(expectedLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(expectedLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
            printedLines++;
          } else if (expectedLines.length < i + 1) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
            printedLines++;
          } else {
            var expectedLine = expectedLines[i];
            var actualLine = actualLines[i];
            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
            if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
              divergingLines = false;
              actualLine += ",";
            }
            if (divergingLines) {
              if (cur > 1 && i > 2) {
                if (cur > 4) {
                  res += "\n".concat(blue, "...").concat(white);
                  skipped = true;
                } else if (cur > 3) {
                  res += "\n  ".concat(actualLines[i - 2]);
                  printedLines++;
                }
                res += "\n  ".concat(actualLines[i - 1]);
                printedLines++;
              }
              lastPos = i;
              res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
              other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
              printedLines += 2;
            } else {
              res += other;
              other = "";
              if (cur === 1 || i === 0) {
                res += "\n  ".concat(actualLine);
                printedLines++;
              }
            }
          }
          if (printedLines > 20 && i < maxLines - 2) {
            return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
          }
        }
        return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
      }
      __name(createErrDiff, "createErrDiff");
      var AssertionError = /* @__PURE__ */ function(_Error) {
        _inherits(AssertionError2, _Error);
        function AssertionError2(options) {
          var _this;
          _classCallCheck(this, AssertionError2);
          if (_typeof(options) !== "object" || options === null) {
            throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
          }
          var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
          var actual = options.actual, expected = options.expected;
          var limit = Error.stackTraceLimit;
          Error.stackTraceLimit = 0;
          if (message != null) {
            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, String(message)));
          } else {
            if (process.stderr && process.stderr.isTTY) {
              if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                blue = "\x1B[34m";
                green = "\x1B[32m";
                white = "\x1B[39m";
                red = "\x1B[31m";
              } else {
                blue = "";
                green = "";
                white = "";
                red = "";
              }
            }
            if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
              actual = copyError(actual);
              expected = copyError(expected);
            }
            if (operator === "deepStrictEqual" || operator === "strictEqual") {
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, createErrDiff(actual, expected, operator)));
            } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
              var base = kReadableOperator[operator];
              var res = inspectValue(actual).split("\n");
              if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
                base = kReadableOperator.notStrictEqualObject;
              }
              if (res.length > 30) {
                res[26] = "".concat(blue, "...").concat(white);
                while (res.length > 27) {
                  res.pop();
                }
              }
              if (res.length === 1) {
                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(base, " ").concat(res[0])));
              } else {
                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n")));
              }
            } else {
              var _res = inspectValue(actual);
              var other = "";
              var knownOperators = kReadableOperator[operator];
              if (operator === "notDeepEqual" || operator === "notEqual") {
                _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                if (_res.length > 1024) {
                  _res = "".concat(_res.slice(0, 1021), "...");
                }
              } else {
                other = "".concat(inspectValue(expected));
                if (_res.length > 512) {
                  _res = "".concat(_res.slice(0, 509), "...");
                }
                if (other.length > 512) {
                  other = "".concat(other.slice(0, 509), "...");
                }
                if (operator === "deepEqual" || operator === "equal") {
                  _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                } else {
                  other = " ".concat(operator, " ").concat(other);
                }
              }
              _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError2).call(this, "".concat(_res).concat(other)));
            }
          }
          Error.stackTraceLimit = limit;
          _this.generatedMessage = !message;
          Object.defineProperty(_assertThisInitialized(_this), "name", {
            value: "AssertionError [ERR_ASSERTION]",
            enumerable: false,
            writable: true,
            configurable: true
          });
          _this.code = "ERR_ASSERTION";
          _this.actual = actual;
          _this.expected = expected;
          _this.operator = operator;
          if (Error.captureStackTrace) {
            Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
          }
          _this.stack;
          _this.name = "AssertionError";
          return _possibleConstructorReturn(_this);
        }
        __name(AssertionError2, "AssertionError");
        _createClass(AssertionError2, [{
          key: "toString",
          value: /* @__PURE__ */ __name(function toString() {
            return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
          }, "toString")
        }, {
          key: inspect.custom,
          value: /* @__PURE__ */ __name(function value(recurseTimes, ctx) {
            return inspect(this, _objectSpread({}, ctx, {
              customInspect: false,
              depth: 0
            }));
          }, "value")
        }]);
        return AssertionError2;
      }(_wrapNativeSuper(Error));
      module.exports = AssertionError;
    }
  });

  // node_modules/es6-object-assign/index.js
  var require_es6_object_assign = __commonJS({
    "node_modules/es6-object-assign/index.js"(exports, module) {
      "use strict";
      function assign(target, firstSource) {
        if (target === void 0 || target === null) {
          throw new TypeError("Cannot convert first argument to object");
        }
        var to2 = Object(target);
        for (var i = 1; i < arguments.length; i++) {
          var nextSource = arguments[i];
          if (nextSource === void 0 || nextSource === null) {
            continue;
          }
          var keysArray = Object.keys(Object(nextSource));
          for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== void 0 && desc.enumerable) {
              to2[nextKey] = nextSource[nextKey];
            }
          }
        }
        return to2;
      }
      __name(assign, "assign");
      function polyfill() {
        if (!Object.assign) {
          Object.defineProperty(Object, "assign", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: assign
          });
        }
      }
      __name(polyfill, "polyfill");
      module.exports = {
        assign,
        polyfill
      };
    }
  });

  // node_modules/object-keys/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/object-keys/isArguments.js"(exports, module) {
      "use strict";
      var toStr = Object.prototype.toString;
      module.exports = /* @__PURE__ */ __name(function isArguments(value) {
        var str = toStr.call(value);
        var isArgs = str === "[object Arguments]";
        if (!isArgs) {
          isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr.call(value.callee) === "[object Function]";
        }
        return isArgs;
      }, "isArguments");
    }
  });

  // node_modules/object-keys/implementation.js
  var require_implementation2 = __commonJS({
    "node_modules/object-keys/implementation.js"(exports, module) {
      "use strict";
      var keysShim;
      if (!Object.keys) {
        has = Object.prototype.hasOwnProperty;
        toStr = Object.prototype.toString;
        isArgs = require_isArguments();
        isEnumerable = Object.prototype.propertyIsEnumerable;
        hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
        hasProtoEnumBug = isEnumerable.call(function() {
        }, "prototype");
        dontEnums = [
          "toString",
          "toLocaleString",
          "valueOf",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "constructor"
        ];
        equalsConstructorPrototype = /* @__PURE__ */ __name(function(o) {
          var ctor = o.constructor;
          return ctor && ctor.prototype === o;
        }, "equalsConstructorPrototype");
        excludedKeys = {
          $applicationCache: true,
          $console: true,
          $external: true,
          $frame: true,
          $frameElement: true,
          $frames: true,
          $innerHeight: true,
          $innerWidth: true,
          $onmozfullscreenchange: true,
          $onmozfullscreenerror: true,
          $outerHeight: true,
          $outerWidth: true,
          $pageXOffset: true,
          $pageYOffset: true,
          $parent: true,
          $scrollLeft: true,
          $scrollTop: true,
          $scrollX: true,
          $scrollY: true,
          $self: true,
          $webkitIndexedDB: true,
          $webkitStorageInfo: true,
          $window: true
        };
        hasAutomationEqualityBug = function() {
          if (typeof window === "undefined") {
            return false;
          }
          for (var k in window) {
            try {
              if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
                try {
                  equalsConstructorPrototype(window[k]);
                } catch (e) {
                  return true;
                }
              }
            } catch (e) {
              return true;
            }
          }
          return false;
        }();
        equalsConstructorPrototypeIfNotBuggy = /* @__PURE__ */ __name(function(o) {
          if (typeof window === "undefined" || !hasAutomationEqualityBug) {
            return equalsConstructorPrototype(o);
          }
          try {
            return equalsConstructorPrototype(o);
          } catch (e) {
            return false;
          }
        }, "equalsConstructorPrototypeIfNotBuggy");
        keysShim = /* @__PURE__ */ __name(function keys(object) {
          var isObject3 = object !== null && typeof object === "object";
          var isFunction2 = toStr.call(object) === "[object Function]";
          var isArguments = isArgs(object);
          var isString2 = isObject3 && toStr.call(object) === "[object String]";
          var theKeys = [];
          if (!isObject3 && !isFunction2 && !isArguments) {
            throw new TypeError("Object.keys called on a non-object");
          }
          var skipProto = hasProtoEnumBug && isFunction2;
          if (isString2 && object.length > 0 && !has.call(object, 0)) {
            for (var i = 0; i < object.length; ++i) {
              theKeys.push(String(i));
            }
          }
          if (isArguments && object.length > 0) {
            for (var j = 0; j < object.length; ++j) {
              theKeys.push(String(j));
            }
          } else {
            for (var name in object) {
              if (!(skipProto && name === "prototype") && has.call(object, name)) {
                theKeys.push(String(name));
              }
            }
          }
          if (hasDontEnumBug) {
            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
            for (var k = 0; k < dontEnums.length; ++k) {
              if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object, dontEnums[k])) {
                theKeys.push(dontEnums[k]);
              }
            }
          }
          return theKeys;
        }, "keys");
      }
      var has;
      var toStr;
      var isArgs;
      var isEnumerable;
      var hasDontEnumBug;
      var hasProtoEnumBug;
      var dontEnums;
      var equalsConstructorPrototype;
      var excludedKeys;
      var hasAutomationEqualityBug;
      var equalsConstructorPrototypeIfNotBuggy;
      module.exports = keysShim;
    }
  });

  // node_modules/object-keys/index.js
  var require_object_keys = __commonJS({
    "node_modules/object-keys/index.js"(exports, module) {
      "use strict";
      var slice = Array.prototype.slice;
      var isArgs = require_isArguments();
      var origKeys = Object.keys;
      var keysShim = origKeys ? /* @__PURE__ */ __name(function keys(o) {
        return origKeys(o);
      }, "keys") : require_implementation2();
      var originalKeys = Object.keys;
      keysShim.shim = /* @__PURE__ */ __name(function shimObjectKeys() {
        if (Object.keys) {
          var keysWorksWithArguments = function() {
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
          }(1, 2);
          if (!keysWorksWithArguments) {
            Object.keys = /* @__PURE__ */ __name(function keys(object) {
              if (isArgs(object)) {
                return originalKeys(slice.call(object));
              }
              return originalKeys(object);
            }, "keys");
          }
        } else {
          Object.keys = keysShim;
        }
        return Object.keys || keysShim;
      }, "shimObjectKeys");
      module.exports = keysShim;
    }
  });

  // node_modules/define-properties/index.js
  var require_define_properties = __commonJS({
    "node_modules/define-properties/index.js"(exports, module) {
      "use strict";
      var keys = require_object_keys();
      var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
      var toStr = Object.prototype.toString;
      var concat = Array.prototype.concat;
      var origDefineProperty = Object.defineProperty;
      var isFunction2 = /* @__PURE__ */ __name(function(fn2) {
        return typeof fn2 === "function" && toStr.call(fn2) === "[object Function]";
      }, "isFunction");
      var arePropertyDescriptorsSupported = /* @__PURE__ */ __name(function() {
        var obj = {};
        try {
          origDefineProperty(obj, "x", { enumerable: false, value: obj });
          for (var _ in obj) {
            return false;
          }
          return obj.x === obj;
        } catch (e) {
          return false;
        }
      }, "arePropertyDescriptorsSupported");
      var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();
      var defineProperty = /* @__PURE__ */ __name(function(object, name, value, predicate) {
        if (name in object && (!isFunction2(predicate) || !predicate())) {
          return;
        }
        if (supportsDescriptors) {
          origDefineProperty(object, name, {
            configurable: true,
            enumerable: false,
            value,
            writable: true
          });
        } else {
          object[name] = value;
        }
      }, "defineProperty");
      var defineProperties = /* @__PURE__ */ __name(function(object, map) {
        var predicates = arguments.length > 2 ? arguments[2] : {};
        var props = keys(map);
        if (hasSymbols) {
          props = concat.call(props, Object.getOwnPropertySymbols(map));
        }
        for (var i = 0; i < props.length; i += 1) {
          defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
        }
      }, "defineProperties");
      defineProperties.supportsDescriptors = !!supportsDescriptors;
      module.exports = defineProperties;
    }
  });

  // node_modules/object-is/implementation.js
  var require_implementation3 = __commonJS({
    "node_modules/object-is/implementation.js"(exports, module) {
      "use strict";
      var numberIsNaN = /* @__PURE__ */ __name(function(value) {
        return value !== value;
      }, "numberIsNaN");
      module.exports = /* @__PURE__ */ __name(function is2(a, b) {
        if (a === 0 && b === 0) {
          return 1 / a === 1 / b;
        }
        if (a === b) {
          return true;
        }
        if (numberIsNaN(a) && numberIsNaN(b)) {
          return true;
        }
        return false;
      }, "is");
    }
  });

  // node_modules/object-is/polyfill.js
  var require_polyfill = __commonJS({
    "node_modules/object-is/polyfill.js"(exports, module) {
      "use strict";
      var implementation = require_implementation3();
      module.exports = /* @__PURE__ */ __name(function getPolyfill() {
        return typeof Object.is === "function" ? Object.is : implementation;
      }, "getPolyfill");
    }
  });

  // node_modules/object-is/shim.js
  var require_shim = __commonJS({
    "node_modules/object-is/shim.js"(exports, module) {
      "use strict";
      var getPolyfill = require_polyfill();
      var define2 = require_define_properties();
      module.exports = /* @__PURE__ */ __name(function shimObjectIs() {
        var polyfill = getPolyfill();
        define2(Object, { is: polyfill }, {
          is: /* @__PURE__ */ __name(function testObjectIs() {
            return Object.is !== polyfill;
          }, "testObjectIs")
        });
        return polyfill;
      }, "shimObjectIs");
    }
  });

  // node_modules/object-is/index.js
  var require_object_is = __commonJS({
    "node_modules/object-is/index.js"(exports, module) {
      "use strict";
      var define2 = require_define_properties();
      var callBind = require_call_bind();
      var implementation = require_implementation3();
      var getPolyfill = require_polyfill();
      var shim = require_shim();
      var polyfill = callBind(getPolyfill(), Object);
      define2(polyfill, {
        getPolyfill,
        implementation,
        shim
      });
      module.exports = polyfill;
    }
  });

  // node_modules/is-nan/implementation.js
  var require_implementation4 = __commonJS({
    "node_modules/is-nan/implementation.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function isNaN2(value) {
        return value !== value;
      }, "isNaN");
    }
  });

  // node_modules/is-nan/polyfill.js
  var require_polyfill2 = __commonJS({
    "node_modules/is-nan/polyfill.js"(exports, module) {
      "use strict";
      var implementation = require_implementation4();
      module.exports = /* @__PURE__ */ __name(function getPolyfill() {
        if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
          return Number.isNaN;
        }
        return implementation;
      }, "getPolyfill");
    }
  });

  // node_modules/is-nan/shim.js
  var require_shim2 = __commonJS({
    "node_modules/is-nan/shim.js"(exports, module) {
      "use strict";
      var define2 = require_define_properties();
      var getPolyfill = require_polyfill2();
      module.exports = /* @__PURE__ */ __name(function shimNumberIsNaN() {
        var polyfill = getPolyfill();
        define2(Number, { isNaN: polyfill }, {
          isNaN: /* @__PURE__ */ __name(function testIsNaN() {
            return Number.isNaN !== polyfill;
          }, "testIsNaN")
        });
        return polyfill;
      }, "shimNumberIsNaN");
    }
  });

  // node_modules/is-nan/index.js
  var require_is_nan = __commonJS({
    "node_modules/is-nan/index.js"(exports, module) {
      "use strict";
      var callBind = require_call_bind();
      var define2 = require_define_properties();
      var implementation = require_implementation4();
      var getPolyfill = require_polyfill2();
      var shim = require_shim2();
      var polyfill = callBind(getPolyfill(), Number);
      define2(polyfill, {
        getPolyfill,
        implementation,
        shim
      });
      module.exports = polyfill;
    }
  });

  // node_modules/assert/build/internal/util/comparisons.js
  var require_comparisons = __commonJS({
    "node_modules/assert/build/internal/util/comparisons.js"(exports, module) {
      "use strict";
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }
      __name(_slicedToArray, "_slicedToArray");
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
      __name(_nonIterableRest, "_nonIterableRest");
      function _iterableToArrayLimit(arr, i) {
        var _arr = [];
        var _n2 = true;
        var _d = false;
        var _e2 = void 0;
        try {
          for (var _i2 = arr[Symbol.iterator](), _s2; !(_n2 = (_s2 = _i2.next()).done); _n2 = true) {
            _arr.push(_s2.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e2 = err;
        } finally {
          try {
            if (!_n2 && _i2["return"] != null)
              _i2["return"]();
          } finally {
            if (_d)
              throw _e2;
          }
        }
        return _arr;
      }
      __name(_iterableToArrayLimit, "_iterableToArrayLimit");
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      __name(_arrayWithHoles, "_arrayWithHoles");
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return typeof obj2;
          }, "_typeof");
        } else {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, "_typeof");
        }
        return _typeof(obj);
      }
      __name(_typeof, "_typeof");
      var regexFlagsSupported = /a/g.flags !== void 0;
      var arrayFromSet = /* @__PURE__ */ __name(function arrayFromSet2(set) {
        var array = [];
        set.forEach(function(value) {
          return array.push(value);
        });
        return array;
      }, "arrayFromSet");
      var arrayFromMap = /* @__PURE__ */ __name(function arrayFromMap2(map) {
        var array = [];
        map.forEach(function(value, key) {
          return array.push([key, value]);
        });
        return array;
      }, "arrayFromMap");
      var objectIs = Object.is ? Object.is : require_object_is();
      var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
        return [];
      };
      var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
      function uncurryThis(f2) {
        return f2.call.bind(f2);
      }
      __name(uncurryThis, "uncurryThis");
      var hasOwnProperty2 = uncurryThis(Object.prototype.hasOwnProperty);
      var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
      var objectToString = uncurryThis(Object.prototype.toString);
      var _require$types = require_util().types;
      var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
      var isArrayBufferView = _require$types.isArrayBufferView;
      var isDate2 = _require$types.isDate;
      var isMap = _require$types.isMap;
      var isRegExp = _require$types.isRegExp;
      var isSet = _require$types.isSet;
      var isNativeError = _require$types.isNativeError;
      var isBoxedPrimitive = _require$types.isBoxedPrimitive;
      var isNumberObject = _require$types.isNumberObject;
      var isStringObject = _require$types.isStringObject;
      var isBooleanObject = _require$types.isBooleanObject;
      var isBigIntObject = _require$types.isBigIntObject;
      var isSymbolObject = _require$types.isSymbolObject;
      var isFloat32Array = _require$types.isFloat32Array;
      var isFloat64Array = _require$types.isFloat64Array;
      function isNonIndex(key) {
        if (key.length === 0 || key.length > 10)
          return true;
        for (var i = 0; i < key.length; i++) {
          var code = key.charCodeAt(i);
          if (code < 48 || code > 57)
            return true;
        }
        return key.length === 10 && key >= Math.pow(2, 32);
      }
      __name(isNonIndex, "isNonIndex");
      function getOwnNonIndexProperties(value) {
        return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
      }
      __name(getOwnNonIndexProperties, "getOwnNonIndexProperties");
      function compare(a, b) {
        if (a === b) {
          return 0;
        }
        var x2 = a.length;
        var y = b.length;
        for (var i = 0, len = Math.min(x2, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x2 = a[i];
            y = b[i];
            break;
          }
        }
        if (x2 < y) {
          return -1;
        }
        if (y < x2) {
          return 1;
        }
        return 0;
      }
      __name(compare, "compare");
      var ONLY_ENUMERABLE = void 0;
      var kStrict = true;
      var kLoose = false;
      var kNoIterator = 0;
      var kIsArray = 1;
      var kIsSet = 2;
      var kIsMap = 3;
      function areSimilarRegExps(a, b) {
        return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
      }
      __name(areSimilarRegExps, "areSimilarRegExps");
      function areSimilarFloatArrays(a, b) {
        if (a.byteLength !== b.byteLength) {
          return false;
        }
        for (var offset = 0; offset < a.byteLength; offset++) {
          if (a[offset] !== b[offset]) {
            return false;
          }
        }
        return true;
      }
      __name(areSimilarFloatArrays, "areSimilarFloatArrays");
      function areSimilarTypedArrays(a, b) {
        if (a.byteLength !== b.byteLength) {
          return false;
        }
        return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
      }
      __name(areSimilarTypedArrays, "areSimilarTypedArrays");
      function areEqualArrayBuffers(buf1, buf2) {
        return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
      }
      __name(areEqualArrayBuffers, "areEqualArrayBuffers");
      function isEqualBoxedPrimitive(val1, val2) {
        if (isNumberObject(val1)) {
          return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
        }
        if (isStringObject(val1)) {
          return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
        }
        if (isBooleanObject(val1)) {
          return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
        }
        if (isBigIntObject(val1)) {
          return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
        }
        return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
      }
      __name(isEqualBoxedPrimitive, "isEqualBoxedPrimitive");
      function innerDeepEqual(val1, val2, strict, memos) {
        if (val1 === val2) {
          if (val1 !== 0)
            return true;
          return strict ? objectIs(val1, val2) : true;
        }
        if (strict) {
          if (_typeof(val1) !== "object") {
            return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
          }
          if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
            return false;
          }
          if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
            return false;
          }
        } else {
          if (val1 === null || _typeof(val1) !== "object") {
            if (val2 === null || _typeof(val2) !== "object") {
              return val1 == val2;
            }
            return false;
          }
          if (val2 === null || _typeof(val2) !== "object") {
            return false;
          }
        }
        var val1Tag = objectToString(val1);
        var val2Tag = objectToString(val2);
        if (val1Tag !== val2Tag) {
          return false;
        }
        if (Array.isArray(val1)) {
          if (val1.length !== val2.length) {
            return false;
          }
          var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
          var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
          if (keys1.length !== keys2.length) {
            return false;
          }
          return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
        }
        if (val1Tag === "[object Object]") {
          if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
            return false;
          }
        }
        if (isDate2(val1)) {
          if (!isDate2(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
            return false;
          }
        } else if (isRegExp(val1)) {
          if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
            return false;
          }
        } else if (isNativeError(val1) || val1 instanceof Error) {
          if (val1.message !== val2.message || val1.name !== val2.name) {
            return false;
          }
        } else if (isArrayBufferView(val1)) {
          if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
            if (!areSimilarFloatArrays(val1, val2)) {
              return false;
            }
          } else if (!areSimilarTypedArrays(val1, val2)) {
            return false;
          }
          var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
          var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
          if (_keys.length !== _keys2.length) {
            return false;
          }
          return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
        } else if (isSet(val1)) {
          if (!isSet(val2) || val1.size !== val2.size) {
            return false;
          }
          return keyCheck(val1, val2, strict, memos, kIsSet);
        } else if (isMap(val1)) {
          if (!isMap(val2) || val1.size !== val2.size) {
            return false;
          }
          return keyCheck(val1, val2, strict, memos, kIsMap);
        } else if (isAnyArrayBuffer(val1)) {
          if (!areEqualArrayBuffers(val1, val2)) {
            return false;
          }
        } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator);
      }
      __name(innerDeepEqual, "innerDeepEqual");
      function getEnumerables(val, keys) {
        return keys.filter(function(k) {
          return propertyIsEnumerable(val, k);
        });
      }
      __name(getEnumerables, "getEnumerables");
      function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
        if (arguments.length === 5) {
          aKeys = Object.keys(val1);
          var bKeys = Object.keys(val2);
          if (aKeys.length !== bKeys.length) {
            return false;
          }
        }
        var i = 0;
        for (; i < aKeys.length; i++) {
          if (!hasOwnProperty2(val2, aKeys[i])) {
            return false;
          }
        }
        if (strict && arguments.length === 5) {
          var symbolKeysA = objectGetOwnPropertySymbols(val1);
          if (symbolKeysA.length !== 0) {
            var count = 0;
            for (i = 0; i < symbolKeysA.length; i++) {
              var key = symbolKeysA[i];
              if (propertyIsEnumerable(val1, key)) {
                if (!propertyIsEnumerable(val2, key)) {
                  return false;
                }
                aKeys.push(key);
                count++;
              } else if (propertyIsEnumerable(val2, key)) {
                return false;
              }
            }
            var symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
              return false;
            }
          } else {
            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
              return false;
            }
          }
        }
        if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
          return true;
        }
        if (memos === void 0) {
          memos = {
            val1: /* @__PURE__ */ new Map(),
            val2: /* @__PURE__ */ new Map(),
            position: 0
          };
        } else {
          var val2MemoA = memos.val1.get(val1);
          if (val2MemoA !== void 0) {
            var val2MemoB = memos.val2.get(val2);
            if (val2MemoB !== void 0) {
              return val2MemoA === val2MemoB;
            }
          }
          memos.position++;
        }
        memos.val1.set(val1, memos.position);
        memos.val2.set(val2, memos.position);
        var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
        memos.val1.delete(val1);
        memos.val2.delete(val2);
        return areEq;
      }
      __name(keyCheck, "keyCheck");
      function setHasEqualElement(set, val1, strict, memo) {
        var setValues = arrayFromSet(set);
        for (var i = 0; i < setValues.length; i++) {
          var val2 = setValues[i];
          if (innerDeepEqual(val1, val2, strict, memo)) {
            set.delete(val2);
            return true;
          }
        }
        return false;
      }
      __name(setHasEqualElement, "setHasEqualElement");
      function findLooseMatchingPrimitives(prim) {
        switch (_typeof(prim)) {
          case "undefined":
            return null;
          case "object":
            return void 0;
          case "symbol":
            return false;
          case "string":
            prim = +prim;
          case "number":
            if (numberIsNaN(prim)) {
              return false;
            }
        }
        return true;
      }
      __name(findLooseMatchingPrimitives, "findLooseMatchingPrimitives");
      function setMightHaveLoosePrim(a, b, prim) {
        var altValue = findLooseMatchingPrimitives(prim);
        if (altValue != null)
          return altValue;
        return b.has(altValue) && !a.has(altValue);
      }
      __name(setMightHaveLoosePrim, "setMightHaveLoosePrim");
      function mapMightHaveLoosePrim(a, b, prim, item, memo) {
        var altValue = findLooseMatchingPrimitives(prim);
        if (altValue != null) {
          return altValue;
        }
        var curB = b.get(altValue);
        if (curB === void 0 && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
          return false;
        }
        return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
      }
      __name(mapMightHaveLoosePrim, "mapMightHaveLoosePrim");
      function setEquiv(a, b, strict, memo) {
        var set = null;
        var aValues = arrayFromSet(a);
        for (var i = 0; i < aValues.length; i++) {
          var val = aValues[i];
          if (_typeof(val) === "object" && val !== null) {
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(val);
          } else if (!b.has(val)) {
            if (strict)
              return false;
            if (!setMightHaveLoosePrim(a, b, val)) {
              return false;
            }
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(val);
          }
        }
        if (set !== null) {
          var bValues = arrayFromSet(b);
          for (var _i2 = 0; _i2 < bValues.length; _i2++) {
            var _val = bValues[_i2];
            if (_typeof(_val) === "object" && _val !== null) {
              if (!setHasEqualElement(set, _val, strict, memo))
                return false;
            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
              return false;
            }
          }
          return set.size === 0;
        }
        return true;
      }
      __name(setEquiv, "setEquiv");
      function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
        var setValues = arrayFromSet(set);
        for (var i = 0; i < setValues.length; i++) {
          var key2 = setValues[i];
          if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
            set.delete(key2);
            return true;
          }
        }
        return false;
      }
      __name(mapHasEqualEntry, "mapHasEqualEntry");
      function mapEquiv(a, b, strict, memo) {
        var set = null;
        var aEntries = arrayFromMap(a);
        for (var i = 0; i < aEntries.length; i++) {
          var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
          if (_typeof(key) === "object" && key !== null) {
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          } else {
            var item2 = b.get(key);
            if (item2 === void 0 && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
              if (strict)
                return false;
              if (!mapMightHaveLoosePrim(a, b, key, item1, memo))
                return false;
              if (set === null) {
                set = /* @__PURE__ */ new Set();
              }
              set.add(key);
            }
          }
        }
        if (set !== null) {
          var bEntries = arrayFromMap(b);
          for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
            if (_typeof(key) === "object" && key !== null) {
              if (!mapHasEqualEntry(set, a, key, item, strict, memo))
                return false;
            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
              return false;
            }
          }
          return set.size === 0;
        }
        return true;
      }
      __name(mapEquiv, "mapEquiv");
      function objEquiv(a, b, strict, keys, memos, iterationType) {
        var i = 0;
        if (iterationType === kIsSet) {
          if (!setEquiv(a, b, strict, memos)) {
            return false;
          }
        } else if (iterationType === kIsMap) {
          if (!mapEquiv(a, b, strict, memos)) {
            return false;
          }
        } else if (iterationType === kIsArray) {
          for (; i < a.length; i++) {
            if (hasOwnProperty2(a, i)) {
              if (!hasOwnProperty2(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
                return false;
              }
            } else if (hasOwnProperty2(b, i)) {
              return false;
            } else {
              var keysA = Object.keys(a);
              for (; i < keysA.length; i++) {
                var key = keysA[i];
                if (!hasOwnProperty2(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                  return false;
                }
              }
              if (keysA.length !== Object.keys(b).length) {
                return false;
              }
              return true;
            }
          }
        }
        for (i = 0; i < keys.length; i++) {
          var _key = keys[i];
          if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
            return false;
          }
        }
        return true;
      }
      __name(objEquiv, "objEquiv");
      function isDeepEqual(val1, val2) {
        return innerDeepEqual(val1, val2, kLoose);
      }
      __name(isDeepEqual, "isDeepEqual");
      function isDeepStrictEqual(val1, val2) {
        return innerDeepEqual(val1, val2, kStrict);
      }
      __name(isDeepStrictEqual, "isDeepStrictEqual");
      module.exports = {
        isDeepEqual,
        isDeepStrictEqual
      };
    }
  });

  // node_modules/assert/build/assert.js
  var require_assert = __commonJS({
    "node_modules/assert/build/assert.js"(exports, module) {
      "use strict";
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return typeof obj2;
          }, "_typeof");
        } else {
          _typeof = /* @__PURE__ */ __name(function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, "_typeof");
        }
        return _typeof(obj);
      }
      __name(_typeof, "_typeof");
      function _classCallCheck(instance, Constructor2) {
        if (!(instance instanceof Constructor2)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck, "_classCallCheck");
      var _require = require_errors2();
      var _require$codes = _require.codes;
      var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
      var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var AssertionError = require_assertion_error();
      var _require2 = require_util();
      var inspect = _require2.inspect;
      var _require$types = require_util().types;
      var isPromise = _require$types.isPromise;
      var isRegExp = _require$types.isRegExp;
      var objectAssign = Object.assign ? Object.assign : require_es6_object_assign().assign;
      var objectIs = Object.is ? Object.is : require_object_is();
      var isDeepEqual;
      var isDeepStrictEqual;
      function lazyLoadComparison() {
        var comparison = require_comparisons();
        isDeepEqual = comparison.isDeepEqual;
        isDeepStrictEqual = comparison.isDeepStrictEqual;
      }
      __name(lazyLoadComparison, "lazyLoadComparison");
      var warned = false;
      var assert = module.exports = ok;
      var NO_EXCEPTION_SENTINEL = {};
      function innerFail(obj) {
        if (obj.message instanceof Error)
          throw obj.message;
        throw new AssertionError(obj);
      }
      __name(innerFail, "innerFail");
      function fail(actual, expected, message, operator, stackStartFn) {
        var argsLen = arguments.length;
        var internalMessage;
        if (argsLen === 0) {
          internalMessage = "Failed";
        } else if (argsLen === 1) {
          message = actual;
          actual = void 0;
        } else {
          if (warned === false) {
            warned = true;
            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
          }
          if (argsLen === 2)
            operator = "!=";
        }
        if (message instanceof Error)
          throw message;
        var errArgs = {
          actual,
          expected,
          operator: operator === void 0 ? "fail" : operator,
          stackStartFn: stackStartFn || fail
        };
        if (message !== void 0) {
          errArgs.message = message;
        }
        var err = new AssertionError(errArgs);
        if (internalMessage) {
          err.message = internalMessage;
          err.generatedMessage = true;
        }
        throw err;
      }
      __name(fail, "fail");
      assert.fail = fail;
      assert.AssertionError = AssertionError;
      function innerOk(fn2, argLen, value, message) {
        if (!value) {
          var generatedMessage = false;
          if (argLen === 0) {
            generatedMessage = true;
            message = "No value argument passed to `assert.ok()`";
          } else if (message instanceof Error) {
            throw message;
          }
          var err = new AssertionError({
            actual: value,
            expected: true,
            message,
            operator: "==",
            stackStartFn: fn2
          });
          err.generatedMessage = generatedMessage;
          throw err;
        }
      }
      __name(innerOk, "innerOk");
      function ok() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        innerOk.apply(void 0, [ok, args.length].concat(args));
      }
      __name(ok, "ok");
      assert.ok = ok;
      assert.equal = /* @__PURE__ */ __name(function equal(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (actual != expected) {
          innerFail({
            actual,
            expected,
            message,
            operator: "==",
            stackStartFn: equal
          });
        }
      }, "equal");
      assert.notEqual = /* @__PURE__ */ __name(function notEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (actual == expected) {
          innerFail({
            actual,
            expected,
            message,
            operator: "!=",
            stackStartFn: notEqual
          });
        }
      }, "notEqual");
      assert.deepEqual = /* @__PURE__ */ __name(function deepEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        if (!isDeepEqual(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "deepEqual",
            stackStartFn: deepEqual
          });
        }
      }, "deepEqual");
      assert.notDeepEqual = /* @__PURE__ */ __name(function notDeepEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        if (isDeepEqual(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "notDeepEqual",
            stackStartFn: notDeepEqual
          });
        }
      }, "notDeepEqual");
      assert.deepStrictEqual = /* @__PURE__ */ __name(function deepStrictEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        if (!isDeepStrictEqual(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "deepStrictEqual",
            stackStartFn: deepStrictEqual
          });
        }
      }, "deepStrictEqual");
      assert.notDeepStrictEqual = notDeepStrictEqual;
      function notDeepStrictEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (isDeepEqual === void 0)
          lazyLoadComparison();
        if (isDeepStrictEqual(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "notDeepStrictEqual",
            stackStartFn: notDeepStrictEqual
          });
        }
      }
      __name(notDeepStrictEqual, "notDeepStrictEqual");
      assert.strictEqual = /* @__PURE__ */ __name(function strictEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (!objectIs(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "strictEqual",
            stackStartFn: strictEqual
          });
        }
      }, "strictEqual");
      assert.notStrictEqual = /* @__PURE__ */ __name(function notStrictEqual(actual, expected, message) {
        if (arguments.length < 2) {
          throw new ERR_MISSING_ARGS("actual", "expected");
        }
        if (objectIs(actual, expected)) {
          innerFail({
            actual,
            expected,
            message,
            operator: "notStrictEqual",
            stackStartFn: notStrictEqual
          });
        }
      }, "notStrictEqual");
      var Comparison = /* @__PURE__ */ __name(function Comparison2(obj, keys, actual) {
        var _this = this;
        _classCallCheck(this, Comparison2);
        keys.forEach(function(key) {
          if (key in obj) {
            if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && obj[key].test(actual[key])) {
              _this[key] = actual[key];
            } else {
              _this[key] = obj[key];
            }
          }
        });
      }, "Comparison");
      function compareExceptionKey(actual, expected, key, message, keys, fn2) {
        if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
          if (!message) {
            var a = new Comparison(actual, keys);
            var b = new Comparison(expected, keys, actual);
            var err = new AssertionError({
              actual: a,
              expected: b,
              operator: "deepStrictEqual",
              stackStartFn: fn2
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn2.name;
            throw err;
          }
          innerFail({
            actual,
            expected,
            message,
            operator: fn2.name,
            stackStartFn: fn2
          });
        }
      }
      __name(compareExceptionKey, "compareExceptionKey");
      function expectedException(actual, expected, msg, fn2) {
        if (typeof expected !== "function") {
          if (isRegExp(expected))
            return expected.test(actual);
          if (arguments.length === 2) {
            throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
          }
          if (_typeof(actual) !== "object" || actual === null) {
            var err = new AssertionError({
              actual,
              expected,
              message: msg,
              operator: "deepStrictEqual",
              stackStartFn: fn2
            });
            err.operator = fn2.name;
            throw err;
          }
          var keys = Object.keys(expected);
          if (expected instanceof Error) {
            keys.push("name", "message");
          } else if (keys.length === 0) {
            throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
          }
          if (isDeepEqual === void 0)
            lazyLoadComparison();
          keys.forEach(function(key) {
            if (typeof actual[key] === "string" && isRegExp(expected[key]) && expected[key].test(actual[key])) {
              return;
            }
            compareExceptionKey(actual, expected, key, msg, keys, fn2);
          });
          return true;
        }
        if (expected.prototype !== void 0 && actual instanceof expected) {
          return true;
        }
        if (Error.isPrototypeOf(expected)) {
          return false;
        }
        return expected.call({}, actual) === true;
      }
      __name(expectedException, "expectedException");
      function getActual(fn2) {
        if (typeof fn2 !== "function") {
          throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn2);
        }
        try {
          fn2();
        } catch (e) {
          return e;
        }
        return NO_EXCEPTION_SENTINEL;
      }
      __name(getActual, "getActual");
      function checkIsPromise(obj) {
        return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
      }
      __name(checkIsPromise, "checkIsPromise");
      function waitForActual(promiseFn) {
        return Promise.resolve().then(function() {
          var resultPromise;
          if (typeof promiseFn === "function") {
            resultPromise = promiseFn();
            if (!checkIsPromise(resultPromise)) {
              throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
            }
          } else if (checkIsPromise(promiseFn)) {
            resultPromise = promiseFn;
          } else {
            throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
          }
          return Promise.resolve().then(function() {
            return resultPromise;
          }).then(function() {
            return NO_EXCEPTION_SENTINEL;
          }).catch(function(e) {
            return e;
          });
        });
      }
      __name(waitForActual, "waitForActual");
      function expectsError(stackStartFn, actual, error, message) {
        if (typeof error === "string") {
          if (arguments.length === 4) {
            throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
          }
          if (_typeof(actual) === "object" && actual !== null) {
            if (actual.message === error) {
              throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
            }
          } else if (actual === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
          }
          message = error;
          error = void 0;
        } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (actual === NO_EXCEPTION_SENTINEL) {
          var details = "";
          if (error && error.name) {
            details += " (".concat(error.name, ")");
          }
          details += message ? ": ".concat(message) : ".";
          var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
          innerFail({
            actual: void 0,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn
          });
        }
        if (error && !expectedException(actual, error, message, stackStartFn)) {
          throw actual;
        }
      }
      __name(expectsError, "expectsError");
      function expectsNoError(stackStartFn, actual, error, message) {
        if (actual === NO_EXCEPTION_SENTINEL)
          return;
        if (typeof error === "string") {
          message = error;
          error = void 0;
        }
        if (!error || expectedException(actual, error)) {
          var details = message ? ": ".concat(message) : ".";
          var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
          innerFail({
            actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
            stackStartFn
          });
        }
        throw actual;
      }
      __name(expectsNoError, "expectsNoError");
      assert.throws = /* @__PURE__ */ __name(function throws(promiseFn) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
      }, "throws");
      assert.rejects = /* @__PURE__ */ __name(function rejects(promiseFn) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        return waitForActual(promiseFn).then(function(result) {
          return expectsError.apply(void 0, [rejects, result].concat(args));
        });
      }, "rejects");
      assert.doesNotThrow = /* @__PURE__ */ __name(function doesNotThrow(fn2) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        expectsNoError.apply(void 0, [doesNotThrow, getActual(fn2)].concat(args));
      }, "doesNotThrow");
      assert.doesNotReject = /* @__PURE__ */ __name(function doesNotReject(fn2) {
        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          args[_key5 - 1] = arguments[_key5];
        }
        return waitForActual(fn2).then(function(result) {
          return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
        });
      }, "doesNotReject");
      assert.ifError = /* @__PURE__ */ __name(function ifError(err) {
        if (err !== null && err !== void 0) {
          var message = "ifError got unwanted exception: ";
          if (_typeof(err) === "object" && typeof err.message === "string") {
            if (err.message.length === 0 && err.constructor) {
              message += err.constructor.name;
            } else {
              message += err.message;
            }
          } else {
            message += inspect(err);
          }
          var newErr = new AssertionError({
            actual: err,
            expected: null,
            operator: "ifError",
            message,
            stackStartFn: ifError
          });
          var origStack = err.stack;
          if (typeof origStack === "string") {
            var tmp2 = origStack.split("\n");
            tmp2.shift();
            var tmp1 = newErr.stack.split("\n");
            for (var i = 0; i < tmp2.length; i++) {
              var pos = tmp1.indexOf(tmp2[i]);
              if (pos !== -1) {
                tmp1 = tmp1.slice(0, pos);
                break;
              }
            }
            newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
          }
          throw newErr;
        }
      }, "ifError");
      function strict() {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }
        innerOk.apply(void 0, [strict, args.length].concat(args));
      }
      __name(strict, "strict");
      assert.strict = objectAssign(strict, assert, {
        equal: assert.strictEqual,
        deepEqual: assert.deepStrictEqual,
        notEqual: assert.notStrictEqual,
        notDeepEqual: assert.notDeepStrictEqual
      });
      assert.strict.strict = assert.strict;
    }
  });

  // node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/process/browser.js"(exports, module) {
      var process2 = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      __name(defaultSetTimout, "defaultSetTimout");
      function defaultClearTimeout2() {
        throw new Error("clearTimeout has not been defined");
      }
      __name(defaultClearTimeout2, "defaultClearTimeout");
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout2;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout2;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      __name(runTimeout, "runTimeout");
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout2 || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      __name(runClearTimeout, "runClearTimeout");
      var queue2 = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue2 = currentQueue.concat(queue2);
        } else {
          queueIndex = -1;
        }
        if (queue2.length) {
          drainQueue();
        }
      }
      __name(cleanUpNextTick, "cleanUpNextTick");
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue2.length;
        while (len) {
          currentQueue = queue2;
          queue2 = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue2.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      __name(drainQueue, "drainQueue");
      process2.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue2.push(new Item(fun, args));
        if (queue2.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      __name(Item, "Item");
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process2.title = "browser";
      process2.browser = true;
      process2.env = {};
      process2.argv = [];
      process2.version = "";
      process2.versions = {};
      function noop() {
      }
      __name(noop, "noop");
      process2.on = noop;
      process2.addListener = noop;
      process2.once = noop;
      process2.off = noop;
      process2.removeListener = noop;
      process2.removeAllListeners = noop;
      process2.emit = noop;
      process2.prependListener = noop;
      process2.prependOnceListener = noop;
      process2.listeners = function(name) {
        return [];
      };
      process2.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process2.cwd = function() {
        return "/";
      };
      process2.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process2.umask = function() {
        return 0;
      };
    }
  });

  // node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js
  var strShimFunction, strShimObject, strShimUndefined, strShimPrototype, strShimHasOwnProperty, ObjClass, ObjProto, ObjAssign, ObjCreate, ObjDefineProperty, ObjHasOwnProperty;
  var init_Constants = __esm({
    "node_modules/@microsoft/applicationinsights-shims/dist-esm/Constants.js"() {
      strShimFunction = "function";
      strShimObject = "object";
      strShimUndefined = "undefined";
      strShimPrototype = "prototype";
      strShimHasOwnProperty = "hasOwnProperty";
      ObjClass = Object;
      ObjProto = ObjClass[strShimPrototype];
      ObjAssign = ObjClass["assign"];
      ObjCreate = ObjClass["create"];
      ObjDefineProperty = ObjClass["defineProperty"];
      ObjHasOwnProperty = ObjProto[strShimHasOwnProperty];
    }
  });

  // node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js
  function getGlobal(useCached) {
    if (useCached === void 0) {
      useCached = true;
    }
    var result = useCached === false ? null : _cachedGlobal;
    if (!result) {
      if (typeof globalThis !== strShimUndefined) {
        result = globalThis;
      }
      if (!result && typeof self !== strShimUndefined) {
        result = self;
      }
      if (!result && typeof window !== strShimUndefined) {
        result = window;
      }
      if (!result && typeof global !== strShimUndefined) {
        result = global;
      }
      _cachedGlobal = result;
    }
    return result;
  }
  function throwTypeError(message) {
    throw new TypeError(message);
  }
  function objCreateFn(obj) {
    var func = ObjCreate;
    if (func) {
      return func(obj);
    }
    if (obj == null) {
      return {};
    }
    var type = typeof obj;
    if (type !== strShimObject && type !== strShimFunction) {
      throwTypeError("Object prototype may only be an Object:" + obj);
    }
    function tmpFunc() {
    }
    __name(tmpFunc, "tmpFunc");
    tmpFunc[strShimPrototype] = obj;
    return new tmpFunc();
  }
  var _cachedGlobal;
  var init_Helpers = __esm({
    "node_modules/@microsoft/applicationinsights-shims/dist-esm/Helpers.js"() {
      init_Constants();
      _cachedGlobal = null;
      __name(getGlobal, "getGlobal");
      __name(throwTypeError, "throwTypeError");
      __name(objCreateFn, "objCreateFn");
    }
  });

  // node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js
  function __extendsFn(d, b) {
    if (typeof b !== strShimFunction && b !== null) {
      throwTypeError("Class extends value " + String(b) + " is not a constructor or null");
    }
    extendStaticsFn(d, b);
    function __() {
      this.constructor = d;
    }
    __name(__, "__");
    d[strShimPrototype] = b === null ? objCreateFn(b) : (__[strShimPrototype] = b[strShimPrototype], new __());
  }
  function __spreadArrayFn(to2, from) {
    for (var i = 0, il2 = from.length, j = to2.length; i < il2; i++, j++) {
      to2[j] = from[i];
    }
    return to2;
  }
  var SymbolObj, ReflectObj, __objAssignFnImpl, __assignFn, extendStaticsFn;
  var init_TsLibShims = __esm({
    "node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibShims.js"() {
      init_Constants();
      init_Helpers();
      SymbolObj = (getGlobal() || {})["Symbol"];
      ReflectObj = (getGlobal() || {})["Reflect"];
      __objAssignFnImpl = /* @__PURE__ */ __name(function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) {
            if (ObjProto[strShimHasOwnProperty].call(s, p)) {
              t[p] = s[p];
            }
          }
        }
        return t;
      }, "__objAssignFnImpl");
      __assignFn = ObjAssign || __objAssignFnImpl;
      extendStaticsFn = /* @__PURE__ */ __name(function(d, b) {
        extendStaticsFn = ObjClass["setPrototypeOf"] || // tslint:disable-next-line: only-arrow-functions
        { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || // tslint:disable-next-line: only-arrow-functions
        function(d2, b2) {
          for (var p in b2) {
            if (b2[strShimHasOwnProperty](p)) {
              d2[p] = b2[p];
            }
          }
        };
        return extendStaticsFn(d, b);
      }, "extendStaticsFn");
      __name(__extendsFn, "__extendsFn");
      __name(__spreadArrayFn, "__spreadArrayFn");
    }
  });

  // node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibGlobals.js
  var init_TsLibGlobals = __esm({
    "node_modules/@microsoft/applicationinsights-shims/dist-esm/TsLibGlobals.js"() {
    }
  });

  // node_modules/@microsoft/applicationinsights-shims/dist-esm/applicationinsights-shims.js
  var init_applicationinsights_shims = __esm({
    "node_modules/@microsoft/applicationinsights-shims/dist-esm/applicationinsights-shims.js"() {
      init_Constants();
      init_Helpers();
      init_TsLibShims();
      init_TsLibGlobals();
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js
  var MinChannelPriorty;
  var init_IChannelControls = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js"() {
      "use strict";
      MinChannelPriorty = 100;
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/__DynamicConstants.js
  var _DYN_INITIALIZE, _DYN_NAME, _DYN_GET_NOTIFY_MGR, _DYN_IDENTIFIER, _DYN_PUSH, _DYN_IS_INITIALIZED, _DYN_CONFIG, _DYN_INSTRUMENTATION_KEY, _DYN_LOGGER, _DYN_LENGTH, _DYN_TIME, _DYN_PROCESS_NEXT, _DYN_GET_PROCESS_TEL_CONT0, _DYN_ADD_NOTIFICATION_LIS1, _DYN_REMOVE_NOTIFICATION_2, _DYN_STOP_POLLING_INTERNA3, _DYN_ON_COMPLETE, _DYN_GET_PLUGIN, _DYN_FLUSH, _DYN__EXTENSIONS, _DYN_SPLICE, _DYN_TEARDOWN, _DYN_MESSAGE_ID, _DYN_MESSAGE, _DYN_IS_ASYNC, _DYN__DO_TEARDOWN, _DYN_UPDATE, _DYN_GET_NEXT, _DYN_DIAG_LOG, _DYN_SET_NEXT_PLUGIN, _DYN_CREATE_NEW, _DYN_COOKIE_CFG, _DYN_INDEX_OF, _DYN_SUBSTRING, _DYN_USER_AGENT, _DYN_SPLIT, _DYN_SET_ENABLED, _DYN_SUBSTR, _DYN_NODE_TYPE, _DYN_APPLY, _DYN_REPLACE, _DYN_ENABLE_DEBUG_EXCEPTI4, _DYN_LOG_INTERNAL_MESSAGE, _DYN_TO_LOWER_CASE, _DYN_CALL, _DYN_TYPE, _DYN_HANDLER, _DYN_LISTENERS, _DYN_IS_CHILD_EVT, _DYN_GET_CTX, _DYN_SET_CTX, _DYN_COMPLETE, _DYN_TRACE_ID, _DYN_SPAN_ID, _DYN_TRACE_FLAGS, _DYN_VERSION;
  var init_DynamicConstants = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/__DynamicConstants.js"() {
      _DYN_INITIALIZE = "initialize";
      _DYN_NAME = "name";
      _DYN_GET_NOTIFY_MGR = "getNotifyMgr";
      _DYN_IDENTIFIER = "identifier";
      _DYN_PUSH = "push";
      _DYN_IS_INITIALIZED = "isInitialized";
      _DYN_CONFIG = "config";
      _DYN_INSTRUMENTATION_KEY = "instrumentationKey";
      _DYN_LOGGER = "logger";
      _DYN_LENGTH = "length";
      _DYN_TIME = "time";
      _DYN_PROCESS_NEXT = "processNext";
      _DYN_GET_PROCESS_TEL_CONT0 = "getProcessTelContext";
      _DYN_ADD_NOTIFICATION_LIS1 = "addNotificationListener";
      _DYN_REMOVE_NOTIFICATION_2 = "removeNotificationListener";
      _DYN_STOP_POLLING_INTERNA3 = "stopPollingInternalLogs";
      _DYN_ON_COMPLETE = "onComplete";
      _DYN_GET_PLUGIN = "getPlugin";
      _DYN_FLUSH = "flush";
      _DYN__EXTENSIONS = "_extensions";
      _DYN_SPLICE = "splice";
      _DYN_TEARDOWN = "teardown";
      _DYN_MESSAGE_ID = "messageId";
      _DYN_MESSAGE = "message";
      _DYN_IS_ASYNC = "isAsync";
      _DYN__DO_TEARDOWN = "_doTeardown";
      _DYN_UPDATE = "update";
      _DYN_GET_NEXT = "getNext";
      _DYN_DIAG_LOG = "diagLog";
      _DYN_SET_NEXT_PLUGIN = "setNextPlugin";
      _DYN_CREATE_NEW = "createNew";
      _DYN_COOKIE_CFG = "cookieCfg";
      _DYN_INDEX_OF = "indexOf";
      _DYN_SUBSTRING = "substring";
      _DYN_USER_AGENT = "userAgent";
      _DYN_SPLIT = "split";
      _DYN_SET_ENABLED = "setEnabled";
      _DYN_SUBSTR = "substr";
      _DYN_NODE_TYPE = "nodeType";
      _DYN_APPLY = "apply";
      _DYN_REPLACE = "replace";
      _DYN_ENABLE_DEBUG_EXCEPTI4 = "enableDebugExceptions";
      _DYN_LOG_INTERNAL_MESSAGE = "logInternalMessage";
      _DYN_TO_LOWER_CASE = "toLowerCase";
      _DYN_CALL = "call";
      _DYN_TYPE = "type";
      _DYN_HANDLER = "handler";
      _DYN_LISTENERS = "listeners";
      _DYN_IS_CHILD_EVT = "isChildEvt";
      _DYN_GET_CTX = "getCtx";
      _DYN_SET_CTX = "setCtx";
      _DYN_COMPLETE = "complete";
      _DYN_TRACE_ID = "traceId";
      _DYN_SPAN_ID = "spanId";
      _DYN_TRACE_FLAGS = "traceFlags";
      _DYN_VERSION = "version";
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InternalConstants.js
  var STR_EMPTY, STR_CHANNELS, STR_CORE, STR_CREATE_PERF_MGR, STR_DISABLED, STR_EXTENSION_CONFIG, STR_EXTENSIONS, STR_PROCESS_TELEMETRY, STR_PRIORITY, STR_EVENTS_SENT, STR_EVENTS_DISCARDED, STR_EVENTS_SEND_REQUEST, STR_PERF_EVENT, STR_ERROR_TO_CONSOLE, STR_WARN_TO_CONSOLE, STR_GET_PERF_MGR;
  var init_InternalConstants = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/InternalConstants.js"() {
      STR_EMPTY = "";
      STR_CHANNELS = "channels";
      STR_CORE = "core";
      STR_CREATE_PERF_MGR = "createPerfMgr";
      STR_DISABLED = "disabled";
      STR_EXTENSION_CONFIG = "extensionConfig";
      STR_EXTENSIONS = "extensions";
      STR_PROCESS_TELEMETRY = "processTelemetry";
      STR_PRIORITY = "priority";
      STR_EVENTS_SENT = "eventsSent";
      STR_EVENTS_DISCARDED = "eventsDiscarded";
      STR_EVENTS_SEND_REQUEST = "eventsSendRequest";
      STR_PERF_EVENT = "perfEvent";
      STR_ERROR_TO_CONSOLE = "errorToConsole";
      STR_WARN_TO_CONSOLE = "warnToConsole";
      STR_GET_PERF_MGR = "getPerfMgr";
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js
  function _getObjProto(target) {
    if (target) {
      if (_objGetPrototypeOf) {
        return _objGetPrototypeOf(target);
      }
      var newProto = target[str__Proto] || target[strShimPrototype] || target[strConstructor];
      if (newProto) {
        return newProto;
      }
    }
    return null;
  }
  function isTypeof(value, theType) {
    return typeof value === theType;
  }
  function isUndefined(value) {
    return value === void 0 || typeof value === strShimUndefined;
  }
  function isNullOrUndefined(value) {
    return value === null || isUndefined(value);
  }
  function isNotNullOrUndefined(value) {
    return !isNullOrUndefined(value);
  }
  function hasOwnProperty(obj, prop) {
    return !!(obj && ObjHasOwnProperty[
      _DYN_CALL
      /* @min:%2ecall */
    ](obj, prop));
  }
  function isObject2(value) {
    return !!(value && typeof value === strShimObject);
  }
  function isFunction(value) {
    return !!(value && typeof value === strShimFunction);
  }
  function normalizeJsName(name) {
    var value = name;
    if (value && isString(value)) {
      value = value[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](rCamelCase, function(_all, letter) {
        return letter.toUpperCase();
      });
      value = value[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](rNormalizeInvalid, "_");
      value = value[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](rLeadingNumeric, function(_all, match) {
        return "_" + match;
      });
    }
    return value;
  }
  function objForEachKey(target, callbackfn) {
    if (target) {
      for (var prop in target) {
        if (ObjHasOwnProperty[
          _DYN_CALL
          /* @min:%2ecall */
        ](target, prop)) {
          callbackfn[
            _DYN_CALL
            /* @min:%2ecall */
          ](target, prop, target[prop]);
        }
      }
    }
  }
  function strEndsWith(value, search) {
    var result = false;
    if (value && search && !(result = value === search)) {
      result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);
    }
    return result;
  }
  function _strEndsWithPoly(value, search) {
    var result = false;
    var searchLen = search ? search[
      _DYN_LENGTH
      /* @min:%2elength */
    ] : 0;
    var valLen = value ? value[
      _DYN_LENGTH
      /* @min:%2elength */
    ] : 0;
    if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {
      var pos = valLen - 1;
      for (var lp = searchLen - 1; lp >= 0; lp--) {
        if (value[pos] != search[lp]) {
          return false;
        }
        pos--;
      }
      result = true;
    }
    return result;
  }
  function strStartsWith(value, checkValue) {
    var result = false;
    if (value && checkValue && !(result = value === checkValue)) {
      result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);
    }
    return result;
  }
  function _strStartsWithPoly(value, checkValue) {
    var result = false;
    var chkLen = checkValue ? checkValue[
      _DYN_LENGTH
      /* @min:%2elength */
    ] : 0;
    if (value && chkLen && value[
      _DYN_LENGTH
      /* @min:%2elength */
    ] >= chkLen && !(result = value === checkValue)) {
      for (var lp = 0; lp < chkLen; lp++) {
        if (value[lp] !== checkValue[lp]) {
          return false;
        }
      }
      result = true;
    }
    return result;
  }
  function strContains(value, search) {
    if (value && search) {
      return value[
        _DYN_INDEX_OF
        /* @min:%2eindexOf */
      ](search) !== -1;
    }
    return false;
  }
  function isDate(obj) {
    return !!(obj && _objToString[
      _DYN_CALL
      /* @min:%2ecall */
    ](obj) === "[object Date]");
  }
  function _isArrayPoly(obj) {
    return !!(obj && _objToString[
      _DYN_CALL
      /* @min:%2ecall */
    ](obj) === "[object Array]");
  }
  function isError2(obj) {
    return !!(obj && _objToString[
      _DYN_CALL
      /* @min:%2ecall */
    ](obj) === "[object Error]");
  }
  function isString(value) {
    return typeof value === "string";
  }
  function isNumber(value) {
    return typeof value === "number";
  }
  function isBoolean(value) {
    return typeof value === "boolean";
  }
  function isPlainObject(value) {
    var result = false;
    if (value && typeof value === "object") {
      var proto = _objGetPrototypeOf ? _objGetPrototypeOf(value) : _getObjProto(value);
      if (!proto) {
        result = true;
      } else {
        if (proto[strConstructor] && ObjHasOwnProperty[
          _DYN_CALL
          /* @min:%2ecall */
        ](proto, strConstructor)) {
          proto = proto[strConstructor];
        }
        result = typeof proto === strShimFunction && _fnToString[
          _DYN_CALL
          /* @min:%2ecall */
        ](proto) === _objFunctionString;
      }
    }
    return result;
  }
  function toISOString(date) {
    if (date) {
      return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);
    }
  }
  function _toISOStringPoly(date) {
    if (date && date.getUTCFullYear) {
      var pad = /* @__PURE__ */ __name(function(num) {
        var r = String(num);
        if (r[
          _DYN_LENGTH
          /* @min:%2elength */
        ] === 1) {
          r = "0" + r;
        }
        return r;
      }, "pad");
      return date.getUTCFullYear() + "-" + pad(date.getUTCMonth() + 1) + "-" + pad(date.getUTCDate()) + "T" + pad(date.getUTCHours()) + ":" + pad(date.getUTCMinutes()) + ":" + pad(date.getUTCSeconds()) + "." + String((date.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z";
    }
  }
  function arrForEach(arr, callbackfn, thisArg) {
    var len = arr[
      _DYN_LENGTH
      /* @min:%2elength */
    ];
    try {
      for (var idx = 0; idx < len; idx++) {
        if (idx in arr) {
          if (callbackfn[
            _DYN_CALL
            /* @min:%2ecall */
          ](thisArg || arr, arr[idx], idx, arr) === -1) {
            break;
          }
        }
      }
    } catch (e) {
    }
  }
  function arrIndexOf(arr, searchElement, fromIndex) {
    if (arr) {
      if (arr[strIndexOf]) {
        return arr[strIndexOf](searchElement, fromIndex);
      }
      var len = arr[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
      var from = fromIndex || 0;
      try {
        for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {
          if (lp in arr && arr[lp] === searchElement) {
            return lp;
          }
        }
      } catch (e) {
      }
    }
    return -1;
  }
  function arrMap(arr, callbackfn, thisArg) {
    var results;
    if (arr) {
      if (arr[strMap]) {
        return arr[strMap](callbackfn, thisArg);
      }
      var len = arr[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
      var _this = thisArg || arr;
      results = new Array(len);
      try {
        for (var lp = 0; lp < len; lp++) {
          if (lp in arr) {
            results[lp] = callbackfn[
              _DYN_CALL
              /* @min:%2ecall */
            ](_this, arr[lp], arr);
          }
        }
      } catch (e) {
      }
    }
    return results;
  }
  function arrReduce(arr, callbackfn, initialValue) {
    var value;
    if (arr) {
      if (arr[strReduce]) {
        return arr[strReduce](callbackfn, initialValue);
      }
      var len = arr[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
      var lp = 0;
      if (arguments[
        _DYN_LENGTH
        /* @min:%2elength */
      ] >= 3) {
        value = arguments[2];
      } else {
        while (lp < len && !(lp in arr)) {
          lp++;
        }
        value = arr[lp++];
      }
      while (lp < len) {
        if (lp in arr) {
          value = callbackfn(value, arr[lp], lp, arr);
        }
        lp++;
      }
    }
    return value;
  }
  function strTrim(str) {
    if (str) {
      str = _strTrim && str[cStrTrim] ? str[cStrTrim]() : str[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ] ? str[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](/^\s+|(?=\s)\s+$/g, STR_EMPTY) : str;
    }
    return str;
  }
  function objKeys(obj) {
    var objType = typeof obj;
    if (objType !== strShimFunction && (objType !== strShimObject || obj === null)) {
      throwTypeError("objKeys called on non-object");
    }
    if (!_objKeysHasDontEnumBug && _objKeys) {
      return _objKeys(obj);
    }
    var result = [];
    for (var prop in obj) {
      if (obj && ObjHasOwnProperty[
        _DYN_CALL
        /* @min:%2ecall */
      ](obj, prop)) {
        result[
          _DYN_PUSH
          /* @min:%2epush */
        ](prop);
      }
    }
    if (_objKeysHasDontEnumBug) {
      var dontEnumsLength = _objKeysDontEnums[
        _DYN_LENGTH
        /* @min:%2elength */
      ];
      for (var lp = 0; lp < dontEnumsLength; lp++) {
        if (obj && ObjHasOwnProperty[
          _DYN_CALL
          /* @min:%2ecall */
        ](obj, _objKeysDontEnums[lp])) {
          result[
            _DYN_PUSH
            /* @min:%2epush */
          ](_objKeysDontEnums[lp]);
        }
      }
    }
    return result;
  }
  function objDefineAccessors(target, prop, getProp, setProp) {
    if (_objDefineProperty) {
      try {
        var descriptor = {
          enumerable: true,
          configurable: true
        };
        if (getProp) {
          descriptor.get = getProp;
        }
        if (setProp) {
          descriptor.set = setProp;
        }
        _objDefineProperty(target, prop, descriptor);
        return true;
      } catch (e) {
      }
    }
    return false;
  }
  function _doNothing(value) {
    return value;
  }
  function deepFreeze(obj) {
    if (_objFreeze) {
      objForEachKey(obj, function(name, value) {
        if (isArray(value) || isObject2(value)) {
          _objFreeze(value);
        }
      });
    }
    return objFreeze(obj);
  }
  function dateNow() {
    var dt = Date;
    return dt.now ? dt.now() : new dt().getTime();
  }
  function getExceptionName(object) {
    if (isError2(object)) {
      return object[
        _DYN_NAME
        /* @min:%2ename */
      ];
    }
    return STR_EMPTY;
  }
  function setValue(target, field, value, valChk, srcChk) {
    var theValue = value;
    if (target) {
      theValue = target[field];
      if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {
        theValue = value;
        target[field] = theValue;
      }
    }
    return theValue;
  }
  function getSetValue(target, field, defValue) {
    var theValue;
    if (target) {
      theValue = target[field];
      if (!theValue && isNullOrUndefined(theValue)) {
        theValue = !isUndefined(defValue) ? defValue : {};
        target[field] = theValue;
      }
    } else {
      theValue = !isUndefined(defValue) ? defValue : {};
    }
    return theValue;
  }
  function getCfgValue(theValue, defaultValue) {
    return !isNullOrUndefined(theValue) ? theValue : defaultValue;
  }
  function isNotTruthy(value) {
    return !value;
  }
  function isTruthy(value) {
    return !!value;
  }
  function throwError(message) {
    throw new Error(message);
  }
  function _createProxyFunction(source, funcName) {
    var srcFunc = null;
    var src = null;
    if (isFunction(source)) {
      srcFunc = source;
    } else {
      src = source;
    }
    return function() {
      var originalArguments = arguments;
      if (srcFunc) {
        src = srcFunc();
      }
      if (src) {
        return src[funcName][
          _DYN_APPLY
          /* @min:%2eapply */
        ](src, originalArguments);
      }
    };
  }
  function proxyAssign(target, source, chkSet) {
    if (target && source && isObject2(target) && isObject2(source)) {
      var _loop_1 = /* @__PURE__ */ __name(function(field2) {
        if (isString(field2)) {
          var value = source[field2];
          if (isFunction(value)) {
            if (!chkSet || chkSet(field2, true, source, target)) {
              target[field2] = _createProxyFunction(source, field2);
            }
          } else if (!chkSet || chkSet(field2, false, source, target)) {
            if (hasOwnProperty(target, field2)) {
              delete target[field2];
            }
            if (!objDefineAccessors(target, field2, function() {
              return source[field2];
            }, function(theValue) {
              source[field2] = theValue;
            })) {
              target[field2] = value;
            }
          }
        }
      }, "_loop_1");
      for (var field in source) {
        _loop_1(field);
      }
    }
    return target;
  }
  function proxyFunctionAs(target, name, source, theFunc, overwriteTarget) {
    if (target && name && source) {
      if (overwriteTarget !== false || isUndefined(target[name])) {
        target[name] = _createProxyFunction(source, theFunc);
      }
    }
  }
  function proxyFunctions(target, source, functionsToProxy, overwriteTarget) {
    if (target && source && isObject2(target) && isArray(functionsToProxy)) {
      arrForEach(functionsToProxy, function(theFuncName) {
        if (isString(theFuncName)) {
          proxyFunctionAs(target, theFuncName, source, theFuncName, overwriteTarget);
        }
      });
    }
    return target;
  }
  function optimizeObject(theObject) {
    if (theObject && ObjAssign) {
      theObject = ObjClass(ObjAssign({}, theObject));
    }
    return theObject;
  }
  function objExtend(obj1, obj2, obj3, obj4, obj5, obj6) {
    var theArgs = arguments;
    var extended = theArgs[0] || {};
    var argLen = theArgs[
      _DYN_LENGTH
      /* @min:%2elength */
    ];
    var deep = false;
    var idx = 1;
    if (argLen > 0 && isBoolean(extended)) {
      deep = extended;
      extended = theArgs[idx] || {};
      idx++;
    }
    if (!isObject2(extended)) {
      extended = {};
    }
    for (; idx < argLen; idx++) {
      var arg = theArgs[idx];
      var isArgArray = isArray(arg);
      var isArgObj = isObject2(arg);
      for (var prop in arg) {
        var propOk = isArgArray && prop in arg || isArgObj && ObjHasOwnProperty[
          _DYN_CALL
          /* @min:%2ecall */
        ](arg, prop);
        if (!propOk) {
          continue;
        }
        var newValue = arg[prop];
        var isNewArray = void 0;
        if (deep && newValue && ((isNewArray = isArray(newValue)) || isPlainObject(newValue))) {
          var clone = extended[prop];
          if (isNewArray) {
            if (!isArray(clone)) {
              clone = [];
            }
          } else if (!isPlainObject(clone)) {
            clone = {};
          }
          newValue = objExtend(deep, clone, newValue);
        }
        if (newValue !== void 0) {
          extended[prop] = newValue;
        }
      }
    }
    return extended;
  }
  var strToISOString, cStrEndsWith, cStrStartsWith, strIndexOf, strMap, strReduce, cStrTrim, strToString, str__Proto, strConstructor, _objDefineProperty, _objFreeze, _objSeal, _objKeys, StringProto, _strTrim, _strEndsWith, _strStartsWith, DateProto, _dataToISOString, _isArray, _objToString, _fnToString, _objFunctionString, rCamelCase, rNormalizeInvalid, rLeadingNumeric, _objGetPrototypeOf, isArray, _objKeysHasDontEnumBug, _objKeysDontEnums, objFreeze, objSeal;
  var init_HelperFuncs = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/HelperFuncs.js"() {
      init_applicationinsights_shims();
      init_DynamicConstants();
      init_InternalConstants();
      strToISOString = "toISOString";
      cStrEndsWith = "endsWith";
      cStrStartsWith = "startsWith";
      strIndexOf = "indexOf";
      strMap = "map";
      strReduce = "reduce";
      cStrTrim = "trim";
      strToString = "toString";
      str__Proto = "__proto__";
      strConstructor = "constructor";
      _objDefineProperty = ObjDefineProperty;
      _objFreeze = ObjClass.freeze;
      _objSeal = ObjClass.seal;
      _objKeys = ObjClass.keys;
      StringProto = String[strShimPrototype];
      _strTrim = StringProto[cStrTrim];
      _strEndsWith = StringProto[cStrEndsWith];
      _strStartsWith = StringProto[cStrStartsWith];
      DateProto = Date[strShimPrototype];
      _dataToISOString = DateProto[strToISOString];
      _isArray = Array.isArray;
      _objToString = ObjProto[strToString];
      _fnToString = ObjHasOwnProperty[strToString];
      _objFunctionString = _fnToString[
        _DYN_CALL
        /* @min:%2ecall */
      ](ObjClass);
      rCamelCase = /-([a-z])/g;
      rNormalizeInvalid = /([^\w\d_$])/g;
      rLeadingNumeric = /^(\d+[\w\d_$])/;
      _objGetPrototypeOf = Object["getPrototypeOf"];
      __name(_getObjProto, "_getObjProto");
      __name(isTypeof, "isTypeof");
      __name(isUndefined, "isUndefined");
      __name(isNullOrUndefined, "isNullOrUndefined");
      __name(isNotNullOrUndefined, "isNotNullOrUndefined");
      __name(hasOwnProperty, "hasOwnProperty");
      __name(isObject2, "isObject");
      __name(isFunction, "isFunction");
      __name(normalizeJsName, "normalizeJsName");
      __name(objForEachKey, "objForEachKey");
      __name(strEndsWith, "strEndsWith");
      __name(_strEndsWithPoly, "_strEndsWithPoly");
      __name(strStartsWith, "strStartsWith");
      __name(_strStartsWithPoly, "_strStartsWithPoly");
      __name(strContains, "strContains");
      __name(isDate, "isDate");
      isArray = _isArray || _isArrayPoly;
      __name(_isArrayPoly, "_isArrayPoly");
      __name(isError2, "isError");
      __name(isString, "isString");
      __name(isNumber, "isNumber");
      __name(isBoolean, "isBoolean");
      __name(isPlainObject, "isPlainObject");
      __name(toISOString, "toISOString");
      __name(_toISOStringPoly, "_toISOStringPoly");
      __name(arrForEach, "arrForEach");
      __name(arrIndexOf, "arrIndexOf");
      __name(arrMap, "arrMap");
      __name(arrReduce, "arrReduce");
      __name(strTrim, "strTrim");
      _objKeysHasDontEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
      _objKeysDontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      __name(objKeys, "objKeys");
      __name(objDefineAccessors, "objDefineAccessors");
      __name(_doNothing, "_doNothing");
      __name(deepFreeze, "deepFreeze");
      objFreeze = _objFreeze || _doNothing;
      objSeal = _objSeal || _doNothing;
      __name(dateNow, "dateNow");
      __name(getExceptionName, "getExceptionName");
      __name(setValue, "setValue");
      __name(getSetValue, "getSetValue");
      __name(getCfgValue, "getCfgValue");
      __name(isNotTruthy, "isNotTruthy");
      __name(isTruthy, "isTruthy");
      __name(throwError, "throwError");
      __name(_createProxyFunction, "_createProxyFunction");
      __name(proxyAssign, "proxyAssign");
      __name(proxyFunctionAs, "proxyFunctionAs");
      __name(proxyFunctions, "proxyFunctions");
      __name(optimizeObject, "optimizeObject");
      __name(objExtend, "objExtend");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EnumHelperFuncs.js
  function createEnumStyle(values) {
    var enumClass = {};
    objForEachKey(values, function(field, value) {
      enumClass[field] = value;
      enumClass[value] = field;
    });
    return deepFreeze(enumClass);
  }
  var init_EnumHelperFuncs = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EnumHelperFuncs.js"() {
      init_HelperFuncs();
      __name(createEnumStyle, "createEnumStyle");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js
  var EventsDiscardedReason;
  var init_EventsDiscardedReason = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js"() {
      init_EnumHelperFuncs();
      EventsDiscardedReason = createEnumStyle({
        /**
         * Unknown.
         */
        Unknown: 0,
        /**
         * Status set to non-retryable.
         */
        NonRetryableStatus: 1,
        /**
         * The event is invalid.
         */
        InvalidEvent: 2,
        /**
         * The size of the event is too large.
         */
        SizeLimitExceeded: 3,
        /**
         * The server is not accepting events from this instrumentation key.
         */
        KillSwitch: 4,
        /**
         * The event queue is full.
         */
        QueueFull: 5
        /* eEventsDiscardedReason.QueueFull */
      });
    }
  });

  // node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js
  function _getGlobal() {
    var result;
    if (typeof globalThis !== UNDEFINED) {
      result = globalThis;
    }
    if (!result && typeof self !== UNDEFINED) {
      result = self;
    }
    if (!result && typeof window !== UNDEFINED) {
      result = window;
    }
    if (!result && typeof global !== UNDEFINED) {
      result = global;
    }
    return result || {};
  }
  function _hasOwnProperty(obj, prop) {
    return obj && Obj[Prototype].hasOwnProperty.call(obj, prop);
  }
  function _isObjectOrArrayPrototype(target) {
    return target && (target === Obj[Prototype] || target === Array[Prototype]);
  }
  function _isObjectArrayOrFunctionPrototype(target) {
    return _isObjectOrArrayPrototype(target) || target === Function[Prototype];
  }
  function _getObjProto2(target) {
    var newProto;
    if (target) {
      if (_objGetPrototypeOf2) {
        return _objGetPrototypeOf2(target);
      }
      var curProto = target[str__Proto2] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);
      newProto = target[DynProtoBaseProto] || curProto;
      if (!_hasOwnProperty(target, DynProtoBaseProto)) {
        delete target[DynProtoCurrent];
        newProto = target[DynProtoBaseProto] = target[DynProtoCurrent] || target[DynProtoBaseProto];
        target[DynProtoCurrent] = curProto;
      }
    }
    return newProto;
  }
  function _forEachProp(target, func) {
    var props = [];
    if (_objGetOwnProps) {
      props = _objGetOwnProps(target);
    } else {
      for (var name_1 in target) {
        if (typeof name_1 === "string" && _hasOwnProperty(target, name_1)) {
          props.push(name_1);
        }
      }
    }
    if (props && props.length > 0) {
      for (var lp = 0; lp < props.length; lp++) {
        func(props[lp]);
      }
    }
  }
  function _isDynamicCandidate(target, funcName, skipOwn) {
    return funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || _hasOwnProperty(target, funcName));
  }
  function _throwTypeError(message) {
    throw new TypeError("DynamicProto: " + message);
  }
  function _getInstanceFuncs(thisTarget) {
    var instFuncs = {};
    _forEachProp(thisTarget, function(name) {
      if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {
        instFuncs[name] = thisTarget[name];
      }
    });
    return instFuncs;
  }
  function _hasVisited(values, value) {
    for (var lp = values.length - 1; lp >= 0; lp--) {
      if (values[lp] === value) {
        return true;
      }
    }
    return false;
  }
  function _getBaseFuncs(classProto, thisTarget, instFuncs, useBaseInst) {
    function _instFuncProxy(target, funcHost, funcName) {
      var theFunc = funcHost[funcName];
      if (theFunc[DynProxyTag] && useBaseInst) {
        var instFuncTable = target[DynInstFuncTable] || {};
        if (instFuncTable[DynAllowInstChkTag] !== false) {
          theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;
        }
      }
      return function() {
        return theFunc.apply(target, arguments);
      };
    }
    __name(_instFuncProxy, "_instFuncProxy");
    var baseFuncs = {};
    _forEachProp(instFuncs, function(name) {
      baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);
    });
    var baseProto = _getObjProto2(classProto);
    var visited = [];
    while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {
      _forEachProp(baseProto, function(name) {
        if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf2)) {
          baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);
        }
      });
      visited.push(baseProto);
      baseProto = _getObjProto2(baseProto);
    }
    return baseFuncs;
  }
  function _getInstFunc(target, funcName, proto, currentDynProtoProxy) {
    var instFunc = null;
    if (target && _hasOwnProperty(proto, DynClassName)) {
      var instFuncTable = target[DynInstFuncTable] || {};
      instFunc = (instFuncTable[proto[DynClassName]] || {})[funcName];
      if (!instFunc) {
        _throwTypeError("Missing [" + funcName + "] " + strFunction);
      }
      if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {
        var canAddInst = !_hasOwnProperty(target, funcName);
        var objProto = _getObjProto2(target);
        var visited = [];
        while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {
          var protoFunc = objProto[funcName];
          if (protoFunc) {
            canAddInst = protoFunc === currentDynProtoProxy;
            break;
          }
          visited.push(objProto);
          objProto = _getObjProto2(objProto);
        }
        try {
          if (canAddInst) {
            target[funcName] = instFunc;
          }
          instFunc[DynInstChkTag] = 1;
        } catch (e) {
          instFuncTable[DynAllowInstChkTag] = false;
        }
      }
    }
    return instFunc;
  }
  function _getProtoFunc(funcName, proto, currentDynProtoProxy) {
    var protoFunc = proto[funcName];
    if (protoFunc === currentDynProtoProxy) {
      protoFunc = _getObjProto2(proto)[funcName];
    }
    if (typeof protoFunc !== strFunction) {
      _throwTypeError("[" + funcName + "] is not a " + strFunction);
    }
    return protoFunc;
  }
  function _populatePrototype(proto, className, target, baseInstFuncs, setInstanceFunc) {
    function _createDynamicPrototype(proto2, funcName) {
      var dynProtoProxy = /* @__PURE__ */ __name(function() {
        var instFunc = _getInstFunc(this, funcName, proto2, dynProtoProxy) || _getProtoFunc(funcName, proto2, dynProtoProxy);
        return instFunc.apply(this, arguments);
      }, "dynProtoProxy");
      dynProtoProxy[DynProxyTag] = 1;
      return dynProtoProxy;
    }
    __name(_createDynamicPrototype, "_createDynamicPrototype");
    if (!_isObjectOrArrayPrototype(proto)) {
      var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || {};
      var instFuncs_1 = instFuncTable[className] = instFuncTable[className] || {};
      if (instFuncTable[DynAllowInstChkTag] !== false) {
        instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;
      }
      _forEachProp(target, function(name) {
        if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name]) {
          instFuncs_1[name] = target[name];
          delete target[name];
          if (!_hasOwnProperty(proto, name) || proto[name] && !proto[name][DynProxyTag]) {
            proto[name] = _createDynamicPrototype(proto, name);
          }
        }
      });
    }
  }
  function _checkPrototype(classProto, thisTarget) {
    if (_objGetPrototypeOf2) {
      var visited = [];
      var thisProto = _getObjProto2(thisTarget);
      while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {
        if (thisProto === classProto) {
          return true;
        }
        visited.push(thisProto);
        thisProto = _getObjProto2(thisProto);
      }
      return false;
    }
    return true;
  }
  function _getObjName(target, unknownValue) {
    if (_hasOwnProperty(target, Prototype)) {
      return target.name || unknownValue || UnknownValue;
    }
    return ((target || {})[Constructor] || {}).name || unknownValue || UnknownValue;
  }
  function dynamicProto(theClass, target, delegateFunc, options) {
    if (!_hasOwnProperty(theClass, Prototype)) {
      _throwTypeError("theClass is an invalid class definition.");
    }
    var classProto = theClass[Prototype];
    if (!_checkPrototype(classProto, target)) {
      _throwTypeError("[" + _getObjName(theClass) + "] not in hierarchy of [" + _getObjName(target) + "]");
    }
    var className = null;
    if (_hasOwnProperty(classProto, DynClassName)) {
      className = classProto[DynClassName];
    } else {
      className = DynClassNamePrefix + _getObjName(theClass, "_") + "$" + _gblInst.n;
      _gblInst.n++;
      classProto[DynClassName] = className;
    }
    var perfOptions = dynamicProto[DynProtoDefaultOptions];
    var useBaseInst = !!perfOptions[strUseBaseInst];
    if (useBaseInst && options && options[strUseBaseInst] !== void 0) {
      useBaseInst = !!options[strUseBaseInst];
    }
    var instFuncs = _getInstanceFuncs(target);
    var baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);
    delegateFunc(target, baseFuncs);
    var setInstanceFunc = !!_objGetPrototypeOf2 && !!perfOptions[strSetInstFuncs];
    if (setInstanceFunc && options) {
      setInstanceFunc = !!options[strSetInstFuncs];
    }
    _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);
  }
  var _a, UNDEFINED, Constructor, Prototype, strFunction, DynInstFuncTable, DynProxyTag, DynClassName, DynClassNamePrefix, DynInstChkTag, DynAllowInstChkTag, DynProtoDefaultOptions, UnknownValue, str__Proto2, DynProtoBaseProto, DynProtoGlobalSettings, DynProtoCurrent, strUseBaseInst, strSetInstFuncs, Obj, _objGetPrototypeOf2, _objGetOwnProps, _gbl, _gblInst;
  var init_dynamicproto_js = __esm({
    "node_modules/@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js"() {
      UNDEFINED = "undefined";
      Constructor = "constructor";
      Prototype = "prototype";
      strFunction = "function";
      DynInstFuncTable = "_dynInstFuncs";
      DynProxyTag = "_isDynProxy";
      DynClassName = "_dynClass";
      DynClassNamePrefix = "_dynCls$";
      DynInstChkTag = "_dynInstChk";
      DynAllowInstChkTag = DynInstChkTag;
      DynProtoDefaultOptions = "_dfOpts";
      UnknownValue = "_unknown_";
      str__Proto2 = "__proto__";
      DynProtoBaseProto = "_dyn" + str__Proto2;
      DynProtoGlobalSettings = "__dynProto$Gbl";
      DynProtoCurrent = "_dynInstProto";
      strUseBaseInst = "useBaseInst";
      strSetInstFuncs = "setInstFuncs";
      Obj = Object;
      _objGetPrototypeOf2 = Obj["getPrototypeOf"];
      _objGetOwnProps = Obj["getOwnPropertyNames"];
      __name(_getGlobal, "_getGlobal");
      _gbl = _getGlobal();
      _gblInst = _gbl[DynProtoGlobalSettings] || (_gbl[DynProtoGlobalSettings] = {
        o: (_a = {}, _a[strSetInstFuncs] = true, _a[strUseBaseInst] = true, _a),
        n: 1e3
        // Start new global index @ 1000 so we "fix" some cases when mixed with 1.1.6 or earlier
      });
      __name(_hasOwnProperty, "_hasOwnProperty");
      __name(_isObjectOrArrayPrototype, "_isObjectOrArrayPrototype");
      __name(_isObjectArrayOrFunctionPrototype, "_isObjectArrayOrFunctionPrototype");
      __name(_getObjProto2, "_getObjProto");
      __name(_forEachProp, "_forEachProp");
      __name(_isDynamicCandidate, "_isDynamicCandidate");
      __name(_throwTypeError, "_throwTypeError");
      __name(_getInstanceFuncs, "_getInstanceFuncs");
      __name(_hasVisited, "_hasVisited");
      __name(_getBaseFuncs, "_getBaseFuncs");
      __name(_getInstFunc, "_getInstFunc");
      __name(_getProtoFunc, "_getProtoFunc");
      __name(_populatePrototype, "_populatePrototype");
      __name(_checkPrototype, "_checkPrototype");
      __name(_getObjName, "_getObjName");
      __name(dynamicProto, "dynamicProto");
      dynamicProto[DynProtoDefaultOptions] = _gblInst.o;
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js
  function _hasProperty(theClass, property) {
    var supported = false;
    if (theClass) {
      try {
        supported = property in theClass;
        if (!supported) {
          var proto = theClass[strShimPrototype];
          if (proto) {
            supported = property in proto;
          }
        }
      } catch (e) {
      }
      if (!supported) {
        try {
          var tmp = new theClass();
          supported = !isUndefined(tmp[property]);
        } catch (e) {
        }
      }
    }
    return supported;
  }
  function setEnableEnvMocks(enabled2) {
    _enableMocks = enabled2;
  }
  function getGlobalInst(name) {
    var gbl = getGlobal();
    if (gbl && gbl[name]) {
      return gbl[name];
    }
    if (name === strWindow && hasWindow()) {
      return window;
    }
    return null;
  }
  function hasWindow() {
    return Boolean(typeof window === strShimObject && window);
  }
  function getWindow() {
    if (hasWindow()) {
      return window;
    }
    return getGlobalInst(strWindow);
  }
  function hasDocument() {
    return Boolean(typeof document === strShimObject && document);
  }
  function getDocument() {
    if (hasDocument()) {
      return document;
    }
    return getGlobalInst(strDocument);
  }
  function hasNavigator() {
    return Boolean(typeof navigator === strShimObject && navigator);
  }
  function getNavigator() {
    if (hasNavigator()) {
      return navigator;
    }
    return getGlobalInst(strNavigator);
  }
  function hasHistory() {
    return Boolean(typeof history === strShimObject && history);
  }
  function getHistory() {
    if (hasHistory()) {
      return history;
    }
    return getGlobalInst(strHistory);
  }
  function getLocation(checkForMock) {
    if (checkForMock && _enableMocks) {
      var mockLocation = getGlobalInst("__mockLocation");
      if (mockLocation) {
        return mockLocation;
      }
    }
    if (typeof location === strShimObject && location) {
      return location;
    }
    return getGlobalInst(strLocation);
  }
  function getConsole() {
    if (typeof console !== strShimUndefined) {
      return console;
    }
    return getGlobalInst(strConsole);
  }
  function getPerformance() {
    return getGlobalInst(strPerformance);
  }
  function hasJSON() {
    return Boolean(typeof JSON === strShimObject && JSON || getGlobalInst(strJSON) !== null);
  }
  function getJSON() {
    if (hasJSON()) {
      return JSON || getGlobalInst(strJSON);
    }
    return null;
  }
  function getCrypto() {
    return getGlobalInst(strCrypto);
  }
  function getMsCrypto() {
    return getGlobalInst(strMsCrypto);
  }
  function isReactNative() {
    var nav = getNavigator();
    if (nav && nav.product) {
      return nav.product === strReactNative;
    }
    return false;
  }
  function isIE() {
    var nav = getNavigator();
    if (nav && (nav[
      _DYN_USER_AGENT
      /* @min:%2euserAgent */
    ] !== _navUserAgentCheck || _isTrident === null)) {
      _navUserAgentCheck = nav[
        _DYN_USER_AGENT
        /* @min:%2euserAgent */
      ];
      var userAgent = (_navUserAgentCheck || STR_EMPTY)[
        _DYN_TO_LOWER_CASE
        /* @min:%2etoLowerCase */
      ]();
      _isTrident = strContains(userAgent, strMsie) || strContains(userAgent, strTrident);
    }
    return _isTrident;
  }
  function getIEVersion(userAgentStr) {
    if (userAgentStr === void 0) {
      userAgentStr = null;
    }
    if (!userAgentStr) {
      var navigator_1 = getNavigator() || {};
      userAgentStr = navigator_1 ? (navigator_1[
        _DYN_USER_AGENT
        /* @min:%2euserAgent */
      ] || STR_EMPTY)[
        _DYN_TO_LOWER_CASE
        /* @min:%2etoLowerCase */
      ]() : STR_EMPTY;
    }
    var ua2 = (userAgentStr || STR_EMPTY)[
      _DYN_TO_LOWER_CASE
      /* @min:%2etoLowerCase */
    ]();
    if (strContains(ua2, strMsie)) {
      var doc = getDocument() || {};
      return Math.max(parseInt(ua2[
        _DYN_SPLIT
        /* @min:%2esplit */
      ](strMsie)[1]), doc[strDocumentMode] || 0);
    } else if (strContains(ua2, strTrident)) {
      var tridentVer = parseInt(ua2[
        _DYN_SPLIT
        /* @min:%2esplit */
      ](strTrident)[1]);
      if (tridentVer) {
        return tridentVer + 4;
      }
    }
    return null;
  }
  function dumpObj(object) {
    var objectTypeDump = Object[strShimPrototype].toString[
      _DYN_CALL
      /* @min:%2ecall */
    ](object);
    var propertyValueDump = STR_EMPTY;
    if (objectTypeDump === "[object Error]") {
      propertyValueDump = "{ stack: '" + object.stack + "', message: '" + object.message + "', name: '" + object[
        _DYN_NAME
        /* @min:%2ename */
      ] + "'";
    } else if (hasJSON()) {
      propertyValueDump = getJSON().stringify(object);
    }
    return objectTypeDump + propertyValueDump;
  }
  function isBeaconsSupported() {
    if (_beaconsSupported === null) {
      _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);
    }
    return _beaconsSupported;
  }
  function isFetchSupported(withKeepAlive) {
    var isSupported = false;
    try {
      isSupported = !!getGlobalInst("fetch");
      var request = getGlobalInst("Request");
      if (isSupported && withKeepAlive && request) {
        isSupported = _hasProperty(request, "keepalive");
      }
    } catch (e) {
    }
    return isSupported;
  }
  function useXDomainRequest() {
    if (_useXDomainRequest === null) {
      _useXDomainRequest = typeof XDomainRequest !== strShimUndefined;
      if (_useXDomainRequest && isXhrSupported()) {
        _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst(strXMLHttpRequest), "withCredentials");
      }
    }
    return _useXDomainRequest;
  }
  function isXhrSupported() {
    var isSupported = false;
    try {
      var xmlHttpRequest = getGlobalInst(strXMLHttpRequest);
      isSupported = !!xmlHttpRequest;
    } catch (e) {
    }
    return isSupported;
  }
  function _getNamedValue(values, name) {
    if (values) {
      for (var i = 0; i < values[
        _DYN_LENGTH
        /* @min:%2elength */
      ]; i++) {
        var value = values[i];
        if (value[
          _DYN_NAME
          /* @min:%2ename */
        ]) {
          if (value[
            _DYN_NAME
            /* @min:%2ename */
          ] === name) {
            return value;
          }
        }
      }
    }
    return {};
  }
  function findMetaTag(name) {
    var doc = getDocument();
    if (doc && name) {
      return _getNamedValue(doc.querySelectorAll("meta"), name).content;
    }
    return null;
  }
  function findNamedServerTiming(name) {
    var value;
    var perf = getPerformance();
    if (perf) {
      var navPerf = perf.getEntriesByType("navigation") || [];
      value = _getNamedValue((navPerf[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 0 ? navPerf[0] : {}).serverTiming, name).description;
    }
    return value;
  }
  var strWindow, strDocument, strDocumentMode, strNavigator, strHistory, strLocation, strConsole, strPerformance, strJSON, strCrypto, strMsCrypto, strReactNative, strMsie, strTrident, strXMLHttpRequest, _isTrident, _navUserAgentCheck, _enableMocks, _useXDomainRequest, _beaconsSupported;
  var init_EnvUtils = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EnvUtils.js"() {
      "use strict";
      init_applicationinsights_shims();
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      strWindow = "window";
      strDocument = "document";
      strDocumentMode = "documentMode";
      strNavigator = "navigator";
      strHistory = "history";
      strLocation = "location";
      strConsole = "console";
      strPerformance = "performance";
      strJSON = "JSON";
      strCrypto = "crypto";
      strMsCrypto = "msCrypto";
      strReactNative = "ReactNative";
      strMsie = "msie";
      strTrident = "trident/";
      strXMLHttpRequest = "XMLHttpRequest";
      _isTrident = null;
      _navUserAgentCheck = null;
      _enableMocks = false;
      _useXDomainRequest = null;
      _beaconsSupported = null;
      __name(_hasProperty, "_hasProperty");
      __name(setEnableEnvMocks, "setEnableEnvMocks");
      __name(getGlobalInst, "getGlobalInst");
      __name(hasWindow, "hasWindow");
      __name(getWindow, "getWindow");
      __name(hasDocument, "hasDocument");
      __name(getDocument, "getDocument");
      __name(hasNavigator, "hasNavigator");
      __name(getNavigator, "getNavigator");
      __name(hasHistory, "hasHistory");
      __name(getHistory, "getHistory");
      __name(getLocation, "getLocation");
      __name(getConsole, "getConsole");
      __name(getPerformance, "getPerformance");
      __name(hasJSON, "hasJSON");
      __name(getJSON, "getJSON");
      __name(getCrypto, "getCrypto");
      __name(getMsCrypto, "getMsCrypto");
      __name(isReactNative, "isReactNative");
      __name(isIE, "isIE");
      __name(getIEVersion, "getIEVersion");
      __name(dumpObj, "dumpObj");
      __name(isBeaconsSupported, "isBeaconsSupported");
      __name(isFetchSupported, "isFetchSupported");
      __name(useXDomainRequest, "useXDomainRequest");
      __name(isXhrSupported, "isXhrSupported");
      __name(_getNamedValue, "_getNamedValue");
      __name(findMetaTag, "findMetaTag");
      __name(findNamedServerTiming, "findNamedServerTiming");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js
  function _listenerProxyFunc(name, config) {
    return function() {
      var args = arguments;
      var dbgExt = getDebugExt(config);
      if (dbgExt) {
        var listener = dbgExt.listener;
        if (listener && listener[name]) {
          listener[name][
            _DYN_APPLY
            /* @min:%2eapply */
          ](listener, args);
        }
      }
    };
  }
  function _getExtensionNamespace() {
    var target = getGlobalInst("Microsoft");
    if (target) {
      _aiNamespace = target["ApplicationInsights"];
    }
    return _aiNamespace;
  }
  function getDebugExt(config) {
    var ns2 = _aiNamespace;
    if (!ns2 && config.disableDbgExt !== true) {
      ns2 = _aiNamespace || _getExtensionNamespace();
    }
    return ns2 ? ns2["ChromeDbgExt"] : null;
  }
  function getDebugListener(config) {
    if (!_debugListener) {
      _debugListener = {};
      for (var lp = 0; lp < listenerFuncs[
        _DYN_LENGTH
        /* @min:%2elength */
      ]; lp++) {
        _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);
      }
    }
    return _debugListener;
  }
  var listenerFuncs, _aiNamespace, _debugListener;
  var init_DbgExtensionUtils = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DbgExtensionUtils.js"() {
      init_DynamicConstants();
      init_EnvUtils();
      listenerFuncs = ["eventsSent", "eventsDiscarded", "eventsSendRequest", "perfEvent"];
      _aiNamespace = null;
      __name(_listenerProxyFunc, "_listenerProxyFunc");
      __name(_getExtensionNamespace, "_getExtensionNamespace");
      __name(getDebugExt, "getDebugExt");
      __name(getDebugListener, "getDebugListener");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js
  function _sanitizeDiagnosticText(text) {
    if (text) {
      return '"' + text[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](/\"/g, STR_EMPTY) + '"';
    }
    return STR_EMPTY;
  }
  function _logToConsole(func, message) {
    var theConsole = getConsole();
    if (!!theConsole) {
      var logFunc = "log";
      if (theConsole[func]) {
        logFunc = func;
      }
      if (isFunction(theConsole[logFunc])) {
        theConsole[logFunc](message);
      }
    }
  }
  function safeGetLogger(core, config) {
    return (core || {})[
      _DYN_LOGGER
      /* @min:%2elogger */
    ] || new DiagnosticLogger(config);
  }
  function _getLogger(logger4) {
    return logger4 || new DiagnosticLogger();
  }
  function _throwInternal(logger4, severity, msgId, msg, properties6, isUserAct) {
    if (isUserAct === void 0) {
      isUserAct = false;
    }
    _getLogger(logger4).throwInternal(severity, msgId, msg, properties6, isUserAct);
  }
  function _warnToConsole(logger4, message) {
    _getLogger(logger4)[
      STR_WARN_TO_CONSOLE
      /* @min:%2ewarnToConsole */
    ](message);
  }
  function _logInternalMessage(logger4, severity, message) {
    _getLogger(logger4)[
      _DYN_LOG_INTERNAL_MESSAGE
      /* @min:%2elogInternalMessage */
    ](severity, message);
  }
  var AiNonUserActionablePrefix, AiUserActionablePrefix, AIInternalMessagePrefix, _InternalLogMessage, DiagnosticLogger;
  var init_DiagnosticLogger = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DiagnosticLogger.js"() {
      "use strict";
      init_dynamicproto_js();
      init_DynamicConstants();
      init_DbgExtensionUtils();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      AiNonUserActionablePrefix = "AI (Internal): ";
      AiUserActionablePrefix = "AI: ";
      AIInternalMessagePrefix = "AITR_";
      __name(_sanitizeDiagnosticText, "_sanitizeDiagnosticText");
      __name(_logToConsole, "_logToConsole");
      _InternalLogMessage = /** @class */
      function() {
        function _InternalLogMessage2(msgId, msg, isUserAct, properties6) {
          if (isUserAct === void 0) {
            isUserAct = false;
          }
          var _self = this;
          _self[
            _DYN_MESSAGE_ID
            /* @min:%2emessageId */
          ] = msgId;
          _self[
            _DYN_MESSAGE
            /* @min:%2emessage */
          ] = (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) + msgId;
          var strProps = STR_EMPTY;
          if (hasJSON()) {
            strProps = getJSON().stringify(properties6);
          }
          var diagnosticText = (msg ? " message:" + _sanitizeDiagnosticText(msg) : STR_EMPTY) + (properties6 ? " props:" + _sanitizeDiagnosticText(strProps) : STR_EMPTY);
          _self[
            _DYN_MESSAGE
            /* @min:%2emessage */
          ] += diagnosticText;
        }
        __name(_InternalLogMessage2, "_InternalLogMessage");
        _InternalLogMessage2.dataType = "MessageData";
        return _InternalLogMessage2;
      }();
      __name(safeGetLogger, "safeGetLogger");
      DiagnosticLogger = /** @class */
      function() {
        function DiagnosticLogger2(config) {
          this.identifier = "DiagnosticLogger";
          this.queue = [];
          var _messageCount = 0;
          var _messageLogged = {};
          var _loggingLevelConsole;
          var _loggingLevelTelemetry;
          var _maxInternalMessageLimit;
          var _enableDebugExceptions;
          dynamicProto(DiagnosticLogger2, this, function(_self) {
            _setDefaultsFromConfig(config || {});
            _self.consoleLoggingLevel = function() {
              return _loggingLevelConsole;
            };
            _self.telemetryLoggingLevel = function() {
              return _loggingLevelTelemetry;
            };
            _self.maxInternalMessageLimit = function() {
              return _maxInternalMessageLimit;
            };
            _self[
              _DYN_ENABLE_DEBUG_EXCEPTI4
              /* @min:%2eenableDebugExceptions */
            ] = function() {
              return _enableDebugExceptions;
            };
            _self.throwInternal = function(severity, msgId, msg, properties6, isUserAct) {
              if (isUserAct === void 0) {
                isUserAct = false;
              }
              var message = new _InternalLogMessage(msgId, msg, isUserAct, properties6);
              if (_enableDebugExceptions) {
                throw dumpObj(message);
              } else {
                var logFunc = severity === 1 ? STR_ERROR_TO_CONSOLE : STR_WARN_TO_CONSOLE;
                if (!isUndefined(message[
                  _DYN_MESSAGE
                  /* @min:%2emessage */
                ])) {
                  if (isUserAct) {
                    var messageKey = +message[
                      _DYN_MESSAGE_ID
                      /* @min:%2emessageId */
                    ];
                    if (!_messageLogged[messageKey] && _loggingLevelConsole >= severity) {
                      _self[logFunc](message[
                        _DYN_MESSAGE
                        /* @min:%2emessage */
                      ]);
                      _messageLogged[messageKey] = true;
                    }
                  } else {
                    if (_loggingLevelConsole >= severity) {
                      _self[logFunc](message[
                        _DYN_MESSAGE
                        /* @min:%2emessage */
                      ]);
                    }
                  }
                  _logInternalMessage2(severity, message);
                } else {
                  _debugExtMsg("throw" + (severity === 1 ? "Critical" : "Warning"), message);
                }
              }
            };
            _self[
              STR_WARN_TO_CONSOLE
              /* @min:%2ewarnToConsole */
            ] = function(message) {
              _logToConsole("warn", message);
              _debugExtMsg("warning", message);
            };
            _self[
              STR_ERROR_TO_CONSOLE
              /* @min:%2eerrorToConsole */
            ] = function(message) {
              _logToConsole("error", message);
              _debugExtMsg("error", message);
            };
            _self.resetInternalMessageCount = function() {
              _messageCount = 0;
              _messageLogged = {};
            };
            _self[
              _DYN_LOG_INTERNAL_MESSAGE
              /* @min:%2elogInternalMessage */
            ] = _logInternalMessage2;
            function _logInternalMessage2(severity, message) {
              if (_areInternalMessagesThrottled()) {
                return;
              }
              var logMessage = true;
              var messageKey = AIInternalMessagePrefix + message[
                _DYN_MESSAGE_ID
                /* @min:%2emessageId */
              ];
              if (_messageLogged[messageKey]) {
                logMessage = false;
              } else {
                _messageLogged[messageKey] = true;
              }
              if (logMessage) {
                if (severity <= _loggingLevelTelemetry) {
                  _self.queue[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](message);
                  _messageCount++;
                  _debugExtMsg(severity === 1 ? "error" : "warn", message);
                }
                if (_messageCount === _maxInternalMessageLimit) {
                  var throttleLimitMessage = "Internal events throttle limit per PageView reached for this app.";
                  var throttleMessage = new _InternalLogMessage(23, throttleLimitMessage, false);
                  _self.queue[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](throttleMessage);
                  if (severity === 1) {
                    _self[
                      STR_ERROR_TO_CONSOLE
                      /* @min:%2eerrorToConsole */
                    ](throttleLimitMessage);
                  } else {
                    _self[
                      STR_WARN_TO_CONSOLE
                      /* @min:%2ewarnToConsole */
                    ](throttleLimitMessage);
                  }
                }
              }
            }
            __name(_logInternalMessage2, "_logInternalMessage");
            function _setDefaultsFromConfig(config2) {
              _loggingLevelConsole = getCfgValue(config2.loggingLevelConsole, 0);
              _loggingLevelTelemetry = getCfgValue(config2.loggingLevelTelemetry, 1);
              _maxInternalMessageLimit = getCfgValue(config2.maxMessageLimit, 25);
              _enableDebugExceptions = getCfgValue(config2[
                _DYN_ENABLE_DEBUG_EXCEPTI4
                /* @min:%2eenableDebugExceptions */
              ], false);
            }
            __name(_setDefaultsFromConfig, "_setDefaultsFromConfig");
            function _areInternalMessagesThrottled() {
              return _messageCount >= _maxInternalMessageLimit;
            }
            __name(_areInternalMessagesThrottled, "_areInternalMessagesThrottled");
            function _debugExtMsg(name, data) {
              var dbgExt = getDebugExt(config || {});
              if (dbgExt && dbgExt[
                _DYN_DIAG_LOG
                /* @min:%2ediagLog */
              ]) {
                dbgExt[
                  _DYN_DIAG_LOG
                  /* @min:%2ediagLog */
                ](name, data);
              }
            }
            __name(_debugExtMsg, "_debugExtMsg");
          });
        }
        __name(DiagnosticLogger2, "DiagnosticLogger");
        DiagnosticLogger2.__ieDyn = 1;
        return DiagnosticLogger2;
      }();
      __name(_getLogger, "_getLogger");
      __name(_throwInternal, "_throwInternal");
      __name(_warnToConsole, "_warnToConsole");
      __name(_logInternalMessage, "_logInternalMessage");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js
  function doPerf(mgrSource, getSource, func, details, isAsync) {
    if (mgrSource) {
      var perfMgr = mgrSource;
      if (perfMgr[STR_GET_PERF_MGR]) {
        perfMgr = perfMgr[STR_GET_PERF_MGR]();
      }
      if (perfMgr) {
        var perfEvt = void 0;
        var currentActive = perfMgr[
          _DYN_GET_CTX
          /* @min:%2egetCtx */
        ](doPerfActiveKey);
        try {
          perfEvt = perfMgr.create(getSource(), details, isAsync);
          if (perfEvt) {
            if (currentActive && perfEvt[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ]) {
              perfEvt[
                _DYN_SET_CTX
                /* @min:%2esetCtx */
              ](PerfEvent[strParentContextKey], currentActive);
              if (currentActive[
                _DYN_GET_CTX
                /* @min:%2egetCtx */
              ] && currentActive[
                _DYN_SET_CTX
                /* @min:%2esetCtx */
              ]) {
                var children = currentActive[
                  _DYN_GET_CTX
                  /* @min:%2egetCtx */
                ](PerfEvent[strChildrenContextKey]);
                if (!children) {
                  children = [];
                  currentActive[
                    _DYN_SET_CTX
                    /* @min:%2esetCtx */
                  ](PerfEvent[strChildrenContextKey], children);
                }
                children[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](perfEvt);
              }
            }
            perfMgr[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ](doPerfActiveKey, perfEvt);
            return func(perfEvt);
          }
        } catch (ex) {
          if (perfEvt && perfEvt[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ]) {
            perfEvt[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ]("exception", ex);
          }
        } finally {
          if (perfEvt) {
            perfMgr.fire(perfEvt);
          }
          perfMgr[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ](doPerfActiveKey, currentActive);
        }
      }
    }
    return func();
  }
  function getGblPerfMgr() {
    return _defaultPerfManager;
  }
  var strExecutionContextKey, strParentContextKey, strChildrenContextKey, _defaultPerfManager, PerfEvent, PerfManager, doPerfActiveKey;
  var init_PerfManager = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/PerfManager.js"() {
      init_dynamicproto_js();
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      strExecutionContextKey = "ctx";
      strParentContextKey = "ParentContextKey";
      strChildrenContextKey = "ChildrenContextKey";
      _defaultPerfManager = null;
      PerfEvent = /** @class */
      function() {
        function PerfEvent2(name, payloadDetails, isAsync) {
          var _self = this;
          var accessorDefined = false;
          _self.start = dateNow();
          _self[
            _DYN_NAME
            /* @min:%2ename */
          ] = name;
          _self[
            _DYN_IS_ASYNC
            /* @min:%2eisAsync */
          ] = isAsync;
          _self[
            _DYN_IS_CHILD_EVT
            /* @min:%2eisChildEvt */
          ] = function() {
            return false;
          };
          if (isFunction(payloadDetails)) {
            var theDetails_1;
            accessorDefined = objDefineAccessors(_self, "payload", function() {
              if (!theDetails_1 && isFunction(payloadDetails)) {
                theDetails_1 = payloadDetails();
                payloadDetails = null;
              }
              return theDetails_1;
            });
          }
          _self[
            _DYN_GET_CTX
            /* @min:%2egetCtx */
          ] = function(key) {
            if (key) {
              if (key === PerfEvent2[strParentContextKey] || key === PerfEvent2[strChildrenContextKey]) {
                return _self[key];
              }
              return (_self[strExecutionContextKey] || {})[key];
            }
            return null;
          };
          _self[
            _DYN_SET_CTX
            /* @min:%2esetCtx */
          ] = function(key, value) {
            if (key) {
              if (key === PerfEvent2[strParentContextKey]) {
                if (!_self[key]) {
                  _self[
                    _DYN_IS_CHILD_EVT
                    /* @min:%2eisChildEvt */
                  ] = function() {
                    return true;
                  };
                }
                _self[key] = value;
              } else if (key === PerfEvent2[strChildrenContextKey]) {
                _self[key] = value;
              } else {
                var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                ctx[key] = value;
              }
            }
          };
          _self[
            _DYN_COMPLETE
            /* @min:%2ecomplete */
          ] = function() {
            var childTime = 0;
            var childEvts = _self[
              _DYN_GET_CTX
              /* @min:%2egetCtx */
            ](PerfEvent2[strChildrenContextKey]);
            if (isArray(childEvts)) {
              for (var lp = 0; lp < childEvts[
                _DYN_LENGTH
                /* @min:%2elength */
              ]; lp++) {
                var childEvt = childEvts[lp];
                if (childEvt) {
                  childTime += childEvt[
                    _DYN_TIME
                    /* @min:%2etime */
                  ];
                }
              }
            }
            _self[
              _DYN_TIME
              /* @min:%2etime */
            ] = dateNow() - _self.start;
            _self.exTime = _self[
              _DYN_TIME
              /* @min:%2etime */
            ] - childTime;
            _self[
              _DYN_COMPLETE
              /* @min:%2ecomplete */
            ] = function() {
            };
            if (!accessorDefined && isFunction(payloadDetails)) {
              _self.payload = payloadDetails();
            }
          };
        }
        __name(PerfEvent2, "PerfEvent");
        PerfEvent2.ParentContextKey = "parent";
        PerfEvent2.ChildrenContextKey = "childEvts";
        return PerfEvent2;
      }();
      PerfManager = /** @class */
      function() {
        function PerfManager2(manager) {
          this.ctx = {};
          dynamicProto(PerfManager2, this, function(_self) {
            _self.create = function(src, payloadDetails, isAsync) {
              return new PerfEvent(src, payloadDetails, isAsync);
            };
            _self.fire = function(perfEvent) {
              if (perfEvent) {
                perfEvent[
                  _DYN_COMPLETE
                  /* @min:%2ecomplete */
                ]();
                if (manager && isFunction(manager[
                  STR_PERF_EVENT
                  /* @min:%2eperfEvent */
                ])) {
                  manager[
                    STR_PERF_EVENT
                    /* @min:%2eperfEvent */
                  ](perfEvent);
                }
              }
            };
            _self[
              _DYN_SET_CTX
              /* @min:%2esetCtx */
            ] = function(key, value) {
              if (key) {
                var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                ctx[key] = value;
              }
            };
            _self[
              _DYN_GET_CTX
              /* @min:%2egetCtx */
            ] = function(key) {
              return (_self[strExecutionContextKey] || {})[key];
            };
          });
        }
        __name(PerfManager2, "PerfManager");
        PerfManager2.__ieDyn = 1;
        return PerfManager2;
      }();
      doPerfActiveKey = "CoreUtils.doPerf";
      __name(doPerf, "doPerf");
      __name(getGblPerfMgr, "getGblPerfMgr");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js
  function _mwcSeed(seedValue) {
    if (seedValue < 0) {
      seedValue >>>= 0;
    }
    _mwcW = 123456789 + seedValue & MaxUInt32;
    _mwcZ = 987654321 - seedValue & MaxUInt32;
    _mwcSeeded = true;
  }
  function _autoSeedMwc() {
    try {
      var now = dateNow() & 2147483647;
      _mwcSeed((Math.random() * UInt32Mask ^ now) + now);
    } catch (e) {
    }
  }
  function randomValue(maxValue) {
    if (maxValue > 0) {
      return Math.floor(random32() / MaxUInt32 * (maxValue + 1)) >>> 0;
    }
    return 0;
  }
  function random32(signed) {
    var value = 0;
    var c = getCrypto() || getMsCrypto();
    if (c && c.getRandomValues) {
      value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;
    }
    if (value === 0 && isIE()) {
      if (!_mwcSeeded) {
        _autoSeedMwc();
      }
      value = mwcRandom32() & MaxUInt32;
    }
    if (value === 0) {
      value = Math.floor(UInt32Mask * Math.random() | 0);
    }
    if (!signed) {
      value >>>= 0;
    }
    return value;
  }
  function mwcRandomSeed(value) {
    if (!value) {
      _autoSeedMwc();
    } else {
      _mwcSeed(value);
    }
  }
  function mwcRandom32(signed) {
    _mwcZ = 36969 * (_mwcZ & 65535) + (_mwcZ >> 16) & MaxUInt32;
    _mwcW = 18e3 * (_mwcW & 65535) + (_mwcW >> 16) & MaxUInt32;
    var value = (_mwcZ << 16) + (_mwcW & 65535) >>> 0 & MaxUInt32 | 0;
    if (!signed) {
      value >>>= 0;
    }
    return value;
  }
  function newId(maxLength) {
    if (maxLength === void 0) {
      maxLength = 22;
    }
    var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var number = random32() >>> 0;
    var chars = 0;
    var result = STR_EMPTY;
    while (result[
      _DYN_LENGTH
      /* @min:%2elength */
    ] < maxLength) {
      chars++;
      result += base64chars.charAt(number & 63);
      number >>>= 6;
      if (chars === 5) {
        number = (random32() << 2 & 4294967295 | number & 3) >>> 0;
        chars = 0;
      }
    }
    return result;
  }
  var UInt32Mask, MaxUInt32, _mwcSeeded, _mwcW, _mwcZ;
  var init_RandomHelper = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/RandomHelper.js"() {
      init_DynamicConstants();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      UInt32Mask = 4294967296;
      MaxUInt32 = 4294967295;
      _mwcSeeded = false;
      _mwcW = 123456789;
      _mwcZ = 987654321;
      __name(_mwcSeed, "_mwcSeed");
      __name(_autoSeedMwc, "_autoSeedMwc");
      __name(randomValue, "randomValue");
      __name(random32, "random32");
      __name(mwcRandomSeed, "mwcRandomSeed");
      __name(mwcRandom32, "mwcRandom32");
      __name(newId, "newId");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DataCacheHelper.js
  function _createAccessor(target, prop, value) {
    if (_objDefineProperty2) {
      try {
        _objDefineProperty2(target, prop, {
          value,
          enumerable: false,
          configurable: true
        });
        return true;
      } catch (e) {
      }
    }
    return false;
  }
  function _canAcceptData(target) {
    return target[
      _DYN_NODE_TYPE
      /* @min:%2enodeType */
    ] === 1 || target[
      _DYN_NODE_TYPE
      /* @min:%2enodeType */
    ] === 9 || !+target[
      _DYN_NODE_TYPE
      /* @min:%2enodeType */
    ];
  }
  function _getCache(data, target) {
    var theCache = target[data.id];
    if (!theCache) {
      theCache = {};
      try {
        if (_canAcceptData(target)) {
          if (!_createAccessor(target, data.id, theCache)) {
            target[data.id] = theCache;
          }
        }
      } catch (e) {
      }
    }
    return theCache;
  }
  function createUniqueNamespace(name, includeVersion) {
    if (includeVersion === void 0) {
      includeVersion = false;
    }
    return normalizeJsName(name + _dataUid++ + (includeVersion ? "." + version : STR_EMPTY) + instanceName);
  }
  function createElmNodeData(name) {
    var data = {
      id: createUniqueNamespace("_aiData-" + (name || STR_EMPTY) + "." + version),
      accept: function(target) {
        return _canAcceptData(target);
      },
      get: function(target, name2, defValue, addDefault) {
        var theCache = target[data.id];
        if (!theCache) {
          if (addDefault) {
            theCache = _getCache(data, target);
            theCache[normalizeJsName(name2)] = defValue;
          }
          return defValue;
        }
        return theCache[normalizeJsName(name2)];
      },
      kill: function(target, name2) {
        if (target && target[name2]) {
          try {
            delete target[name2];
          } catch (e) {
          }
        }
      }
    };
    return data;
  }
  var _objDefineProperty2, version, instanceName, _dataUid;
  var init_DataCacheHelper = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/DataCacheHelper.js"() {
      init_applicationinsights_shims();
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      init_RandomHelper();
      _objDefineProperty2 = ObjDefineProperty;
      version = "2.8.9";
      instanceName = "." + newId(6);
      _dataUid = 0;
      __name(_createAccessor, "_createAccessor");
      __name(_canAcceptData, "_canAcceptData");
      __name(_getCache, "_getCache");
      __name(createUniqueNamespace, "createUniqueNamespace");
      __name(createElmNodeData, "createElmNodeData");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js
  function _gblCookieMgr(config, logger4) {
    var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];
    if (!inst) {
      inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger4);
      _globalCookieConfig[strConfigCookieMgr] = inst;
    }
    return inst;
  }
  function _isMgrEnabled(cookieMgr) {
    if (cookieMgr) {
      return cookieMgr.isEnabled();
    }
    return true;
  }
  function _createCookieMgrConfig(rootConfig) {
    var cookieMgrCfg = rootConfig[
      _DYN_COOKIE_CFG
      /* @min:%2ecookieCfg */
    ] = rootConfig[
      _DYN_COOKIE_CFG
      /* @min:%2ecookieCfg */
    ] || {};
    setValue(cookieMgrCfg, "domain", rootConfig.cookieDomain, isNotNullOrUndefined, isNullOrUndefined);
    setValue(cookieMgrCfg, "path", rootConfig.cookiePath || "/", null, isNullOrUndefined);
    if (isNullOrUndefined(cookieMgrCfg[strEnabled])) {
      var cookieEnabled = void 0;
      if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {
        cookieEnabled = !rootConfig[strIsCookieUseDisabled];
      }
      if (!isUndefined(rootConfig[strDisableCookiesUsage])) {
        cookieEnabled = !rootConfig[strDisableCookiesUsage];
      }
      cookieMgrCfg[strEnabled] = cookieEnabled;
    }
    return cookieMgrCfg;
  }
  function _isIgnoredCookie(cookieMgrCfg, name) {
    if (name && cookieMgrCfg && isArray(cookieMgrCfg.ignoreCookies)) {
      return cookieMgrCfg.ignoreCookies[
        _DYN_INDEX_OF
        /* @min:%2eindexOf */
      ](name) !== -1;
    }
    return false;
  }
  function _isBlockedCookie(cookieMgrCfg, name) {
    if (name && cookieMgrCfg && isArray(cookieMgrCfg.blockedCookies)) {
      if (cookieMgrCfg.blockedCookies[
        _DYN_INDEX_OF
        /* @min:%2eindexOf */
      ](name) !== -1) {
        return true;
      }
    }
    return _isIgnoredCookie(cookieMgrCfg, name);
  }
  function safeGetCookieMgr(core, config) {
    var cookieMgr;
    if (core) {
      cookieMgr = core.getCookieMgr();
    } else if (config) {
      var cookieCfg = config[
        _DYN_COOKIE_CFG
        /* @min:%2ecookieCfg */
      ];
      if (cookieCfg[strConfigCookieMgr]) {
        cookieMgr = cookieCfg[strConfigCookieMgr];
      } else {
        cookieMgr = createCookieMgr(config);
      }
    }
    if (!cookieMgr) {
      cookieMgr = _gblCookieMgr(config, (core || {})[
        _DYN_LOGGER
        /* @min:%2elogger */
      ]);
    }
    return cookieMgr;
  }
  function createCookieMgr(rootConfig, logger4) {
    var _a7;
    var cookieMgrConfig = _createCookieMgrConfig(rootConfig || _globalCookieConfig);
    var _path = cookieMgrConfig.path || "/";
    var _domain = cookieMgrConfig.domain;
    var _enabled = cookieMgrConfig[strEnabled] !== false;
    var cookieMgr = (_a7 = {
      isEnabled: function() {
        var enabled2 = _enabled && areCookiesSupported(logger4);
        var gblManager = _globalCookieConfig[strConfigCookieMgr];
        if (enabled2 && gblManager && cookieMgr !== gblManager) {
          enabled2 = _isMgrEnabled(gblManager);
        }
        return enabled2;
      }
    }, _a7[
      _DYN_SET_ENABLED
      /* @min:setEnabled */
    ] = function(value) {
      _enabled = value !== false;
    }, _a7.set = function(name, value, maxAgeSec, domain, path) {
      var result = false;
      if (_isMgrEnabled(cookieMgr) && !_isBlockedCookie(cookieMgrConfig, name)) {
        var values = {};
        var theValue = strTrim(value || STR_EMPTY);
        var idx = theValue[
          _DYN_INDEX_OF
          /* @min:%2eindexOf */
        ](";");
        if (idx !== -1) {
          theValue = strTrim(value[
            _DYN_SUBSTRING
            /* @min:%2esubstring */
          ](0, idx));
          values = _extractParts(value[
            _DYN_SUBSTRING
            /* @min:%2esubstring */
          ](idx + 1));
        }
        setValue(values, "domain", domain || _domain, isTruthy, isUndefined);
        if (!isNullOrUndefined(maxAgeSec)) {
          var _isIE = isIE();
          if (isUndefined(values[strExpires])) {
            var nowMs = dateNow();
            var expireMs = nowMs + maxAgeSec * 1e3;
            if (expireMs > 0) {
              var expiry = /* @__PURE__ */ new Date();
              expiry.setTime(expireMs);
              setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || STR_EMPTY, isTruthy);
            }
          }
          if (!_isIE) {
            setValue(values, "max-age", STR_EMPTY + maxAgeSec, null, isUndefined);
          }
        }
        var location_1 = getLocation();
        if (location_1 && location_1.protocol === "https:") {
          setValue(values, "secure", null, null, isUndefined);
          if (_allowUaSameSite === null) {
            _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {})[
              _DYN_USER_AGENT
              /* @min:%2euserAgent */
            ]);
          }
          if (_allowUaSameSite) {
            setValue(values, "SameSite", "None", null, isUndefined);
          }
        }
        setValue(values, "path", path || _path, null, isUndefined);
        var setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;
        setCookieFn(name, _formatCookieValue(theValue, values));
        result = true;
      }
      return result;
    }, _a7.get = function(name) {
      var value = STR_EMPTY;
      if (_isMgrEnabled(cookieMgr) && !_isIgnoredCookie(cookieMgrConfig, name)) {
        value = (cookieMgrConfig.getCookie || _getCookieValue)(name);
      }
      return value;
    }, _a7.del = function(name, path) {
      var result = false;
      if (_isMgrEnabled(cookieMgr)) {
        result = cookieMgr.purge(name, path);
      }
      return result;
    }, _a7.purge = function(name, path) {
      var _a8;
      var result = false;
      if (areCookiesSupported(logger4)) {
        var values = (_a8 = {}, _a8["path"] = path ? path : "/", _a8[strExpires] = "Thu, 01 Jan 1970 00:00:01 GMT", _a8);
        if (!isIE()) {
          values["max-age"] = "0";
        }
        var delCookie = cookieMgrConfig.delCookie || _setCookieValue;
        delCookie(name, _formatCookieValue(STR_EMPTY, values));
        result = true;
      }
      return result;
    }, _a7);
    cookieMgr[strConfigCookieMgr] = cookieMgr;
    return cookieMgr;
  }
  function areCookiesSupported(logger4) {
    if (_supportsCookies === null) {
      _supportsCookies = false;
      try {
        var doc = _doc || {};
        _supportsCookies = doc[strCookie] !== void 0;
      } catch (e) {
        _throwInternal(logger4, 2, 68, "Cannot access document.cookie - " + getExceptionName(e), { exception: dumpObj(e) });
      }
    }
    return _supportsCookies;
  }
  function _extractParts(theValue) {
    var values = {};
    if (theValue && theValue[
      _DYN_LENGTH
      /* @min:%2elength */
    ]) {
      var parts = strTrim(theValue)[
        _DYN_SPLIT
        /* @min:%2esplit */
      ](";");
      arrForEach(parts, function(thePart) {
        thePart = strTrim(thePart || STR_EMPTY);
        if (thePart) {
          var idx = thePart[
            _DYN_INDEX_OF
            /* @min:%2eindexOf */
          ]("=");
          if (idx === -1) {
            values[thePart] = null;
          } else {
            values[strTrim(thePart[
              _DYN_SUBSTRING
              /* @min:%2esubstring */
            ](0, idx))] = strTrim(thePart[
              _DYN_SUBSTRING
              /* @min:%2esubstring */
            ](idx + 1));
          }
        }
      });
    }
    return values;
  }
  function _formatDate(theDate, func) {
    if (isFunction(theDate[func])) {
      return theDate[func]();
    }
    return null;
  }
  function _formatCookieValue(value, values) {
    var cookieValue = value || STR_EMPTY;
    objForEachKey(values, function(name, theValue) {
      cookieValue += "; " + name + (!isNullOrUndefined(theValue) ? "=" + theValue : STR_EMPTY);
    });
    return cookieValue;
  }
  function _getCookieValue(name) {
    var cookieValue = STR_EMPTY;
    if (_doc) {
      var theCookie = _doc[strCookie] || STR_EMPTY;
      if (_parsedCookieValue !== theCookie) {
        _cookieCache = _extractParts(theCookie);
        _parsedCookieValue = theCookie;
      }
      cookieValue = strTrim(_cookieCache[name] || STR_EMPTY);
    }
    return cookieValue;
  }
  function _setCookieValue(name, cookieValue) {
    if (_doc) {
      _doc[strCookie] = name + "=" + cookieValue;
    }
  }
  function uaDisallowsSameSiteNone(userAgent) {
    if (!isString(userAgent)) {
      return false;
    }
    if (strContains(userAgent, "CPU iPhone OS 12") || strContains(userAgent, "iPad; CPU OS 12")) {
      return true;
    }
    if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strContains(userAgent, "Version/") && strContains(userAgent, "Safari")) {
      return true;
    }
    if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strEndsWith(userAgent, "AppleWebKit/605.1.15 (KHTML, like Gecko)")) {
      return true;
    }
    if (strContains(userAgent, "Chrome/5") || strContains(userAgent, "Chrome/6")) {
      return true;
    }
    if (strContains(userAgent, "UnrealEngine") && !strContains(userAgent, "Chrome")) {
      return true;
    }
    if (strContains(userAgent, "UCBrowser/12") || strContains(userAgent, "UCBrowser/11")) {
      return true;
    }
    return false;
  }
  var strToGMTString, strToUTCString, strCookie, strExpires, strEnabled, strIsCookieUseDisabled, strDisableCookiesUsage, strConfigCookieMgr, _supportsCookies, _allowUaSameSite, _parsedCookieValue, _doc, _cookieCache, _globalCookieConfig;
  var init_CookieMgr = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CookieMgr.js"() {
      init_DynamicConstants();
      init_DiagnosticLogger();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      strToGMTString = "toGMTString";
      strToUTCString = "toUTCString";
      strCookie = "cookie";
      strExpires = "expires";
      strEnabled = "enabled";
      strIsCookieUseDisabled = "isCookieUseDisabled";
      strDisableCookiesUsage = "disableCookiesUsage";
      strConfigCookieMgr = "_ckMgr";
      _supportsCookies = null;
      _allowUaSameSite = null;
      _parsedCookieValue = null;
      _doc = getDocument();
      _cookieCache = {};
      _globalCookieConfig = {};
      __name(_gblCookieMgr, "_gblCookieMgr");
      __name(_isMgrEnabled, "_isMgrEnabled");
      __name(_createCookieMgrConfig, "_createCookieMgrConfig");
      __name(_isIgnoredCookie, "_isIgnoredCookie");
      __name(_isBlockedCookie, "_isBlockedCookie");
      __name(safeGetCookieMgr, "safeGetCookieMgr");
      __name(createCookieMgr, "createCookieMgr");
      __name(areCookiesSupported, "areCookiesSupported");
      __name(_extractParts, "_extractParts");
      __name(_formatDate, "_formatDate");
      __name(_formatCookieValue, "_formatCookieValue");
      __name(_getCookieValue, "_getCookieValue");
      __name(_setCookieValue, "_setCookieValue");
      __name(uaDisallowsSameSiteNone, "uaDisallowsSameSiteNone");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EventHelpers.js
  function _normalizeNamespace(name) {
    if (name && name[
      _DYN_REPLACE
      /* @min:%2ereplace */
    ]) {
      return name[
        _DYN_REPLACE
        /* @min:%2ereplace */
      ](/^[\s\.]+|(?=[\s\.])[\.\s]+$/g, STR_EMPTY);
    }
    return name;
  }
  function _getEvtNamespace(eventName, evtNamespace) {
    var _a7;
    if (evtNamespace) {
      var theNamespace_1 = STR_EMPTY;
      if (isArray(evtNamespace)) {
        theNamespace_1 = STR_EMPTY;
        arrForEach(evtNamespace, function(name) {
          name = _normalizeNamespace(name);
          if (name) {
            if (name[0] !== ".") {
              name = "." + name;
            }
            theNamespace_1 += name;
          }
        });
      } else {
        theNamespace_1 = _normalizeNamespace(evtNamespace);
      }
      if (theNamespace_1) {
        if (theNamespace_1[0] !== ".") {
          theNamespace_1 = "." + theNamespace_1;
        }
        eventName = (eventName || STR_EMPTY) + theNamespace_1;
      }
    }
    var parsedEvent = eventNamespace.exec(eventName || STR_EMPTY) || [];
    return _a7 = {}, _a7[
      _DYN_TYPE
      /* @min:type */
    ] = parsedEvent[1], _a7.ns = (parsedEvent[2] || STR_EMPTY).replace(rRemoveEmptyNs, ".").replace(rRemoveTrailingEmptyNs, STR_EMPTY)[
      _DYN_SPLIT
      /* @min:%2esplit */
    ](".").sort().join("."), _a7;
  }
  function __getRegisteredEvents(target, eventName, evtNamespace) {
    var theEvents = [];
    var eventCache = elmNodeData.get(target, strEvents, {}, false);
    var evtName = _getEvtNamespace(eventName, evtNamespace);
    objForEachKey(eventCache, function(evtType, registeredEvents) {
      arrForEach(registeredEvents, function(value) {
        var _a7;
        if (!evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ] || evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ] === value.evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ]) {
          if (!evtName.ns || evtName.ns === evtName.ns) {
            theEvents[
              _DYN_PUSH
              /* @min:%2epush */
            ]((_a7 = {}, _a7[
              _DYN_NAME
              /* @min:name */
            ] = value.evtName[
              _DYN_TYPE
              /* @min:%2etype */
            ] + (value.evtName.ns ? "." + value.evtName.ns : STR_EMPTY), _a7.handler = value[
              _DYN_HANDLER
              /* @min:%2ehandler */
            ], _a7));
          }
        }
      });
    });
    return theEvents;
  }
  function _getRegisteredEvents(target, evtName, addDefault) {
    if (addDefault === void 0) {
      addDefault = true;
    }
    var aiEvts = elmNodeData.get(target, strEvents, {}, addDefault);
    var registeredEvents = aiEvts[evtName];
    if (!registeredEvents) {
      registeredEvents = aiEvts[evtName] = [];
    }
    return registeredEvents;
  }
  function _doDetach(obj, evtName, handlerRef, useCapture) {
    if (obj && evtName && evtName[
      _DYN_TYPE
      /* @min:%2etype */
    ]) {
      if (obj[strRemoveEventListener]) {
        obj[strRemoveEventListener](evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ], handlerRef, useCapture);
      } else if (obj[strDetachEvent]) {
        obj[strDetachEvent](strOnPrefix + evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ], handlerRef);
      }
    }
  }
  function _doAttach(obj, evtName, handlerRef, useCapture) {
    var result = false;
    if (obj && evtName && evtName[
      _DYN_TYPE
      /* @min:%2etype */
    ] && handlerRef) {
      if (obj[strAddEventHelper]) {
        obj[strAddEventHelper](evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ], handlerRef, useCapture);
        result = true;
      } else if (obj[strAttachEvent]) {
        obj[strAttachEvent](strOnPrefix + evtName[
          _DYN_TYPE
          /* @min:%2etype */
        ], handlerRef);
        result = true;
      }
    }
    return result;
  }
  function _doUnregister(target, events, evtName, unRegFn) {
    var idx = events[
      _DYN_LENGTH
      /* @min:%2elength */
    ];
    while (idx--) {
      var theEvent = events[idx];
      if (theEvent) {
        if (!evtName.ns || evtName.ns === theEvent.evtName.ns) {
          if (!unRegFn || unRegFn(theEvent)) {
            _doDetach(target, theEvent.evtName, theEvent[
              _DYN_HANDLER
              /* @min:%2ehandler */
            ], theEvent.capture);
            events[
              _DYN_SPLICE
              /* @min:%2esplice */
            ](idx, 1);
          }
        }
      }
    }
  }
  function _unregisterEvents(target, evtName, unRegFn) {
    if (evtName[
      _DYN_TYPE
      /* @min:%2etype */
    ]) {
      _doUnregister(target, _getRegisteredEvents(target, evtName[
        _DYN_TYPE
        /* @min:%2etype */
      ]), evtName, unRegFn);
    } else {
      var eventCache = elmNodeData.get(target, strEvents, {});
      objForEachKey(eventCache, function(evtType, events) {
        _doUnregister(target, events, evtName, unRegFn);
      });
      if (objKeys(eventCache)[
        _DYN_LENGTH
        /* @min:%2elength */
      ] === 0) {
        elmNodeData.kill(target, strEvents);
      }
    }
  }
  function mergeEvtNamespace(theNamespace, namespaces) {
    var newNamespaces;
    if (namespaces) {
      if (isArray(namespaces)) {
        newNamespaces = [theNamespace].concat(namespaces);
      } else {
        newNamespaces = [theNamespace, namespaces];
      }
      newNamespaces = _getEvtNamespace("xx", newNamespaces).ns[
        _DYN_SPLIT
        /* @min:%2esplit */
      ](".");
    } else {
      newNamespaces = theNamespace;
    }
    return newNamespaces;
  }
  function eventOn(target, eventName, handlerRef, evtNamespace, useCapture) {
    var _a7;
    if (useCapture === void 0) {
      useCapture = false;
    }
    var result = false;
    if (target) {
      try {
        var evtName = _getEvtNamespace(eventName, evtNamespace);
        result = _doAttach(target, evtName, handlerRef, useCapture);
        if (result && elmNodeData.accept(target)) {
          var registeredEvent = (_a7 = {
            guid: _guid++,
            evtName
          }, _a7[
            _DYN_HANDLER
            /* @min:handler */
          ] = handlerRef, _a7.capture = useCapture, _a7);
          _getRegisteredEvents(target, evtName.type)[
            _DYN_PUSH
            /* @min:%2epush */
          ](registeredEvent);
        }
      } catch (e) {
      }
    }
    return result;
  }
  function eventOff(target, eventName, handlerRef, evtNamespace, useCapture) {
    if (useCapture === void 0) {
      useCapture = false;
    }
    if (target) {
      try {
        var evtName_1 = _getEvtNamespace(eventName, evtNamespace);
        var found_1 = false;
        _unregisterEvents(target, evtName_1, function(regEvent) {
          if (evtName_1.ns && !handlerRef || regEvent[
            _DYN_HANDLER
            /* @min:%2ehandler */
          ] === handlerRef) {
            found_1 = true;
            return true;
          }
          return false;
        });
        if (!found_1) {
          _doDetach(target, evtName_1, handlerRef, useCapture);
        }
      } catch (e) {
      }
    }
  }
  function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
    if (useCapture === void 0) {
      useCapture = false;
    }
    return eventOn(obj, eventNameWithoutOn, handlerRef, null, useCapture);
  }
  function detachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
    if (useCapture === void 0) {
      useCapture = false;
    }
    eventOff(obj, eventNameWithoutOn, handlerRef, null, useCapture);
  }
  function addEventHandler(eventName, callback, evtNamespace) {
    var result = false;
    var w = getWindow();
    if (w) {
      result = eventOn(w, eventName, callback, evtNamespace);
      result = eventOn(w["body"], eventName, callback, evtNamespace) || result;
    }
    var doc = getDocument();
    if (doc) {
      result = eventOn(doc, eventName, callback, evtNamespace) || result;
    }
    return result;
  }
  function removeEventHandler(eventName, callback, evtNamespace) {
    var w = getWindow();
    if (w) {
      eventOff(w, eventName, callback, evtNamespace);
      eventOff(w["body"], eventName, callback, evtNamespace);
    }
    var doc = getDocument();
    if (doc) {
      eventOff(doc, eventName, callback, evtNamespace);
    }
  }
  function _addEventListeners(events, listener, excludeEvents, evtNamespace) {
    var added = false;
    if (listener && events && events[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 0) {
      arrForEach(events, function(name) {
        if (name) {
          if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {
            added = addEventHandler(name, listener, evtNamespace) || added;
          }
        }
      });
    }
    return added;
  }
  function addEventListeners(events, listener, excludeEvents, evtNamespace) {
    var added = false;
    if (listener && events && isArray(events)) {
      added = _addEventListeners(events, listener, excludeEvents, evtNamespace);
      if (!added && excludeEvents && excludeEvents[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 0) {
        added = _addEventListeners(events, listener, null, evtNamespace);
      }
    }
    return added;
  }
  function removeEventListeners(events, listener, evtNamespace) {
    if (events && isArray(events)) {
      arrForEach(events, function(name) {
        if (name) {
          removeEventHandler(name, listener, evtNamespace);
        }
      });
    }
  }
  function addPageUnloadEventListener(listener, excludeEvents, evtNamespace) {
    return addEventListeners([strBeforeUnload, strUnload, strPageHide], listener, excludeEvents, evtNamespace);
  }
  function removePageUnloadEventListener(listener, evtNamespace) {
    removeEventListeners([strBeforeUnload, strUnload, strPageHide], listener, evtNamespace);
  }
  function addPageHideEventListener(listener, excludeEvents, evtNamespace) {
    function _handlePageVisibility(evt) {
      var doc = getDocument();
      if (listener && doc && doc.visibilityState === "hidden") {
        listener(evt);
      }
    }
    __name(_handlePageVisibility, "_handlePageVisibility");
    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);
    var pageUnloadAdded = _addEventListeners([strPageHide], listener, excludeEvents, newNamespaces);
    if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {
      pageUnloadAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageUnloadAdded;
    }
    if (!pageUnloadAdded && excludeEvents) {
      pageUnloadAdded = addPageHideEventListener(listener, null, evtNamespace);
    }
    return pageUnloadAdded;
  }
  function removePageHideEventListener(listener, evtNamespace) {
    var newNamespaces = mergeEvtNamespace(strPageHideNamespace, evtNamespace);
    removeEventListeners([strPageHide], listener, newNamespaces);
    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);
  }
  function addPageShowEventListener(listener, excludeEvents, evtNamespace) {
    function _handlePageVisibility(evt) {
      var doc = getDocument();
      if (listener && doc && doc.visibilityState === "visible") {
        listener(evt);
      }
    }
    __name(_handlePageVisibility, "_handlePageVisibility");
    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);
    var pageShowAdded = _addEventListeners([strPageShow], listener, excludeEvents, newNamespaces);
    pageShowAdded = _addEventListeners([strVisibilityChangeEvt], _handlePageVisibility, excludeEvents, newNamespaces) || pageShowAdded;
    if (!pageShowAdded && excludeEvents) {
      pageShowAdded = addPageShowEventListener(listener, null, evtNamespace);
    }
    return pageShowAdded;
  }
  function removePageShowEventListener(listener, evtNamespace) {
    var newNamespaces = mergeEvtNamespace(strPageShowNamespace, evtNamespace);
    removeEventListeners([strPageShow], listener, newNamespaces);
    removeEventListeners([strVisibilityChangeEvt], null, newNamespaces);
  }
  var strOnPrefix, strAttachEvent, strAddEventHelper, strDetachEvent, strRemoveEventListener, strEvents, strVisibilityChangeEvt, strPageHide, strPageShow, strUnload, strBeforeUnload, strPageHideNamespace, strPageShowNamespace, rRemoveEmptyNs, rRemoveTrailingEmptyNs, _guid, elmNodeData, eventNamespace;
  var init_EventHelpers = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/EventHelpers.js"() {
      init_DynamicConstants();
      init_DataCacheHelper();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      strOnPrefix = "on";
      strAttachEvent = "attachEvent";
      strAddEventHelper = "addEventListener";
      strDetachEvent = "detachEvent";
      strRemoveEventListener = "removeEventListener";
      strEvents = "events";
      strVisibilityChangeEvt = "visibilitychange";
      strPageHide = "pagehide";
      strPageShow = "pageshow";
      strUnload = "unload";
      strBeforeUnload = "beforeunload";
      strPageHideNamespace = createUniqueNamespace("aiEvtPageHide");
      strPageShowNamespace = createUniqueNamespace("aiEvtPageShow");
      rRemoveEmptyNs = /\.[\.]+/g;
      rRemoveTrailingEmptyNs = /[\.]+$/;
      _guid = 1;
      elmNodeData = createElmNodeData("events");
      eventNamespace = /^([^.]*)(?:\.(.+)|)/;
      __name(_normalizeNamespace, "_normalizeNamespace");
      __name(_getEvtNamespace, "_getEvtNamespace");
      __name(__getRegisteredEvents, "__getRegisteredEvents");
      __name(_getRegisteredEvents, "_getRegisteredEvents");
      __name(_doDetach, "_doDetach");
      __name(_doAttach, "_doAttach");
      __name(_doUnregister, "_doUnregister");
      __name(_unregisterEvents, "_unregisterEvents");
      __name(mergeEvtNamespace, "mergeEvtNamespace");
      __name(eventOn, "eventOn");
      __name(eventOff, "eventOff");
      __name(attachEvent, "attachEvent");
      __name(detachEvent, "detachEvent");
      __name(addEventHandler, "addEventHandler");
      __name(removeEventHandler, "removeEventHandler");
      __name(_addEventListeners, "_addEventListeners");
      __name(addEventListeners, "addEventListeners");
      __name(removeEventListeners, "removeEventListeners");
      __name(addPageUnloadEventListener, "addPageUnloadEventListener");
      __name(removePageUnloadEventListener, "removePageUnloadEventListener");
      __name(addPageHideEventListener, "addPageHideEventListener");
      __name(removePageHideEventListener, "removePageHideEventListener");
      __name(addPageShowEventListener, "addPageShowEventListener");
      __name(removePageShowEventListener, "removePageShowEventListener");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js
  function newGuid() {
    var uuid = generateW3CId();
    return uuid[
      _DYN_SUBSTRING
      /* @min:%2esubstring */
    ](0, 8) + "-" + uuid[
      _DYN_SUBSTRING
      /* @min:%2esubstring */
    ](8, 12) + "-" + uuid[
      _DYN_SUBSTRING
      /* @min:%2esubstring */
    ](12, 16) + "-" + uuid[
      _DYN_SUBSTRING
      /* @min:%2esubstring */
    ](16, 20) + "-" + uuid[
      _DYN_SUBSTRING
      /* @min:%2esubstring */
    ](20);
  }
  function perfNow() {
    var perf = getPerformance();
    if (perf && perf.now) {
      return perf.now();
    }
    return dateNow();
  }
  function generateW3CId() {
    var hexValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    var oct = STR_EMPTY, tmp;
    for (var a = 0; a < 4; a++) {
      tmp = random32();
      oct += hexValues[tmp & 15] + hexValues[tmp >> 4 & 15] + hexValues[tmp >> 8 & 15] + hexValues[tmp >> 12 & 15] + hexValues[tmp >> 16 & 15] + hexValues[tmp >> 20 & 15] + hexValues[tmp >> 24 & 15] + hexValues[tmp >> 28 & 15];
    }
    var clockSequenceHi = hexValues[8 + (random32() & 3) | 0];
    return oct[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](0, 8) + oct[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](9, 4) + "4" + oct[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](13, 3) + clockSequenceHi + oct[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](16, 3) + oct[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](19, 12);
  }
  var EventHelper;
  var init_CoreUtils = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/CoreUtils.js"() {
      "use strict";
      init_DynamicConstants();
      init_EnvUtils();
      init_EventHelpers();
      init_HelperFuncs();
      init_InternalConstants();
      init_RandomHelper();
      __name(newGuid, "newGuid");
      __name(perfNow, "perfNow");
      __name(generateW3CId, "generateW3CId");
      EventHelper = {
        Attach: attachEvent,
        AttachEvent: attachEvent,
        Detach: detachEvent,
        DetachEvent: detachEvent
      };
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/W3cTraceParent.js
  function _isValid(value, len, invalidValue) {
    if (value && value[
      _DYN_LENGTH
      /* @min:%2elength */
    ] === len && value !== invalidValue) {
      return !!value.match(/^[\da-f]*$/);
    }
    return false;
  }
  function _formatValue(value, len, defValue) {
    if (_isValid(value, len)) {
      return value;
    }
    return defValue;
  }
  function _formatFlags(value) {
    if (isNaN(value) || value < 0 || value > 255) {
      value = 1;
    }
    var result = value.toString(16);
    while (result[
      _DYN_LENGTH
      /* @min:%2elength */
    ] < 2) {
      result = "0" + result;
    }
    return result;
  }
  function createTraceParent(traceId, spanId, flags, version2) {
    var _a7;
    return _a7 = {}, _a7[
      _DYN_VERSION
      /* @min:version */
    ] = _isValid(version2, 2, INVALID_VERSION) ? version2 : DEFAULT_VERSION, _a7[
      _DYN_TRACE_ID
      /* @min:traceId */
    ] = isValidTraceId(traceId) ? traceId : generateW3CId(), _a7.spanId = isValidSpanId(spanId) ? spanId : generateW3CId()[
      _DYN_SUBSTR
      /* @min:%2esubstr */
    ](0, 16), _a7.traceFlags = flags >= 0 && flags <= 255 ? flags : 1, _a7;
  }
  function parseTraceParent(value) {
    var _a7;
    if (!value) {
      return null;
    }
    if (isArray(value)) {
      value = value[0] || "";
    }
    if (!value || !isString(value) || value[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 8192) {
      return null;
    }
    var match = TRACE_PARENT_REGEX.exec(strTrim(value));
    if (!match || // No match
    match[1] === INVALID_VERSION || // version ff is forbidden
    match[2] === INVALID_TRACE_ID || // All zeros is considered to be invalid
    match[3] === INVALID_SPAN_ID) {
      return null;
    }
    return _a7 = {}, _a7[
      _DYN_VERSION
      /* @min:version */
    ] = match[1], _a7[
      _DYN_TRACE_ID
      /* @min:traceId */
    ] = match[2], _a7[
      _DYN_SPAN_ID
      /* @min:spanId */
    ] = match[3], _a7[
      _DYN_TRACE_FLAGS
      /* @min:traceFlags */
    ] = parseInt(match[4], 16), _a7;
  }
  function isValidTraceId(value) {
    return _isValid(value, 32, INVALID_TRACE_ID);
  }
  function isValidSpanId(value) {
    return _isValid(value, 16, INVALID_SPAN_ID);
  }
  function isValidTraceParent(value) {
    if (!value || !_isValid(value[
      _DYN_VERSION
      /* @min:%2eversion */
    ], 2, INVALID_VERSION) || !_isValid(value[
      _DYN_TRACE_ID
      /* @min:%2etraceId */
    ], 32, INVALID_TRACE_ID) || !_isValid(value[
      _DYN_SPAN_ID
      /* @min:%2espanId */
    ], 16, INVALID_SPAN_ID) || !_isValid(_formatFlags(value[
      _DYN_TRACE_FLAGS
      /* @min:%2etraceFlags */
    ]), 2)) {
      return false;
    }
    return true;
  }
  function isSampledFlag(value) {
    if (isValidTraceParent(value)) {
      return (value[
        _DYN_TRACE_FLAGS
        /* @min:%2etraceFlags */
      ] & SAMPLED_FLAG) === SAMPLED_FLAG;
    }
    return false;
  }
  function formatTraceParent(value) {
    if (value) {
      var flags = _formatFlags(value[
        _DYN_TRACE_FLAGS
        /* @min:%2etraceFlags */
      ]);
      if (!_isValid(flags, 2)) {
        flags = "01";
      }
      var version2 = value[
        _DYN_VERSION
        /* @min:%2eversion */
      ] || DEFAULT_VERSION;
      if (version2 !== "00" && version2 !== "ff") {
        version2 = DEFAULT_VERSION;
      }
      return "".concat(version2, "-").concat(_formatValue(value.traceId, 32, INVALID_TRACE_ID), "-").concat(_formatValue(value.spanId, 16, INVALID_SPAN_ID), "-").concat(flags);
    }
    return "";
  }
  function findW3cTraceParent() {
    var name = "traceparent";
    var traceParent = parseTraceParent(findMetaTag(name));
    if (!traceParent) {
      traceParent = parseTraceParent(findNamedServerTiming(name));
    }
    return traceParent;
  }
  var TRACE_PARENT_REGEX, DEFAULT_VERSION, INVALID_VERSION, INVALID_TRACE_ID, INVALID_SPAN_ID, SAMPLED_FLAG;
  var init_W3cTraceParent = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/W3cTraceParent.js"() {
      init_DynamicConstants();
      init_CoreUtils();
      init_EnvUtils();
      init_HelperFuncs();
      TRACE_PARENT_REGEX = /^([\da-f]{2})-([\da-f]{32})-([\da-f]{16})-([\da-f]{2})(-[^\s]*)?$/;
      DEFAULT_VERSION = "00";
      INVALID_VERSION = "ff";
      INVALID_TRACE_ID = "00000000000000000000000000000000";
      INVALID_SPAN_ID = "0000000000000000";
      SAMPLED_FLAG = 1;
      __name(_isValid, "_isValid");
      __name(_formatValue, "_formatValue");
      __name(_formatFlags, "_formatFlags");
      __name(createTraceParent, "createTraceParent");
      __name(parseTraceParent, "parseTraceParent");
      __name(isValidTraceId, "isValidTraceId");
      __name(isValidSpanId, "isValidSpanId");
      __name(isValidTraceParent, "isValidTraceParent");
      __name(isSampledFlag, "isSampledFlag");
      __name(formatTraceParent, "formatTraceParent");
      __name(findW3cTraceParent, "findW3cTraceParent");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js
  function _getPluginState(plugin) {
    return pluginStateData.get(plugin, "state", {}, true);
  }
  function initializePlugins(processContext, extensions7) {
    var initPlugins = [];
    var lastPlugin = null;
    var proxy = processContext[
      _DYN_GET_NEXT
      /* @min:%2egetNext */
    ]();
    var pluginState;
    while (proxy) {
      var thePlugin = proxy[
        _DYN_GET_PLUGIN
        /* @min:%2egetPlugin */
      ]();
      if (thePlugin) {
        if (lastPlugin && isFunction(lastPlugin[
          _DYN_SET_NEXT_PLUGIN
          /* @min:%2esetNextPlugin */
        ]) && isFunction(thePlugin[
          STR_PROCESS_TELEMETRY
          /* @min:%2eprocessTelemetry */
        ])) {
          lastPlugin[
            _DYN_SET_NEXT_PLUGIN
            /* @min:%2esetNextPlugin */
          ](thePlugin);
        }
        var isInitialized = false;
        if (isFunction(thePlugin[
          _DYN_IS_INITIALIZED
          /* @min:%2eisInitialized */
        ])) {
          isInitialized = thePlugin[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ]();
        } else {
          pluginState = _getPluginState(thePlugin);
          isInitialized = pluginState[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ];
        }
        if (!isInitialized) {
          initPlugins[
            _DYN_PUSH
            /* @min:%2epush */
          ](thePlugin);
        }
        lastPlugin = thePlugin;
        proxy = proxy[
          _DYN_GET_NEXT
          /* @min:%2egetNext */
        ]();
      }
    }
    arrForEach(initPlugins, function(thePlugin2) {
      var core = processContext[STR_CORE]();
      thePlugin2[
        _DYN_INITIALIZE
        /* @min:%2einitialize */
      ](processContext.getCfg(), core, extensions7, processContext[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ]());
      pluginState = _getPluginState(thePlugin2);
      if (!thePlugin2[STR_CORE] && !pluginState[STR_CORE]) {
        pluginState[STR_CORE] = core;
      }
      pluginState[
        _DYN_IS_INITIALIZED
        /* @min:%2eisInitialized */
      ] = true;
      delete pluginState[
        _DYN_TEARDOWN
        /* @min:%2eteardown */
      ];
    });
  }
  function sortPlugins(plugins) {
    return plugins.sort(function(extA, extB) {
      var result = 0;
      if (extB) {
        var bHasProcess = isFunction(extB[STR_PROCESS_TELEMETRY]);
        if (isFunction(extA[STR_PROCESS_TELEMETRY])) {
          result = bHasProcess ? extA[STR_PRIORITY] - extB[STR_PRIORITY] : 1;
        } else if (bHasProcess) {
          result = -1;
        }
      } else {
        result = extA ? 1 : -1;
      }
      return result;
    });
  }
  function createDistributedTraceContext(parentCtx) {
    var trace = {};
    return {
      getName: function() {
        return trace[
          _DYN_NAME
          /* @min:%2ename */
        ];
      },
      setName: function(newValue) {
        parentCtx && parentCtx.setName(newValue);
        trace[
          _DYN_NAME
          /* @min:%2ename */
        ] = newValue;
      },
      getTraceId: function() {
        return trace[
          _DYN_TRACE_ID
          /* @min:%2etraceId */
        ];
      },
      setTraceId: function(newValue) {
        parentCtx && parentCtx.setTraceId(newValue);
        if (isValidTraceId(newValue)) {
          trace[
            _DYN_TRACE_ID
            /* @min:%2etraceId */
          ] = newValue;
        }
      },
      getSpanId: function() {
        return trace[
          _DYN_SPAN_ID
          /* @min:%2espanId */
        ];
      },
      setSpanId: function(newValue) {
        parentCtx && parentCtx.setSpanId(newValue);
        if (isValidSpanId(newValue)) {
          trace[
            _DYN_SPAN_ID
            /* @min:%2espanId */
          ] = newValue;
        }
      },
      getTraceFlags: function() {
        return trace[
          _DYN_TRACE_FLAGS
          /* @min:%2etraceFlags */
        ];
      },
      setTraceFlags: function(newTraceFlags) {
        parentCtx && parentCtx.setTraceFlags(newTraceFlags);
        trace[
          _DYN_TRACE_FLAGS
          /* @min:%2etraceFlags */
        ] = newTraceFlags;
      }
    };
  }
  var pluginStateData;
  var init_TelemetryHelpers = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryHelpers.js"() {
      "use strict";
      init_DynamicConstants();
      init_DataCacheHelper();
      init_HelperFuncs();
      init_InternalConstants();
      init_W3cTraceParent();
      pluginStateData = createElmNodeData("plugin");
      __name(_getPluginState, "_getPluginState");
      __name(initializePlugins, "initializePlugins");
      __name(sortPlugins, "sortPlugins");
      __name(createDistributedTraceContext, "createDistributedTraceContext");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js
  function _getNextProxyStart(proxy, core, startAt) {
    while (proxy) {
      if (proxy[
        _DYN_GET_PLUGIN
        /* @min:%2egetPlugin */
      ]() === startAt) {
        return proxy;
      }
      proxy = proxy[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ]();
    }
    return createTelemetryProxyChain([startAt], core[
      _DYN_CONFIG
      /* @min:%2econfig */
    ] || {}, core);
  }
  function _createInternalContext(telemetryChain, config, core, startAt) {
    var _nextProxy = null;
    var _onComplete = [];
    if (startAt !== null) {
      _nextProxy = startAt ? _getNextProxyStart(telemetryChain, core, startAt) : telemetryChain;
    }
    var context = {
      _next: _moveNext,
      ctx: {
        core: function() {
          return core;
        },
        diagLog: function() {
          return safeGetLogger(core, config);
        },
        getCfg: function() {
          return config;
        },
        getExtCfg: _getExtCfg,
        getConfig: _getConfig,
        hasNext: function() {
          return !!_nextProxy;
        },
        getNext: function() {
          return _nextProxy;
        },
        setNext: function(nextPlugin) {
          _nextProxy = nextPlugin;
        },
        iterate: _iterateChain,
        onComplete: _addOnComplete
      }
    };
    function _addOnComplete(onComplete, that) {
      var args = [];
      for (var _i2 = 2; _i2 < arguments.length; _i2++) {
        args[_i2 - 2] = arguments[_i2];
      }
      if (onComplete) {
        _onComplete[
          _DYN_PUSH
          /* @min:%2epush */
        ]({
          func: onComplete,
          self: !isUndefined(that) ? that : context.ctx,
          args
        });
      }
    }
    __name(_addOnComplete, "_addOnComplete");
    function _moveNext() {
      var nextProxy = _nextProxy;
      _nextProxy = nextProxy ? nextProxy[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ]() : null;
      if (!nextProxy) {
        var onComplete = _onComplete;
        if (onComplete && onComplete[
          _DYN_LENGTH
          /* @min:%2elength */
        ] > 0) {
          arrForEach(onComplete, function(completeDetails) {
            try {
              completeDetails.func[
                _DYN_CALL
                /* @min:%2ecall */
              ](completeDetails.self, completeDetails.args);
            } catch (e) {
              _throwInternal(core[
                _DYN_LOGGER
                /* @min:%2elogger */
              ], 2, 73, "Unexpected Exception during onComplete - " + dumpObj(e));
            }
          });
          _onComplete = [];
        }
      }
      return nextProxy;
    }
    __name(_moveNext, "_moveNext");
    function _getExtCfg(identifier, defaultValue, mergeDefault) {
      if (defaultValue === void 0) {
        defaultValue = {};
      }
      if (mergeDefault === void 0) {
        mergeDefault = 0;
      }
      var theConfig;
      if (config) {
        var extConfig = config[
          STR_EXTENSION_CONFIG
          /* @min:%2eextensionConfig */
        ];
        if (extConfig && identifier) {
          theConfig = extConfig[identifier];
        }
      }
      if (!theConfig) {
        theConfig = defaultValue;
      } else if (isObject2(defaultValue)) {
        if (mergeDefault !== 0) {
          var newConfig_1 = objExtend(true, defaultValue, theConfig);
          if (config && mergeDefault === 2) {
            objForEachKey(defaultValue, function(field) {
              if (isNullOrUndefined(newConfig_1[field])) {
                var cfgValue = config[field];
                if (!isNullOrUndefined(cfgValue)) {
                  newConfig_1[field] = cfgValue;
                }
              }
            });
          }
          theConfig = newConfig_1;
        }
      }
      return theConfig;
    }
    __name(_getExtCfg, "_getExtCfg");
    function _getConfig(identifier, field, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = false;
      }
      var theValue;
      var extConfig = _getExtCfg(identifier, null);
      if (extConfig && !isNullOrUndefined(extConfig[field])) {
        theValue = extConfig[field];
      } else if (config && !isNullOrUndefined(config[field])) {
        theValue = config[field];
      }
      return !isNullOrUndefined(theValue) ? theValue : defaultValue;
    }
    __name(_getConfig, "_getConfig");
    function _iterateChain(cb) {
      var nextPlugin;
      while (!!(nextPlugin = context._next())) {
        var plugin = nextPlugin[
          _DYN_GET_PLUGIN
          /* @min:%2egetPlugin */
        ]();
        if (plugin) {
          cb(plugin);
        }
      }
    }
    __name(_iterateChain, "_iterateChain");
    return context;
  }
  function createProcessTelemetryContext(telemetryChain, config, core, startAt) {
    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);
    var context = internalContext.ctx;
    function _processNext(env2) {
      var nextPlugin = internalContext._next();
      nextPlugin && nextPlugin[
        STR_PROCESS_TELEMETRY
        /* @min:%2eprocessTelemetry */
      ](env2, context);
      return !nextPlugin;
    }
    __name(_processNext, "_processNext");
    function _createNew(plugins, startAt2) {
      if (plugins === void 0) {
        plugins = null;
      }
      if (isArray(plugins)) {
        plugins = createTelemetryProxyChain(plugins, config, core, startAt2);
      }
      return createProcessTelemetryContext(plugins || context[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ](), config, core, startAt2);
    }
    __name(_createNew, "_createNew");
    context[
      _DYN_PROCESS_NEXT
      /* @min:%2eprocessNext */
    ] = _processNext;
    context[
      _DYN_CREATE_NEW
      /* @min:%2ecreateNew */
    ] = _createNew;
    return context;
  }
  function createProcessTelemetryUnloadContext(telemetryChain, core, startAt) {
    var config = core[
      _DYN_CONFIG
      /* @min:%2econfig */
    ] || {};
    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);
    var context = internalContext.ctx;
    function _processNext(unloadState) {
      var nextPlugin = internalContext._next();
      nextPlugin && nextPlugin.unload(context, unloadState);
      return !nextPlugin;
    }
    __name(_processNext, "_processNext");
    function _createNew(plugins, startAt2) {
      if (plugins === void 0) {
        plugins = null;
      }
      if (isArray(plugins)) {
        plugins = createTelemetryProxyChain(plugins, config, core, startAt2);
      }
      return createProcessTelemetryUnloadContext(plugins || context[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ](), core, startAt2);
    }
    __name(_createNew, "_createNew");
    context[
      _DYN_PROCESS_NEXT
      /* @min:%2eprocessNext */
    ] = _processNext;
    context[
      _DYN_CREATE_NEW
      /* @min:%2ecreateNew */
    ] = _createNew;
    return context;
  }
  function createProcessTelemetryUpdateContext(telemetryChain, core, startAt) {
    var config = core[
      _DYN_CONFIG
      /* @min:%2econfig */
    ] || {};
    var internalContext = _createInternalContext(telemetryChain, config, core, startAt);
    var context = internalContext.ctx;
    function _processNext(updateState) {
      return context.iterate(function(plugin) {
        if (isFunction(plugin[
          _DYN_UPDATE
          /* @min:%2eupdate */
        ])) {
          plugin[
            _DYN_UPDATE
            /* @min:%2eupdate */
          ](context, updateState);
        }
      });
    }
    __name(_processNext, "_processNext");
    function _createNew(plugins, startAt2) {
      if (plugins === void 0) {
        plugins = null;
      }
      if (isArray(plugins)) {
        plugins = createTelemetryProxyChain(plugins, config, core, startAt2);
      }
      return createProcessTelemetryUpdateContext(plugins || context[
        _DYN_GET_NEXT
        /* @min:%2egetNext */
      ](), core, startAt2);
    }
    __name(_createNew, "_createNew");
    context[
      _DYN_PROCESS_NEXT
      /* @min:%2eprocessNext */
    ] = _processNext;
    context[
      _DYN_CREATE_NEW
      /* @min:%2ecreateNew */
    ] = _createNew;
    return context;
  }
  function createTelemetryProxyChain(plugins, config, core, startAt) {
    var firstProxy = null;
    var add = startAt ? false : true;
    if (isArray(plugins) && plugins[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 0) {
      var lastProxy_1 = null;
      arrForEach(plugins, function(thePlugin) {
        if (!add && startAt === thePlugin) {
          add = true;
        }
        if (add && thePlugin && isFunction(thePlugin[
          STR_PROCESS_TELEMETRY
          /* @min:%2eprocessTelemetry */
        ])) {
          var newProxy = createTelemetryPluginProxy(thePlugin, config, core);
          if (!firstProxy) {
            firstProxy = newProxy;
          }
          if (lastProxy_1) {
            lastProxy_1._setNext(newProxy);
          }
          lastProxy_1 = newProxy;
        }
      });
    }
    if (startAt && !firstProxy) {
      return createTelemetryProxyChain([startAt], config, core);
    }
    return firstProxy;
  }
  function createTelemetryPluginProxy(plugin, config, core) {
    var nextProxy = null;
    var hasProcessTelemetry = isFunction(plugin[
      STR_PROCESS_TELEMETRY
      /* @min:%2eprocessTelemetry */
    ]);
    var hasSetNext = isFunction(plugin[
      _DYN_SET_NEXT_PLUGIN
      /* @min:%2esetNextPlugin */
    ]);
    var chainId;
    if (plugin) {
      chainId = plugin[
        _DYN_IDENTIFIER
        /* @min:%2eidentifier */
      ] + "-" + plugin[
        STR_PRIORITY
        /* @min:%2epriority */
      ] + "-" + _chainId++;
    } else {
      chainId = "Unknown-0-" + _chainId++;
    }
    var proxyChain = {
      getPlugin: function() {
        return plugin;
      },
      getNext: function() {
        return nextProxy;
      },
      processTelemetry: _processTelemetry,
      unload: _unloadPlugin,
      update: _updatePlugin,
      _id: chainId,
      _setNext: function(nextPlugin) {
        nextProxy = nextPlugin;
      }
    };
    function _getTelCtx() {
      var itemCtx;
      if (plugin && isFunction(plugin[strGetTelCtx])) {
        itemCtx = plugin[strGetTelCtx]();
      }
      if (!itemCtx) {
        itemCtx = createProcessTelemetryContext(proxyChain, config, core);
      }
      return itemCtx;
    }
    __name(_getTelCtx, "_getTelCtx");
    function _processChain(itemCtx, processPluginFn, name, details, isAsync) {
      var hasRun = false;
      var identifier = plugin ? plugin[
        _DYN_IDENTIFIER
        /* @min:%2eidentifier */
      ] : strTelemetryPluginChain;
      var hasRunContext = itemCtx[strHasRunFlags];
      if (!hasRunContext) {
        hasRunContext = itemCtx[strHasRunFlags] = {};
      }
      itemCtx.setNext(nextProxy);
      if (plugin) {
        doPerf(itemCtx[
          STR_CORE
          /* @min:%2ecore */
        ](), function() {
          return identifier + ":" + name;
        }, function() {
          hasRunContext[chainId] = true;
          try {
            var nextId = nextProxy ? nextProxy._id : STR_EMPTY;
            if (nextId) {
              hasRunContext[nextId] = false;
            }
            hasRun = processPluginFn(itemCtx);
          } catch (error) {
            var hasNextRun = nextProxy ? hasRunContext[nextProxy._id] : true;
            if (hasNextRun) {
              hasRun = true;
            }
            if (!nextProxy || !hasNextRun) {
              _throwInternal(itemCtx[
                _DYN_DIAG_LOG
                /* @min:%2ediagLog */
              ](), 1, 73, "Plugin [" + identifier + "] failed during " + name + " - " + dumpObj(error) + ", run flags: " + dumpObj(hasRunContext));
            }
          }
        }, details, isAsync);
      }
      return hasRun;
    }
    __name(_processChain, "_processChain");
    function _processTelemetry(env2, itemCtx) {
      itemCtx = itemCtx || _getTelCtx();
      function _callProcessTelemetry(itemCtx2) {
        if (!plugin || !hasProcessTelemetry) {
          return false;
        }
        var pluginState = _getPluginState(plugin);
        if (pluginState[
          _DYN_TEARDOWN
          /* @min:%2eteardown */
        ] || pluginState[STR_DISABLED]) {
          return false;
        }
        if (hasSetNext) {
          plugin[
            _DYN_SET_NEXT_PLUGIN
            /* @min:%2esetNextPlugin */
          ](nextProxy);
        }
        plugin[
          STR_PROCESS_TELEMETRY
          /* @min:%2eprocessTelemetry */
        ](env2, itemCtx2);
        return true;
      }
      __name(_callProcessTelemetry, "_callProcessTelemetry");
      if (!_processChain(itemCtx, _callProcessTelemetry, "processTelemetry", function() {
        return { item: env2 };
      }, !env2.sync)) {
        itemCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](env2);
      }
    }
    __name(_processTelemetry, "_processTelemetry");
    function _unloadPlugin(unloadCtx, unloadState) {
      function _callTeardown() {
        var hasRun = false;
        if (plugin) {
          var pluginState = _getPluginState(plugin);
          var pluginCore = plugin[STR_CORE] || pluginState[
            STR_CORE
            /* @min:%2ecore */
          ];
          if (plugin && (!pluginCore || pluginCore === unloadCtx.core()) && !pluginState[
            _DYN_TEARDOWN
            /* @min:%2eteardown */
          ]) {
            pluginState[
              STR_CORE
              /* @min:%2ecore */
            ] = null;
            pluginState[
              _DYN_TEARDOWN
              /* @min:%2eteardown */
            ] = true;
            pluginState[
              _DYN_IS_INITIALIZED
              /* @min:%2eisInitialized */
            ] = false;
            if (plugin[
              _DYN_TEARDOWN
              /* @min:%2eteardown */
            ] && plugin[
              _DYN_TEARDOWN
              /* @min:%2eteardown */
            ](unloadCtx, unloadState) === true) {
              hasRun = true;
            }
          }
        }
        return hasRun;
      }
      __name(_callTeardown, "_callTeardown");
      if (!_processChain(unloadCtx, _callTeardown, "unload", function() {
      }, unloadState[
        _DYN_IS_ASYNC
        /* @min:%2eisAsync */
      ])) {
        unloadCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](unloadState);
      }
    }
    __name(_unloadPlugin, "_unloadPlugin");
    function _updatePlugin(updateCtx, updateState) {
      function _callUpdate() {
        var hasRun = false;
        if (plugin) {
          var pluginState = _getPluginState(plugin);
          var pluginCore = plugin[STR_CORE] || pluginState[
            STR_CORE
            /* @min:%2ecore */
          ];
          if (plugin && (!pluginCore || pluginCore === updateCtx.core()) && !pluginState[
            _DYN_TEARDOWN
            /* @min:%2eteardown */
          ]) {
            if (plugin[
              _DYN_UPDATE
              /* @min:%2eupdate */
            ] && plugin[
              _DYN_UPDATE
              /* @min:%2eupdate */
            ](updateCtx, updateState) === true) {
              hasRun = true;
            }
          }
        }
        return hasRun;
      }
      __name(_callUpdate, "_callUpdate");
      if (!_processChain(updateCtx, _callUpdate, "update", function() {
      }, false)) {
        updateCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](updateState);
      }
    }
    __name(_updatePlugin, "_updatePlugin");
    return objFreeze(proxyChain);
  }
  var strTelemetryPluginChain, strHasRunFlags, strGetTelCtx, _chainId, ProcessTelemetryContext;
  var init_ProcessTelemetryContext = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ProcessTelemetryContext.js"() {
      "use strict";
      init_DynamicConstants();
      init_DiagnosticLogger();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      init_PerfManager();
      init_TelemetryHelpers();
      strTelemetryPluginChain = "TelemetryPluginChain";
      strHasRunFlags = "_hasRun";
      strGetTelCtx = "_getTelCtx";
      _chainId = 0;
      __name(_getNextProxyStart, "_getNextProxyStart");
      __name(_createInternalContext, "_createInternalContext");
      __name(createProcessTelemetryContext, "createProcessTelemetryContext");
      __name(createProcessTelemetryUnloadContext, "createProcessTelemetryUnloadContext");
      __name(createProcessTelemetryUpdateContext, "createProcessTelemetryUpdateContext");
      __name(createTelemetryProxyChain, "createTelemetryProxyChain");
      __name(createTelemetryPluginProxy, "createTelemetryPluginProxy");
      ProcessTelemetryContext = /** @class */
      function() {
        function ProcessTelemetryContext2(pluginChain, config, core, startAt) {
          var _self = this;
          var context = createProcessTelemetryContext(pluginChain, config, core, startAt);
          proxyFunctions(_self, context, objKeys(context));
        }
        __name(ProcessTelemetryContext2, "ProcessTelemetryContext");
        return ProcessTelemetryContext2;
      }();
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js
  function _addChannelQueue(channelQueue, queue2, core) {
    if (queue2 && isArray(queue2) && queue2[
      _DYN_LENGTH
      /* @min:%2elength */
    ] > 0) {
      queue2 = queue2.sort(function(a, b) {
        return a[
          STR_PRIORITY
          /* @min:%2epriority */
        ] - b[
          STR_PRIORITY
          /* @min:%2epriority */
        ];
      });
      arrForEach(queue2, function(queueItem) {
        if (queueItem[
          STR_PRIORITY
          /* @min:%2epriority */
        ] < ChannelControllerPriority) {
          throwError(ChannelValidationMessage + queueItem[
            _DYN_IDENTIFIER
            /* @min:%2eidentifier */
          ]);
        }
      });
      channelQueue[
        _DYN_PUSH
        /* @min:%2epush */
      ]({
        queue: objFreeze(queue2),
        chain: createTelemetryProxyChain(queue2, core[
          _DYN_CONFIG
          /* @min:%2econfig */
        ], core)
      });
    }
  }
  function createChannelControllerPlugin(channelQueue, core) {
    function _getTelCtx() {
      return createProcessTelemetryContext(null, core[
        _DYN_CONFIG
        /* @min:%2econfig */
      ], core, null);
    }
    __name(_getTelCtx, "_getTelCtx");
    function _processChannelQueue(theChannels, itemCtx, processFn, onComplete) {
      var waiting = theChannels ? theChannels[
        _DYN_LENGTH
        /* @min:%2elength */
      ] + 1 : 1;
      function _runChainOnComplete() {
        waiting--;
        if (waiting === 0) {
          onComplete && onComplete();
          onComplete = null;
        }
      }
      __name(_runChainOnComplete, "_runChainOnComplete");
      if (waiting > 0) {
        arrForEach(theChannels, function(channels) {
          if (channels && channels.queue[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            var channelChain = channels.chain;
            var chainCtx = itemCtx[
              _DYN_CREATE_NEW
              /* @min:%2ecreateNew */
            ](channelChain);
            chainCtx[
              _DYN_ON_COMPLETE
              /* @min:%2eonComplete */
            ](_runChainOnComplete);
            processFn(chainCtx);
          } else {
            waiting--;
          }
        });
      }
      _runChainOnComplete();
    }
    __name(_processChannelQueue, "_processChannelQueue");
    function _doUpdate(updateCtx, updateState) {
      var theUpdateState = updateState || {
        reason: 0
        /* TelemetryUpdateReason.Unknown */
      };
      _processChannelQueue(channelQueue, updateCtx, function(chainCtx) {
        chainCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](theUpdateState);
      }, function() {
        updateCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](theUpdateState);
      });
      return true;
    }
    __name(_doUpdate, "_doUpdate");
    function _doTeardown(unloadCtx, unloadState) {
      var theUnloadState = unloadState || {
        reason: 0,
        isAsync: false
      };
      _processChannelQueue(channelQueue, unloadCtx, function(chainCtx) {
        chainCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](theUnloadState);
      }, function() {
        unloadCtx[
          _DYN_PROCESS_NEXT
          /* @min:%2eprocessNext */
        ](theUnloadState);
        isInitialized = false;
      });
      return true;
    }
    __name(_doTeardown, "_doTeardown");
    function _getChannel(pluginIdentifier) {
      var thePlugin = null;
      if (channelQueue && channelQueue[
        _DYN_LENGTH
        /* @min:%2elength */
      ] > 0) {
        arrForEach(channelQueue, function(channels) {
          if (channels && channels.queue[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            arrForEach(channels.queue, function(ext2) {
              if (ext2[
                _DYN_IDENTIFIER
                /* @min:%2eidentifier */
              ] === pluginIdentifier) {
                thePlugin = ext2;
                return -1;
              }
            });
            if (thePlugin) {
              return -1;
            }
          }
        });
      }
      return thePlugin;
    }
    __name(_getChannel, "_getChannel");
    var isInitialized = false;
    var channelController = {
      identifier: "ChannelControllerPlugin",
      priority: ChannelControllerPriority,
      initialize: function(config, core2, extensions7, pluginChain) {
        isInitialized = true;
        arrForEach(channelQueue, function(channels) {
          if (channels && channels.queue[
            _DYN_LENGTH
            /* @min:%2elength */
          ] > 0) {
            initializePlugins(createProcessTelemetryContext(channels.chain, config, core2), extensions7);
          }
        });
      },
      isInitialized: function() {
        return isInitialized;
      },
      processTelemetry: function(item, itemCtx) {
        _processChannelQueue(channelQueue, itemCtx || _getTelCtx(), function(chainCtx) {
          chainCtx[
            _DYN_PROCESS_NEXT
            /* @min:%2eprocessNext */
          ](item);
        }, function() {
          itemCtx[
            _DYN_PROCESS_NEXT
            /* @min:%2eprocessNext */
          ](item);
        });
      },
      update: _doUpdate,
      pause: function() {
        _processChannelQueue(channelQueue, _getTelCtx(), function(chainCtx) {
          chainCtx.iterate(function(plugin) {
            plugin.pause && plugin.pause();
          });
        }, null);
      },
      resume: function() {
        _processChannelQueue(channelQueue, _getTelCtx(), function(chainCtx) {
          chainCtx.iterate(function(plugin) {
            plugin.resume && plugin.resume();
          });
        }, null);
      },
      teardown: _doTeardown,
      getChannel: _getChannel,
      flush: function(isAsync, callBack, sendReason, cbTimeout) {
        var waiting = 1;
        var doneIterating = false;
        var cbTimer = null;
        cbTimeout = cbTimeout || 5e3;
        function doCallback() {
          waiting--;
          if (doneIterating && waiting === 0) {
            if (cbTimer) {
              clearTimeout(cbTimer);
              cbTimer = null;
            }
            callBack && callBack(doneIterating);
            callBack = null;
          }
        }
        __name(doCallback, "doCallback");
        _processChannelQueue(channelQueue, _getTelCtx(), function(chainCtx) {
          chainCtx.iterate(function(plugin) {
            if (plugin[
              _DYN_FLUSH
              /* @min:%2eflush */
            ]) {
              waiting++;
              var handled_1 = false;
              if (!plugin[
                _DYN_FLUSH
                /* @min:%2eflush */
              ](isAsync, function() {
                handled_1 = true;
                doCallback();
              }, sendReason)) {
                if (!handled_1) {
                  if (isAsync && cbTimer == null) {
                    cbTimer = setTimeout(function() {
                      cbTimer = null;
                      doCallback();
                    }, cbTimeout);
                  } else {
                    doCallback();
                  }
                }
              }
            }
          });
        }, function() {
          doneIterating = true;
          doCallback();
        });
        return true;
      },
      _setQueue: function(queue2) {
        channelQueue = queue2;
      }
    };
    return channelController;
  }
  function createChannelQueues(channels, extensions7, core) {
    var channelQueue = [];
    if (channels) {
      arrForEach(channels, function(queue2) {
        return _addChannelQueue(channelQueue, queue2, core);
      });
    }
    if (extensions7) {
      var extensionQueue_1 = [];
      arrForEach(extensions7, function(plugin) {
        if (plugin[
          STR_PRIORITY
          /* @min:%2epriority */
        ] > ChannelControllerPriority) {
          extensionQueue_1[
            _DYN_PUSH
            /* @min:%2epush */
          ](plugin);
        }
      });
      _addChannelQueue(channelQueue, extensionQueue_1, core);
    }
    return channelQueue;
  }
  var ChannelControllerPriority, ChannelValidationMessage;
  var init_ChannelController = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/ChannelController.js"() {
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      init_ProcessTelemetryContext();
      init_TelemetryHelpers();
      ChannelControllerPriority = 500;
      ChannelValidationMessage = "Channel has invalid priority - ";
      __name(_addChannelQueue, "_addChannelQueue");
      __name(createChannelControllerPlugin, "createChannelControllerPlugin");
      __name(createChannelQueues, "createChannelQueues");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/UnloadHandlerContainer.js
  function createUnloadHandlerContainer() {
    var handlers = [];
    function _addHandler(handler) {
      if (handler) {
        handlers[
          _DYN_PUSH
          /* @min:%2epush */
        ](handler);
      }
    }
    __name(_addHandler, "_addHandler");
    function _runHandlers(unloadCtx, unloadState) {
      arrForEach(handlers, function(handler) {
        try {
          handler(unloadCtx, unloadState);
        } catch (e) {
          _throwInternal(unloadCtx[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ](), 2, 73, "Unexpected error calling unload handler - " + dumpObj(e));
        }
      });
      handlers = [];
    }
    __name(_runHandlers, "_runHandlers");
    return {
      add: _addHandler,
      run: _runHandlers
    };
  }
  var init_UnloadHandlerContainer = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/UnloadHandlerContainer.js"() {
      init_DynamicConstants();
      init_DiagnosticLogger();
      init_EnvUtils();
      init_HelperFuncs();
      __name(createUnloadHandlerContainer, "createUnloadHandlerContainer");
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js
  var strGetPlugin, BaseTelemetryPlugin;
  var init_BaseTelemetryPlugin = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseTelemetryPlugin.js"() {
      "use strict";
      init_dynamicproto_js();
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      init_ProcessTelemetryContext();
      init_UnloadHandlerContainer();
      strGetPlugin = "getPlugin";
      BaseTelemetryPlugin = /** @class */
      function() {
        function BaseTelemetryPlugin2() {
          var _self = this;
          var _isinitialized;
          var _rootCtx;
          var _nextPlugin;
          var _unloadHandlerContainer;
          var _hooks;
          _initDefaults();
          dynamicProto(BaseTelemetryPlugin2, _self, function(_self2) {
            _self2[
              _DYN_INITIALIZE
              /* @min:%2einitialize */
            ] = function(config, core, extensions7, pluginChain) {
              _setDefaults(config, core, pluginChain);
              _isinitialized = true;
            };
            _self2[
              _DYN_TEARDOWN
              /* @min:%2eteardown */
            ] = function(unloadCtx, unloadState) {
              var _a7;
              var core = _self2[
                STR_CORE
                /* @min:%2ecore */
              ];
              if (!core || unloadCtx && core !== unloadCtx[
                STR_CORE
                /* @min:%2ecore */
              ]()) {
                return;
              }
              var result;
              var unloadDone = false;
              var theUnloadCtx = unloadCtx || createProcessTelemetryUnloadContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);
              var theUnloadState = unloadState || (_a7 = {
                reason: 0
                /* TelemetryUnloadReason.ManualTeardown */
              }, _a7[
                _DYN_IS_ASYNC
                /* @min:isAsync */
              ] = false, _a7);
              function _unloadCallback() {
                if (!unloadDone) {
                  unloadDone = true;
                  _unloadHandlerContainer.run(theUnloadCtx, unloadState);
                  var oldHooks = _hooks;
                  _hooks = [];
                  arrForEach(oldHooks, function(fn2) {
                    fn2.rm();
                  });
                  if (result === true) {
                    theUnloadCtx[
                      _DYN_PROCESS_NEXT
                      /* @min:%2eprocessNext */
                    ](theUnloadState);
                  }
                  _initDefaults();
                }
              }
              __name(_unloadCallback, "_unloadCallback");
              if (!_self2[
                _DYN__DO_TEARDOWN
                /* @min:%2e_doTeardown */
              ] || _self2[
                _DYN__DO_TEARDOWN
                /* @min:%2e_doTeardown */
              ](theUnloadCtx, theUnloadState, _unloadCallback) !== true) {
                _unloadCallback();
              } else {
                result = true;
              }
              return result;
            };
            _self2[
              _DYN_UPDATE
              /* @min:%2eupdate */
            ] = function(updateCtx, updateState) {
              var core = _self2[
                STR_CORE
                /* @min:%2ecore */
              ];
              if (!core || updateCtx && core !== updateCtx[
                STR_CORE
                /* @min:%2ecore */
              ]()) {
                return;
              }
              var result;
              var updateDone = false;
              var theUpdateCtx = updateCtx || createProcessTelemetryUpdateContext(null, core, _nextPlugin && _nextPlugin[strGetPlugin] ? _nextPlugin[strGetPlugin]() : _nextPlugin);
              var theUpdateState = updateState || {
                reason: 0
                /* TelemetryUpdateReason.Unknown */
              };
              function _updateCallback() {
                if (!updateDone) {
                  updateDone = true;
                  _setDefaults(theUpdateCtx.getCfg(), theUpdateCtx.core(), theUpdateCtx[
                    _DYN_GET_NEXT
                    /* @min:%2egetNext */
                  ]());
                }
              }
              __name(_updateCallback, "_updateCallback");
              if (!_self2._doUpdate || _self2._doUpdate(theUpdateCtx, theUpdateState, _updateCallback) !== true) {
                _updateCallback();
              } else {
                result = true;
              }
              return result;
            };
            _self2._addHook = function(hooks) {
              if (hooks) {
                if (isArray(hooks)) {
                  _hooks = _hooks.concat(hooks);
                } else {
                  _hooks[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](hooks);
                }
              }
            };
            proxyFunctionAs(_self2, "_addUnloadCb", function() {
              return _unloadHandlerContainer;
            }, "add");
          });
          _self[
            _DYN_DIAG_LOG
            /* @min:%2ediagLog */
          ] = function(itemCtx) {
            return _getTelCtx(itemCtx)[
              _DYN_DIAG_LOG
              /* @min:%2ediagLog */
            ]();
          };
          _self[
            _DYN_IS_INITIALIZED
            /* @min:%2eisInitialized */
          ] = function() {
            return _isinitialized;
          };
          _self.setInitialized = function(isInitialized) {
            _isinitialized = isInitialized;
          };
          _self[
            _DYN_SET_NEXT_PLUGIN
            /* @min:%2esetNextPlugin */
          ] = function(next) {
            _nextPlugin = next;
          };
          _self[
            _DYN_PROCESS_NEXT
            /* @min:%2eprocessNext */
          ] = function(env2, itemCtx) {
            if (itemCtx) {
              itemCtx[
                _DYN_PROCESS_NEXT
                /* @min:%2eprocessNext */
              ](env2);
            } else if (_nextPlugin && isFunction(_nextPlugin[
              STR_PROCESS_TELEMETRY
              /* @min:%2eprocessTelemetry */
            ])) {
              _nextPlugin[
                STR_PROCESS_TELEMETRY
                /* @min:%2eprocessTelemetry */
              ](env2, null);
            }
          };
          _self._getTelCtx = _getTelCtx;
          function _getTelCtx(currentCtx) {
            if (currentCtx === void 0) {
              currentCtx = null;
            }
            var itemCtx = currentCtx;
            if (!itemCtx) {
              var rootCtx = _rootCtx || createProcessTelemetryContext(null, {}, _self[
                STR_CORE
                /* @min:%2ecore */
              ]);
              if (_nextPlugin && _nextPlugin[strGetPlugin]) {
                itemCtx = rootCtx[
                  _DYN_CREATE_NEW
                  /* @min:%2ecreateNew */
                ](null, _nextPlugin[strGetPlugin]);
              } else {
                itemCtx = rootCtx[
                  _DYN_CREATE_NEW
                  /* @min:%2ecreateNew */
                ](null, _nextPlugin);
              }
            }
            return itemCtx;
          }
          __name(_getTelCtx, "_getTelCtx");
          function _setDefaults(config, core, pluginChain) {
            if (config) {
              setValue(config, STR_EXTENSION_CONFIG, [], null, isNullOrUndefined);
            }
            if (!pluginChain && core) {
              pluginChain = core[
                _DYN_GET_PROCESS_TEL_CONT0
                /* @min:%2egetProcessTelContext */
              ]()[
                _DYN_GET_NEXT
                /* @min:%2egetNext */
              ]();
            }
            var nextPlugin = _nextPlugin;
            if (_nextPlugin && _nextPlugin[strGetPlugin]) {
              nextPlugin = _nextPlugin[strGetPlugin]();
            }
            _self[
              STR_CORE
              /* @min:%2ecore */
            ] = core;
            _rootCtx = createProcessTelemetryContext(pluginChain, config, core, nextPlugin);
          }
          __name(_setDefaults, "_setDefaults");
          function _initDefaults() {
            _isinitialized = false;
            _self[
              STR_CORE
              /* @min:%2ecore */
            ] = null;
            _rootCtx = null;
            _nextPlugin = null;
            _hooks = [];
            _unloadHandlerContainer = createUnloadHandlerContainer();
          }
          __name(_initDefaults, "_initDefaults");
        }
        __name(BaseTelemetryPlugin2, "BaseTelemetryPlugin");
        BaseTelemetryPlugin2.__ieDyn = 1;
        return BaseTelemetryPlugin2;
      }();
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryInitializerPlugin.js
  var TelemetryInitializerPlugin;
  var init_TelemetryInitializerPlugin = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/TelemetryInitializerPlugin.js"() {
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_DynamicConstants();
      init_BaseTelemetryPlugin();
      init_DiagnosticLogger();
      init_EnvUtils();
      init_HelperFuncs();
      init_InternalConstants();
      TelemetryInitializerPlugin = /** @class */
      function(_super) {
        __extendsFn(TelemetryInitializerPlugin2, _super);
        function TelemetryInitializerPlugin2() {
          var _this = _super.call(this) || this;
          _this.identifier = "TelemetryInitializerPlugin";
          _this.priority = 199;
          var _id;
          var _initializers;
          _initDefaults();
          dynamicProto(TelemetryInitializerPlugin2, _this, function(_self, _base) {
            _self.addTelemetryInitializer = function(telemetryInitializer) {
              var theInitializer = {
                id: _id++,
                fn: telemetryInitializer
              };
              _initializers[
                _DYN_PUSH
                /* @min:%2epush */
              ](theInitializer);
              var handler = {
                remove: function() {
                  arrForEach(_initializers, function(initializer, idx) {
                    if (initializer.id === theInitializer.id) {
                      _initializers[
                        _DYN_SPLICE
                        /* @min:%2esplice */
                      ](idx, 1);
                      return -1;
                    }
                  });
                }
              };
              return handler;
            };
            _self[
              STR_PROCESS_TELEMETRY
              /* @min:%2eprocessTelemetry */
            ] = function(item, itemCtx) {
              var doNotSendItem = false;
              var telemetryInitializersCount = _initializers[
                _DYN_LENGTH
                /* @min:%2elength */
              ];
              for (var i = 0; i < telemetryInitializersCount; ++i) {
                var telemetryInitializer = _initializers[i];
                if (telemetryInitializer) {
                  try {
                    if (telemetryInitializer.fn[
                      _DYN_APPLY
                      /* @min:%2eapply */
                    ](null, [item]) === false) {
                      doNotSendItem = true;
                      break;
                    }
                  } catch (e) {
                    _throwInternal(itemCtx[
                      _DYN_DIAG_LOG
                      /* @min:%2ediagLog */
                    ](), 1, 64, "One of telemetry initializers failed, telemetry item will not be sent: " + getExceptionName(e), { exception: dumpObj(e) }, true);
                  }
                }
              }
              if (!doNotSendItem) {
                _self[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](item, itemCtx);
              }
            };
            _self[
              _DYN__DO_TEARDOWN
              /* @min:%2e_doTeardown */
            ] = function() {
              _initDefaults();
            };
          });
          function _initDefaults() {
            _id = 0;
            _initializers = [];
          }
          __name(_initDefaults, "_initDefaults");
          return _this;
        }
        __name(TelemetryInitializerPlugin2, "TelemetryInitializerPlugin");
        TelemetryInitializerPlugin2.__ieDyn = 1;
        return TelemetryInitializerPlugin2;
      }(BaseTelemetryPlugin);
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js
  function _createPerfManager(core, notificationMgr) {
    return new PerfManager(notificationMgr);
  }
  function _validateExtensions(logger4, channelPriority, allExtensions) {
    var _a7;
    var coreExtensions = [];
    var extPriorities = {};
    arrForEach(allExtensions, function(ext2) {
      if (isNullOrUndefined(ext2) || isNullOrUndefined(ext2[
        _DYN_INITIALIZE
        /* @min:%2einitialize */
      ])) {
        throwError(strValidationError);
      }
      var extPriority = ext2[
        STR_PRIORITY
        /* @min:%2epriority */
      ];
      var identifier = ext2[
        _DYN_IDENTIFIER
        /* @min:%2eidentifier */
      ];
      if (ext2 && extPriority) {
        if (!isNullOrUndefined(extPriorities[extPriority])) {
          _warnToConsole(logger4, "Two extensions have same priority #" + extPriority + " - " + extPriorities[extPriority] + ", " + identifier);
        } else {
          extPriorities[extPriority] = identifier;
        }
      }
      if (!extPriority || extPriority < channelPriority) {
        coreExtensions[
          _DYN_PUSH
          /* @min:%2epush */
        ](ext2);
      }
    });
    return _a7 = {
      all: allExtensions
    }, _a7[
      STR_CORE
      /* @min:core */
    ] = coreExtensions, _a7;
  }
  function _isPluginPresent(thePlugin, plugins) {
    var exists = false;
    arrForEach(plugins, function(plugin) {
      if (plugin === thePlugin) {
        exists = true;
        return -1;
      }
    });
    return exists;
  }
  function _createDummyNotificationManager() {
    var _a7;
    return objCreateFn((_a7 = {}, _a7[
      _DYN_ADD_NOTIFICATION_LIS1
      /* @min:addNotificationListener */
    ] = function(listener) {
    }, _a7[
      _DYN_REMOVE_NOTIFICATION_2
      /* @min:removeNotificationListener */
    ] = function(listener) {
    }, _a7[
      STR_EVENTS_SENT
      /* @min:eventsSent */
    ] = function(events) {
    }, _a7[
      STR_EVENTS_DISCARDED
      /* @min:eventsDiscarded */
    ] = function(events, reason) {
    }, _a7[
      STR_EVENTS_SEND_REQUEST
      /* @min:eventsSendRequest */
    ] = function(sendReason, isAsync) {
    }, _a7));
  }
  var strValidationError, strNotificationManager, strSdkUnloadingError, strSdkNotInitialized, defaultInitConfig, BaseCore;
  var init_BaseCore = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/BaseCore.js"() {
      "use strict";
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_applicationinsights_shims();
      init_DynamicConstants();
      init_ChannelController();
      init_CookieMgr();
      init_DataCacheHelper();
      init_DbgExtensionUtils();
      init_DiagnosticLogger();
      init_HelperFuncs();
      init_InternalConstants();
      init_PerfManager();
      init_ProcessTelemetryContext();
      init_TelemetryHelpers();
      init_TelemetryInitializerPlugin();
      init_UnloadHandlerContainer();
      strValidationError = "Plugins must provide initialize method";
      strNotificationManager = "_notificationManager";
      strSdkUnloadingError = "SDK is still unloading...";
      strSdkNotInitialized = "SDK is not initialized";
      defaultInitConfig = {
        // Have the Diagnostic Logger default to log critical errors to the console
        loggingLevelConsole: 1
        /* eLoggingSeverity.CRITICAL */
      };
      __name(_createPerfManager, "_createPerfManager");
      __name(_validateExtensions, "_validateExtensions");
      __name(_isPluginPresent, "_isPluginPresent");
      __name(_createDummyNotificationManager, "_createDummyNotificationManager");
      BaseCore = /** @class */
      function() {
        function BaseCore3() {
          var _config;
          var _isInitialized;
          var _eventQueue;
          var _notificationManager;
          var _perfManager;
          var _cfgPerfManager;
          var _cookieManager;
          var _pluginChain;
          var _configExtensions;
          var _coreExtensions;
          var _channelControl;
          var _channelConfig;
          var _channelQueue;
          var _isUnloading;
          var _telemetryInitializerPlugin;
          var _internalLogsEventName;
          var _evtNamespace;
          var _unloadHandlers;
          var _debugListener2;
          var _traceCtx;
          var _internalLogPoller = 0;
          dynamicProto(BaseCore3, this, function(_self) {
            _initDefaults();
            _self[
              _DYN_IS_INITIALIZED
              /* @min:%2eisInitialized */
            ] = function() {
              return _isInitialized;
            };
            _self[
              _DYN_INITIALIZE
              /* @min:%2einitialize */
            ] = function(config, extensions7, logger4, notificationManager) {
              if (_isUnloading) {
                throwError(strSdkUnloadingError);
              }
              if (_self[
                _DYN_IS_INITIALIZED
                /* @min:%2eisInitialized */
              ]()) {
                throwError("Core should not be initialized more than once");
              }
              _config = config || {};
              _self[
                _DYN_CONFIG
                /* @min:%2econfig */
              ] = _config;
              if (isNullOrUndefined(config[
                _DYN_INSTRUMENTATION_KEY
                /* @min:%2einstrumentationKey */
              ])) {
                throwError("Please provide instrumentation key");
              }
              _notificationManager = notificationManager;
              _self[strNotificationManager] = notificationManager;
              _initDebugListener();
              _initPerfManager();
              _initExtConfig();
              if (logger4) {
                _self[
                  _DYN_LOGGER
                  /* @min:%2elogger */
                ] = logger4;
              }
              var cfgExtensions = getSetValue(_config, STR_EXTENSIONS, []);
              _configExtensions = [];
              _configExtensions[
                _DYN_PUSH
                /* @min:%2epush */
              ].apply(_configExtensions, __spreadArrayFn(__spreadArrayFn([], extensions7, false), cfgExtensions, false));
              _channelConfig = getSetValue(_config, STR_CHANNELS, []);
              _initPluginChain(null);
              if (!_channelQueue || _channelQueue[
                _DYN_LENGTH
                /* @min:%2elength */
              ] === 0) {
                throwError("No " + STR_CHANNELS + " available");
              }
              _isInitialized = true;
              _self.releaseQueue();
            };
            _self.getTransmissionControls = function() {
              var controls = [];
              if (_channelQueue) {
                arrForEach(_channelQueue, function(channels) {
                  controls[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](channels.queue);
                });
              }
              return objFreeze(controls);
            };
            _self.track = function(telemetryItem) {
              telemetryItem.iKey = telemetryItem.iKey || _config[
                _DYN_INSTRUMENTATION_KEY
                /* @min:%2einstrumentationKey */
              ];
              telemetryItem[
                _DYN_TIME
                /* @min:%2etime */
              ] = telemetryItem[
                _DYN_TIME
                /* @min:%2etime */
              ] || toISOString(/* @__PURE__ */ new Date());
              telemetryItem.ver = telemetryItem.ver || "4.0";
              if (!_isUnloading && _self[
                _DYN_IS_INITIALIZED
                /* @min:%2eisInitialized */
              ]()) {
                _createTelCtx()[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](telemetryItem);
              } else {
                _eventQueue[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](telemetryItem);
              }
            };
            _self[
              _DYN_GET_PROCESS_TEL_CONT0
              /* @min:%2egetProcessTelContext */
            ] = _createTelCtx;
            _self[
              _DYN_GET_NOTIFY_MGR
              /* @min:%2egetNotifyMgr */
            ] = function() {
              if (!_notificationManager) {
                _notificationManager = _createDummyNotificationManager();
                _self[strNotificationManager] = _notificationManager;
              }
              return _notificationManager;
            };
            _self[
              _DYN_ADD_NOTIFICATION_LIS1
              /* @min:%2eaddNotificationListener */
            ] = function(listener) {
              if (_notificationManager) {
                _notificationManager[
                  _DYN_ADD_NOTIFICATION_LIS1
                  /* @min:%2eaddNotificationListener */
                ](listener);
              }
            };
            _self[
              _DYN_REMOVE_NOTIFICATION_2
              /* @min:%2eremoveNotificationListener */
            ] = function(listener) {
              if (_notificationManager) {
                _notificationManager[
                  _DYN_REMOVE_NOTIFICATION_2
                  /* @min:%2eremoveNotificationListener */
                ](listener);
              }
            };
            _self.getCookieMgr = function() {
              if (!_cookieManager) {
                _cookieManager = createCookieMgr(_config, _self[
                  _DYN_LOGGER
                  /* @min:%2elogger */
                ]);
              }
              return _cookieManager;
            };
            _self.setCookieMgr = function(cookieMgr) {
              _cookieManager = cookieMgr;
            };
            _self[
              STR_GET_PERF_MGR
              /* @min:%2egetPerfMgr */
            ] = function() {
              if (!_perfManager && !_cfgPerfManager) {
                if (getCfgValue(_config.enablePerfMgr)) {
                  var createPerfMgr = getCfgValue(_config[
                    STR_CREATE_PERF_MGR
                    /* @min:%2ecreatePerfMgr */
                  ]);
                  if (isFunction(createPerfMgr)) {
                    _cfgPerfManager = createPerfMgr(_self, _self[
                      _DYN_GET_NOTIFY_MGR
                      /* @min:%2egetNotifyMgr */
                    ]());
                  }
                }
              }
              return _perfManager || _cfgPerfManager || getGblPerfMgr();
            };
            _self.setPerfMgr = function(perfMgr) {
              _perfManager = perfMgr;
            };
            _self.eventCnt = function() {
              return _eventQueue[
                _DYN_LENGTH
                /* @min:%2elength */
              ];
            };
            _self.releaseQueue = function() {
              if (_isInitialized && _eventQueue[
                _DYN_LENGTH
                /* @min:%2elength */
              ] > 0) {
                var eventQueue = _eventQueue;
                _eventQueue = [];
                arrForEach(eventQueue, function(event) {
                  _createTelCtx()[
                    _DYN_PROCESS_NEXT
                    /* @min:%2eprocessNext */
                  ](event);
                });
              }
            };
            _self.pollInternalLogs = function(eventName) {
              _internalLogsEventName = eventName || null;
              var interval = getCfgValue(_config.diagnosticLogInterval);
              if (!interval || !(interval > 0)) {
                interval = 1e4;
              }
              if (_internalLogPoller) {
                clearInterval(_internalLogPoller);
              }
              _internalLogPoller = setInterval(function() {
                _flushInternalLogs();
              }, interval);
              return _internalLogPoller;
            };
            _self[
              _DYN_STOP_POLLING_INTERNA3
              /* @min:%2estopPollingInternalLogs */
            ] = function() {
              if (_internalLogPoller) {
                clearInterval(_internalLogPoller);
                _internalLogPoller = 0;
                _flushInternalLogs();
              }
            };
            proxyFunctions(_self, function() {
              return _telemetryInitializerPlugin;
            }, ["addTelemetryInitializer"]);
            _self.unload = function(isAsync, unloadComplete, cbTimeout) {
              var _a7;
              if (isAsync === void 0) {
                isAsync = true;
              }
              if (!_isInitialized) {
                throwError(strSdkNotInitialized);
              }
              if (_isUnloading) {
                throwError(strSdkUnloadingError);
              }
              var unloadState = (_a7 = {
                reason: 50
                /* TelemetryUnloadReason.SdkUnload */
              }, _a7[
                _DYN_IS_ASYNC
                /* @min:isAsync */
              ] = isAsync, _a7.flushComplete = false, _a7);
              var processUnloadCtx = createProcessTelemetryUnloadContext(_getPluginChain(), _self);
              processUnloadCtx[
                _DYN_ON_COMPLETE
                /* @min:%2eonComplete */
              ](function() {
                _initDefaults();
                unloadComplete && unloadComplete(unloadState);
              }, _self);
              function _doUnload(flushComplete) {
                unloadState.flushComplete = flushComplete;
                _isUnloading = true;
                _unloadHandlers.run(processUnloadCtx, unloadState);
                _self[
                  _DYN_STOP_POLLING_INTERNA3
                  /* @min:%2estopPollingInternalLogs */
                ]();
                processUnloadCtx[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](unloadState);
              }
              __name(_doUnload, "_doUnload");
              if (!_flushChannels(isAsync, _doUnload, 6, cbTimeout)) {
                _doUnload(false);
              }
            };
            _self[
              _DYN_GET_PLUGIN
              /* @min:%2egetPlugin */
            ] = _getPlugin;
            _self.addPlugin = function(plugin, replaceExisting, isAsync, addCb) {
              if (!plugin) {
                addCb && addCb(false);
                _logOrThrowError(strValidationError);
                return;
              }
              var existingPlugin = _getPlugin(plugin[
                _DYN_IDENTIFIER
                /* @min:%2eidentifier */
              ]);
              if (existingPlugin && !replaceExisting) {
                addCb && addCb(false);
                _logOrThrowError("Plugin [" + plugin[
                  _DYN_IDENTIFIER
                  /* @min:%2eidentifier */
                ] + "] is already loaded!");
                return;
              }
              var updateState = {
                reason: 16
                /* TelemetryUpdateReason.PluginAdded */
              };
              function _addPlugin(removed) {
                _configExtensions[
                  _DYN_PUSH
                  /* @min:%2epush */
                ](plugin);
                updateState.added = [plugin];
                _initPluginChain(updateState);
                addCb && addCb(true);
              }
              __name(_addPlugin, "_addPlugin");
              if (existingPlugin) {
                var removedPlugins_1 = [existingPlugin.plugin];
                var unloadState = {
                  reason: 2,
                  isAsync: !!isAsync
                };
                _removePlugins(removedPlugins_1, unloadState, function(removed) {
                  if (!removed) {
                    addCb && addCb(false);
                  } else {
                    updateState.removed = removedPlugins_1;
                    updateState.reason |= 32;
                    _addPlugin(true);
                  }
                });
              } else {
                _addPlugin(false);
              }
            };
            _self.evtNamespace = function() {
              return _evtNamespace;
            };
            _self[
              _DYN_FLUSH
              /* @min:%2eflush */
            ] = _flushChannels;
            _self.getTraceCtx = function(createNew) {
              if (!_traceCtx) {
                _traceCtx = createDistributedTraceContext();
              }
              return _traceCtx;
            };
            _self.setTraceCtx = function(traceCtx) {
              _traceCtx = traceCtx || null;
            };
            proxyFunctionAs(_self, "addUnloadCb", function() {
              return _unloadHandlers;
            }, "add");
            function _initDefaults() {
              _isInitialized = false;
              _config = objExtend(true, {}, defaultInitConfig);
              _self[
                _DYN_CONFIG
                /* @min:%2econfig */
              ] = _config;
              _self[
                _DYN_LOGGER
                /* @min:%2elogger */
              ] = new DiagnosticLogger(_config);
              _self[
                _DYN__EXTENSIONS
                /* @min:%2e_extensions */
              ] = [];
              _telemetryInitializerPlugin = new TelemetryInitializerPlugin();
              _eventQueue = [];
              _notificationManager = null;
              _perfManager = null;
              _cfgPerfManager = null;
              _cookieManager = null;
              _pluginChain = null;
              _coreExtensions = null;
              _configExtensions = [];
              _channelControl = null;
              _channelConfig = null;
              _channelQueue = null;
              _isUnloading = false;
              _internalLogsEventName = null;
              _evtNamespace = createUniqueNamespace("AIBaseCore", true);
              _unloadHandlers = createUnloadHandlerContainer();
              _traceCtx = null;
            }
            __name(_initDefaults, "_initDefaults");
            function _createTelCtx() {
              return createProcessTelemetryContext(_getPluginChain(), _config, _self);
            }
            __name(_createTelCtx, "_createTelCtx");
            function _initPluginChain(updateState) {
              var theExtensions = _validateExtensions(_self[
                _DYN_LOGGER
                /* @min:%2elogger */
              ], ChannelControllerPriority, _configExtensions);
              _coreExtensions = theExtensions[
                STR_CORE
                /* @min:%2ecore */
              ];
              _pluginChain = null;
              var allExtensions = theExtensions.all;
              _channelQueue = objFreeze(createChannelQueues(_channelConfig, allExtensions, _self));
              if (_channelControl) {
                var idx = arrIndexOf(allExtensions, _channelControl);
                if (idx !== -1) {
                  allExtensions[
                    _DYN_SPLICE
                    /* @min:%2esplice */
                  ](idx, 1);
                }
                idx = arrIndexOf(_coreExtensions, _channelControl);
                if (idx !== -1) {
                  _coreExtensions[
                    _DYN_SPLICE
                    /* @min:%2esplice */
                  ](idx, 1);
                }
                _channelControl._setQueue(_channelQueue);
              } else {
                _channelControl = createChannelControllerPlugin(_channelQueue, _self);
              }
              allExtensions[
                _DYN_PUSH
                /* @min:%2epush */
              ](_channelControl);
              _coreExtensions[
                _DYN_PUSH
                /* @min:%2epush */
              ](_channelControl);
              _self[
                _DYN__EXTENSIONS
                /* @min:%2e_extensions */
              ] = sortPlugins(allExtensions);
              _channelControl[
                _DYN_INITIALIZE
                /* @min:%2einitialize */
              ](_config, _self, allExtensions);
              initializePlugins(_createTelCtx(), allExtensions);
              _self[
                _DYN__EXTENSIONS
                /* @min:%2e_extensions */
              ] = objFreeze(sortPlugins(_coreExtensions || [])).slice();
              if (updateState) {
                _doUpdate(updateState);
              }
            }
            __name(_initPluginChain, "_initPluginChain");
            function _getPlugin(pluginIdentifier) {
              var _a7;
              var theExt = null;
              var thePlugin = null;
              arrForEach(_self[
                _DYN__EXTENSIONS
                /* @min:%2e_extensions */
              ], function(ext2) {
                if (ext2[
                  _DYN_IDENTIFIER
                  /* @min:%2eidentifier */
                ] === pluginIdentifier && ext2 !== _channelControl && ext2 !== _telemetryInitializerPlugin) {
                  thePlugin = ext2;
                  return -1;
                }
              });
              if (!thePlugin && _channelControl) {
                thePlugin = _channelControl.getChannel(pluginIdentifier);
              }
              if (thePlugin) {
                theExt = (_a7 = {
                  plugin: thePlugin
                }, _a7[
                  _DYN_SET_ENABLED
                  /* @min:setEnabled */
                ] = function(enabled2) {
                  _getPluginState(thePlugin)[STR_DISABLED] = !enabled2;
                }, _a7.isEnabled = function() {
                  var pluginState = _getPluginState(thePlugin);
                  return !pluginState[
                    _DYN_TEARDOWN
                    /* @min:%2eteardown */
                  ] && !pluginState[STR_DISABLED];
                }, _a7.remove = function(isAsync, removeCb) {
                  var _a8;
                  if (isAsync === void 0) {
                    isAsync = true;
                  }
                  var pluginsToRemove = [thePlugin];
                  var unloadState = (_a8 = {
                    reason: 1
                    /* TelemetryUnloadReason.PluginUnload */
                  }, _a8[
                    _DYN_IS_ASYNC
                    /* @min:isAsync */
                  ] = isAsync, _a8);
                  _removePlugins(pluginsToRemove, unloadState, function(removed) {
                    if (removed) {
                      _initPluginChain({
                        reason: 32,
                        removed: pluginsToRemove
                      });
                    }
                    removeCb && removeCb(removed);
                  });
                }, _a7);
              }
              return theExt;
            }
            __name(_getPlugin, "_getPlugin");
            function _getPluginChain() {
              if (!_pluginChain) {
                var extensions7 = (_coreExtensions || []).slice();
                if (arrIndexOf(extensions7, _telemetryInitializerPlugin) === -1) {
                  extensions7[
                    _DYN_PUSH
                    /* @min:%2epush */
                  ](_telemetryInitializerPlugin);
                }
                _pluginChain = createTelemetryProxyChain(sortPlugins(extensions7), _config, _self);
              }
              return _pluginChain;
            }
            __name(_getPluginChain, "_getPluginChain");
            function _removePlugins(thePlugins, unloadState, removeComplete) {
              if (thePlugins && thePlugins[
                _DYN_LENGTH
                /* @min:%2elength */
              ] > 0) {
                var unloadChain = createTelemetryProxyChain(thePlugins, _config, _self);
                var unloadCtx = createProcessTelemetryUnloadContext(unloadChain, _self);
                unloadCtx[
                  _DYN_ON_COMPLETE
                  /* @min:%2eonComplete */
                ](function() {
                  var removed = false;
                  var newConfigExtensions = [];
                  arrForEach(_configExtensions, function(plugin, idx) {
                    if (!_isPluginPresent(plugin, thePlugins)) {
                      newConfigExtensions[
                        _DYN_PUSH
                        /* @min:%2epush */
                      ](plugin);
                    } else {
                      removed = true;
                    }
                  });
                  _configExtensions = newConfigExtensions;
                  var newChannelConfig = [];
                  if (_channelConfig) {
                    arrForEach(_channelConfig, function(queue2, idx) {
                      var newQueue = [];
                      arrForEach(queue2, function(channel) {
                        if (!_isPluginPresent(channel, thePlugins)) {
                          newQueue[
                            _DYN_PUSH
                            /* @min:%2epush */
                          ](channel);
                        } else {
                          removed = true;
                        }
                      });
                      newChannelConfig[
                        _DYN_PUSH
                        /* @min:%2epush */
                      ](newQueue);
                    });
                    _channelConfig = newChannelConfig;
                  }
                  removeComplete && removeComplete(removed);
                });
                unloadCtx[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](unloadState);
              } else {
                removeComplete(false);
              }
            }
            __name(_removePlugins, "_removePlugins");
            function _flushInternalLogs() {
              var queue2 = _self[
                _DYN_LOGGER
                /* @min:%2elogger */
              ] ? _self[
                _DYN_LOGGER
                /* @min:%2elogger */
              ].queue : [];
              if (queue2) {
                arrForEach(queue2, function(logMessage) {
                  var _a7;
                  var item = (_a7 = {}, _a7[
                    _DYN_NAME
                    /* @min:name */
                  ] = _internalLogsEventName ? _internalLogsEventName : "InternalMessageId: " + logMessage[
                    _DYN_MESSAGE_ID
                    /* @min:%2emessageId */
                  ], _a7.iKey = getCfgValue(_config[
                    _DYN_INSTRUMENTATION_KEY
                    /* @min:%2einstrumentationKey */
                  ]), _a7.time = toISOString(/* @__PURE__ */ new Date()), _a7.baseType = _InternalLogMessage.dataType, _a7.baseData = { message: logMessage[
                    _DYN_MESSAGE
                    /* @min:%2emessage */
                  ] }, _a7);
                  _self.track(item);
                });
                queue2[
                  _DYN_LENGTH
                  /* @min:%2elength */
                ] = 0;
              }
            }
            __name(_flushInternalLogs, "_flushInternalLogs");
            function _flushChannels(isAsync, callBack, sendReason, cbTimeout) {
              if (_channelControl) {
                return _channelControl[
                  _DYN_FLUSH
                  /* @min:%2eflush */
                ](isAsync, callBack, sendReason || 6, cbTimeout);
              }
              callBack && callBack(false);
              return true;
            }
            __name(_flushChannels, "_flushChannels");
            function _initDebugListener() {
              var disableDbgExt = getCfgValue(_config.disableDbgExt);
              if (disableDbgExt === true && _debugListener2) {
                _notificationManager[
                  _DYN_REMOVE_NOTIFICATION_2
                  /* @min:%2eremoveNotificationListener */
                ](_debugListener2);
                _debugListener2 = null;
              }
              if (_notificationManager && !_debugListener2 && disableDbgExt !== true) {
                _debugListener2 = getDebugListener(_config);
                _notificationManager[
                  _DYN_ADD_NOTIFICATION_LIS1
                  /* @min:%2eaddNotificationListener */
                ](_debugListener2);
              }
            }
            __name(_initDebugListener, "_initDebugListener");
            function _initPerfManager() {
              var enablePerfMgr = getCfgValue(_config.enablePerfMgr);
              if (!enablePerfMgr && _cfgPerfManager) {
                _cfgPerfManager = null;
              }
              if (enablePerfMgr) {
                getSetValue(_config, STR_CREATE_PERF_MGR, _createPerfManager);
              }
            }
            __name(_initPerfManager, "_initPerfManager");
            function _initExtConfig() {
              var extConfig = getSetValue(_config, STR_EXTENSION_CONFIG, {});
              extConfig.NotificationManager = _notificationManager;
            }
            __name(_initExtConfig, "_initExtConfig");
            function _doUpdate(updateState) {
              var updateCtx = createProcessTelemetryUpdateContext(_getPluginChain(), _self);
              if (!_self._updateHook || _self._updateHook(updateCtx, updateState) !== true) {
                updateCtx[
                  _DYN_PROCESS_NEXT
                  /* @min:%2eprocessNext */
                ](updateState);
              }
            }
            __name(_doUpdate, "_doUpdate");
            function _logOrThrowError(message) {
              var logger4 = _self[
                _DYN_LOGGER
                /* @min:%2elogger */
              ];
              if (logger4) {
                _throwInternal(logger4, 2, 73, message);
              } else {
                throwError(message);
              }
            }
            __name(_logOrThrowError, "_logOrThrowError");
          });
        }
        __name(BaseCore3, "BaseCore");
        BaseCore3.__ieDyn = 1;
        return BaseCore3;
      }();
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js
  function _runListeners(listeners, name, isAsync, callback) {
    arrForEach(listeners, function(listener) {
      if (listener && listener[name]) {
        if (isAsync) {
          setTimeout(function() {
            return callback(listener);
          }, 0);
        } else {
          try {
            callback(listener);
          } catch (e) {
          }
        }
      }
    });
  }
  var NotificationManager;
  var init_NotificationManager = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/NotificationManager.js"() {
      init_dynamicproto_js();
      init_DynamicConstants();
      init_HelperFuncs();
      init_InternalConstants();
      __name(_runListeners, "_runListeners");
      NotificationManager = /** @class */
      function() {
        function NotificationManager2(config) {
          this.listeners = [];
          var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;
          dynamicProto(NotificationManager2, this, function(_self) {
            _self[
              _DYN_ADD_NOTIFICATION_LIS1
              /* @min:%2eaddNotificationListener */
            ] = function(listener) {
              _self.listeners[
                _DYN_PUSH
                /* @min:%2epush */
              ](listener);
            };
            _self[
              _DYN_REMOVE_NOTIFICATION_2
              /* @min:%2eremoveNotificationListener */
            ] = function(listener) {
              var index = arrIndexOf(_self[
                _DYN_LISTENERS
                /* @min:%2elisteners */
              ], listener);
              while (index > -1) {
                _self.listeners[
                  _DYN_SPLICE
                  /* @min:%2esplice */
                ](index, 1);
                index = arrIndexOf(_self[
                  _DYN_LISTENERS
                  /* @min:%2elisteners */
                ], listener);
              }
            };
            _self[
              STR_EVENTS_SENT
              /* @min:%2eeventsSent */
            ] = function(events) {
              _runListeners(_self[
                _DYN_LISTENERS
                /* @min:%2elisteners */
              ], STR_EVENTS_SENT, true, function(listener) {
                listener[
                  STR_EVENTS_SENT
                  /* @min:%2eeventsSent */
                ](events);
              });
            };
            _self[
              STR_EVENTS_DISCARDED
              /* @min:%2eeventsDiscarded */
            ] = function(events, reason) {
              _runListeners(_self[
                _DYN_LISTENERS
                /* @min:%2elisteners */
              ], STR_EVENTS_DISCARDED, true, function(listener) {
                listener[
                  STR_EVENTS_DISCARDED
                  /* @min:%2eeventsDiscarded */
                ](events, reason);
              });
            };
            _self[
              STR_EVENTS_SEND_REQUEST
              /* @min:%2eeventsSendRequest */
            ] = function(sendReason, isAsync) {
              _runListeners(_self[
                _DYN_LISTENERS
                /* @min:%2elisteners */
              ], STR_EVENTS_SEND_REQUEST, isAsync, function(listener) {
                listener[
                  STR_EVENTS_SEND_REQUEST
                  /* @min:%2eeventsSendRequest */
                ](sendReason, isAsync);
              });
            };
            _self[
              STR_PERF_EVENT
              /* @min:%2eperfEvent */
            ] = function(perfEvent) {
              if (perfEvent) {
                if (perfEvtsSendAll || !perfEvent[
                  _DYN_IS_CHILD_EVT
                  /* @min:%2eisChildEvt */
                ]()) {
                  _runListeners(_self[
                    _DYN_LISTENERS
                    /* @min:%2elisteners */
                  ], STR_PERF_EVENT, false, function(listener) {
                    if (perfEvent[
                      _DYN_IS_ASYNC
                      /* @min:%2eisAsync */
                    ]) {
                      setTimeout(function() {
                        return listener[
                          STR_PERF_EVENT
                          /* @min:%2eperfEvent */
                        ](perfEvent);
                      }, 0);
                    } else {
                      listener[
                        STR_PERF_EVENT
                        /* @min:%2eperfEvent */
                      ](perfEvent);
                    }
                  });
                }
              }
            };
          });
        }
        __name(NotificationManager2, "NotificationManager");
        NotificationManager2.__ieDyn = 1;
        return NotificationManager2;
      }();
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js
  var AppInsightsCore;
  var init_AppInsightsCore = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK/AppInsightsCore.js"() {
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_DynamicConstants();
      init_BaseCore();
      init_DiagnosticLogger();
      init_HelperFuncs();
      init_InternalConstants();
      init_NotificationManager();
      init_PerfManager();
      AppInsightsCore = /** @class */
      function(_super) {
        __extendsFn(AppInsightsCore3, _super);
        function AppInsightsCore3() {
          var _this = _super.call(this) || this;
          dynamicProto(AppInsightsCore3, _this, function(_self, _base) {
            _self[
              _DYN_INITIALIZE
              /* @min:%2einitialize */
            ] = function(config, extensions7, logger4, notificationManager) {
              _base[
                _DYN_INITIALIZE
                /* @min:%2einitialize */
              ](config, extensions7, logger4 || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));
            };
            _self.track = function(telemetryItem) {
              doPerf(_self[
                STR_GET_PERF_MGR
                /* @min:%2egetPerfMgr */
              ](), function() {
                return "AppInsightsCore:track";
              }, function() {
                if (telemetryItem === null) {
                  _notifyInvalidEvent(telemetryItem);
                  throwError("Invalid telemetry item");
                }
                _validateTelemetryItem(telemetryItem);
                _base.track(telemetryItem);
              }, function() {
                return { item: telemetryItem };
              }, !telemetryItem.sync);
            };
            function _validateTelemetryItem(telemetryItem) {
              if (isNullOrUndefined(telemetryItem[
                _DYN_NAME
                /* @min:%2ename */
              ])) {
                _notifyInvalidEvent(telemetryItem);
                throwError("telemetry name required");
              }
            }
            __name(_validateTelemetryItem, "_validateTelemetryItem");
            function _notifyInvalidEvent(telemetryItem) {
              var manager = _self[
                _DYN_GET_NOTIFY_MGR
                /* @min:%2egetNotifyMgr */
              ]();
              if (manager) {
                manager[
                  STR_EVENTS_DISCARDED
                  /* @min:%2eeventsDiscarded */
                ](
                  [telemetryItem],
                  2
                  /* eEventsDiscardedReason.InvalidEvent */
                );
              }
            }
            __name(_notifyInvalidEvent, "_notifyInvalidEvent");
          });
          return _this;
        }
        __name(AppInsightsCore3, "AppInsightsCore");
        AppInsightsCore3.__ieDyn = 1;
        return AppInsightsCore3;
      }(BaseCore);
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js
  var _a2, FAILED, FAILED_MONITOR_AJAX, TRACK, START, STOP, EVENT, AUTH_CONTEXT, EXCEPTION, LOCAL, SESSION, STORAGE, BROWSER, CANNOT, BUFFER, INSTRUMENTATION_KEY, LoggingSeverity, _InternalMessageId;
  var init_LoggingEnums = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js"() {
      init_EnumHelperFuncs();
      FAILED = "Failed";
      FAILED_MONITOR_AJAX = FAILED + "MonitorAjax";
      TRACK = "Track";
      START = "Start";
      STOP = "Stop";
      EVENT = "Event";
      AUTH_CONTEXT = "AuthContext";
      EXCEPTION = "Exception";
      LOCAL = "Local";
      SESSION = "Session";
      STORAGE = "Storage";
      BROWSER = "Browser";
      CANNOT = "Cannot";
      BUFFER = "Buffer";
      INSTRUMENTATION_KEY = "InstrumentationKey";
      LoggingSeverity = createEnumStyle({
        CRITICAL: 1,
        WARNING: 2
        /* eLoggingSeverity.WARNING */
      });
      _InternalMessageId = createEnumStyle((_a2 = {}, // Non user actionable
      _a2[BROWSER + "DoesNotSupport" + LOCAL + STORAGE] = 0, _a2[BROWSER + CANNOT + "Read" + LOCAL + STORAGE] = 1, _a2[BROWSER + CANNOT + "Read" + SESSION + STORAGE] = 2, _a2[BROWSER + CANNOT + "Write" + LOCAL + STORAGE] = 3, _a2[BROWSER + CANNOT + "Write" + SESSION + STORAGE] = 4, _a2[BROWSER + FAILED + "RemovalFrom" + LOCAL + STORAGE] = 5, _a2[BROWSER + FAILED + "RemovalFrom" + SESSION + STORAGE] = 6, _a2[CANNOT + "SendEmptyTelemetry"] = 7, _a2.ClientPerformanceMathError = 8, _a2["ErrorParsingAI" + SESSION + "Cookie"] = 9, _a2.ErrorPVCalc = 10, _a2[EXCEPTION + "WhileLoggingError"] = 11, _a2[FAILED + "AddingTelemetryTo" + BUFFER] = 12, _a2[FAILED_MONITOR_AJAX + "Abort"] = 13, _a2[FAILED_MONITOR_AJAX + "Dur"] = 14, _a2[FAILED_MONITOR_AJAX + "Open"] = 15, _a2[FAILED_MONITOR_AJAX + "RSC"] = 16, _a2[FAILED_MONITOR_AJAX + "Send"] = 17, _a2[FAILED_MONITOR_AJAX + "GetCorrelationHeader"] = 18, _a2[FAILED + "ToAddHandlerForOnBeforeUnload"] = 19, _a2[FAILED + "ToSendQueuedTelemetry"] = 20, _a2[FAILED + "ToReportDataLoss"] = 21, _a2["Flush" + FAILED] = 22, _a2.MessageLimitPerPVExceeded = 23, _a2.MissingRequiredFieldSpecification = 24, _a2.NavigationTimingNotSupported = 25, _a2.OnError = 26, _a2[SESSION + "RenewalDateIsZero"] = 27, _a2.SenderNotInitialized = 28, _a2[START + TRACK + EVENT + FAILED] = 29, _a2[STOP + TRACK + EVENT + FAILED] = 30, _a2[START + TRACK + FAILED] = 31, _a2[STOP + TRACK + FAILED] = 32, _a2.TelemetrySampledAndNotSent = 33, _a2[TRACK + EVENT + FAILED] = 34, _a2[TRACK + EXCEPTION + FAILED] = 35, _a2[TRACK + "Metric" + FAILED] = 36, _a2[TRACK + "PV" + FAILED] = 37, _a2[TRACK + "PV" + FAILED + "Calc"] = 38, _a2[TRACK + "Trace" + FAILED] = 39, _a2["Transmission" + FAILED] = 40, _a2[FAILED + "ToSet" + STORAGE + BUFFER] = 41, _a2[FAILED + "ToRestore" + STORAGE + BUFFER] = 42, _a2.InvalidBackendResponse = 43, _a2[FAILED + "ToFixDepricatedValues"] = 44, _a2.InvalidDurationValue = 45, _a2.TelemetryEnvelopeInvalid = 46, _a2.CreateEnvelopeError = 47, // User actionable
      _a2[CANNOT + "SerializeObject"] = 48, _a2[CANNOT + "SerializeObjectNonSerializable"] = 49, _a2.CircularReferenceDetected = 50, _a2["Clear" + AUTH_CONTEXT + FAILED] = 51, _a2[EXCEPTION + "Truncated"] = 52, _a2.IllegalCharsInName = 53, _a2.ItemNotInArray = 54, _a2.MaxAjaxPerPVExceeded = 55, _a2.MessageTruncated = 56, _a2.NameTooLong = 57, _a2.SampleRateOutOfRange = 58, _a2["Set" + AUTH_CONTEXT + FAILED] = 59, _a2["Set" + AUTH_CONTEXT + FAILED + "AccountName"] = 60, _a2.StringValueTooLong = 61, _a2.StartCalledMoreThanOnce = 62, _a2.StopCalledWithoutStart = 63, _a2["TelemetryInitializer" + FAILED] = 64, _a2.TrackArgumentsNotSpecified = 65, _a2.UrlTooLong = 66, _a2[SESSION + STORAGE + BUFFER + "Full"] = 67, _a2[CANNOT + "AccessCookie"] = 68, _a2.IdTooLong = 69, _a2.InvalidEvent = 70, _a2[FAILED_MONITOR_AJAX + "SetRequestHeader"] = 71, _a2["Send" + BROWSER + "InfoOnUserInit"] = 72, _a2["Plugin" + EXCEPTION] = 73, _a2["Notification" + EXCEPTION] = 74, _a2.SnippetScriptLoadFailure = 99, _a2["Invalid" + INSTRUMENTATION_KEY] = 100, _a2[CANNOT + "ParseAiBlobValue"] = 101, _a2.InvalidContentBlob = 102, _a2[TRACK + "PageAction" + EVENT + FAILED] = 103, _a2[FAILED + "AddingCustomDefinedRequestContext"] = 104, _a2["InMemory" + STORAGE + BUFFER + "Full"] = 105, _a2[INSTRUMENTATION_KEY + "Deprecation"] = 106, _a2));
    }
  });

  // node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js
  var init_applicationinsights_core_js = __esm({
    "node_modules/@microsoft/applicationinsights-core-js/dist-esm/applicationinsights-core-js.js"() {
      init_IChannelControls();
      init_EventsDiscardedReason();
      init_AppInsightsCore();
      init_BaseCore();
      init_BaseTelemetryPlugin();
      init_RandomHelper();
      init_CoreUtils();
      init_HelperFuncs();
      init_EnumHelperFuncs();
      init_EventHelpers();
      init_EnvUtils();
      init_applicationinsights_shims();
      init_NotificationManager();
      init_PerfManager();
      init_DiagnosticLogger();
      init_ProcessTelemetryContext();
      init_LoggingEnums();
      init_CookieMgr();
      init_DataCacheHelper();
      init_UnloadHandlerContainer();
      init_W3cTraceParent();
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/Enums.js
  var ValueKind, EventLatency, EventPropertyType, EventPersistence, TraceLevel, _ExtendedInternalMessageId;
  var init_Enums = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/Enums.js"() {
      init_applicationinsights_shims();
      init_applicationinsights_core_js();
      ValueKind = createEnumStyle({
        NotSet: 0,
        Pii_DistinguishedName: 1,
        Pii_GenericData: 2,
        Pii_IPV4Address: 3,
        Pii_IPv6Address: 4,
        Pii_MailSubject: 5,
        Pii_PhoneNumber: 6,
        Pii_QueryString: 7,
        Pii_SipAddress: 8,
        Pii_SmtpAddress: 9,
        Pii_Identity: 10,
        Pii_Uri: 11,
        Pii_Fqdn: 12,
        Pii_IPV4AddressLegacy: 13,
        CustomerContent_GenericContent: 32
        /* eValueKind.CustomerContent_GenericContent */
      });
      EventLatency = createEnumStyle({
        /**
         * Normal latency.
         */
        Normal: 1,
        /**
         * Cost deferred latency. At the moment this latency is treated as Normal latency.
         */
        CostDeferred: 2,
        /**
         * Real time latency.
         */
        RealTime: 3,
        /**
         * Bypass normal batching/timing and send as soon as possible, this will still send asynchronously.
         * Added in v3.1.1
         */
        Immediate: 4
        /* EventLatencyValue.Immediate */
      });
      EventPropertyType = createEnumStyle({
        Unspecified: 0,
        String: 1,
        Int32: 2,
        UInt32: 3,
        Int64: 4,
        UInt64: 5,
        Double: 6,
        Bool: 7,
        Guid: 8,
        DateTime: 9
        /* eEventPropertyType.DateTime */
      });
      EventPersistence = createEnumStyle({
        /**
         * Normal persistence.
         */
        Normal: 1,
        /**
         * Critical persistence.
         */
        Critical: 2
        /* EventPersistenceValue.Critical */
      });
      TraceLevel = createEnumStyle({
        NONE: 0,
        ERROR: 1,
        WARNING: 2,
        INFORMATION: 3
        /* eTraceLevel.INFORMATION */
      });
      _ExtendedInternalMessageId = objFreeze(__assignFn(__assignFn({}, _InternalMessageId), createEnumStyle({
        AuthHandShakeError: 501,
        AuthRedirectFail: 502,
        BrowserCannotReadLocalStorage: 503,
        BrowserCannotWriteLocalStorage: 504,
        BrowserDoesNotSupportLocalStorage: 505,
        CannotParseBiBlobValue: 506,
        CannotParseDataAttribute: 507,
        CVPluginNotAvailable: 508,
        DroppedEvent: 509,
        ErrorParsingAISessionCookie: 510,
        ErrorProvidedChannels: 511,
        FailedToGetCookies: 512,
        FailedToInitializeCorrelationVector: 513,
        FailedToInitializeSDK: 514,
        InvalidContentBlob: 515,
        InvalidCorrelationValue: 516,
        SessionRenewalDateIsZero: 517,
        SendPostOnCompleteFailure: 518,
        PostResponseHandler: 519,
        SDKNotInitialized: 520
        /* _eExtendedInternalMessageId.SDKNotInitialized */
      })));
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/InternalConstants.js
  var STR_EMPTY2, STR_DEFAULT_ENDPOINT_URL, STR_PLUGIN_VERSION_STRING, STR_PLUGIN_VERSION_STRING_ARR, STR_VERSION, STR_PROPERTIES;
  var init_InternalConstants2 = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/InternalConstants.js"() {
      STR_EMPTY2 = "";
      STR_DEFAULT_ENDPOINT_URL = "https://browser.events.data.microsoft.com/OneCollector/1.0/";
      STR_PLUGIN_VERSION_STRING = "pluginVersionString";
      STR_PLUGIN_VERSION_STRING_ARR = STR_PLUGIN_VERSION_STRING + "Arr";
      STR_VERSION = "version";
      STR_PROPERTIES = "properties";
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/Utils.js
  function isValueAssigned(value) {
    return !(value === STR_EMPTY2 || isNullOrUndefined(value));
  }
  function getTenantId(apiKey) {
    if (apiKey) {
      var indexTenantId = apiKey.indexOf("-");
      if (indexTenantId > -1) {
        return apiKey.substring(0, indexTenantId);
      }
    }
    return STR_EMPTY2;
  }
  function isUint8ArrayAvailable() {
    if (uInt8ArraySupported === null) {
      uInt8ArraySupported = !isUndefined(Uint8Array) && !isSafariOrFirefox() && !isReactNative();
    }
    return uInt8ArraySupported;
  }
  function isLatency(value) {
    if (value && isNumber(value) && value >= 1 && value <= 4) {
      return true;
    }
    return false;
  }
  function sanitizeProperty(name, property, stringifyObjects) {
    if (!property && !isValueAssigned(property) || typeof name !== "string") {
      return null;
    }
    var propType = typeof property;
    if (propType === "string" || propType === "number" || propType === "boolean" || isArray(property)) {
      property = { value: property };
    } else if (propType === "object" && !ObjHasOwnProperty.call(property, "value")) {
      property = { value: stringifyObjects ? JSON.stringify(property) : property };
    } else if (isNullOrUndefined(property.value) || property.value === STR_EMPTY2 || !isString(property.value) && !isNumber(property.value) && !isBoolean(property.value) && !isArray(property.value)) {
      return null;
    }
    if (isArray(property.value) && !isArrayValid(property.value)) {
      return null;
    }
    if (!isNullOrUndefined(property.kind)) {
      if (isArray(property.value) || !isValueKind(property.kind)) {
        return null;
      }
      property.value = property.value.toString();
    }
    return property;
  }
  function getCommonSchemaMetaData(value, kind, type) {
    var encodedTypeValue = -1;
    if (!isUndefined(value)) {
      if (kind > 0) {
        if (kind === 32) {
          encodedTypeValue = 1 << 13;
        } else if (kind <= 13) {
          encodedTypeValue = kind << 5;
        }
      }
      if (isDataType(type)) {
        if (encodedTypeValue === -1) {
          encodedTypeValue = 0;
        }
        encodedTypeValue |= type;
      } else {
        var propType = _fieldTypeEventPropMap[getFieldValueType(value)] || -1;
        if (encodedTypeValue !== -1 && propType !== -1) {
          encodedTypeValue |= propType;
        } else if (propType === 6) {
          encodedTypeValue = propType;
        }
      }
    }
    return encodedTypeValue;
  }
  function disableCookies2() {
    safeGetCookieMgr(null).setEnabled(false);
  }
  function setCookie2(name, value, days) {
    if (areCookiesSupported(null)) {
      safeGetCookieMgr(null).set(name, value, days * 86400, null, "/");
    }
  }
  function deleteCookie2(name) {
    if (areCookiesSupported(null)) {
      safeGetCookieMgr(null).del(name);
    }
  }
  function getCookie2(name) {
    if (areCookiesSupported(null)) {
      return getCookieValue(safeGetCookieMgr(null), name);
    }
    return STR_EMPTY2;
  }
  function getCookieValue(cookieMgr, name, decode) {
    if (decode === void 0) {
      decode = true;
    }
    var cookieValue;
    if (cookieMgr) {
      cookieValue = cookieMgr.get(name);
      if (decode && cookieValue && decodeURIComponent) {
        cookieValue = decodeURIComponent(cookieValue);
      }
    }
    return cookieValue || STR_EMPTY2;
  }
  function createGuid(style) {
    if (style === void 0) {
      style = "D";
    }
    var theGuid = newGuid();
    if (style === "B") {
      theGuid = "{" + theGuid + "}";
    } else if (style === "P") {
      theGuid = "(" + theGuid + ")";
    } else if (style === "N") {
      theGuid = theGuid.replace(/-/g, STR_EMPTY2);
    }
    return theGuid;
  }
  function extend2(obj, obj2, obj3, obj4, obj5) {
    var extended = {};
    var deep = false;
    var i = 0;
    var length = arguments.length;
    var objProto = Object[strShimPrototype];
    var theArgs = arguments;
    if (objProto.toString.call(theArgs[0]) === "[object Boolean]") {
      deep = theArgs[0];
      i++;
    }
    for (; i < length; i++) {
      var obj = theArgs[i];
      objForEachKey(obj, function(prop, value) {
        if (deep && value && isObject2(value)) {
          if (isArray(value)) {
            extended[prop] = extended[prop] || [];
            arrForEach(value, function(arrayValue, arrayIndex) {
              if (arrayValue && isObject2(arrayValue)) {
                extended[prop][arrayIndex] = extend2(true, extended[prop][arrayIndex], arrayValue);
              } else {
                extended[prop][arrayIndex] = arrayValue;
              }
            });
          } else {
            extended[prop] = extend2(true, extended[prop], value);
          }
        } else {
          extended[prop] = value;
        }
      });
    }
    return extended;
  }
  function isValueKind(value) {
    if (value === 0 || (value > 0 && value <= 13 || value === 32)) {
      return true;
    }
    return false;
  }
  function isDataType(value) {
    if (value >= 0 && value <= 9) {
      return true;
    }
    return false;
  }
  function isSafariOrFirefox() {
    var nav = getNavigator();
    if (!isUndefined(nav) && nav.userAgent) {
      var ua2 = nav.userAgent.toLowerCase();
      if ((ua2.indexOf("safari") >= 0 || ua2.indexOf("firefox") >= 0) && ua2.indexOf("chrome") < 0) {
        return true;
      }
    }
    return false;
  }
  function isArrayValid(value) {
    return value.length > 0;
  }
  function setProcessTelemetryTimings(event, identifier) {
    var evt = event;
    evt.timings = evt.timings || {};
    evt.timings.processTelemetryStart = evt.timings.processTelemetryStart || {};
    evt.timings.processTelemetryStart[identifier] = getTime();
  }
  function getFieldValueType(value) {
    var theType = 0;
    if (value !== null && value !== void 0) {
      var objType = typeof value;
      if (objType === "string") {
        theType = 1;
      } else if (objType === "number") {
        theType = 2;
      } else if (objType === "boolean") {
        theType = 3;
      } else if (objType === strShimObject) {
        theType = 4;
        if (isArray(value)) {
          theType = 4096;
          if (value.length > 0) {
            theType |= getFieldValueType(value[0]);
          }
        } else if (ObjHasOwnProperty.call(value, "value")) {
          theType = 8192 | getFieldValueType(value.value);
        }
      }
    }
    return theType;
  }
  function isChromium() {
    return !!getGlobalInst("chrome");
  }
  function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {
    if (disabled === void 0) {
      disabled = false;
    }
    if (isSync === void 0) {
      isSync = false;
    }
    function _wrapSetXhrProp(xhr2, prop, value) {
      try {
        xhr2[prop] = value;
      } catch (e) {
      }
    }
    __name(_wrapSetXhrProp, "_wrapSetXhrProp");
    var xhr = new XMLHttpRequest();
    if (disabled) {
      _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);
    }
    if (withCredentials) {
      _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
    }
    xhr.open(method, urlString, !isSync);
    if (withCredentials) {
      _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
    }
    if (!isSync && timeout) {
      _wrapSetXhrProp(xhr, strTimeout, timeout);
    }
    return xhr;
  }
  var _a3, Version, FullVersionString, strDisabledPropertyName, strWithCredentials, strTimeout, _fieldTypeEventPropMap, uInt8ArraySupported, isDocumentObjectAvailable, isWindowObjectAvailable, getTime, Utils, CoreUtils2;
  var init_Utils = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/Utils.js"() {
      init_applicationinsights_core_js();
      init_applicationinsights_shims();
      init_InternalConstants2();
      Version = "3.2.8";
      FullVersionString = "1DS-Web-JS-" + Version;
      strDisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
      strWithCredentials = "withCredentials";
      strTimeout = "timeout";
      _fieldTypeEventPropMap = (_a3 = {}, _a3[
        0
        /* FieldValueSanitizerType.NotSet */
      ] = 0, _a3[
        2
        /* FieldValueSanitizerType.Number */
      ] = 6, _a3[
        1
        /* FieldValueSanitizerType.String */
      ] = 1, _a3[
        3
        /* FieldValueSanitizerType.Boolean */
      ] = 7, _a3[
        4096 | 2
        /* FieldValueSanitizerType.Number */
      ] = 6, _a3[
        4096 | 1
        /* FieldValueSanitizerType.String */
      ] = 1, _a3[
        4096 | 3
        /* FieldValueSanitizerType.Boolean */
      ] = 7, _a3);
      uInt8ArraySupported = null;
      isDocumentObjectAvailable = Boolean(getDocument());
      isWindowObjectAvailable = Boolean(getWindow());
      __name(isValueAssigned, "isValueAssigned");
      __name(getTenantId, "getTenantId");
      __name(isUint8ArrayAvailable, "isUint8ArrayAvailable");
      __name(isLatency, "isLatency");
      __name(sanitizeProperty, "sanitizeProperty");
      __name(getCommonSchemaMetaData, "getCommonSchemaMetaData");
      __name(disableCookies2, "disableCookies");
      __name(setCookie2, "setCookie");
      __name(deleteCookie2, "deleteCookie");
      __name(getCookie2, "getCookie");
      __name(getCookieValue, "getCookieValue");
      __name(createGuid, "createGuid");
      __name(extend2, "extend");
      getTime = perfNow;
      __name(isValueKind, "isValueKind");
      __name(isDataType, "isDataType");
      __name(isSafariOrFirefox, "isSafariOrFirefox");
      __name(isArrayValid, "isArrayValid");
      __name(setProcessTelemetryTimings, "setProcessTelemetryTimings");
      __name(getFieldValueType, "getFieldValueType");
      Utils = {
        Version,
        FullVersionString,
        strUndefined: strShimUndefined,
        strObject: strShimObject,
        Undefined: strShimUndefined,
        arrForEach,
        arrIndexOf,
        arrMap,
        arrReduce,
        objKeys,
        toISOString,
        isReactNative,
        isString,
        isNumber,
        isBoolean,
        isFunction,
        isArray,
        isObject: isObject2,
        strTrim,
        isDocumentObjectAvailable,
        isWindowObjectAvailable,
        isValueAssigned,
        getTenantId,
        isBeaconsSupported,
        isUint8ArrayAvailable,
        isLatency,
        sanitizeProperty,
        getISOString: toISOString,
        useXDomainRequest,
        getCommonSchemaMetaData,
        cookieAvailable: areCookiesSupported,
        disallowsSameSiteNone: uaDisallowsSameSiteNone,
        setCookie: setCookie2,
        deleteCookie: deleteCookie2,
        getCookie: getCookie2,
        createGuid,
        extend: extend2,
        getTime,
        isValueKind,
        isArrayValid,
        objDefineAccessors,
        addPageUnloadEventListener,
        setProcessTelemetryTimings,
        addEventHandler,
        getFieldValueType,
        strEndsWith,
        objForEachKey
      };
      CoreUtils2 = {
        _canUseCookies: void 0,
        isTypeof,
        isUndefined,
        isNullOrUndefined,
        hasOwnProperty,
        isFunction,
        isObject: isObject2,
        isDate,
        isArray,
        isError: isError2,
        isString,
        isNumber,
        isBoolean,
        toISOString,
        arrForEach,
        arrIndexOf,
        arrMap,
        arrReduce,
        strTrim,
        objCreate: objCreateFn,
        objKeys,
        objDefineAccessors,
        addEventHandler,
        dateNow,
        isIE,
        disableCookies: disableCookies2,
        newGuid,
        perfNow,
        newId,
        randomValue,
        random32,
        mwcRandomSeed,
        mwcRandom32,
        generateW3CId
      };
      __name(isChromium, "isChromium");
      __name(openXhr, "openXhr");
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/AppInsightsCore.js
  var AppInsightsCore2, AppInsightsCore_default;
  var init_AppInsightsCore2 = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/AppInsightsCore.js"() {
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_applicationinsights_core_js();
      init_InternalConstants2();
      init_Utils();
      AppInsightsCore2 = /** @class */
      function(_super) {
        __extendsFn(AppInsightsCore3, _super);
        function AppInsightsCore3() {
          var _this = _super.call(this) || this;
          _this.pluginVersionStringArr = [];
          dynamicProto(AppInsightsCore3, _this, function(_self, _base) {
            if (!_self.logger || !_self.logger.queue) {
              _self.logger = new DiagnosticLogger({
                loggingLevelConsole: 1
                /* eLoggingSeverity.CRITICAL */
              });
            }
            _self.initialize = function(config, extensions7, logger4, notificationManager) {
              doPerf(_self, function() {
                return "AppInsightsCore.initialize";
              }, function() {
                var _pluginVersionStringArr = _self.pluginVersionStringArr;
                if (config) {
                  if (!config.endpointUrl) {
                    config.endpointUrl = STR_DEFAULT_ENDPOINT_URL;
                  }
                  var propertyStorageOverride = config.propertyStorageOverride;
                  if (propertyStorageOverride && (!propertyStorageOverride.getProperty || !propertyStorageOverride.setProperty)) {
                    throwError("Invalid property storage override passed.");
                  }
                  if (config.channels) {
                    arrForEach(config.channels, function(channels) {
                      if (channels) {
                        arrForEach(channels, function(channel) {
                          if (channel.identifier && channel.version) {
                            var ver = channel.identifier + "=" + channel.version;
                            _pluginVersionStringArr.push(ver);
                          }
                        });
                      }
                    });
                  }
                }
                _self.getWParam = function() {
                  return typeof document !== "undefined" || !!config.enableWParam ? 0 : -1;
                };
                if (extensions7) {
                  arrForEach(extensions7, function(ext2) {
                    if (ext2 && ext2.identifier && ext2.version) {
                      var ver = ext2.identifier + "=" + ext2.version;
                      _pluginVersionStringArr.push(ver);
                    }
                  });
                }
                _self.pluginVersionString = _pluginVersionStringArr.join(";");
                _self.pluginVersionStringArr = _pluginVersionStringArr;
                try {
                  _base.initialize(config, extensions7, logger4, notificationManager);
                  _self.pollInternalLogs("InternalLog");
                } catch (e) {
                  var logger_1 = _self.logger;
                  var message = dumpObj(e);
                  if (message.indexOf("channels") !== -1) {
                    message += "\n - Channels must be provided through config.channels only!";
                  }
                  _throwInternal(logger_1, 1, 514, "SDK Initialization Failed - no telemetry will be sent: " + message);
                }
              }, function() {
                return { config, extensions: extensions7, logger: logger4, notificationManager };
              });
            };
            _self.track = function(item) {
              doPerf(_self, function() {
                return "AppInsightsCore.track";
              }, function() {
                var telemetryItem = item;
                if (telemetryItem) {
                  telemetryItem.timings = telemetryItem.timings || {};
                  telemetryItem.timings.trackStart = getTime();
                  if (!isLatency(telemetryItem.latency)) {
                    telemetryItem.latency = 1;
                  }
                  var itemExt = telemetryItem.ext = telemetryItem.ext || {};
                  itemExt.sdk = itemExt.sdk || {};
                  itemExt.sdk.ver = FullVersionString;
                  var baseData = telemetryItem.baseData = telemetryItem.baseData || {};
                  baseData[STR_PROPERTIES] = baseData[STR_PROPERTIES] || {};
                  var itemProperties = baseData[STR_PROPERTIES];
                  itemProperties[STR_VERSION] = itemProperties[STR_VERSION] || _self.pluginVersionString || STR_EMPTY2;
                }
                _base.track(telemetryItem);
              }, function() {
                return { item };
              }, !item.sync);
            };
          });
          return _this;
        }
        __name(AppInsightsCore3, "AppInsightsCore");
        AppInsightsCore3.__ieDyn = 1;
        return AppInsightsCore3;
      }(AppInsightsCore);
      AppInsightsCore_default = AppInsightsCore2;
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/BaseCore.js
  var BaseCore2, BaseCore_default;
  var init_BaseCore2 = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/BaseCore.js"() {
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_applicationinsights_core_js();
      init_InternalConstants2();
      init_Utils();
      BaseCore2 = /** @class */
      function(_super) {
        __extendsFn(BaseCore3, _super);
        function BaseCore3() {
          var _this = _super.call(this) || this;
          dynamicProto(BaseCore3, _this, function(_self, _base) {
            _self.initialize = function(config, extensions7, logger4, notificationManager) {
              if (config && !config.endpointUrl) {
                config.endpointUrl = STR_DEFAULT_ENDPOINT_URL;
              }
              _self.getWParam = function() {
                return isDocumentObjectAvailable || !!config.enableWParam ? 0 : -1;
              };
              try {
                _base.initialize(config, extensions7, logger4, notificationManager);
              } catch (e) {
                _throwInternal(_self.logger, 1, 514, "Initialization Failed: " + dumpObj(e) + "\n - Note: Channels must be provided through config.channels only");
              }
            };
            _self.track = function(item) {
              var telemetryItem = item;
              if (telemetryItem) {
                var ext2 = telemetryItem.ext = telemetryItem.ext || {};
                ext2.sdk = ext2.sdk || {};
                ext2.sdk.ver = FullVersionString;
              }
              _base.track(telemetryItem);
            };
          });
          return _this;
        }
        __name(BaseCore3, "BaseCore");
        BaseCore3.__ieDyn = 1;
        return BaseCore3;
      }(BaseCore);
      BaseCore_default = BaseCore2;
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromise.js
  function _createPromiseAllOnResolvedFunction(values, index, resolvedCallback) {
    return function(value) {
      values[index] = value;
      resolvedCallback();
    };
  }
  var _isFunction, ESPromise, ESPromise_default;
  var init_ESPromise = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromise.js"() {
      init_dynamicproto_js();
      init_applicationinsights_core_js();
      _isFunction = isFunction;
      __name(_createPromiseAllOnResolvedFunction, "_createPromiseAllOnResolvedFunction");
      ESPromise = /** @class */
      function() {
        function ESPromise2(resolverFunc) {
          var _state = 0;
          var _settledValue = null;
          var _queue = [];
          dynamicProto(ESPromise2, this, function(_this) {
            _this.then = function(onResolved, onRejected) {
              return new ESPromise2(function(resolve, reject) {
                _enqueue(onResolved, onRejected, resolve, reject);
              });
            };
            _this["catch"] = function(onRejected) {
              return _this.then(null, onRejected);
            };
          });
          function _enqueue(onResolved, onRejected, resolve, reject) {
            _queue.push(function() {
              var value;
              try {
                if (_state === 1) {
                  value = _isFunction(onResolved) ? onResolved(_settledValue) : _settledValue;
                } else {
                  value = _isFunction(onRejected) ? onRejected(_settledValue) : _settledValue;
                }
                if (value instanceof ESPromise2) {
                  value.then(resolve, reject);
                } else if (_state === 2 && !_isFunction(onRejected)) {
                  reject(value);
                } else {
                  resolve(value);
                }
              } catch (error) {
                reject(error);
                return;
              }
            });
            if (_state !== 0) {
              _processQueue();
            }
          }
          __name(_enqueue, "_enqueue");
          function _processQueue() {
            if (_queue.length > 0) {
              var pending_1 = _queue.slice();
              _queue = [];
              setTimeout(function() {
                for (var i = 0, len = pending_1.length; i < len; ++i) {
                  try {
                    pending_1[i]();
                  } catch (e) {
                  }
                }
              }, 0);
            }
          }
          __name(_processQueue, "_processQueue");
          function _resolve(value) {
            if (_state === 0) {
              _settledValue = value;
              _state = 1;
              _processQueue();
            }
          }
          __name(_resolve, "_resolve");
          function _reject(reason) {
            if (_state === 0) {
              _settledValue = reason;
              _state = 2;
              _processQueue();
            }
          }
          __name(_reject, "_reject");
          (/* @__PURE__ */ __name(function _initialize() {
            if (!_isFunction(resolverFunc)) {
              throw new TypeError("ESPromise: resolvedFunc argument is not a Function");
            }
            try {
              resolverFunc(_resolve, _reject);
            } catch (error) {
              _reject(error);
            }
          }, "_initialize"))();
        }
        __name(ESPromise2, "ESPromise");
        ESPromise2.resolve = function(value) {
          if (value instanceof ESPromise2) {
            return value;
          } else if (value && _isFunction(value.then)) {
            return new ESPromise2(function(resolve, reject) {
              try {
                value.then(resolve, reject);
              } catch (error) {
                reject(error);
              }
            });
          }
          return new ESPromise2(function(resolve) {
            resolve(value);
          });
        };
        ESPromise2.reject = function(reason) {
          return new ESPromise2(function(resolve, reject) {
            reject(reason);
          });
        };
        ESPromise2.all = function(iterable) {
          if (!iterable || !iterable.length) {
            return;
          }
          return new ESPromise2(function(resolve, reject) {
            try {
              var values_1 = [];
              var pending_2 = 0;
              for (var lp = 0; lp < iterable.length; lp++) {
                var item = iterable[lp];
                if (item && _isFunction(item.then)) {
                  pending_2++;
                  item.then(_createPromiseAllOnResolvedFunction(values_1, lp, function() {
                    if (--pending_2 === 0) {
                      resolve(values_1);
                    }
                  }), reject);
                } else {
                  values_1[lp] = item;
                }
              }
              if (pending_2 === 0) {
                setTimeout(function() {
                  resolve(values_1);
                }, 0);
              }
            } catch (error) {
              reject(error);
            }
          });
        };
        ESPromise2.race = function(iterable) {
          return new ESPromise2(function(resolve, reject) {
            if (!iterable || !iterable.length) {
              return;
            }
            try {
              var _loop_1 = /* @__PURE__ */ __name(function(lp2) {
                var item = iterable[lp2];
                if (item && _isFunction(item.then)) {
                  item.then(resolve, reject);
                } else {
                  setTimeout(function() {
                    resolve(item);
                  }, 0);
                }
              }, "_loop_1");
              for (var lp = 0; lp < iterable.length; lp++) {
                _loop_1(lp);
              }
            } catch (error) {
              reject(error);
            }
          });
        };
        return ESPromise2;
      }();
      ESPromise_default = ESPromise;
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromiseScheduler.js
  function _getTime() {
    return (/* @__PURE__ */ new Date()).getTime();
  }
  var LazyRejectPeriod, _schedulerId, _running, _waiting, _timedOut, ESPromiseScheduler, ESPromiseScheduler_default;
  var init_ESPromiseScheduler = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/ESPromiseScheduler.js"() {
      init_dynamicproto_js();
      init_ESPromise();
      init_applicationinsights_core_js();
      LazyRejectPeriod = 6e5;
      _schedulerId = 0;
      _running = [];
      _waiting = [];
      _timedOut = [];
      __name(_getTime, "_getTime");
      ESPromiseScheduler = /** @class */
      function() {
        function ESPromiseScheduler2(name, diagLog) {
          var _promiseId = 0;
          var _scheduledName = (name || "<unnamed>") + "." + _schedulerId;
          _schedulerId++;
          dynamicProto(ESPromiseScheduler2, this, function(_this) {
            var _lastEvent = null;
            var _eventCount = 0;
            _this.scheduleEvent = function(startEventAction, eventName, timeout) {
              var uniqueId = _scheduledName + "." + _eventCount;
              _eventCount++;
              if (eventName) {
                uniqueId += "-(" + eventName + ")";
              }
              var uniqueEventId = uniqueId + "{" + _promiseId + "}";
              _promiseId++;
              var newScheduledEvent = {
                evt: null,
                tm: _getTime(),
                id: uniqueEventId,
                isRunning: false,
                isAborted: false
              };
              if (!_lastEvent) {
                newScheduledEvent.evt = _startWaitingEvent(newScheduledEvent);
              } else {
                newScheduledEvent.evt = _waitForPreviousEvent(newScheduledEvent, _lastEvent);
              }
              _lastEvent = newScheduledEvent;
              _lastEvent.evt._schId = uniqueEventId;
              return newScheduledEvent.evt;
              function _abortAndRemoveOldEvents(eventQueue) {
                var now = _getTime();
                var expired = now - LazyRejectPeriod;
                var len = eventQueue.length;
                var lp = 0;
                while (lp < len) {
                  var evt = eventQueue[lp];
                  if (evt && evt.tm < expired) {
                    var message = null;
                    if (evt.abort) {
                      message = "Aborting [" + evt.id + "] due to Excessive runtime (" + (now - evt.tm) + " ms)";
                      evt.abort(message);
                    } else {
                      message = "Removing [" + evt.id + "] due to Excessive runtime (" + (now - evt.tm) + " ms)";
                    }
                    _warnLog(message);
                    eventQueue.splice(lp, 1);
                    len--;
                  } else {
                    lp++;
                  }
                }
              }
              __name(_abortAndRemoveOldEvents, "_abortAndRemoveOldEvents");
              function _cleanup(eventId, completed) {
                var toQueue = false;
                var removed = _removeQueuedEvent(_running, eventId);
                if (!removed) {
                  removed = _removeQueuedEvent(_timedOut, eventId);
                  toQueue = true;
                }
                if (removed) {
                  if (removed.to) {
                    clearTimeout(removed.to);
                    removed.to = null;
                  }
                  var tm = _getTime() - removed.tm;
                  if (completed) {
                    if (!toQueue) {
                      _debugLog("Promise [" + eventId + "] Complete -- " + tm + " ms");
                    } else {
                      _warnLog("Timed out event [" + eventId + "] finally complete -- " + tm + " ms");
                    }
                  } else {
                    _timedOut.push(removed);
                    _warnLog("Event [" + eventId + "] Timed out and removed -- " + tm + " ms");
                  }
                } else {
                  _debugLog("Failed to remove [" + eventId + "] from running queue");
                }
                if (_lastEvent && _lastEvent.id === eventId) {
                  _lastEvent = null;
                }
                _abortAndRemoveOldEvents(_running);
                _abortAndRemoveOldEvents(_waiting);
                _abortAndRemoveOldEvents(_timedOut);
              }
              __name(_cleanup, "_cleanup");
              function _removeScheduledEvent(eventId, callback) {
                return function(value) {
                  _cleanup(eventId, true);
                  callback && callback(value);
                  return value;
                };
              }
              __name(_removeScheduledEvent, "_removeScheduledEvent");
              function _waitForFinalResult(eventId, startResult, schEventResolve, schEventReject) {
                startResult.then(function(value) {
                  if (value instanceof ESPromise_default) {
                    _debugLog("Event [" + eventId + "] returned a promise -- waiting");
                    _waitForFinalResult(eventId, value, schEventResolve, schEventReject);
                    return value;
                  } else {
                    return _removeScheduledEvent(eventId, schEventResolve)(value);
                  }
                }, _removeScheduledEvent(eventId, schEventReject));
              }
              __name(_waitForFinalResult, "_waitForFinalResult");
              function _createScheduledEvent(eventDetails, startEvent) {
                var eventId = eventDetails.id;
                return new ESPromise_default(function(schEventResolve, schEventReject) {
                  _debugLog("Event [" + eventId + "] Starting -- waited for " + (eventDetails.wTm || "--") + " ms");
                  eventDetails.isRunning = true;
                  eventDetails.abort = function(message) {
                    eventDetails.abort = null;
                    eventDetails.isAborted = true;
                    _cleanup(eventId, false);
                    schEventReject(new Error(message));
                  };
                  var startResult = startEvent(eventId);
                  if (startResult instanceof ESPromise_default) {
                    if (timeout) {
                      eventDetails.to = setTimeout(function() {
                        _cleanup(eventId, false);
                        schEventReject(new Error("Timed out after [" + timeout + "] ms"));
                      }, timeout);
                    }
                    _waitForFinalResult(eventId, startResult, function(theResult) {
                      _debugLog("Event [" + eventId + "] Resolving after " + (_getTime() - eventDetails.tm) + " ms");
                      schEventResolve(theResult);
                    }, schEventReject);
                  } else {
                    _debugLog("Promise [" + eventId + "] Auto completed as the start action did not return a promise");
                    schEventResolve();
                  }
                });
              }
              __name(_createScheduledEvent, "_createScheduledEvent");
              function _startWaitingEvent(eventDetails) {
                var now = _getTime();
                eventDetails.wTm = now - eventDetails.tm;
                eventDetails.tm = now;
                if (eventDetails.isAborted) {
                  return ESPromise_default.reject(new Error("[" + uniqueId + "] was aborted"));
                }
                _running.push(eventDetails);
                return _createScheduledEvent(eventDetails, startEventAction);
              }
              __name(_startWaitingEvent, "_startWaitingEvent");
              function _waitForPreviousEvent(eventDetails, waitForEvent) {
                var waitEvent = new ESPromise_default(function(waitResolve, waitReject) {
                  var runTime = _getTime() - waitForEvent.tm;
                  var prevId = waitForEvent.id;
                  _debugLog("[" + uniqueId + "] is waiting for [" + prevId + ":" + runTime + " ms] to complete before starting -- [" + _waiting.length + "] waiting and [" + _running.length + "] running");
                  eventDetails.abort = function(message) {
                    eventDetails.abort = null;
                    _removeQueuedEvent(_waiting, uniqueId);
                    eventDetails.isAborted = true;
                    waitReject(new Error(message));
                  };
                  waitForEvent.evt.then(function(value) {
                    _removeQueuedEvent(_waiting, uniqueId);
                    _startWaitingEvent(eventDetails).then(waitResolve, waitReject);
                  }, function(reason) {
                    _removeQueuedEvent(_waiting, uniqueId);
                    _startWaitingEvent(eventDetails).then(waitResolve, waitReject);
                  });
                });
                _waiting.push(eventDetails);
                return waitEvent;
              }
              __name(_waitForPreviousEvent, "_waitForPreviousEvent");
            };
            function _removeQueuedEvent(queue2, eventId) {
              for (var lp = 0; lp < queue2.length; lp++) {
                if (queue2[lp].id === eventId) {
                  return queue2.splice(lp, 1)[0];
                }
              }
              return null;
            }
            __name(_removeQueuedEvent, "_removeQueuedEvent");
          });
          function _debugLog(message) {
            var global2 = getGlobal();
            if (global2 && global2["QUnit"]) {
              console && console.log("ESPromiseScheduler[" + _scheduledName + "] " + message);
            }
          }
          __name(_debugLog, "_debugLog");
          function _warnLog(message) {
            _warnToConsole(diagLog, "ESPromiseScheduler[" + _scheduledName + "] " + message);
          }
          __name(_warnLog, "_warnLog");
        }
        __name(ESPromiseScheduler2, "ESPromiseScheduler");
        ESPromiseScheduler2.incomplete = function() {
          return _running;
        };
        ESPromiseScheduler2.waitingToStart = function() {
          return _waiting;
        };
        return ESPromiseScheduler2;
      }();
      ESPromiseScheduler_default = ESPromiseScheduler;
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/ValueSanitizer.js
  var ValueSanitizer;
  var init_ValueSanitizer = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/ValueSanitizer.js"() {
      init_applicationinsights_core_js();
      init_InternalConstants2();
      init_Utils();
      ValueSanitizer = /** @class */
      function() {
        function ValueSanitizer2(fieldSanitizerProvider) {
          var _self = this;
          var _sanitizerMap = {};
          var _sanitizers = [];
          var _fieldSanitizers = [];
          if (fieldSanitizerProvider) {
            _fieldSanitizers.push(fieldSanitizerProvider);
          }
          function _getFieldSanitizer(path, name) {
            var result;
            var fieldLookup = _sanitizerMap[path];
            if (fieldLookup) {
              result = fieldLookup[name];
            }
            if (!result && result !== null) {
              if (isString(path) && isString(name)) {
                if (_fieldSanitizers.length > 0) {
                  for (var lp = 0; lp < _fieldSanitizers.length; lp++) {
                    if (_fieldSanitizers[lp].handleField(path, name)) {
                      result = {
                        canHandle: true,
                        fieldHandler: _fieldSanitizers[lp]
                      };
                      break;
                    }
                  }
                } else if (_sanitizers.length === 0) {
                  result = {
                    canHandle: true
                  };
                }
              }
              if (!result && result !== null) {
                result = null;
                for (var lp = 0; lp < _sanitizers.length; lp++) {
                  if (_sanitizers[lp].handleField(path, name)) {
                    result = {
                      canHandle: true,
                      handler: _sanitizers[lp],
                      fieldHandler: null
                    };
                    break;
                  }
                }
              }
              if (!fieldLookup) {
                fieldLookup = _sanitizerMap[path] = {};
              }
              fieldLookup[name] = result;
            }
            return result;
          }
          __name(_getFieldSanitizer, "_getFieldSanitizer");
          _self.addSanitizer = function(newSanitizer) {
            if (newSanitizer) {
              _sanitizers.push(newSanitizer);
              _sanitizerMap = {};
            }
          };
          _self.addFieldSanitizer = function(fieldSanitizer) {
            if (fieldSanitizer) {
              _fieldSanitizers.push(fieldSanitizer);
              _sanitizerMap = {};
            }
          };
          _self.handleField = function(path, name) {
            var mapValue = _getFieldSanitizer(path, name);
            return mapValue ? mapValue.canHandle : false;
          };
          _self.value = function(path, name, value, stringifyObjects) {
            var mapValue = _getFieldSanitizer(path, name);
            if (mapValue && mapValue.canHandle) {
              if (!mapValue || !mapValue.canHandle) {
                return null;
              }
              if (mapValue.handler) {
                return mapValue.handler.value(path, name, value, stringifyObjects);
              }
              if (!isString(name) || isNullOrUndefined(value) || value === STR_EMPTY2) {
                return null;
              }
              var property = null;
              var fieldType = getFieldValueType(value);
              if ((fieldType & 8192) === 8192) {
                var subType = fieldType & ~8192;
                property = value;
                if (!isValueAssigned(property.value) || subType !== 1 && subType !== 2 && subType !== 3 && (subType & 4096) !== 4096) {
                  return null;
                }
              } else if (fieldType === 1 || fieldType === 2 || fieldType === 3 || (fieldType & 4096) === 4096) {
                property = _convertToProperty(path, name, value);
              } else if (fieldType === 4) {
                property = _convertToProperty(path, name, !!stringifyObjects ? JSON.stringify(value) : value);
              }
              if (property) {
                return _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects);
              }
            }
            return null;
          };
          _self.property = function(path, name, property, stringifyObjects) {
            var mapValue = _getFieldSanitizer(path, name);
            if (!mapValue || !mapValue.canHandle) {
              return null;
            }
            if (!isString(name) || isNullOrUndefined(property) || !isValueAssigned(property.value)) {
              return null;
            }
            var fieldType = getFieldValueType(property.value);
            if (fieldType === 0) {
              return null;
            }
            return _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects);
          };
          function _handleProperty(mapValue, path, name, fieldType, property, stringifyObjects) {
            if (mapValue.handler) {
              return mapValue.handler.property(path, name, property, stringifyObjects);
            }
            if (!isNullOrUndefined(property.kind)) {
              if ((fieldType & 4096) === 4096 || !isValueKind(property.kind)) {
                return null;
              }
              property.value = property.value.toString();
            }
            return _callFieldSanitizer(mapValue.fieldHandler, path, name, fieldType, property);
          }
          __name(_handleProperty, "_handleProperty");
          function _convertToProperty(path, name, value) {
            if (isValueAssigned(value)) {
              return { value };
            }
            return null;
          }
          __name(_convertToProperty, "_convertToProperty");
          function _callFieldSanitizer(fieldProvider, path, name, theType, property) {
            if (property && fieldProvider) {
              var sanitizer = fieldProvider.getSanitizer(path, name, theType, property.kind, property.propertyType);
              if (sanitizer) {
                if (theType === 4) {
                  var newValue_1 = {};
                  var propValue = property.value;
                  objForEachKey(propValue, function(propKey, theValue) {
                    var newPath = path + "." + name;
                    if (isValueAssigned(theValue)) {
                      var newProp = _convertToProperty(newPath, propKey, theValue);
                      newProp = _callFieldSanitizer(fieldProvider, newPath, propKey, getFieldValueType(theValue), newProp);
                      if (newProp) {
                        newValue_1[propKey] = newProp.value;
                      }
                    }
                  });
                  property.value = newValue_1;
                } else {
                  var details = {
                    path,
                    name,
                    type: theType,
                    prop: property,
                    sanitizer: _self
                  };
                  property = sanitizer.call(_self, details);
                }
              }
            }
            return property;
          }
          __name(_callFieldSanitizer, "_callFieldSanitizer");
        }
        __name(ValueSanitizer2, "ValueSanitizer");
        ValueSanitizer2.getFieldType = getFieldValueType;
        return ValueSanitizer2;
      }();
    }
  });

  // node_modules/@microsoft/1ds-core-js/dist-esm/src/Index.js
  var Index_exports = {};
  __export(Index_exports, {
    AppInsightsCore: () => AppInsightsCore_default,
    BaseCore: () => BaseCore_default,
    BaseTelemetryPlugin: () => BaseTelemetryPlugin,
    CoreUtils: () => CoreUtils2,
    DiagnosticLogger: () => DiagnosticLogger,
    ESPromise: () => ESPromise_default,
    ESPromiseScheduler: () => ESPromiseScheduler_default,
    EventHelper: () => EventHelper,
    EventLatency: () => EventLatency,
    EventPersistence: () => EventPersistence,
    EventPropertyType: () => EventPropertyType,
    EventsDiscardedReason: () => EventsDiscardedReason,
    FullVersionString: () => FullVersionString,
    InternalAppInsightsCore: () => AppInsightsCore,
    InternalBaseCore: () => BaseCore,
    LoggingSeverity: () => LoggingSeverity,
    MinChannelPriorty: () => MinChannelPriorty,
    NotificationManager: () => NotificationManager,
    PerfEvent: () => PerfEvent,
    PerfManager: () => PerfManager,
    ProcessTelemetryContext: () => ProcessTelemetryContext,
    TraceLevel: () => TraceLevel,
    Undefined: () => strShimUndefined,
    Utils: () => Utils,
    ValueKind: () => ValueKind,
    ValueSanitizer: () => ValueSanitizer,
    Version: () => Version,
    _ExtendedInternalMessageId: () => _ExtendedInternalMessageId,
    _InternalLogMessage: () => _InternalLogMessage,
    _InternalMessageId: () => _InternalMessageId,
    __getRegisteredEvents: () => __getRegisteredEvents,
    _logInternalMessage: () => _logInternalMessage,
    _throwInternal: () => _throwInternal,
    _warnToConsole: () => _warnToConsole,
    addEventHandler: () => addEventHandler,
    addEventListeners: () => addEventListeners,
    addPageHideEventListener: () => addPageHideEventListener,
    addPageShowEventListener: () => addPageShowEventListener,
    addPageUnloadEventListener: () => addPageUnloadEventListener,
    areCookiesSupported: () => areCookiesSupported,
    arrForEach: () => arrForEach,
    arrIndexOf: () => arrIndexOf,
    arrMap: () => arrMap,
    arrReduce: () => arrReduce,
    attachEvent: () => attachEvent,
    cookieAvailable: () => areCookiesSupported,
    createCookieMgr: () => createCookieMgr,
    createEnumStyle: () => createEnumStyle,
    createGuid: () => createGuid,
    createProcessTelemetryContext: () => createProcessTelemetryContext,
    createTraceParent: () => createTraceParent,
    createUniqueNamespace: () => createUniqueNamespace,
    createUnloadHandlerContainer: () => createUnloadHandlerContainer,
    dateNow: () => dateNow,
    deleteCookie: () => deleteCookie2,
    detachEvent: () => detachEvent,
    disableCookies: () => disableCookies2,
    disallowsSameSiteNone: () => uaDisallowsSameSiteNone,
    doPerf: () => doPerf,
    dumpObj: () => dumpObj,
    eventOff: () => eventOff,
    eventOn: () => eventOn,
    extend: () => extend2,
    findW3cTraceParent: () => findW3cTraceParent,
    formatTraceParent: () => formatTraceParent,
    generateW3CId: () => generateW3CId,
    getCommonSchemaMetaData: () => getCommonSchemaMetaData,
    getConsole: () => getConsole,
    getCookie: () => getCookie2,
    getCookieValue: () => getCookieValue,
    getCrypto: () => getCrypto,
    getDocument: () => getDocument,
    getExceptionName: () => getExceptionName,
    getFieldValueType: () => getFieldValueType,
    getGlobal: () => getGlobal,
    getGlobalInst: () => getGlobalInst,
    getHistory: () => getHistory,
    getIEVersion: () => getIEVersion,
    getISOString: () => toISOString,
    getJSON: () => getJSON,
    getLocation: () => getLocation,
    getMsCrypto: () => getMsCrypto,
    getNavigator: () => getNavigator,
    getPerformance: () => getPerformance,
    getSetValue: () => getSetValue,
    getTenantId: () => getTenantId,
    getTime: () => getTime,
    getWindow: () => getWindow,
    hasDocument: () => hasDocument,
    hasHistory: () => hasHistory,
    hasJSON: () => hasJSON,
    hasNavigator: () => hasNavigator,
    hasOwnProperty: () => hasOwnProperty,
    hasWindow: () => hasWindow,
    isArray: () => isArray,
    isArrayValid: () => isArrayValid,
    isBeaconsSupported: () => isBeaconsSupported,
    isBoolean: () => isBoolean,
    isChromium: () => isChromium,
    isDate: () => isDate,
    isDocumentObjectAvailable: () => isDocumentObjectAvailable,
    isError: () => isError2,
    isFetchSupported: () => isFetchSupported,
    isFunction: () => isFunction,
    isIE: () => isIE,
    isLatency: () => isLatency,
    isNotTruthy: () => isNotTruthy,
    isNullOrUndefined: () => isNullOrUndefined,
    isNumber: () => isNumber,
    isObject: () => isObject2,
    isReactNative: () => isReactNative,
    isSampledFlag: () => isSampledFlag,
    isString: () => isString,
    isTruthy: () => isTruthy,
    isTypeof: () => isTypeof,
    isUint8ArrayAvailable: () => isUint8ArrayAvailable,
    isUndefined: () => isUndefined,
    isValidSpanId: () => isValidSpanId,
    isValidTraceId: () => isValidTraceId,
    isValidTraceParent: () => isValidTraceParent,
    isValueAssigned: () => isValueAssigned,
    isValueKind: () => isValueKind,
    isWindowObjectAvailable: () => isWindowObjectAvailable,
    isXhrSupported: () => isXhrSupported,
    mergeEvtNamespace: () => mergeEvtNamespace,
    newGuid: () => newGuid,
    newId: () => newId,
    normalizeJsName: () => normalizeJsName,
    objCreate: () => objCreateFn,
    objDefineAccessors: () => objDefineAccessors,
    objForEachKey: () => objForEachKey,
    objFreeze: () => objFreeze,
    objKeys: () => objKeys,
    objSeal: () => objSeal,
    openXhr: () => openXhr,
    optimizeObject: () => optimizeObject,
    parseTraceParent: () => parseTraceParent,
    perfNow: () => perfNow,
    proxyAssign: () => proxyAssign,
    proxyFunctionAs: () => proxyFunctionAs,
    proxyFunctions: () => proxyFunctions,
    random32: () => random32,
    randomValue: () => randomValue,
    removeEventHandler: () => removeEventHandler,
    removeEventListeners: () => removeEventListeners,
    removePageHideEventListener: () => removePageHideEventListener,
    removePageShowEventListener: () => removePageShowEventListener,
    removePageUnloadEventListener: () => removePageUnloadEventListener,
    safeGetCookieMgr: () => safeGetCookieMgr,
    safeGetLogger: () => safeGetLogger,
    sanitizeProperty: () => sanitizeProperty,
    setCookie: () => setCookie2,
    setEnableEnvMocks: () => setEnableEnvMocks,
    setProcessTelemetryTimings: () => setProcessTelemetryTimings,
    setValue: () => setValue,
    strContains: () => strContains,
    strEndsWith: () => strEndsWith,
    strFunction: () => strShimFunction,
    strObject: () => strShimObject,
    strPrototype: () => strShimPrototype,
    strStartsWith: () => strStartsWith,
    strTrim: () => strTrim,
    strUndefined: () => strShimUndefined,
    throwError: () => throwError,
    toISOString: () => toISOString,
    useXDomainRequest: () => useXDomainRequest
  });
  var init_Index = __esm({
    "node_modules/@microsoft/1ds-core-js/dist-esm/src/Index.js"() {
      init_Enums();
      init_AppInsightsCore2();
      init_BaseCore2();
      init_ESPromise();
      init_ESPromiseScheduler();
      init_ValueSanitizer();
      init_applicationinsights_core_js();
      init_Utils();
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/DataModels.js
  var RT_PROFILE, NRT_PROFILE, BE_PROFILE;
  var init_DataModels = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/DataModels.js"() {
      RT_PROFILE = "REAL_TIME";
      NRT_PROFILE = "NEAR_REAL_TIME";
      BE_PROFILE = "BEST_EFFORT";
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/InternalConstants.js
  var STR_EMPTY3, STR_POST_METHOD, STR_DISABLED_PROPERTY_NAME, STR_DROPPED, STR_SENDING, STR_REQUEUE, STR_RESPONSE_FAIL, STR_OTHER, DEFAULT_CACHE_CONTROL, DEFAULT_CONTENT_TYPE, STR_CACHE_CONTROL, STR_CONTENT_TYPE_HEADER, STR_KILL_TOKENS_HEADER, STR_KILL_DURATION_HEADER, STR_KILL_DURATION_SECONDS_HEADER, STR_TIME_DELTA_HEADER, STR_CLIENT_VERSION, STR_CLIENT_ID, STR_TIME_DELTA_TO_APPLY, STR_UPLOAD_TIME, STR_API_KEY, STR_MSA_DEVICE_TICKET, STR_AUTH_XTOKEN, STR_NO_RESPONSE_BODY, STR_MSFPC, STR_TRACE, STR_USER;
  var init_InternalConstants3 = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/InternalConstants.js"() {
      STR_EMPTY3 = "";
      STR_POST_METHOD = "POST";
      STR_DISABLED_PROPERTY_NAME = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
      STR_DROPPED = "drop";
      STR_SENDING = "send";
      STR_REQUEUE = "requeue";
      STR_RESPONSE_FAIL = "rspFail";
      STR_OTHER = "oth";
      DEFAULT_CACHE_CONTROL = "no-cache, no-store";
      DEFAULT_CONTENT_TYPE = "application/x-json-stream";
      STR_CACHE_CONTROL = "cache-control";
      STR_CONTENT_TYPE_HEADER = "content-type";
      STR_KILL_TOKENS_HEADER = "kill-tokens";
      STR_KILL_DURATION_HEADER = "kill-duration";
      STR_KILL_DURATION_SECONDS_HEADER = "kill-duration-seconds";
      STR_TIME_DELTA_HEADER = "time-delta-millis";
      STR_CLIENT_VERSION = "client-version";
      STR_CLIENT_ID = "client-id";
      STR_TIME_DELTA_TO_APPLY = "time-delta-to-apply-millis";
      STR_UPLOAD_TIME = "upload-time";
      STR_API_KEY = "apikey";
      STR_MSA_DEVICE_TICKET = "AuthMsaDeviceTicket";
      STR_AUTH_XTOKEN = "AuthXToken";
      STR_NO_RESPONSE_BODY = "NoResponseBody";
      STR_MSFPC = "msfpc";
      STR_TRACE = "trace";
      STR_USER = "user";
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/EventBatch.js
  function _getEventMsfpc(theEvent) {
    var intWeb = (theEvent.ext || {})["intweb"];
    if (intWeb && isValueAssigned(intWeb[STR_MSFPC])) {
      return intWeb[STR_MSFPC];
    }
    return null;
  }
  function _getMsfpc(theEvents) {
    var msfpc = null;
    for (var lp = 0; msfpc === null && lp < theEvents.length; lp++) {
      msfpc = _getEventMsfpc(theEvents[lp]);
    }
    return msfpc;
  }
  var EventBatch;
  var init_EventBatch = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/EventBatch.js"() {
      init_Index();
      init_InternalConstants3();
      __name(_getEventMsfpc, "_getEventMsfpc");
      __name(_getMsfpc, "_getMsfpc");
      EventBatch = /** @class */
      function() {
        function EventBatch2(iKey, addEvents) {
          var events = addEvents ? [].concat(addEvents) : [];
          var _self = this;
          var _msfpc = _getMsfpc(events);
          _self.iKey = function() {
            return iKey;
          };
          _self.Msfpc = function() {
            return _msfpc || STR_EMPTY3;
          };
          _self.count = function() {
            return events.length;
          };
          _self.events = function() {
            return events;
          };
          _self.addEvent = function(theEvent) {
            if (theEvent) {
              events.push(theEvent);
              if (!_msfpc) {
                _msfpc = _getEventMsfpc(theEvent);
              }
              return true;
            }
            return false;
          };
          _self.split = function(fromEvent, numEvents) {
            var theEvents;
            if (fromEvent < events.length) {
              var cnt = events.length - fromEvent;
              if (!isNullOrUndefined(numEvents)) {
                cnt = numEvents < cnt ? numEvents : cnt;
              }
              theEvents = events.splice(fromEvent, cnt);
              _msfpc = _getMsfpc(events);
            }
            return new EventBatch2(iKey, theEvents);
          };
        }
        __name(EventBatch2, "EventBatch");
        EventBatch2.create = function(iKey, theEvents) {
          return new EventBatch2(iKey, theEvents);
        };
        return EventBatch2;
      }();
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/ClockSkewManager.js
  var ClockSkewManager, ClockSkewManager_default;
  var init_ClockSkewManager = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/ClockSkewManager.js"() {
      init_dynamicproto_js();
      ClockSkewManager = /** @class */
      function() {
        function ClockSkewManager2() {
          var _allowRequestSending = true;
          var _shouldAddClockSkewHeaders = true;
          var _isFirstRequest = true;
          var _clockSkewHeaderValue = "use-collector-delta";
          var _clockSkewSet = false;
          dynamicProto(ClockSkewManager2, this, function(_self) {
            _self.allowRequestSending = function() {
              return _allowRequestSending;
            };
            _self.firstRequestSent = function() {
              if (_isFirstRequest) {
                _isFirstRequest = false;
                if (!_clockSkewSet) {
                  _allowRequestSending = false;
                }
              }
            };
            _self.shouldAddClockSkewHeaders = function() {
              return _shouldAddClockSkewHeaders;
            };
            _self.getClockSkewHeaderValue = function() {
              return _clockSkewHeaderValue;
            };
            _self.setClockSkew = function(timeDeltaInMillis) {
              if (!_clockSkewSet) {
                if (timeDeltaInMillis) {
                  _clockSkewHeaderValue = timeDeltaInMillis;
                  _shouldAddClockSkewHeaders = true;
                  _clockSkewSet = true;
                } else {
                  _shouldAddClockSkewHeaders = false;
                }
                _allowRequestSending = true;
              }
            };
          });
        }
        __name(ClockSkewManager2, "ClockSkewManager");
        ClockSkewManager2.__ieDyn = 1;
        return ClockSkewManager2;
      }();
      ClockSkewManager_default = ClockSkewManager;
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/KillSwitch.js
  var SecToMsMultiplier, KillSwitch, KillSwitch_default;
  var init_KillSwitch = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/KillSwitch.js"() {
      init_dynamicproto_js();
      init_Index();
      SecToMsMultiplier = 1e3;
      KillSwitch = /** @class */
      function() {
        function KillSwitch2() {
          var _killedTokenDictionary = {};
          function _normalizeTenants(values) {
            var result = [];
            if (values) {
              arrForEach(values, function(value) {
                result.push(strTrim(value));
              });
            }
            return result;
          }
          __name(_normalizeTenants, "_normalizeTenants");
          dynamicProto(KillSwitch2, this, function(_self) {
            _self.setKillSwitchTenants = function(killTokens, killDuration) {
              if (killTokens && killDuration) {
                try {
                  var killedTokens = _normalizeTenants(killTokens.split(","));
                  if (killDuration === "this-request-only") {
                    return killedTokens;
                  }
                  var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;
                  for (var i = 0; i < killedTokens.length; ++i) {
                    _killedTokenDictionary[killedTokens[i]] = dateNow() + durationMs;
                  }
                } catch (ex) {
                  return [];
                }
              }
              return [];
            };
            _self.isTenantKilled = function(tenantToken) {
              var killDictionary = _killedTokenDictionary;
              var name = strTrim(tenantToken);
              if (killDictionary[name] !== void 0 && killDictionary[name] > dateNow()) {
                return true;
              }
              delete killDictionary[name];
              return false;
            };
          });
        }
        __name(KillSwitch2, "KillSwitch");
        KillSwitch2.__ieDyn = 1;
        return KillSwitch2;
      }();
      KillSwitch_default = KillSwitch;
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/RetryPolicy.js
  function retryPolicyShouldRetryForStatus(httpStatusCode) {
    return !(httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode != 408 && httpStatusCode != 429 || httpStatusCode == 501 || httpStatusCode == 505);
  }
  function retryPolicyGetMillisToBackoffForRetry(retriesSoFar) {
    var waitDuration = 0;
    var minBackoff = BaseBackoff * RandomizationLowerThreshold;
    var maxBackoff = BaseBackoff * RandomizationUpperThreshold;
    var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;
    waitDuration = Math.pow(2, retriesSoFar) * randomBackoff;
    return Math.min(waitDuration, MaxBackoff);
  }
  var RandomizationLowerThreshold, RandomizationUpperThreshold, BaseBackoff, MaxBackoff;
  var init_RetryPolicy = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/RetryPolicy.js"() {
      RandomizationLowerThreshold = 0.8;
      RandomizationUpperThreshold = 1.2;
      BaseBackoff = 3e3;
      MaxBackoff = 6e5;
      __name(retryPolicyShouldRetryForStatus, "retryPolicyShouldRetryForStatus");
      __name(retryPolicyGetMillisToBackoffForRetry, "retryPolicyGetMillisToBackoffForRetry");
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/Serializer.js
  function _addJSONPropertyMetaData(json, propKeys, name, propertyValue) {
    if (propertyValue && json) {
      var encodedTypeValue = getCommonSchemaMetaData(propertyValue.value, propertyValue.kind, propertyValue.propertyType);
      if (encodedTypeValue > -1) {
        var metaData = json[metadata];
        if (!metaData) {
          metaData = json[metadata] = { f: {} };
        }
        var metaTarget = metaData[f];
        if (!metaTarget) {
          metaTarget = metaData[f] = {};
        }
        if (propKeys) {
          for (var lp = 0; lp < propKeys.length; lp++) {
            var key = propKeys[lp];
            if (!metaTarget[key]) {
              metaTarget[key] = { f: {} };
            }
            var newTarget = metaTarget[key][f];
            if (!newTarget) {
              newTarget = metaTarget[key][f] = {};
            }
            metaTarget = newTarget;
          }
        }
        metaTarget = metaTarget[name] = {};
        if (isArray(propertyValue.value)) {
          metaTarget["a"] = {
            t: encodedTypeValue
          };
        } else {
          metaTarget["t"] = encodedTypeValue;
        }
      }
    }
  }
  var _MAX_STRING_JOINS, RequestSizeLimitBytes, BeaconRequestSizeLimitBytes, MaxRecordSize, MaxBeaconRecordSize, metadata, f, rCheckDot, Serializer;
  var init_Serializer = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/Serializer.js"() {
      init_dynamicproto_js();
      init_Index();
      init_EventBatch();
      init_InternalConstants3();
      _MAX_STRING_JOINS = 20;
      RequestSizeLimitBytes = 3984588;
      BeaconRequestSizeLimitBytes = 65e3;
      MaxRecordSize = 2e6;
      MaxBeaconRecordSize = Math.min(MaxRecordSize, BeaconRequestSizeLimitBytes);
      metadata = "metadata";
      f = "f";
      rCheckDot = /\./;
      Serializer = /** @class */
      function() {
        function Serializer2(perfManager, valueSanitizer, stringifyObjects, enableCompoundKey) {
          var strData = "data";
          var strBaseData = "baseData";
          var strExt = "ext";
          var _checkForCompoundkey = !!enableCompoundKey;
          var _processSubMetaData = true;
          var _theSanitizer = valueSanitizer;
          var _isReservedCache = {};
          dynamicProto(Serializer2, this, function(_self) {
            _self.createPayload = function(retryCnt, isTeardown, isSync, isReducedPayload, sendReason, sendType) {
              return {
                apiKeys: [],
                payloadBlob: STR_EMPTY3,
                overflow: null,
                sizeExceed: [],
                failedEvts: [],
                batches: [],
                numEvents: 0,
                retryCnt,
                isTeardown,
                isSync,
                isBeacon: isReducedPayload,
                sendType,
                sendReason
              };
            };
            _self.appendPayload = function(payload, theBatch, maxEventsPerBatch) {
              var canAddEvents = payload && theBatch && !payload.overflow;
              if (canAddEvents) {
                doPerf(perfManager, function() {
                  return "Serializer:appendPayload";
                }, function() {
                  var theEvents = theBatch.events();
                  var payloadBlob = payload.payloadBlob;
                  var payloadEvents = payload.numEvents;
                  var eventsAdded = false;
                  var sizeExceeded = [];
                  var failedEvts = [];
                  var isBeaconPayload = payload.isBeacon;
                  var requestMaxSize = isBeaconPayload ? BeaconRequestSizeLimitBytes : RequestSizeLimitBytes;
                  var recordMaxSize = isBeaconPayload ? MaxBeaconRecordSize : MaxRecordSize;
                  var lp = 0;
                  var joinCount = 0;
                  while (lp < theEvents.length) {
                    var theEvent = theEvents[lp];
                    if (theEvent) {
                      if (payloadEvents >= maxEventsPerBatch) {
                        payload.overflow = theBatch.split(lp);
                        break;
                      }
                      var eventBlob = _self.getEventBlob(theEvent);
                      if (eventBlob && eventBlob.length <= recordMaxSize) {
                        var blobLength = eventBlob.length;
                        var currentSize = payloadBlob.length;
                        if (currentSize + blobLength > requestMaxSize) {
                          payload.overflow = theBatch.split(lp);
                          break;
                        }
                        if (payloadBlob) {
                          payloadBlob += "\n";
                        }
                        payloadBlob += eventBlob;
                        joinCount++;
                        if (joinCount > _MAX_STRING_JOINS) {
                          payloadBlob.substr(0, 1);
                          joinCount = 0;
                        }
                        eventsAdded = true;
                        payloadEvents++;
                      } else {
                        if (eventBlob) {
                          sizeExceeded.push(theEvent);
                        } else {
                          failedEvts.push(theEvent);
                        }
                        theEvents.splice(lp, 1);
                        lp--;
                      }
                    }
                    lp++;
                  }
                  if (sizeExceeded && sizeExceeded.length > 0) {
                    payload.sizeExceed.push(EventBatch.create(theBatch.iKey(), sizeExceeded));
                  }
                  if (failedEvts && failedEvts.length > 0) {
                    payload.failedEvts.push(EventBatch.create(theBatch.iKey(), failedEvts));
                  }
                  if (eventsAdded) {
                    payload.batches.push(theBatch);
                    payload.payloadBlob = payloadBlob;
                    payload.numEvents = payloadEvents;
                    var apiKey = theBatch.iKey();
                    if (arrIndexOf(payload.apiKeys, apiKey) === -1) {
                      payload.apiKeys.push(apiKey);
                    }
                  }
                }, function() {
                  return { payload, theBatch: { iKey: theBatch.iKey(), evts: theBatch.events() }, max: maxEventsPerBatch };
                });
              }
              return canAddEvents;
            };
            _self.getEventBlob = function(eventData) {
              try {
                return doPerf(perfManager, function() {
                  return "Serializer.getEventBlob";
                }, function() {
                  var serializedEvent = {};
                  serializedEvent.name = eventData.name;
                  serializedEvent.time = eventData.time;
                  serializedEvent.ver = eventData.ver;
                  serializedEvent.iKey = "o:" + getTenantId(eventData.iKey);
                  var serializedExt = {};
                  var eventExt = eventData[strExt];
                  if (eventExt) {
                    serializedEvent[strExt] = serializedExt;
                    objForEachKey(eventExt, function(key, value) {
                      var data = serializedExt[key] = {};
                      _processPathKeys(value, data, "ext." + key, true, null, null, true);
                    });
                  }
                  var serializedData = serializedEvent[strData] = {};
                  serializedData.baseType = eventData.baseType;
                  var serializedBaseData = serializedData[strBaseData] = {};
                  _processPathKeys(eventData.baseData, serializedBaseData, strBaseData, false, [strBaseData], function(pathKeys, name, value) {
                    _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);
                  }, _processSubMetaData);
                  _processPathKeys(eventData.data, serializedData, strData, false, [], function(pathKeys, name, value) {
                    _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);
                  }, _processSubMetaData);
                  return JSON.stringify(serializedEvent);
                }, function() {
                  return { item: eventData };
                });
              } catch (e) {
                return null;
              }
            };
            function _isReservedField(path, name) {
              var result = _isReservedCache[path];
              if (result === void 0) {
                if (path.length >= 7) {
                  result = strStartsWith(path, "ext.metadata") || strStartsWith(path, "ext.web");
                }
                _isReservedCache[path] = result;
              }
              return result;
            }
            __name(_isReservedField, "_isReservedField");
            function _processPathKeys(srcObj, target, thePath, checkReserved, metadataPathKeys, metadataCallback, processSubKeys) {
              objForEachKey(srcObj, function(key, srcValue) {
                var prop = null;
                if (srcValue || isValueAssigned(srcValue)) {
                  var path = thePath;
                  var name_1 = key;
                  var theMetaPathKeys = metadataPathKeys;
                  var destObj = target;
                  if (_checkForCompoundkey && !checkReserved && rCheckDot.test(key)) {
                    var subKeys = key.split(".");
                    var keyLen = subKeys.length;
                    if (keyLen > 1) {
                      if (theMetaPathKeys) {
                        theMetaPathKeys = theMetaPathKeys.slice();
                      }
                      for (var lp = 0; lp < keyLen - 1; lp++) {
                        var subKey = subKeys[lp];
                        destObj = destObj[subKey] = destObj[subKey] || {};
                        path += "." + subKey;
                        if (theMetaPathKeys) {
                          theMetaPathKeys.push(subKey);
                        }
                      }
                      name_1 = subKeys[keyLen - 1];
                    }
                  }
                  var isReserved = checkReserved && _isReservedField(path, name_1);
                  if (!isReserved && _theSanitizer && _theSanitizer.handleField(path, name_1)) {
                    prop = _theSanitizer.value(path, name_1, srcValue, stringifyObjects);
                  } else {
                    prop = sanitizeProperty(name_1, srcValue, stringifyObjects);
                  }
                  if (prop) {
                    var newValue = prop.value;
                    destObj[name_1] = newValue;
                    if (metadataCallback) {
                      metadataCallback(theMetaPathKeys, name_1, prop);
                    }
                    if (processSubKeys && typeof newValue === "object" && !isArray(newValue)) {
                      var newPath = theMetaPathKeys;
                      if (newPath) {
                        newPath = newPath.slice();
                        newPath.push(name_1);
                      }
                      _processPathKeys(srcValue, newValue, path + "." + name_1, checkReserved, newPath, metadataCallback, processSubKeys);
                    }
                  }
                }
              });
            }
            __name(_processPathKeys, "_processPathKeys");
          });
        }
        __name(Serializer2, "Serializer");
        Serializer2.__ieDyn = 1;
        return Serializer2;
      }();
      __name(_addJSONPropertyMetaData, "_addJSONPropertyMetaData");
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/HttpManager.js
  function _addCollectorHeaderQsMapping(qsName, headerName, allowQs) {
    _collectorQsHeaders[qsName] = headerName;
    if (allowQs !== false) {
      _collectorHeaderToQs[headerName] = qsName;
    }
  }
  function _getResponseText(xhr) {
    try {
      return xhr.responseText;
    } catch (e) {
    }
    return STR_EMPTY3;
  }
  function _hasHeader(headers, header) {
    var hasHeader = false;
    if (headers && header) {
      var keys = objKeys(headers);
      if (keys && keys.length > 0) {
        var lowerHeader = header.toLowerCase();
        for (var lp = 0; lp < keys.length; lp++) {
          var value = keys[lp];
          if (value && hasOwnProperty(header, value) && value.toLowerCase() === lowerHeader) {
            hasHeader = true;
            break;
          }
        }
      }
    }
    return hasHeader;
  }
  function _addRequestDetails(details, name, value, useHeaders) {
    if (name && value && value.length > 0) {
      if (useHeaders && _collectorQsHeaders[name]) {
        details.hdrs[_collectorQsHeaders[name]] = value;
        details.useHdrs = true;
      } else {
        details.url += "&" + name + "=" + value;
      }
    }
  }
  function _prependTransports(theTransports, newTransports) {
    if (newTransports) {
      if (isNumber(newTransports)) {
        theTransports = [newTransports].concat(theTransports);
      } else if (isArray(newTransports)) {
        theTransports = newTransports.concat(theTransports);
      }
    }
    return theTransports;
  }
  var _a4, strSendAttempt, _noResponseQs, _eventActionMap, _collectorQsHeaders, _collectorHeaderToQs, HttpManager;
  var init_HttpManager = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/HttpManager.js"() {
      init_dynamicproto_js();
      init_ClockSkewManager();
      init_KillSwitch();
      init_Index();
      init_InternalConstants3();
      init_RetryPolicy();
      init_Serializer();
      strSendAttempt = "sendAttempt";
      _noResponseQs = "&" + STR_NO_RESPONSE_BODY + "=true";
      _eventActionMap = (_a4 = {}, _a4[
        1
        /* EventBatchNotificationReason.Paused */
      ] = STR_REQUEUE, _a4[
        100
        /* EventBatchNotificationReason.RequeueEvents */
      ] = STR_REQUEUE, _a4[
        200
        /* EventBatchNotificationReason.Complete */
      ] = "sent", _a4[
        8004
        /* EventBatchNotificationReason.KillSwitch */
      ] = STR_DROPPED, _a4[
        8003
        /* EventBatchNotificationReason.SizeLimitExceeded */
      ] = STR_DROPPED, _a4);
      _collectorQsHeaders = {};
      _collectorHeaderToQs = {};
      __name(_addCollectorHeaderQsMapping, "_addCollectorHeaderQsMapping");
      _addCollectorHeaderQsMapping(STR_MSA_DEVICE_TICKET, STR_MSA_DEVICE_TICKET, false);
      _addCollectorHeaderQsMapping(STR_CLIENT_VERSION, STR_CLIENT_VERSION);
      _addCollectorHeaderQsMapping(STR_CLIENT_ID, "Client-Id");
      _addCollectorHeaderQsMapping(STR_API_KEY, STR_API_KEY);
      _addCollectorHeaderQsMapping(STR_TIME_DELTA_TO_APPLY, STR_TIME_DELTA_TO_APPLY);
      _addCollectorHeaderQsMapping(STR_UPLOAD_TIME, STR_UPLOAD_TIME);
      _addCollectorHeaderQsMapping(STR_AUTH_XTOKEN, STR_AUTH_XTOKEN);
      __name(_getResponseText, "_getResponseText");
      __name(_hasHeader, "_hasHeader");
      __name(_addRequestDetails, "_addRequestDetails");
      __name(_prependTransports, "_prependTransports");
      HttpManager = /** @class */
      function() {
        function HttpManager2(maxEventsPerBatch, maxConnections, maxRequestRetriesBeforeBackoff, actions, timeoutOverride) {
          this._responseHandlers = [];
          var _urlString = "?cors=true&" + STR_CONTENT_TYPE_HEADER.toLowerCase() + "=" + DEFAULT_CONTENT_TYPE;
          var _killSwitch = new KillSwitch_default();
          var _paused = false;
          var _clockSkewManager = new ClockSkewManager_default();
          var _useBeacons = false;
          var _outstandingRequests = 0;
          var _postManager;
          var _logger;
          var _sendInterfaces;
          var _core;
          var _customHttpInterface = true;
          var _queryStringParameters = [];
          var _headers = {};
          var _batchQueue = [];
          var _serializer = null;
          var _enableEventTimings = false;
          var _cookieMgr;
          var _isUnloading = false;
          var _useHeaders = false;
          var _xhrTimeout;
          var _disableXhrSync;
          var _disableFetchKeepAlive;
          var _canHaveReducedPayload;
          var _addNoResponse;
          dynamicProto(HttpManager2, this, function(_self) {
            var _sendCredentials = true;
            _self.initialize = function(endpointUrl, core, postChannel, httpInterface, channelConfig) {
              var _a7;
              if (!channelConfig) {
                channelConfig = {};
              }
              _urlString = endpointUrl + _urlString;
              _useHeaders = !isUndefined(channelConfig.avoidOptions) ? !channelConfig.avoidOptions : true;
              _core = core;
              _cookieMgr = core.getCookieMgr();
              _enableEventTimings = !_core.config.disableEventTimings;
              var enableCompoundKey = !!_core.config.enableCompoundKey;
              _postManager = postChannel;
              _logger = _postManager.diagLog();
              var valueSanitizer = channelConfig.valueSanitizer;
              var stringifyObjects = channelConfig.stringifyObjects;
              if (!isUndefined(channelConfig.enableCompoundKey)) {
                enableCompoundKey = !!channelConfig.enableCompoundKey;
              }
              _xhrTimeout = channelConfig.xhrTimeout;
              _disableXhrSync = !!channelConfig.disableXhrSync;
              _disableFetchKeepAlive = !!channelConfig.disableFetchKeepAlive;
              _addNoResponse = channelConfig.addNoResponse !== false;
              _useBeacons = !isReactNative();
              _serializer = new Serializer(_core, valueSanitizer, stringifyObjects, enableCompoundKey);
              if (!isNullOrUndefined(channelConfig.useSendBeacon)) {
                _useBeacons = !!channelConfig.useSendBeacon;
              }
              var syncHttpInterface = httpInterface;
              var beaconHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;
              var fetchSyncHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;
              var beaconUnloadTransports = [
                3,
                2
                /* TransportType.Fetch */
              ];
              if (!httpInterface) {
                _customHttpInterface = false;
                var location_1 = getLocation();
                if (location_1 && location_1.protocol && location_1.protocol.toLowerCase() === "file:") {
                  _sendCredentials = false;
                }
                var theTransports = [];
                if (isReactNative()) {
                  theTransports = [
                    2,
                    1
                    /* TransportType.Xhr */
                  ];
                  beaconUnloadTransports = [
                    2,
                    1,
                    3
                    /* TransportType.Beacon */
                  ];
                } else {
                  theTransports = [
                    1,
                    2,
                    3
                    /* TransportType.Beacon */
                  ];
                }
                theTransports = _prependTransports(theTransports, channelConfig.transports);
                httpInterface = _getSenderInterface(theTransports, false);
                if (!httpInterface) {
                  _warnToConsole(_logger, "No available transport to send events");
                }
                syncHttpInterface = _getSenderInterface(theTransports, true);
              }
              if (!beaconHttpInterface) {
                beaconUnloadTransports = _prependTransports(beaconUnloadTransports, channelConfig.unloadTransports);
                beaconHttpInterface = _getSenderInterface(beaconUnloadTransports, true);
              }
              _canHaveReducedPayload = !_customHttpInterface && (_useBeacons && isBeaconsSupported() || !_disableFetchKeepAlive && isFetchSupported(true));
              _sendInterfaces = (_a7 = {}, _a7[
                0
                /* EventSendType.Batched */
              ] = httpInterface, _a7[
                1
                /* EventSendType.Synchronous */
              ] = syncHttpInterface || _getSenderInterface([
                1,
                2,
                3
                /* TransportType.Beacon */
              ], true), _a7[
                2
                /* EventSendType.SendBeacon */
              ] = beaconHttpInterface || syncHttpInterface || _getSenderInterface([
                1
                /* TransportType.Xhr */
              ], true), _a7[
                3
                /* EventSendType.SyncFetch */
              ] = fetchSyncHttpInterface || _getSenderInterface([
                2,
                3
                /* TransportType.Beacon */
              ], true) || syncHttpInterface || _getSenderInterface([
                1
                /* TransportType.Xhr */
              ], true), _a7);
            };
            function _getSenderInterface(transports, syncSupport) {
              var transportType = 0;
              var sendPostFunc = null;
              var lp = 0;
              while (sendPostFunc == null && lp < transports.length) {
                transportType = transports[lp];
                if (transportType === 1) {
                  if (useXDomainRequest()) {
                    sendPostFunc = _xdrSendPost;
                  } else if (isXhrSupported()) {
                    sendPostFunc = _xhrSendPost;
                  }
                } else if (transportType === 2 && isFetchSupported(syncSupport) && (!syncSupport || syncSupport && !_disableFetchKeepAlive)) {
                  sendPostFunc = _fetchSendPost;
                } else if (_useBeacons && transportType === 3 && isBeaconsSupported()) {
                  sendPostFunc = _beaconSendPost;
                }
                lp++;
              }
              if (sendPostFunc) {
                return {
                  _transport: transportType,
                  _isSync: syncSupport,
                  sendPOST: sendPostFunc
                };
              }
              return null;
            }
            __name(_getSenderInterface, "_getSenderInterface");
            _self["_getDbgPlgTargets"] = function() {
              return [_sendInterfaces[
                0
                /* EventSendType.Batched */
              ], _killSwitch, _serializer, _sendInterfaces];
            };
            function _xdrSendPost(payload, oncomplete, sync) {
              var xdr = new XDomainRequest();
              xdr.open(STR_POST_METHOD, payload.urlString);
              if (payload.timeout) {
                xdr.timeout = payload.timeout;
              }
              xdr.onload = function() {
                var response = _getResponseText(xdr);
                _doOnComplete(oncomplete, 200, {}, response);
                _handleCollectorResponse(response);
              };
              xdr.onerror = function() {
                _doOnComplete(oncomplete, 400, {});
              };
              xdr.ontimeout = function() {
                _doOnComplete(oncomplete, 500, {});
              };
              xdr.onprogress = function() {
              };
              if (sync) {
                xdr.send(payload.data);
              } else {
                timeoutOverride.set(function() {
                  xdr.send(payload.data);
                }, 0);
              }
            }
            __name(_xdrSendPost, "_xdrSendPost");
            function _fetchSendPost(payload, oncomplete, sync) {
              var _a7;
              var theUrl = payload.urlString;
              var ignoreResponse = false;
              var responseHandled = false;
              var requestInit = (_a7 = {
                body: payload.data,
                method: STR_POST_METHOD
              }, _a7[STR_DISABLED_PROPERTY_NAME] = true, _a7);
              if (sync) {
                requestInit.keepalive = true;
                if (payload._sendReason === 2) {
                  ignoreResponse = true;
                  if (_addNoResponse) {
                    theUrl += _noResponseQs;
                  }
                }
              }
              if (_sendCredentials) {
                requestInit.credentials = "include";
              }
              if (payload.headers && objKeys(payload.headers).length > 0) {
                requestInit.headers = payload.headers;
              }
              fetch(theUrl, requestInit).then(function(response) {
                var headerMap = {};
                var responseText = STR_EMPTY3;
                var headers = response.headers;
                if (headers) {
                  headers["forEach"](function(value, name) {
                    headerMap[name] = value;
                  });
                }
                if (response.body) {
                  response.text().then(function(text) {
                    responseText = text;
                  });
                }
                if (!responseHandled) {
                  responseHandled = true;
                  _doOnComplete(oncomplete, response.status, headerMap, responseText);
                  _handleCollectorResponse(responseText);
                }
              })["catch"](function(error) {
                if (!responseHandled) {
                  responseHandled = true;
                  _doOnComplete(oncomplete, 0, {});
                }
              });
              if (ignoreResponse && !responseHandled) {
                responseHandled = true;
                _doOnComplete(oncomplete, 200, {});
              }
              if (!responseHandled && payload.timeout > 0) {
                timeoutOverride.set(function() {
                  if (!responseHandled) {
                    responseHandled = true;
                    _doOnComplete(oncomplete, 500, {});
                  }
                }, payload.timeout);
              }
            }
            __name(_fetchSendPost, "_fetchSendPost");
            function _xhrSendPost(payload, oncomplete, sync) {
              var theUrl = payload.urlString;
              function _appendHeader(theHeaders, xhr, name) {
                if (!theHeaders[name] && xhr && xhr.getResponseHeader) {
                  var value = xhr.getResponseHeader(name);
                  if (value) {
                    theHeaders[name] = strTrim(value);
                  }
                }
                return theHeaders;
              }
              __name(_appendHeader, "_appendHeader");
              function _getAllResponseHeaders(xhr) {
                var theHeaders = {};
                if (!xhr.getAllResponseHeaders) {
                  theHeaders = _appendHeader(theHeaders, xhr, STR_TIME_DELTA_HEADER);
                  theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_HEADER);
                  theHeaders = _appendHeader(theHeaders, xhr, STR_KILL_DURATION_SECONDS_HEADER);
                } else {
                  theHeaders = _convertAllHeadersToMap(xhr.getAllResponseHeaders());
                }
                return theHeaders;
              }
              __name(_getAllResponseHeaders, "_getAllResponseHeaders");
              function xhrComplete(xhr, responseTxt) {
                _doOnComplete(oncomplete, xhr.status, _getAllResponseHeaders(xhr), responseTxt);
              }
              __name(xhrComplete, "xhrComplete");
              if (sync && payload.disableXhrSync) {
                sync = false;
              }
              var xhrRequest = openXhr(STR_POST_METHOD, theUrl, _sendCredentials, true, sync, payload.timeout);
              objForEachKey(payload.headers, function(name, value) {
                xhrRequest.setRequestHeader(name, value);
              });
              xhrRequest.onload = function() {
                var response = _getResponseText(xhrRequest);
                xhrComplete(xhrRequest, response);
                _handleCollectorResponse(response);
              };
              xhrRequest.onerror = function() {
                xhrComplete(xhrRequest);
              };
              xhrRequest.ontimeout = function() {
                xhrComplete(xhrRequest);
              };
              xhrRequest.send(payload.data);
            }
            __name(_xhrSendPost, "_xhrSendPost");
            function _doOnComplete(oncomplete, status, headers, response) {
              try {
                oncomplete(status, headers, response);
              } catch (e) {
                _throwInternal(_logger, 2, 518, dumpObj(e));
              }
            }
            __name(_doOnComplete, "_doOnComplete");
            function _beaconSendPost(payload, oncomplete, sync) {
              var internalPayloadData = payload;
              var status = 200;
              var thePayload = internalPayloadData._thePayload;
              var theUrl = payload.urlString + (_addNoResponse ? _noResponseQs : STR_EMPTY3);
              try {
                var nav_1 = getNavigator();
                if (!nav_1.sendBeacon(theUrl, payload.data)) {
                  if (thePayload) {
                    var droppedBatches_1 = [];
                    arrForEach(thePayload.batches, function(theBatch) {
                      if (droppedBatches_1 && theBatch && theBatch.count() > 0) {
                        var theEvents = theBatch.events();
                        for (var lp = 0; lp < theEvents.length; lp++) {
                          if (!nav_1.sendBeacon(theUrl, _serializer.getEventBlob(theEvents[lp]))) {
                            droppedBatches_1.push(theBatch.split(lp));
                            break;
                          }
                        }
                      } else {
                        droppedBatches_1.push(theBatch.split(0));
                      }
                    });
                    _sendBatchesNotification(droppedBatches_1, 8003, thePayload.sendType, true);
                  } else {
                    status = 0;
                  }
                }
              } catch (ex) {
                _warnToConsole(_logger, "Failed to send telemetry using sendBeacon API. Ex:" + dumpObj(ex));
                status = 0;
              } finally {
                _doOnComplete(oncomplete, status, {}, STR_EMPTY3);
              }
            }
            __name(_beaconSendPost, "_beaconSendPost");
            function _isBeaconPayload(sendType) {
              return sendType === 2 || sendType === 3;
            }
            __name(_isBeaconPayload, "_isBeaconPayload");
            function _adjustSendType(sendType) {
              if (_isUnloading && _isBeaconPayload(sendType)) {
                sendType = 2;
              }
              return sendType;
            }
            __name(_adjustSendType, "_adjustSendType");
            _self.addQueryStringParameter = function(name, value) {
              for (var i = 0; i < _queryStringParameters.length; i++) {
                if (_queryStringParameters[i].name === name) {
                  _queryStringParameters[i].value = value;
                  return;
                }
              }
              _queryStringParameters.push({ name, value });
            };
            _self.addHeader = function(name, value) {
              _headers[name] = value;
            };
            _self.canSendRequest = function() {
              return _hasIdleConnection() && _clockSkewManager.allowRequestSending();
            };
            _self.sendQueuedRequests = function(sendType, sendReason) {
              if (isUndefined(sendType)) {
                sendType = 0;
              }
              if (_isUnloading) {
                sendType = _adjustSendType(sendType);
                sendReason = 2;
              }
              if (_canSendPayload(_batchQueue, sendType, 0)) {
                _sendBatches(
                  _clearQueue(),
                  0,
                  false,
                  sendType,
                  sendReason || 0
                  /* SendRequestReason.Undefined */
                );
              }
            };
            _self.isCompletelyIdle = function() {
              return !_paused && _outstandingRequests === 0 && _batchQueue.length === 0;
            };
            _self.setUnloading = function(value) {
              _isUnloading = value;
            };
            _self.addBatch = function(theBatch) {
              if (theBatch && theBatch.count() > 0) {
                if (_killSwitch.isTenantKilled(theBatch.iKey())) {
                  return false;
                }
                _batchQueue.push(theBatch);
              }
              return true;
            };
            _self.teardown = function() {
              if (_batchQueue.length > 0) {
                _sendBatches(
                  _clearQueue(),
                  0,
                  true,
                  2,
                  2
                  /* SendRequestReason.Unload */
                );
              }
            };
            _self.pause = function() {
              _paused = true;
            };
            _self.resume = function() {
              _paused = false;
              _self.sendQueuedRequests(
                0,
                4
                /* SendRequestReason.Resumed */
              );
            };
            _self.sendSynchronousBatch = function(batch, sendType, sendReason) {
              if (batch && batch.count() > 0) {
                if (isNullOrUndefined(sendType)) {
                  sendType = 1;
                }
                if (_isUnloading) {
                  sendType = _adjustSendType(sendType);
                  sendReason = 2;
                }
                _sendBatches(
                  [batch],
                  0,
                  false,
                  sendType,
                  sendReason || 0
                  /* SendRequestReason.Undefined */
                );
              }
            };
            function _hasIdleConnection() {
              return !_paused && _outstandingRequests < maxConnections;
            }
            __name(_hasIdleConnection, "_hasIdleConnection");
            function _clearQueue() {
              var theQueue = _batchQueue;
              _batchQueue = [];
              return theQueue;
            }
            __name(_clearQueue, "_clearQueue");
            function _canSendPayload(theBatches, sendType, retryCnt) {
              var result = false;
              if (theBatches && theBatches.length > 0 && !_paused && _sendInterfaces[sendType] && _serializer) {
                result = sendType !== 0 || _hasIdleConnection() && (retryCnt > 0 || _clockSkewManager.allowRequestSending());
              }
              return result;
            }
            __name(_canSendPayload, "_canSendPayload");
            function _createDebugBatches(theBatches) {
              var values = {};
              if (theBatches) {
                arrForEach(theBatches, function(theBatch, idx) {
                  values[idx] = {
                    iKey: theBatch.iKey(),
                    evts: theBatch.events()
                  };
                });
              }
              return values;
            }
            __name(_createDebugBatches, "_createDebugBatches");
            function _sendBatches(theBatches, retryCount, isTeardown, sendType, sendReason) {
              if (!theBatches || theBatches.length === 0) {
                return;
              }
              if (_paused) {
                _sendBatchesNotification(theBatches, 1, sendType);
                return;
              }
              sendType = _adjustSendType(sendType);
              try {
                var orgBatches_1 = theBatches;
                var isSynchronous_1 = sendType !== 0;
                doPerf(_core, function() {
                  return "HttpManager:_sendBatches";
                }, function(perfEvt) {
                  if (perfEvt) {
                    theBatches = theBatches.slice(0);
                  }
                  var droppedBatches = [];
                  var thePayload = null;
                  var serializationStart = getTime();
                  var sendInterface = _sendInterfaces[sendType] || (isSynchronous_1 ? _sendInterfaces[
                    1
                    /* EventSendType.Synchronous */
                  ] : _sendInterfaces[
                    0
                    /* EventSendType.Batched */
                  ]);
                  var sendTransport = sendInterface && sendInterface._transport;
                  var isReducedPayload = _canHaveReducedPayload && (_isUnloading || _isBeaconPayload(sendType) || (sendTransport === 3 || sendInterface._isSync && sendTransport === 2));
                  while (_canSendPayload(theBatches, sendType, retryCount)) {
                    var theBatch = theBatches.shift();
                    if (theBatch && theBatch.count() > 0) {
                      if (!_killSwitch.isTenantKilled(theBatch.iKey())) {
                        thePayload = thePayload || _serializer.createPayload(retryCount, isTeardown, isSynchronous_1, isReducedPayload, sendReason, sendType);
                        if (!_serializer.appendPayload(thePayload, theBatch, maxEventsPerBatch)) {
                          _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                          serializationStart = getTime();
                          theBatches = [theBatch].concat(theBatches);
                          thePayload = null;
                        } else if (thePayload.overflow !== null) {
                          theBatches = [thePayload.overflow].concat(theBatches);
                          thePayload.overflow = null;
                          _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                          serializationStart = getTime();
                          thePayload = null;
                        }
                      } else {
                        droppedBatches.push(theBatch);
                      }
                    }
                  }
                  if (thePayload) {
                    _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                  }
                  if (theBatches.length > 0) {
                    _batchQueue = theBatches.concat(_batchQueue);
                  }
                  _sendBatchesNotification(droppedBatches, 8004, sendType);
                }, function() {
                  return { batches: _createDebugBatches(orgBatches_1), retryCount, isTeardown, isSynchronous: isSynchronous_1, sendReason, useSendBeacon: _isBeaconPayload(sendType), sendType };
                }, !isSynchronous_1);
              } catch (ex) {
                _throwInternal(_logger, 2, 48, "Unexpected Exception sending batch: " + dumpObj(ex));
              }
            }
            __name(_sendBatches, "_sendBatches");
            function _buildRequestDetails(thePayload, useHeaders) {
              var requestDetails = {
                url: _urlString,
                hdrs: {},
                useHdrs: false
                // Assume no headers
              };
              if (!useHeaders) {
                objForEachKey(_headers, function(name, value) {
                  if (_collectorHeaderToQs[name]) {
                    _addRequestDetails(requestDetails, _collectorHeaderToQs[name], value, false);
                  } else {
                    requestDetails.hdrs[name] = value;
                    requestDetails.useHdrs = true;
                  }
                });
              } else {
                requestDetails.hdrs = extend2(requestDetails.hdrs, _headers);
                requestDetails.useHdrs = objKeys(requestDetails.hdrs).length > 0;
              }
              _addRequestDetails(requestDetails, STR_CLIENT_ID, "NO_AUTH", useHeaders);
              _addRequestDetails(requestDetails, STR_CLIENT_VERSION, FullVersionString, useHeaders);
              var apiQsKeys = STR_EMPTY3;
              arrForEach(thePayload.apiKeys, function(apiKey) {
                if (apiQsKeys.length > 0) {
                  apiQsKeys += ",";
                }
                apiQsKeys += apiKey;
              });
              _addRequestDetails(requestDetails, STR_API_KEY, apiQsKeys, useHeaders);
              _addRequestDetails(requestDetails, STR_UPLOAD_TIME, dateNow().toString(), useHeaders);
              var msfpc = _getMsfpc2(thePayload);
              if (isValueAssigned(msfpc)) {
                requestDetails.url += "&ext.intweb.msfpc=" + msfpc;
              }
              if (_clockSkewManager.shouldAddClockSkewHeaders()) {
                _addRequestDetails(requestDetails, STR_TIME_DELTA_TO_APPLY, _clockSkewManager.getClockSkewHeaderValue(), useHeaders);
              }
              if (_core.getWParam) {
                var wParam = _core.getWParam();
                if (wParam >= 0) {
                  requestDetails.url += "&w=" + wParam;
                }
              }
              for (var i = 0; i < _queryStringParameters.length; i++) {
                requestDetails.url += "&" + _queryStringParameters[i].name + "=" + _queryStringParameters[i].value;
              }
              return requestDetails;
            }
            __name(_buildRequestDetails, "_buildRequestDetails");
            function _setTimingValue(timings, name, value) {
              timings[name] = timings[name] || {};
              timings[name][_postManager.identifier] = value;
            }
            __name(_setTimingValue, "_setTimingValue");
            function _doPayloadSend(thePayload, serializationStart, serializationCompleted, sendReason) {
              if (thePayload && thePayload.payloadBlob && thePayload.payloadBlob.length > 0) {
                var useSendHook_1 = !!_self.sendHook;
                var sendInterface_1 = _sendInterfaces[thePayload.sendType];
                if (!_isBeaconPayload(thePayload.sendType) && thePayload.isBeacon && thePayload.sendReason === 2) {
                  sendInterface_1 = _sendInterfaces[
                    2
                    /* EventSendType.SendBeacon */
                  ] || _sendInterfaces[
                    3
                    /* EventSendType.SyncFetch */
                  ] || sendInterface_1;
                }
                var useHeaders_1 = _useHeaders;
                if (thePayload.isBeacon || sendInterface_1._transport === 3) {
                  useHeaders_1 = false;
                }
                var requestDetails_1 = _buildRequestDetails(thePayload, useHeaders_1);
                useHeaders_1 = useHeaders_1 || requestDetails_1.useHdrs;
                var sendEventStart_1 = getTime();
                doPerf(_core, function() {
                  return "HttpManager:_doPayloadSend";
                }, function() {
                  for (var batchLp = 0; batchLp < thePayload.batches.length; batchLp++) {
                    var theBatch = thePayload.batches[batchLp];
                    var theEvents = theBatch.events();
                    for (var evtLp = 0; evtLp < theEvents.length; evtLp++) {
                      var telemetryItem = theEvents[evtLp];
                      if (_enableEventTimings) {
                        var timings = telemetryItem.timings = telemetryItem.timings || {};
                        _setTimingValue(timings, "sendEventStart", sendEventStart_1);
                        _setTimingValue(timings, "serializationStart", serializationStart);
                        _setTimingValue(timings, "serializationCompleted", serializationCompleted);
                      }
                      telemetryItem[strSendAttempt] > 0 ? telemetryItem[strSendAttempt]++ : telemetryItem[strSendAttempt] = 1;
                    }
                  }
                  _sendBatchesNotification(thePayload.batches, 1e3 + (sendReason || 0), thePayload.sendType, true);
                  var orgPayloadData = {
                    data: thePayload.payloadBlob,
                    urlString: requestDetails_1.url,
                    headers: requestDetails_1.hdrs,
                    _thePayload: thePayload,
                    _sendReason: sendReason,
                    timeout: _xhrTimeout,
                    disableXhrSync: _disableXhrSync,
                    disableFetchKeepAlive: _disableFetchKeepAlive
                  };
                  if (useHeaders_1) {
                    if (!_hasHeader(orgPayloadData.headers, STR_CACHE_CONTROL)) {
                      orgPayloadData.headers[STR_CACHE_CONTROL] = DEFAULT_CACHE_CONTROL;
                    }
                    if (!_hasHeader(orgPayloadData.headers, STR_CONTENT_TYPE_HEADER)) {
                      orgPayloadData.headers[STR_CONTENT_TYPE_HEADER] = DEFAULT_CONTENT_TYPE;
                    }
                  }
                  var sender = null;
                  if (sendInterface_1) {
                    sender = /* @__PURE__ */ __name(function(payload) {
                      _clockSkewManager.firstRequestSent();
                      var onComplete = /* @__PURE__ */ __name(function(status, headers) {
                        _retryRequestIfNeeded(status, headers, thePayload, sendReason);
                      }, "onComplete");
                      var isSync = thePayload.isTeardown || thePayload.isSync;
                      try {
                        sendInterface_1.sendPOST(payload, onComplete, isSync);
                        if (_self.sendListener) {
                          _self.sendListener(orgPayloadData, payload, isSync, thePayload.isBeacon);
                        }
                      } catch (ex) {
                        _warnToConsole(_logger, "Unexpected exception sending payload. Ex:" + dumpObj(ex));
                        _doOnComplete(onComplete, 0, {});
                      }
                    }, "sender");
                  }
                  doPerf(_core, function() {
                    return "HttpManager:_doPayloadSend.sender";
                  }, function() {
                    if (sender) {
                      if (thePayload.sendType === 0) {
                        _outstandingRequests++;
                      }
                      if (useSendHook_1 && !thePayload.isBeacon && sendInterface_1._transport !== 3) {
                        var hookData_1 = {
                          data: orgPayloadData.data,
                          urlString: orgPayloadData.urlString,
                          headers: extend2({}, orgPayloadData.headers),
                          timeout: orgPayloadData.timeout,
                          disableXhrSync: orgPayloadData.disableXhrSync,
                          disableFetchKeepAlive: orgPayloadData.disableFetchKeepAlive
                        };
                        var senderCalled_1 = false;
                        doPerf(_core, function() {
                          return "HttpManager:_doPayloadSend.sendHook";
                        }, function() {
                          try {
                            _self.sendHook(hookData_1, function(payload) {
                              senderCalled_1 = true;
                              if (!_customHttpInterface && !payload._thePayload) {
                                payload._thePayload = payload._thePayload || orgPayloadData._thePayload;
                                payload._sendReason = payload._sendReason || orgPayloadData._sendReason;
                              }
                              sender(payload);
                            }, thePayload.isSync || thePayload.isTeardown);
                          } catch (ex) {
                            if (!senderCalled_1) {
                              sender(orgPayloadData);
                            }
                          }
                        });
                      } else {
                        sender(orgPayloadData);
                      }
                    }
                  });
                }, function() {
                  return { thePayload, serializationStart, serializationCompleted, sendReason };
                }, thePayload.isSync);
              }
              if (thePayload.sizeExceed && thePayload.sizeExceed.length > 0) {
                _sendBatchesNotification(thePayload.sizeExceed, 8003, thePayload.sendType);
              }
              if (thePayload.failedEvts && thePayload.failedEvts.length > 0) {
                _sendBatchesNotification(thePayload.failedEvts, 8002, thePayload.sendType);
              }
            }
            __name(_doPayloadSend, "_doPayloadSend");
            function _addEventCompletedTimings(theEvents, sendEventCompleted) {
              if (_enableEventTimings) {
                arrForEach(theEvents, function(theEvent) {
                  var timings = theEvent.timings = theEvent.timings || {};
                  _setTimingValue(timings, "sendEventCompleted", sendEventCompleted);
                });
              }
            }
            __name(_addEventCompletedTimings, "_addEventCompletedTimings");
            function _retryRequestIfNeeded(status, headers, thePayload, sendReason) {
              var reason = 9e3;
              var droppedBatches = null;
              var isRetrying = false;
              var backOffTrans = false;
              try {
                var shouldRetry = true;
                if (typeof status !== strShimUndefined) {
                  if (headers) {
                    _clockSkewManager.setClockSkew(headers[STR_TIME_DELTA_HEADER]);
                    var killDuration = headers[STR_KILL_DURATION_HEADER] || headers["kill-duration-seconds"];
                    arrForEach(_killSwitch.setKillSwitchTenants(headers[STR_KILL_TOKENS_HEADER], killDuration), function(killToken) {
                      arrForEach(thePayload.batches, function(theBatch) {
                        if (theBatch.iKey() === killToken) {
                          droppedBatches = droppedBatches || [];
                          var removedEvents = theBatch.split(0);
                          thePayload.numEvents -= removedEvents.count();
                          droppedBatches.push(removedEvents);
                        }
                      });
                    });
                  }
                  if (status == 200 || status == 204) {
                    reason = 200;
                    return;
                  }
                  if (!retryPolicyShouldRetryForStatus(status) || thePayload.numEvents <= 0) {
                    shouldRetry = false;
                  }
                  reason = 9e3 + status % 1e3;
                }
                if (shouldRetry) {
                  reason = 100;
                  var retryCount_1 = thePayload.retryCnt;
                  if (thePayload.sendType === 0) {
                    if (retryCount_1 < maxRequestRetriesBeforeBackoff) {
                      isRetrying = true;
                      _doAction(function() {
                        if (thePayload.sendType === 0) {
                          _outstandingRequests--;
                        }
                        _sendBatches(
                          thePayload.batches,
                          retryCount_1 + 1,
                          thePayload.isTeardown,
                          _isUnloading ? 2 : thePayload.sendType,
                          5
                          /* SendRequestReason.Retry */
                        );
                      }, _isUnloading, retryPolicyGetMillisToBackoffForRetry(retryCount_1));
                    } else {
                      backOffTrans = true;
                      if (_isUnloading) {
                        reason = 8001;
                      }
                    }
                  }
                }
              } finally {
                if (!isRetrying) {
                  _clockSkewManager.setClockSkew();
                  _handleRequestFinished(thePayload, reason, sendReason, backOffTrans);
                }
                _sendBatchesNotification(droppedBatches, 8004, thePayload.sendType);
              }
            }
            __name(_retryRequestIfNeeded, "_retryRequestIfNeeded");
            function _handleRequestFinished(thePayload, batchReason, sendReason, backOffTrans) {
              try {
                if (backOffTrans) {
                  _postManager._backOffTransmission();
                }
                if (batchReason === 200) {
                  if (!backOffTrans && !thePayload.isSync) {
                    _postManager._clearBackOff();
                  }
                  _addCompleteTimings(thePayload.batches);
                }
                _sendBatchesNotification(thePayload.batches, batchReason, thePayload.sendType, true);
              } finally {
                if (thePayload.sendType === 0) {
                  _outstandingRequests--;
                  if (sendReason !== 5) {
                    _self.sendQueuedRequests(thePayload.sendType, sendReason);
                  }
                }
              }
            }
            __name(_handleRequestFinished, "_handleRequestFinished");
            function _addCompleteTimings(theBatches) {
              if (_enableEventTimings) {
                var sendEventCompleted_1 = getTime();
                arrForEach(theBatches, function(theBatch) {
                  if (theBatch && theBatch.count() > 0) {
                    _addEventCompletedTimings(theBatch.events(), sendEventCompleted_1);
                  }
                });
              }
            }
            __name(_addCompleteTimings, "_addCompleteTimings");
            function _doAction(cb, isSync, interval) {
              if (isSync) {
                cb();
              } else {
                timeoutOverride.set(cb, interval);
              }
            }
            __name(_doAction, "_doAction");
            function _convertAllHeadersToMap(headersString) {
              var headers = {};
              if (isString(headersString)) {
                var headersArray = strTrim(headersString).split(/[\r\n]+/);
                arrForEach(headersArray, function(headerEntry) {
                  if (headerEntry) {
                    var idx = headerEntry.indexOf(": ");
                    if (idx !== -1) {
                      var header = strTrim(headerEntry.substring(0, idx)).toLowerCase();
                      var value = strTrim(headerEntry.substring(idx + 1));
                      headers[header] = value;
                    } else {
                      headers[strTrim(headerEntry)] = 1;
                    }
                  }
                });
              }
              return headers;
            }
            __name(_convertAllHeadersToMap, "_convertAllHeadersToMap");
            function _getMsfpc2(thePayload) {
              for (var lp = 0; lp < thePayload.batches.length; lp++) {
                var msfpc = thePayload.batches[lp].Msfpc();
                if (msfpc) {
                  return encodeURIComponent(msfpc);
                }
              }
              return STR_EMPTY3;
            }
            __name(_getMsfpc2, "_getMsfpc");
            function _handleCollectorResponse(responseText) {
              var responseHandlers = _self._responseHandlers;
              try {
                for (var i = 0; i < responseHandlers.length; i++) {
                  try {
                    responseHandlers[i](responseText);
                  } catch (e) {
                    _throwInternal(_logger, 1, 519, "Response handler failed: " + e);
                  }
                }
                if (responseText) {
                  var response = JSON.parse(responseText);
                  if (isValueAssigned(response.webResult) && isValueAssigned(response.webResult[STR_MSFPC])) {
                    _cookieMgr.set("MSFPC", response.webResult[STR_MSFPC], 365 * 86400);
                  }
                }
              } catch (ex) {
              }
            }
            __name(_handleCollectorResponse, "_handleCollectorResponse");
            function _sendBatchesNotification(theBatches, batchReason, sendType, sendSync) {
              if (theBatches && theBatches.length > 0 && actions) {
                var theAction_1 = actions[_getNotificationAction(batchReason)];
                if (theAction_1) {
                  var isSyncRequest_1 = sendType !== 0;
                  doPerf(_core, function() {
                    return "HttpManager:_sendBatchesNotification";
                  }, function() {
                    _doAction(function() {
                      try {
                        theAction_1.call(actions, theBatches, batchReason, isSyncRequest_1, sendType);
                      } catch (e) {
                        _throwInternal(_logger, 1, 74, "send request notification failed: " + e);
                      }
                    }, sendSync || isSyncRequest_1, 0);
                  }, function() {
                    return { batches: _createDebugBatches(theBatches), reason: batchReason, isSync: isSyncRequest_1, sendSync, sendType };
                  }, !isSyncRequest_1);
                }
              }
            }
            __name(_sendBatchesNotification, "_sendBatchesNotification");
            function _getNotificationAction(reason) {
              var action = _eventActionMap[reason];
              if (!isValueAssigned(action)) {
                action = STR_OTHER;
                if (reason >= 9e3 && reason <= 9999) {
                  action = STR_RESPONSE_FAIL;
                } else if (reason >= 8e3 && reason <= 8999) {
                  action = STR_DROPPED;
                } else if (reason >= 1e3 && reason <= 1999) {
                  action = STR_SENDING;
                }
              }
              return action;
            }
            __name(_getNotificationAction, "_getNotificationAction");
          });
        }
        __name(HttpManager2, "HttpManager");
        HttpManager2.__ieDyn = 1;
        return HttpManager2;
      }();
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/TimeoutOverrideWrapper.js
  function defaultSetTimeout(callback, ms2) {
    var args = [];
    for (var _i2 = 2; _i2 < arguments.length; _i2++) {
      args[_i2 - 2] = arguments[_i2];
    }
    return setTimeout(callback, ms2, args);
  }
  function defaultClearTimeout(timeoutId) {
    clearTimeout(timeoutId);
  }
  function createTimeoutWrapper(argSetTimeout, argClearTimeout) {
    return {
      set: argSetTimeout || defaultSetTimeout,
      clear: argClearTimeout || defaultClearTimeout
    };
  }
  var init_TimeoutOverrideWrapper = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/TimeoutOverrideWrapper.js"() {
      __name(defaultSetTimeout, "defaultSetTimeout");
      __name(defaultClearTimeout, "defaultClearTimeout");
      __name(createTimeoutWrapper, "createTimeoutWrapper");
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/PostChannel.js
  var FlushCheckTimer, MaxNumberEventPerBatch, EventsDroppedAtOneTime, MaxSendAttempts, MaxSyncUnloadSendAttempts, MaxBackoffCount, MaxConnections, MaxRequestRetriesBeforeBackoff, strEventsDiscarded, strOverrideInstrumentationKey, strMaxEventRetryAttempts, strMaxUnloadEventRetryAttempts, strAddUnloadCb, PostChannel, PostChannel_default;
  var init_PostChannel = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/PostChannel.js"() {
      init_applicationinsights_shims();
      init_dynamicproto_js();
      init_Index();
      init_DataModels();
      init_EventBatch();
      init_HttpManager();
      init_InternalConstants3();
      init_RetryPolicy();
      init_TimeoutOverrideWrapper();
      FlushCheckTimer = 0.25;
      MaxNumberEventPerBatch = 500;
      EventsDroppedAtOneTime = 20;
      MaxSendAttempts = 6;
      MaxSyncUnloadSendAttempts = 2;
      MaxBackoffCount = 4;
      MaxConnections = 2;
      MaxRequestRetriesBeforeBackoff = 1;
      strEventsDiscarded = "eventsDiscarded";
      strOverrideInstrumentationKey = "overrideInstrumentationKey";
      strMaxEventRetryAttempts = "maxEventRetryAttempts";
      strMaxUnloadEventRetryAttempts = "maxUnloadEventRetryAttempts";
      strAddUnloadCb = "addUnloadCb";
      PostChannel = /** @class */
      function(_super) {
        __extendsFn(PostChannel2, _super);
        function PostChannel2() {
          var _this = _super.call(this) || this;
          _this.identifier = "PostChannel";
          _this.priority = 1011;
          _this.version = "3.2.8";
          var _config;
          var _isTeardownCalled = false;
          var _flushCallbackQueue = [];
          var _flushCallbackTimerId = null;
          var _paused = false;
          var _immediateQueueSize = 0;
          var _immediateQueueSizeLimit = 500;
          var _queueSize = 0;
          var _queueSizeLimit = 1e4;
          var _profiles = {};
          var _currentProfile = RT_PROFILE;
          var _scheduledTimerId = null;
          var _immediateTimerId = null;
          var _currentBackoffCount = 0;
          var _timerCount = 0;
          var _xhrOverride;
          var _httpManager;
          var _batchQueues = {};
          var _autoFlushEventsLimit;
          var _autoFlushBatchLimit;
          var _delayedBatchSendLatency = -1;
          var _delayedBatchReason;
          var _optimizeObject = true;
          var _isPageUnloadTriggered = false;
          var _maxEventSendAttempts = MaxSendAttempts;
          var _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;
          var _evtNamespace;
          var _timeoutWrapper;
          dynamicProto(PostChannel2, _this, function(_self, _base) {
            _initDefaults();
            _self["_getDbgPlgTargets"] = function() {
              return [_httpManager];
            };
            _self.initialize = function(coreConfig, core, extensions7) {
              doPerf(core, function() {
                return "PostChannel:initialize";
              }, function() {
                var extendedCore = core;
                _base.initialize(coreConfig, core, extensions7);
                try {
                  var hasAddUnloadCb = !!core[strAddUnloadCb];
                  _evtNamespace = mergeEvtNamespace(createUniqueNamespace(_self.identifier), core.evtNamespace && core.evtNamespace());
                  var ctx = _self._getTelCtx();
                  coreConfig.extensionConfig[_self.identifier] = coreConfig.extensionConfig[_self.identifier] || {};
                  _config = ctx.getExtCfg(_self.identifier);
                  _timeoutWrapper = createTimeoutWrapper(_config.setTimeoutOverride, _config.clearTimeoutOverride);
                  _optimizeObject = !_config.disableOptimizeObj && isChromium();
                  _hookWParam(extendedCore);
                  if (_config.eventsLimitInMem > 0) {
                    _queueSizeLimit = _config.eventsLimitInMem;
                  }
                  if (_config.immediateEventLimit > 0) {
                    _immediateQueueSizeLimit = _config.immediateEventLimit;
                  }
                  if (_config.autoFlushEventsLimit > 0) {
                    _autoFlushEventsLimit = _config.autoFlushEventsLimit;
                  }
                  if (isNumber(_config[strMaxEventRetryAttempts])) {
                    _maxEventSendAttempts = _config[strMaxEventRetryAttempts];
                  }
                  if (isNumber(_config[strMaxUnloadEventRetryAttempts])) {
                    _maxUnloadEventSendAttempts = _config[strMaxUnloadEventRetryAttempts];
                  }
                  _setAutoLimits();
                  if (_config.httpXHROverride && _config.httpXHROverride.sendPOST) {
                    _xhrOverride = _config.httpXHROverride;
                  }
                  if (isValueAssigned(coreConfig.anonCookieName)) {
                    _httpManager.addQueryStringParameter("anoncknm", coreConfig.anonCookieName);
                  }
                  _httpManager.sendHook = _config.payloadPreprocessor;
                  _httpManager.sendListener = _config.payloadListener;
                  var endpointUrl = _config.overrideEndpointUrl ? _config.overrideEndpointUrl : coreConfig.endpointUrl;
                  _self._notificationManager = core.getNotifyMgr();
                  _httpManager.initialize(endpointUrl, _self.core, _self, _xhrOverride, _config);
                  var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents || [];
                  addPageUnloadEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);
                  addPageHideEventListener(_handleUnloadEvents, excludePageUnloadEvents, _evtNamespace);
                  addPageShowEventListener(_handleShowEvents, coreConfig.disablePageShowEvents, _evtNamespace);
                } catch (e) {
                  _self.setInitialized(false);
                  throw e;
                }
              }, function() {
                return { coreConfig, core, extensions: extensions7 };
              });
            };
            _self.processTelemetry = function(ev, itemCtx) {
              setProcessTelemetryTimings(ev, _self.identifier);
              itemCtx = _self._getTelCtx(itemCtx);
              var channelConfig = itemCtx.getExtCfg(_self.identifier);
              var disableTelemetry = !!_config.disableTelemetry;
              if (channelConfig) {
                disableTelemetry = disableTelemetry || !!channelConfig.disableTelemetry;
              }
              var event = ev;
              if (!disableTelemetry && !_isTeardownCalled) {
                if (_config[strOverrideInstrumentationKey]) {
                  event.iKey = _config[strOverrideInstrumentationKey];
                }
                if (channelConfig && channelConfig[strOverrideInstrumentationKey]) {
                  event.iKey = channelConfig[strOverrideInstrumentationKey];
                }
                _addEventToQueues(event, true);
                if (_isPageUnloadTriggered) {
                  _releaseAllQueues(
                    2,
                    2
                    /* SendRequestReason.Unload */
                  );
                } else {
                  _scheduleTimer();
                }
              }
              _self.processNext(event, itemCtx);
            };
            _self._doTeardown = function(unloadCtx, unloadState) {
              _releaseAllQueues(
                2,
                2
                /* SendRequestReason.Unload */
              );
              _isTeardownCalled = true;
              _httpManager.teardown();
              removePageUnloadEventListener(null, _evtNamespace);
              removePageHideEventListener(null, _evtNamespace);
              removePageShowEventListener(null, _evtNamespace);
              _initDefaults();
            };
            function _hookWParam(extendedCore) {
              var existingGetWParamMethod = extendedCore.getWParam;
              extendedCore.getWParam = function() {
                var wparam = 0;
                if (_config.ignoreMc1Ms0CookieProcessing) {
                  wparam = wparam | 2;
                }
                return wparam | existingGetWParamMethod();
              };
            }
            __name(_hookWParam, "_hookWParam");
            function _handleUnloadEvents(evt) {
              var theEvt = evt || getWindow().event;
              if (theEvt.type !== "beforeunload") {
                _isPageUnloadTriggered = true;
                _httpManager.setUnloading(_isPageUnloadTriggered);
              }
              _releaseAllQueues(
                2,
                2
                /* SendRequestReason.Unload */
              );
            }
            __name(_handleUnloadEvents, "_handleUnloadEvents");
            function _handleShowEvents(evt) {
              _isPageUnloadTriggered = false;
              _httpManager.setUnloading(_isPageUnloadTriggered);
            }
            __name(_handleShowEvents, "_handleShowEvents");
            function _addEventToQueues(event, append) {
              if (!event.sendAttempt) {
                event.sendAttempt = 0;
              }
              if (!event.latency) {
                event.latency = 1;
              }
              if (event.ext && event.ext[STR_TRACE]) {
                delete event.ext[STR_TRACE];
              }
              if (event.ext && event.ext[STR_USER] && event.ext[STR_USER]["id"]) {
                delete event.ext[STR_USER]["id"];
              }
              if (_optimizeObject) {
                setProcessTelemetryTimings;
                event.ext = optimizeObject(event.ext);
                if (event.baseData) {
                  event.baseData = optimizeObject(event.baseData);
                }
                if (event.data) {
                  event.data = optimizeObject(event.data);
                }
              }
              if (event.sync) {
                if (_currentBackoffCount || _paused) {
                  event.latency = 3;
                  event.sync = false;
                } else {
                  if (_httpManager) {
                    if (_optimizeObject) {
                      event = optimizeObject(event);
                    }
                    _httpManager.sendSynchronousBatch(
                      EventBatch.create(event.iKey, [event]),
                      event.sync === true ? 1 : event.sync,
                      3
                      /* SendRequestReason.SyncEvent */
                    );
                    return;
                  }
                }
              }
              var evtLatency = event.latency;
              var queueSize = _queueSize;
              var queueLimit = _queueSizeLimit;
              if (evtLatency === 4) {
                queueSize = _immediateQueueSize;
                queueLimit = _immediateQueueSizeLimit;
              }
              var eventDropped = false;
              if (queueSize < queueLimit) {
                eventDropped = !_addEventToProperQueue(event, append);
              } else {
                var dropLatency = 1;
                var dropNumber = EventsDroppedAtOneTime;
                if (evtLatency === 4) {
                  dropLatency = 4;
                  dropNumber = 1;
                }
                eventDropped = true;
                if (_dropEventWithLatencyOrLess(event.iKey, event.latency, dropLatency, dropNumber)) {
                  eventDropped = !_addEventToProperQueue(event, append);
                }
              }
              if (eventDropped) {
                _notifyEvents(strEventsDiscarded, [event], EventsDiscardedReason.QueueFull);
              }
            }
            __name(_addEventToQueues, "_addEventToQueues");
            _self.setEventQueueLimits = function(eventLimit, autoFlushLimit) {
              _queueSizeLimit = eventLimit > 0 ? eventLimit : 1e4;
              _autoFlushEventsLimit = autoFlushLimit > 0 ? autoFlushLimit : 0;
              _setAutoLimits();
              var doFlush = _queueSize > eventLimit;
              if (!doFlush && _autoFlushBatchLimit > 0) {
                for (var latency = 1; !doFlush && latency <= 3; latency++) {
                  var batchQueue = _batchQueues[latency];
                  if (batchQueue && batchQueue.batches) {
                    arrForEach(batchQueue.batches, function(theBatch) {
                      if (theBatch && theBatch.count() >= _autoFlushBatchLimit) {
                        doFlush = true;
                      }
                    });
                  }
                }
              }
              _performAutoFlush(true, doFlush);
            };
            _self.pause = function() {
              _clearScheduledTimer();
              _paused = true;
              _httpManager.pause();
            };
            _self.resume = function() {
              _paused = false;
              _httpManager.resume();
              _scheduleTimer();
            };
            _self.addResponseHandler = function(responseHandler) {
              _httpManager._responseHandlers.push(responseHandler);
            };
            _self._loadTransmitProfiles = function(profiles) {
              _resetTransmitProfiles();
              objForEachKey(profiles, function(profileName, profileValue) {
                var profLen = profileValue.length;
                if (profLen >= 2) {
                  var directValue = profLen > 2 ? profileValue[2] : 0;
                  profileValue.splice(0, profLen - 2);
                  if (profileValue[1] < 0) {
                    profileValue[0] = -1;
                  }
                  if (profileValue[1] > 0 && profileValue[0] > 0) {
                    var timerMultiplier = profileValue[0] / profileValue[1];
                    profileValue[0] = Math.ceil(timerMultiplier) * profileValue[1];
                  }
                  if (directValue >= 0 && profileValue[1] >= 0 && directValue > profileValue[1]) {
                    directValue = profileValue[1];
                  }
                  profileValue.push(directValue);
                  _profiles[profileName] = profileValue;
                }
              });
            };
            _self.flush = function(async, callback, sendReason) {
              if (async === void 0) {
                async = true;
              }
              if (!_paused) {
                sendReason = sendReason || 1;
                if (async) {
                  if (_flushCallbackTimerId == null) {
                    _clearScheduledTimer();
                    _queueBatches(1, 0, sendReason);
                    _flushCallbackTimerId = _createTimer(function() {
                      _flushCallbackTimerId = null;
                      _flushImpl(callback, sendReason);
                    }, 0);
                  } else {
                    _flushCallbackQueue.push(callback);
                  }
                } else {
                  var cleared = _clearScheduledTimer();
                  _sendEventsForLatencyAndAbove(1, 1, sendReason);
                  if (callback !== null && callback !== void 0) {
                    callback();
                  }
                  if (cleared) {
                    _scheduleTimer();
                  }
                }
              }
            };
            _self.setMsaAuthTicket = function(ticket) {
              _httpManager.addHeader(STR_MSA_DEVICE_TICKET, ticket);
            };
            _self.hasEvents = _hasEvents;
            _self._setTransmitProfile = function(profileName) {
              if (_currentProfile !== profileName && _profiles[profileName] !== void 0) {
                _clearScheduledTimer();
                _currentProfile = profileName;
                _scheduleTimer();
              }
            };
            function _sendEventsForLatencyAndAbove(latency, sendType, sendReason) {
              var queued = _queueBatches(latency, sendType, sendReason);
              _httpManager.sendQueuedRequests(sendType, sendReason);
              return queued;
            }
            __name(_sendEventsForLatencyAndAbove, "_sendEventsForLatencyAndAbove");
            function _hasEvents() {
              return _queueSize > 0;
            }
            __name(_hasEvents, "_hasEvents");
            function _scheduleTimer() {
              if (_delayedBatchSendLatency >= 0 && _queueBatches(_delayedBatchSendLatency, 0, _delayedBatchReason)) {
                _httpManager.sendQueuedRequests(0, _delayedBatchReason);
              }
              if (_immediateQueueSize > 0 && !_immediateTimerId && !_paused) {
                var immediateTimeOut = _profiles[_currentProfile][2];
                if (immediateTimeOut >= 0) {
                  _immediateTimerId = _createTimer(function() {
                    _immediateTimerId = null;
                    _sendEventsForLatencyAndAbove(
                      4,
                      0,
                      1
                      /* SendRequestReason.NormalSchedule */
                    );
                    _scheduleTimer();
                  }, immediateTimeOut);
                }
              }
              var timeOut = _profiles[_currentProfile][1];
              if (!_scheduledTimerId && !_flushCallbackTimerId && timeOut >= 0 && !_paused) {
                if (_hasEvents()) {
                  _scheduledTimerId = _createTimer(function() {
                    _scheduledTimerId = null;
                    _sendEventsForLatencyAndAbove(
                      _timerCount === 0 ? 3 : 1,
                      0,
                      1
                      /* SendRequestReason.NormalSchedule */
                    );
                    _timerCount++;
                    _timerCount %= 2;
                    _scheduleTimer();
                  }, timeOut);
                } else {
                  _timerCount = 0;
                }
              }
            }
            __name(_scheduleTimer, "_scheduleTimer");
            _self._backOffTransmission = function() {
              if (_currentBackoffCount < MaxBackoffCount) {
                _currentBackoffCount++;
                _clearScheduledTimer();
                _scheduleTimer();
              }
            };
            _self._clearBackOff = function() {
              if (_currentBackoffCount) {
                _currentBackoffCount = 0;
                _clearScheduledTimer();
                _scheduleTimer();
              }
            };
            function _initDefaults() {
              _config = null;
              _isTeardownCalled = false;
              _flushCallbackQueue = [];
              _flushCallbackTimerId = null;
              _paused = false;
              _immediateQueueSize = 0;
              _immediateQueueSizeLimit = 500;
              _queueSize = 0;
              _queueSizeLimit = 1e4;
              _profiles = {};
              _currentProfile = RT_PROFILE;
              _scheduledTimerId = null;
              _immediateTimerId = null;
              _currentBackoffCount = 0;
              _timerCount = 0;
              _xhrOverride = null;
              _batchQueues = {};
              _autoFlushEventsLimit = void 0;
              _autoFlushBatchLimit = 0;
              _delayedBatchSendLatency = -1;
              _delayedBatchReason = null;
              _optimizeObject = true;
              _isPageUnloadTriggered = false;
              _maxEventSendAttempts = MaxSendAttempts;
              _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;
              _evtNamespace = null;
              _timeoutWrapper = createTimeoutWrapper();
              _httpManager = new HttpManager(MaxNumberEventPerBatch, MaxConnections, MaxRequestRetriesBeforeBackoff, {
                requeue: _requeueEvents,
                send: _sendingEvent,
                sent: _eventsSentEvent,
                drop: _eventsDropped,
                rspFail: _eventsResponseFail,
                oth: _otherEvent
              }, _timeoutWrapper);
              _initializeProfiles();
              _clearQueues();
              _setAutoLimits();
            }
            __name(_initDefaults, "_initDefaults");
            function _createTimer(theTimerFunc, timeOut) {
              if (timeOut === 0 && _currentBackoffCount) {
                timeOut = 1;
              }
              var timerMultiplier = 1e3;
              if (_currentBackoffCount) {
                timerMultiplier = retryPolicyGetMillisToBackoffForRetry(_currentBackoffCount - 1);
              }
              return _timeoutWrapper.set(theTimerFunc, timeOut * timerMultiplier);
            }
            __name(_createTimer, "_createTimer");
            function _clearScheduledTimer() {
              if (_scheduledTimerId !== null) {
                _timeoutWrapper.clear(_scheduledTimerId);
                _scheduledTimerId = null;
                _timerCount = 0;
                return true;
              }
              return false;
            }
            __name(_clearScheduledTimer, "_clearScheduledTimer");
            function _releaseAllQueues(sendType, sendReason) {
              _clearScheduledTimer();
              if (_flushCallbackTimerId) {
                _timeoutWrapper.clear(_flushCallbackTimerId);
                _flushCallbackTimerId = null;
              }
              if (!_paused) {
                _sendEventsForLatencyAndAbove(1, sendType, sendReason);
              }
            }
            __name(_releaseAllQueues, "_releaseAllQueues");
            function _clearQueues() {
              _batchQueues[
                4
                /* EventLatencyValue.Immediate */
              ] = {
                batches: [],
                iKeyMap: {}
              };
              _batchQueues[
                3
                /* EventLatencyValue.RealTime */
              ] = {
                batches: [],
                iKeyMap: {}
              };
              _batchQueues[
                2
                /* EventLatencyValue.CostDeferred */
              ] = {
                batches: [],
                iKeyMap: {}
              };
              _batchQueues[
                1
                /* EventLatencyValue.Normal */
              ] = {
                batches: [],
                iKeyMap: {}
              };
            }
            __name(_clearQueues, "_clearQueues");
            function _getEventBatch(iKey, latency, create) {
              var batchQueue = _batchQueues[latency];
              if (!batchQueue) {
                latency = 1;
                batchQueue = _batchQueues[latency];
              }
              var eventBatch = batchQueue.iKeyMap[iKey];
              if (!eventBatch && create) {
                eventBatch = EventBatch.create(iKey);
                batchQueue.batches.push(eventBatch);
                batchQueue.iKeyMap[iKey] = eventBatch;
              }
              return eventBatch;
            }
            __name(_getEventBatch, "_getEventBatch");
            function _performAutoFlush(isAsync, doFlush) {
              if (_httpManager.canSendRequest() && !_currentBackoffCount) {
                if (_autoFlushEventsLimit > 0 && _queueSize > _autoFlushEventsLimit) {
                  doFlush = true;
                }
                if (doFlush && _flushCallbackTimerId == null) {
                  _self.flush(
                    isAsync,
                    null,
                    20
                    /* SendRequestReason.MaxQueuedEvents */
                  );
                }
              }
            }
            __name(_performAutoFlush, "_performAutoFlush");
            function _addEventToProperQueue(event, append) {
              if (_optimizeObject) {
                event = optimizeObject(event);
              }
              var latency = event.latency;
              var eventBatch = _getEventBatch(event.iKey, latency, true);
              if (eventBatch.addEvent(event)) {
                if (latency !== 4) {
                  _queueSize++;
                  if (append && event.sendAttempt === 0) {
                    _performAutoFlush(!event.sync, _autoFlushBatchLimit > 0 && eventBatch.count() >= _autoFlushBatchLimit);
                  }
                } else {
                  _immediateQueueSize++;
                }
                return true;
              }
              return false;
            }
            __name(_addEventToProperQueue, "_addEventToProperQueue");
            function _dropEventWithLatencyOrLess(iKey, latency, currentLatency, dropNumber) {
              while (currentLatency <= latency) {
                var eventBatch = _getEventBatch(iKey, latency, true);
                if (eventBatch && eventBatch.count() > 0) {
                  var droppedEvents = eventBatch.split(0, dropNumber);
                  var droppedCount = droppedEvents.count();
                  if (droppedCount > 0) {
                    if (currentLatency === 4) {
                      _immediateQueueSize -= droppedCount;
                    } else {
                      _queueSize -= droppedCount;
                    }
                    _notifyBatchEvents(strEventsDiscarded, [droppedEvents], EventsDiscardedReason.QueueFull);
                    return true;
                  }
                }
                currentLatency++;
              }
              _resetQueueCounts();
              return false;
            }
            __name(_dropEventWithLatencyOrLess, "_dropEventWithLatencyOrLess");
            function _resetQueueCounts() {
              var immediateQueue = 0;
              var normalQueue = 0;
              var _loop_1 = /* @__PURE__ */ __name(function(latency2) {
                var batchQueue = _batchQueues[latency2];
                if (batchQueue && batchQueue.batches) {
                  arrForEach(batchQueue.batches, function(theBatch) {
                    if (latency2 === 4) {
                      immediateQueue += theBatch.count();
                    } else {
                      normalQueue += theBatch.count();
                    }
                  });
                }
              }, "_loop_1");
              for (var latency = 1; latency <= 4; latency++) {
                _loop_1(latency);
              }
              _queueSize = normalQueue;
              _immediateQueueSize = immediateQueue;
            }
            __name(_resetQueueCounts, "_resetQueueCounts");
            function _queueBatches(latency, sendType, sendReason) {
              var eventsQueued = false;
              var isAsync = sendType === 0;
              if (!isAsync || _httpManager.canSendRequest()) {
                doPerf(_self.core, function() {
                  return "PostChannel._queueBatches";
                }, function() {
                  var droppedEvents = [];
                  var latencyToProcess = 4;
                  while (latencyToProcess >= latency) {
                    var batchQueue = _batchQueues[latencyToProcess];
                    if (batchQueue && batchQueue.batches && batchQueue.batches.length > 0) {
                      arrForEach(batchQueue.batches, function(theBatch) {
                        if (!_httpManager.addBatch(theBatch)) {
                          droppedEvents = droppedEvents.concat(theBatch.events());
                        } else {
                          eventsQueued = eventsQueued || theBatch && theBatch.count() > 0;
                        }
                        if (latencyToProcess === 4) {
                          _immediateQueueSize -= theBatch.count();
                        } else {
                          _queueSize -= theBatch.count();
                        }
                      });
                      batchQueue.batches = [];
                      batchQueue.iKeyMap = {};
                    }
                    latencyToProcess--;
                  }
                  if (droppedEvents.length > 0) {
                    _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.KillSwitch);
                  }
                  if (eventsQueued && _delayedBatchSendLatency >= latency) {
                    _delayedBatchSendLatency = -1;
                    _delayedBatchReason = 0;
                  }
                }, function() {
                  return { latency, sendType, sendReason };
                }, !isAsync);
              } else {
                _delayedBatchSendLatency = _delayedBatchSendLatency >= 0 ? Math.min(_delayedBatchSendLatency, latency) : latency;
                _delayedBatchReason = Math.max(_delayedBatchReason, sendReason);
              }
              return eventsQueued;
            }
            __name(_queueBatches, "_queueBatches");
            function _flushImpl(callback, sendReason) {
              _sendEventsForLatencyAndAbove(1, 0, sendReason);
              _resetQueueCounts();
              _waitForIdleManager(function() {
                if (callback) {
                  callback();
                }
                if (_flushCallbackQueue.length > 0) {
                  _flushCallbackTimerId = _createTimer(function() {
                    _flushCallbackTimerId = null;
                    _flushImpl(_flushCallbackQueue.shift(), sendReason);
                  }, 0);
                } else {
                  _flushCallbackTimerId = null;
                  _scheduleTimer();
                }
              });
            }
            __name(_flushImpl, "_flushImpl");
            function _waitForIdleManager(callback) {
              if (_httpManager.isCompletelyIdle()) {
                callback();
              } else {
                _flushCallbackTimerId = _createTimer(function() {
                  _flushCallbackTimerId = null;
                  _waitForIdleManager(callback);
                }, FlushCheckTimer);
              }
            }
            __name(_waitForIdleManager, "_waitForIdleManager");
            function _resetTransmitProfiles() {
              _clearScheduledTimer();
              _initializeProfiles();
              _currentProfile = RT_PROFILE;
              _scheduleTimer();
            }
            __name(_resetTransmitProfiles, "_resetTransmitProfiles");
            function _initializeProfiles() {
              _profiles = {};
              _profiles[RT_PROFILE] = [2, 1, 0];
              _profiles[NRT_PROFILE] = [6, 3, 0];
              _profiles[BE_PROFILE] = [18, 9, 0];
            }
            __name(_initializeProfiles, "_initializeProfiles");
            function _requeueEvents(batches, reason) {
              var droppedEvents = [];
              var maxSendAttempts = _maxEventSendAttempts;
              if (_isPageUnloadTriggered) {
                maxSendAttempts = _maxUnloadEventSendAttempts;
              }
              arrForEach(batches, function(theBatch) {
                if (theBatch && theBatch.count() > 0) {
                  arrForEach(theBatch.events(), function(theEvent) {
                    if (theEvent) {
                      if (theEvent.sync) {
                        theEvent.latency = 4;
                        theEvent.sync = false;
                      }
                      if (theEvent.sendAttempt < maxSendAttempts) {
                        setProcessTelemetryTimings(theEvent, _self.identifier);
                        _addEventToQueues(theEvent, false);
                      } else {
                        droppedEvents.push(theEvent);
                      }
                    }
                  });
                }
              });
              if (droppedEvents.length > 0) {
                _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.NonRetryableStatus);
              }
              if (_isPageUnloadTriggered) {
                _releaseAllQueues(
                  2,
                  2
                  /* SendRequestReason.Unload */
                );
              }
            }
            __name(_requeueEvents, "_requeueEvents");
            function _callNotification(evtName, theArgs) {
              var manager = _self._notificationManager || {};
              var notifyFunc = manager[evtName];
              if (notifyFunc) {
                try {
                  notifyFunc.apply(manager, theArgs);
                } catch (e) {
                  _throwInternal(_self.diagLog(), 1, 74, evtName + " notification failed: " + e);
                }
              }
            }
            __name(_callNotification, "_callNotification");
            function _notifyEvents(evtName, theEvents) {
              var extraArgs = [];
              for (var _i2 = 2; _i2 < arguments.length; _i2++) {
                extraArgs[_i2 - 2] = arguments[_i2];
              }
              if (theEvents && theEvents.length > 0) {
                _callNotification(evtName, [theEvents].concat(extraArgs));
              }
            }
            __name(_notifyEvents, "_notifyEvents");
            function _notifyBatchEvents(evtName, batches) {
              var extraArgs = [];
              for (var _i2 = 2; _i2 < arguments.length; _i2++) {
                extraArgs[_i2 - 2] = arguments[_i2];
              }
              if (batches && batches.length > 0) {
                arrForEach(batches, function(theBatch) {
                  if (theBatch && theBatch.count() > 0) {
                    _callNotification(evtName, [theBatch.events()].concat(extraArgs));
                  }
                });
              }
            }
            __name(_notifyBatchEvents, "_notifyBatchEvents");
            function _sendingEvent(batches, reason, isSyncRequest) {
              if (batches && batches.length > 0) {
                _callNotification("eventsSendRequest", [reason >= 1e3 && reason <= 1999 ? reason - 1e3 : 0, isSyncRequest !== true]);
              }
            }
            __name(_sendingEvent, "_sendingEvent");
            function _eventsSentEvent(batches, reason) {
              _notifyBatchEvents("eventsSent", batches, reason);
              _scheduleTimer();
            }
            __name(_eventsSentEvent, "_eventsSentEvent");
            function _eventsDropped(batches, reason) {
              _notifyBatchEvents(strEventsDiscarded, batches, reason >= 8e3 && reason <= 8999 ? reason - 8e3 : EventsDiscardedReason.Unknown);
            }
            __name(_eventsDropped, "_eventsDropped");
            function _eventsResponseFail(batches) {
              _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.NonRetryableStatus);
              _scheduleTimer();
            }
            __name(_eventsResponseFail, "_eventsResponseFail");
            function _otherEvent(batches, reason) {
              _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.Unknown);
              _scheduleTimer();
            }
            __name(_otherEvent, "_otherEvent");
            function _setAutoLimits() {
              if (!_config || !_config.disableAutoBatchFlushLimit) {
                _autoFlushBatchLimit = Math.max(MaxNumberEventPerBatch * (MaxConnections + 1), _queueSizeLimit / 6);
              } else {
                _autoFlushBatchLimit = 0;
              }
            }
            __name(_setAutoLimits, "_setAutoLimits");
            objDefineAccessors(_self, "_setTimeoutOverride", function() {
              return _timeoutWrapper.set;
            }, function(value) {
              _timeoutWrapper = createTimeoutWrapper(value, _timeoutWrapper.clear);
            });
            objDefineAccessors(_self, "_clearTimeoutOverride", function() {
              return _timeoutWrapper.clear;
            }, function(value) {
              _timeoutWrapper = createTimeoutWrapper(_timeoutWrapper.set, value);
            });
          });
          return _this;
        }
        __name(PostChannel2, "PostChannel");
        PostChannel2.__ieDyn = 1;
        return PostChannel2;
      }(BaseTelemetryPlugin);
      PostChannel_default = PostChannel;
    }
  });

  // node_modules/@microsoft/1ds-post-js/dist-esm/src/Index.js
  var Index_exports2 = {};
  __export(Index_exports2, {
    BE_PROFILE: () => BE_PROFILE,
    NRT_PROFILE: () => NRT_PROFILE,
    PostChannel: () => PostChannel_default,
    RT_PROFILE: () => RT_PROFILE
  });
  var init_Index2 = __esm({
    "node_modules/@microsoft/1ds-post-js/dist-esm/src/Index.js"() {
      init_PostChannel();
      init_DataModels();
    }
  });

  // node_modules/@vscode/extension-telemetry/lib/telemetryReporter.web.min.js
  var telemetryReporter_web_min_exports = {};
  __export(telemetryReporter_web_min_exports, {
    default: () => go
  });
  function ot() {
    return typeof globalThis !== Ue && globalThis ? globalThis : typeof self !== Ue && self ? self : typeof window !== Ue && window ? window : typeof global !== Ue && global ? global : null;
  }
  function Tr(t) {
    throw new TypeError(t);
  }
  function Dt(t) {
    var e = Un;
    if (e)
      return e(t);
    if (t == null)
      return {};
    var r = typeof t;
    r !== Xe && r !== gt2 && Tr("Object prototype may only be an Object:" + t);
    function n() {
    }
    __name(n, "n");
    return n[Ie] = t, new n();
  }
  function B(t, e) {
    typeof e !== gt2 && e !== null && Tr("Class extends value " + String(e) + " is not a constructor or null"), ki(t, e);
    function r() {
      this.constructor = t;
    }
    __name(r, "r");
    t[Ie] = e === null ? Dt(e) : (r[Ie] = e[Ie], new r());
  }
  function kt(t, e) {
    return t && Kn[Nt].hasOwnProperty.call(t, e);
  }
  function No(t) {
    return t && (t === Kn[Nt] || t === Array[Nt]);
  }
  function Ui(t) {
    return No(t) || t === Function[Nt];
  }
  function ir(t) {
    var e;
    if (t) {
      if (qr)
        return qr(t);
      var r = t[Do] || t[Nt] || (t[Hn] ? t[Hn][Nt] : null);
      e = t[zn] || r, kt(t, zn) || (delete t[Fi], e = t[zn] = t[Fi] || t[zn], t[Fi] = r);
    }
    return e;
  }
  function jn(t, e) {
    var r = [];
    if (Po)
      r = Po(t);
    else
      for (var n in t)
        typeof n == "string" && kt(t, n) && r.push(n);
    if (r && r.length > 0)
      for (var i = 0; i < r.length; i++)
        e(r[i]);
  }
  function Oi(t, e, r) {
    return e !== Hn && typeof t[e] === Vn && (r || kt(t, e));
  }
  function Gn(t) {
    throw new TypeError("DynamicProto: " + t);
  }
  function Dc(t) {
    var e = {};
    return jn(t, function(r) {
      !e[r] && Oi(t, r, false) && (e[r] = t[r]);
    }), e;
  }
  function Bi(t, e) {
    for (var r = t.length - 1; r >= 0; r--)
      if (t[r] === e)
        return true;
    return false;
  }
  function Nc(t, e, r, n) {
    function i(s, c, l) {
      var f2 = c[l];
      if (f2[Li] && n) {
        var g = s[qn] || {};
        g[Vr] !== false && (f2 = (g[c[Er]] || {})[l] || f2);
      }
      return function() {
        return f2.apply(s, arguments);
      };
    }
    __name(i, "i");
    var a = {};
    jn(r, function(s) {
      a[s] = i(e, r, s);
    });
    for (var o = ir(t), u = []; o && !Ui(o) && !Bi(u, o); )
      jn(o, function(s) {
        !a[s] && Oi(o, s, !qr) && (a[s] = i(e, o, s));
      }), u.push(o), o = ir(o);
    return a;
  }
  function kc(t, e, r, n) {
    var i = null;
    if (t && kt(r, Er)) {
      var a = t[qn] || {};
      if (i = (a[r[Er]] || {})[e], i || Gn("Missing [" + e + "] " + Vn), !i[_i] && a[Vr] !== false) {
        for (var o = !kt(t, e), u = ir(t), s = []; o && u && !Ui(u) && !Bi(s, u); ) {
          var c = u[e];
          if (c) {
            o = c === n;
            break;
          }
          s.push(u), u = ir(u);
        }
        try {
          o && (t[e] = i), i[_i] = 1;
        } catch (l) {
          a[Vr] = false;
        }
      }
    }
    return i;
  }
  function Fc(t, e, r) {
    var n = e[t];
    return n === r && (n = ir(e)[t]), typeof n !== Vn && Gn("[" + t + "] is not a " + Vn), n;
  }
  function Rc(t, e, r, n, i) {
    function a(s, c) {
      var l = /* @__PURE__ */ __name(function() {
        var f2 = kc(this, c, s, l) || Fc(c, s, l);
        return f2.apply(this, arguments);
      }, "l");
      return l[Li] = 1, l;
    }
    __name(a, "a");
    if (!No(t)) {
      var o = r[qn] = r[qn] || {}, u = o[e] = o[e] || {};
      o[Vr] !== false && (o[Vr] = !!i), jn(r, function(s) {
        Oi(r, s, false) && r[s] !== n[s] && (u[s] = r[s], delete r[s], (!kt(t, s) || t[s] && !t[s][Li]) && (t[s] = a(t, s)));
      });
    }
  }
  function Mc(t, e) {
    if (qr) {
      for (var r = [], n = ir(e); n && !Ui(n) && !Bi(r, n); ) {
        if (n === t)
          return true;
        r.push(n), n = ir(n);
      }
      return false;
    }
    return true;
  }
  function Mi(t, e) {
    return kt(t, Nt) ? t.name || e || Eo : ((t || {})[Hn] || {}).name || e || Eo;
  }
  function W(t, e, r, n) {
    kt(t, Nt) || Gn("theClass is an invalid class definition.");
    var i = t[Nt];
    Mc(i, e) || Gn("[" + Mi(t) + "] is not in class hierarchy of [" + Mi(e) + "]");
    var a = null;
    kt(i, Er) ? a = i[Er] : (a = Ac + Mi(t, "_") + "$" + bo, bo++, i[Er] = a);
    var o = W[Ao], u = !!o[Ri];
    u && n && n[Ri] !== void 0 && (u = !!n[Ri]);
    var s = Dc(e), c = Nc(i, e, s, u);
    r(e, c);
    var l = !!qr && !!o[wo];
    l && n && (l = !!n[wo]), Rc(i, a, e, s, l !== false);
  }
  function Hi(t) {
    return Ir.toString.call(t);
  }
  function Vi(t, e) {
    return typeof t === e;
  }
  function fe(t) {
    return t === void 0 || typeof t === Ue;
  }
  function x(t) {
    return t === null || fe(t);
  }
  function qi(t) {
    return !x(t);
  }
  function wr(t, e) {
    return t && nr.call(t, e);
  }
  function st(t) {
    return typeof t === Xe;
  }
  function z(t) {
    return typeof t === gt2;
  }
  function Vt(t, e, r, n) {
    n === void 0 && (n = false);
    var i = false;
    if (!x(t))
      try {
        x(t[Fo]) ? x(t[ko]) || (t[ko](_o + e, r), i = true) : (t[Fo](e, r, n), i = true);
      } catch (a) {
      }
    return i;
  }
  function Wn(t, e, r, n) {
    if (n === void 0 && (n = false), !x(t))
      try {
        x(t[Mo]) ? x(t[Ro]) || t[Ro](_o + e, r) : t[Mo](e, r, n);
      } catch (i) {
      }
  }
  function ji(t) {
    var e = t, r = /([^\w\d_$])/g;
    return r.test(t) && (e = t.replace(r, "_")), e;
  }
  function $(t, e) {
    if (t)
      for (var r in t)
        nr.call(t, r) && e.call(t, r, t[r]);
  }
  function Gi(t, e) {
    if (t && e) {
      var r = e.length, n = t.length;
      if (t === e)
        return true;
      if (n >= r) {
        for (var i = n - 1, a = r - 1; a >= 0; a--) {
          if (t[i] != e[a])
            return false;
          i--;
        }
        return true;
      }
    }
    return false;
  }
  function Te(t, e) {
    return t && e ? t.indexOf(e) !== -1 : false;
  }
  function Pr(t) {
    return Hi(t) === "[object Date]";
  }
  function Fe(t) {
    return Hi(t) === "[object Array]";
  }
  function qt(t) {
    return Hi(t) === "[object Error]";
  }
  function U(t) {
    return typeof t == "string";
  }
  function ar(t) {
    return typeof t == "number";
  }
  function Gr(t) {
    return typeof t == "boolean";
  }
  function Re(t) {
    if (Pr(t)) {
      var e = /* @__PURE__ */ __name(function(r) {
        var n = String(r);
        return n.length === 1 && (n = "0" + n), n;
      }, "e");
      return t.getUTCFullYear() + "-" + e(t.getUTCMonth() + 1) + "-" + e(t.getUTCDate()) + "T" + e(t.getUTCHours()) + ":" + e(t.getUTCMinutes()) + ":" + e(t.getUTCSeconds()) + "." + String((t.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z";
    }
  }
  function R(t, e, r) {
    for (var n = t.length, i = 0; i < n && !(i in t && e.call(r || t, t[i], i, t) === -1); i++)
      ;
  }
  function Ft(t, e, r) {
    for (var n = t.length, i = r || 0, a = Math.max(i >= 0 ? i : n - Math.abs(i), 0); a < n; a++)
      if (a in t && t[a] === e)
        return a;
    return -1;
  }
  function jt(t, e, r) {
    for (var n = t.length, i = r || t, a = new Array(n), o = 0; o < n; o++)
      o in t && (a[o] = e.call(i, t[o], t));
    return a;
  }
  function Kr(t, e, r) {
    var n = t.length, i = 0, a;
    if (arguments.length >= 3)
      a = arguments[2];
    else {
      for (; i < n && !(i in t); )
        i++;
      a = t[i++];
    }
    for (; i < n; )
      i in t && (a = e(a, t[i], i, t)), i++;
    return a;
  }
  function oe(t) {
    return typeof t != "string" ? t : t.replace(/^\s+|\s+$/g, "");
  }
  function Ye(t) {
    var e = typeof t;
    e !== gt2 && (e !== Xe || t === null) && Tr("objKeys called on non-object");
    var r = [];
    for (var n in t)
      t && nr.call(t, n) && r.push(n);
    if (_c)
      for (var i = zi.length, a = 0; a < i; a++)
        t && nr.call(t, zi[a]) && r.push(zi[a]);
    return r;
  }
  function St(t, e, r, n) {
    if (Lo)
      try {
        var i = { enumerable: true, configurable: true };
        return r && (i.get = r), n && (i.set = n), Lo(t, e, i), true;
      } catch (a) {
      }
    return false;
  }
  function pe() {
    var t = Date;
    return t.now ? t.now() : new t().getTime();
  }
  function G(t) {
    return qt(t) ? t.name : "";
  }
  function K(t, e, r, n, i) {
    var a = r;
    return t && (a = t[e], a !== r && (!i || i(a)) && (!n || n(r)) && (a = r, t[e] = a)), a;
  }
  function ge(t, e, r) {
    var n;
    return t ? (n = t[e], !n && x(n) && (n = fe(r) ? {} : r, t[e] = n)) : n = fe(r) ? {} : r, n;
  }
  function Xn(t) {
    return !t;
  }
  function br(t) {
    return !!t;
  }
  function Ae(t) {
    throw new Error(t);
  }
  function Wr(t, e, r) {
    if (t && e && t !== e && st(t) && st(e)) {
      var n = /* @__PURE__ */ __name(function(a) {
        if (U(a)) {
          var o = e[a];
          z(o) ? (!r || r(a, true, e, t)) && (t[a] = function(u) {
            return function() {
              var s = arguments;
              return e[u].apply(e, s);
            };
          }(a)) : (!r || r(a, false, e, t)) && (wr(t, a) && delete t[a], St(t, a, function() {
            return e[a];
          }, function(u) {
            e[a] = u;
          }) || (t[a] = o));
        }
      }, "n");
      for (var i in e)
        n(i);
    }
    return t;
  }
  function Ki(t) {
    return function() {
      function e() {
        var r = this;
        t && $(t, function(n, i) {
          r[n] = i;
        });
      }
      __name(e, "e");
      return e;
    }();
  }
  function Jn(t) {
    return t && (t = vt(Cr ? Cr({}, t) : t)), t;
  }
  function Ee(t) {
    var e = ot();
    return e && e[t] ? e[t] : t === Uo && or() ? window : null;
  }
  function or() {
    return Boolean(typeof window === Xe && window);
  }
  function It() {
    return or() ? window : Ee(Uo);
  }
  function Qn() {
    return Boolean(typeof document === Xe && document);
  }
  function De() {
    return Qn() ? document : Ee(Uc);
  }
  function Bo() {
    return Boolean(typeof navigator === Xe && navigator);
  }
  function Le() {
    return Bo() ? navigator : Ee(Oc);
  }
  function zo() {
    return Boolean(typeof history === Xe && history);
  }
  function Zi() {
    return zo() ? history : Ee(Bc);
  }
  function $e(t) {
    if (t && Kc) {
      var e = Ee("__mockLocation");
      if (e)
        return e;
    }
    return typeof location === Xe && location ? location : Ee(zc);
  }
  function Yi() {
    return typeof console !== Ue ? console : Ee(Hc);
  }
  function Je() {
    return Ee(Vc);
  }
  function mt() {
    return Boolean(typeof JSON === Xe && JSON || Ee(Oo) !== null);
  }
  function we() {
    return mt() ? JSON || Ee(Oo) : null;
  }
  function $i() {
    return Ee(qc);
  }
  function ea() {
    return Ee(jc);
  }
  function ta() {
    var t = Le();
    return t && t.product ? t.product === Gc : false;
  }
  function Gt() {
    var t = Le();
    if (t && (t.userAgent !== Xi || Wi === null)) {
      Xi = t.userAgent;
      var e = (Xi || "").toLowerCase();
      Wi = Te(e, Ji) || Te(e, Qi);
    }
    return Wi;
  }
  function sr(t) {
    if (t === void 0 && (t = null), !t) {
      var e = Le() || {};
      t = e ? (e.userAgent || "").toLowerCase() : "";
    }
    var r = (t || "").toLowerCase();
    if (Te(r, Ji))
      return parseInt(r.split(Ji)[1]);
    if (Te(r, Qi)) {
      var n = parseInt(r.split(Qi)[1]);
      if (n)
        return n + 4;
    }
    return null;
  }
  function O(t) {
    var e = Object[Ie].toString.call(t), r = "";
    return e === "[object Error]" ? r = "{ stack: '" + t.stack + "', message: '" + t.message + "', name: '" + t.name + "'" : mt() && (r = we().stringify(t)), e + r;
  }
  function Ho(t) {
    return t ? '"' + t.replace(/\"/g, "") + '"' : "";
  }
  function Mt(t, e) {
    return (t || {}).logger || new Zn(e);
  }
  function ut(t, e, r, n, i) {
    if (t) {
      var a = t;
      if (z(a.getPerfMgr) && (a = a.getPerfMgr()), a) {
        var o = void 0, u = a.getCtx(ra);
        try {
          if (o = a.create(e(), n, i), o) {
            if (u && o.setCtx && (o.setCtx(ur.ParentContextKey, u), u.getCtx && u.setCtx)) {
              var s = u.getCtx(ur.ChildrenContextKey);
              s || (s = [], u.setCtx(ur.ChildrenContextKey, s)), s.push(o);
            }
            return a.setCtx(ra, o), r(o);
          }
        } catch (c) {
          o && o.setCtx && o.setCtx("exception", c);
        } finally {
          o && a.fire(o), a.setCtx(ra, u);
        }
      }
    }
    return r();
  }
  function na(t, e) {
    var r = [];
    if (t && t.length > 0)
      for (var n = null, i = 0; i < t.length; i++) {
        var a = t[i];
        if (a && z(a.processTelemetry)) {
          var o = new Vo(a, e);
          r.push(o), n && n.setNext(o), n = o;
        }
      }
    return r.length > 0 ? r[0] : null;
  }
  function Qc(t, e, r) {
    var n = [], i = !r;
    if (t)
      for (; t; ) {
        var a = t.getPlugin();
        (i || a === r) && (i = true, n.push(a)), t = t.getNext();
      }
    return i || n.push(r), na(n, e);
  }
  function Zc(t, e, r) {
    var n = t, i = false;
    return r && t && (n = [], R(t, function(a) {
      (i || a === r) && (i = true, n.push(a));
    })), r && !i && (n || (n = []), n.push(r)), na(n, e);
  }
  function Qr(t, e) {
    for (var r = [], n = null, i = t.getNext(); i; ) {
      var a = i.getPlugin();
      a && (n && z(n[Ko]) && z(a[oa]) && n[Ko](a), (!z(a[Wo]) || !a[Wo]()) && r.push(a), n = a, i = i.getNext());
    }
    R(r, function(o) {
      o.initialize(t.getCfg(), t.core(), e, t.getNext());
    });
  }
  function sa(t) {
    return t.sort(function(e, r) {
      var n = 0, i = z(r[oa]);
      return z(e[oa]) ? n = i ? e[Go] - r[Go] : 1 : i && (n = -1), n;
    });
  }
  function va(t, e) {
    var r = cr[Kt] || ii[Kt];
    return r || (r = cr[Kt] = cr(t, e), ii[Kt] = r), r;
  }
  function ni(t) {
    return t ? t.isEnabled() : true;
  }
  function $c(t) {
    var e = t.cookieCfg = t.cookieCfg || {};
    if (K(e, "domain", t.cookieDomain, qi, x), K(e, "path", t.cookiePath || "/", null, x), x(e[pa])) {
      var r = void 0;
      fe(t[Yo]) || (r = !t[Yo]), fe(t[$o]) || (r = !t[$o]), e[pa] = r;
    }
    return e;
  }
  function lr(t, e) {
    var r;
    if (t)
      r = t.getCookieMgr();
    else if (e) {
      var n = e.cookieCfg;
      n[Kt] ? r = n[Kt] : r = cr(e);
    }
    return r || (r = va(e, (t || {}).logger)), r;
  }
  function cr(t, e) {
    var r = $c(t || ii), n = r.path || "/", i = r.domain, a = r[pa] !== false, o = { isEnabled: function() {
      var u = a && da(e), s = ii[Kt];
      return u && s && o !== s && (u = ni(s)), u;
    }, setEnabled: function(u) {
      a = u !== false;
    }, set: function(u, s, c, l, f2) {
      if (ni(o)) {
        var g = {}, C = oe(s || ht), E = C.indexOf(";");
        if (E !== -1 && (C = oe(s.substring(0, E)), g = as(s.substring(E + 1))), K(g, "domain", l || i, br, fe), !x(c)) {
          var b = Gt();
          if (fe(g[la])) {
            var p = pe(), m = p + c * 1e3;
            if (m > 0) {
              var y = /* @__PURE__ */ new Date();
              y.setTime(m), K(g, la, rs(y, b ? Qo : Zo) || rs(y, b ? Qo : Zo) || ht, br);
            }
          }
          b || K(g, "max-age", ht + c, null, fe);
        }
        var w = $e();
        w && w.protocol === "https:" && (K(g, "secure", null, null, fe), fa === null && (fa = !ai((Le() || {}).userAgent)), fa && K(g, "SameSite", "None", null, fe)), K(g, "path", f2 || n, null, fe);
        var L = r.setCookie || is;
        L(u, ns(C, g));
      }
    }, get: function(u) {
      var s = ht;
      return ni(o) && (s = (r.getCookie || el)(u)), s;
    }, del: function(u, s) {
      ni(o) && o.purge(u, s);
    }, purge: function(u, s) {
      if (da(e)) {
        var c = (f2 = {}, f2.path = s || "/", f2[la] = "Thu, 01 Jan 1970 00:00:01 GMT", f2);
        Gt() || (c["max-age"] = "0");
        var l = r.delCookie || is;
        l(u, ns(ht, c));
      }
      var f2;
    } };
    return o[Kt] = o, o;
  }
  function da(t) {
    if (ri === null) {
      ri = false;
      try {
        var e = Zr || {};
        ri = e[ga] !== void 0;
      } catch (r) {
        t && t.throwInternal(S.WARNING, h.CannotAccessCookie, "Cannot access document.cookie - " + G(r), { exception: O(r) });
      }
    }
    return ri;
  }
  function as(t) {
    var e = {};
    if (t && t.length) {
      var r = oe(t).split(";");
      R(r, function(n) {
        if (n = oe(n || ht), n) {
          var i = n.indexOf("=");
          i === -1 ? e[n] = null : e[oe(n.substring(0, i))] = oe(n.substring(i + 1));
        }
      });
    }
    return e;
  }
  function rs(t, e) {
    return z(t[e]) ? t[e]() : null;
  }
  function ns(t, e) {
    var r = t || ht;
    return $(e, function(n, i) {
      r += "; " + n + (x(i) ? ht : "=" + i);
    }), r;
  }
  function el(t) {
    var e = ht;
    if (Zr) {
      var r = Zr[ga] || ht;
      es !== r && (ts = as(r), es = r), e = oe(ts[t] || ht);
    }
    return e;
  }
  function is(t, e) {
    Zr && (Zr[ga] = t + "=" + e);
  }
  function ai(t) {
    return U(t) ? !!(Te(t, "CPU iPhone OS 12") || Te(t, "iPad; CPU OS 12") || Te(t, "Macintosh; Intel Mac OS X 10_14") && Te(t, "Version/") && Te(t, "Safari") || Te(t, "Macintosh; Intel Mac OS X 10_14") && Gi(t, "AppleWebKit/605.1.15 (KHTML, like Gecko)") || Te(t, "Chrome/5") || Te(t, "Chrome/6") || Te(t, "UnrealEngine") && !Te(t, "Chrome") || Te(t, "UCBrowser/12") || Te(t, "UCBrowser/11")) : false;
  }
  function ls(t) {
    t < 0 && (t >>>= 0), tn = 123456789 + t & Wt, rn = 987654321 - t & Wt, cs = true;
  }
  function fs() {
    try {
      var t = pe() & 2147483647;
      ls((Math.random() * us ^ t) + t);
    } catch (e) {
    }
  }
  function si(t) {
    return t > 0 ? Math.floor(Ct() / Wt * (t + 1)) >>> 0 : 0;
  }
  function Ct(t) {
    var e, r = $i() || ea();
    return r && r.getRandomValues ? e = r.getRandomValues(new Uint32Array(1))[0] & Wt : Gt() ? (cs || fs(), e = ui() & Wt) : e = Math.floor(us * Math.random() | 0), t || (e >>>= 0), e;
  }
  function xa(t) {
    t ? ls(t) : fs();
  }
  function ui(t) {
    rn = 36969 * (rn & 65535) + (rn >> 16) & Wt, tn = 18e3 * (tn & 65535) + (tn >> 16) & Wt;
    var e = (rn << 16) + (tn & 65535) >>> 0 & Wt | 0;
    return t || (e >>>= 0), e;
  }
  function _t(t, e) {
    var r = false, n = It();
    n && (r = Vt(n, t, e), r = Vt(n.body, t, e) || r);
    var i = De();
    return i && (r = Jt.Attach(i, t, e) || r), r;
  }
  function ps() {
    function t() {
      return si(15);
    }
    __name(t, "t");
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(rl, function(e) {
      var r = t() | 0, n = e === "x" ? r : r & 3 | 8;
      return n.toString(16);
    });
  }
  function ds() {
    var t = Je();
    return t && t.now ? t.now() : pe();
  }
  function Xt(t) {
    t === void 0 && (t = 22);
    for (var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = Ct() >>> 0, n = 0, i = ""; i.length < t; )
      n++, i += e.charAt(r & 63), r >>>= 6, n === 5 && (r = (Ct() << 2 & 4294967295 | r & 3) >>> 0, n = 0);
    return i;
  }
  function Oe() {
    for (var t = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"], e = "", r, n = 0; n < 4; n++)
      r = Ct(), e += t[r & 15] + t[r >> 4 & 15] + t[r >> 8 & 15] + t[r >> 12 & 15] + t[r >> 16 & 15] + t[r >> 20 & 15] + t[r >> 24 & 15] + t[r >> 28 & 15];
    var i = t[8 + (Ct() & 3) | 0];
    return e.substr(0, 8) + e.substr(9, 4) + "4" + e.substr(13, 3) + i + e.substr(16, 3) + e.substr(19, 12);
  }
  function Qt(t, e) {
    var r = va(t, e), n = on._canUseCookies;
    return nn === null && (nn = [], an = n, St(on, "_canUseCookies", function() {
      return an;
    }, function(i) {
      an = i, R(nn, function(a) {
        a.setEnabled(i);
      });
    })), Ft(nn, r) === -1 && nn.push(r), Gr(n) && r.setEnabled(n), Gr(an) && r.setEnabled(an), r;
  }
  function ci() {
    Qt().setEnabled(false);
  }
  function Sa(t) {
    return Qt(null, t).isEnabled();
  }
  function Ia(t, e) {
    return Qt(null, t).get(e);
  }
  function Ca(t, e, r, n) {
    Qt(null, t).set(e, r, null, n);
  }
  function Ta(t, e) {
    return Qt(null, t).del(e);
  }
  function wa(t, e) {
    if (t)
      for (var r = 0; r < t.length && !e(t[r], r); r++)
        ;
  }
  function Ea(t, e, r, n, i) {
    i >= 0 && i <= 2 && wa(t, function(a, o) {
      var u = a.cbks, s = u[ms[i]];
      if (s) {
        e.ctx = function() {
          var f2 = n[o] = n[o] || {};
          return f2;
        };
        try {
          s.apply(e.inst, r);
        } catch (f2) {
          var c = e.err;
          try {
            var l = u[ms[2]];
            l && (e.err = f2, l.apply(e.inst, r));
          } catch (g) {
          } finally {
            e.err = c;
          }
        }
      }
    });
  }
  function al(t) {
    return function() {
      var e = this, r = arguments, n = t.h, i = { name: t.n, inst: e, ctx: null, set: s }, a = [], o = u([i], r);
      function u(l, f2) {
        return wa(f2, function(g) {
          l.push(g);
        }), l;
      }
      __name(u, "u");
      function s(l, f2) {
        r = u([], r), r[l] = f2, o = u([i], r);
      }
      __name(s, "s");
      Ea(n, i, o, a, 0);
      var c = t.f;
      try {
        i.rslt = c.apply(e, r);
      } catch (l) {
        throw i.err = l, Ea(n, i, o, a, 3), l;
      }
      return Ea(n, i, o, a, 1), i.rslt;
    };
  }
  function ol(t) {
    if (t) {
      if (hs)
        return hs(t);
      var e = t[nl] || t[Ie] || t[il];
      if (e)
        return e;
    }
    return null;
  }
  function xs(t, e, r) {
    var n = null;
    return t && (wr(t, e) ? n = t : r && (n = xs(ol(t), e, false))), n;
  }
  function Pa(t, e, r) {
    return t ? sn(t[Ie], e, r, false) : null;
  }
  function sn(t, e, r, n) {
    if (n === void 0 && (n = true), t && e && r) {
      var i = xs(t, e, n);
      if (i) {
        var a = i[e];
        if (typeof a === gt2) {
          var o = a[vs];
          if (!o) {
            o = { i: 0, n: e, f: a, h: [] };
            var u = al(o);
            u[vs] = o, i[e] = u;
          }
          var s = { id: o.i, cbks: r, rm: function() {
            var c = this.id;
            wa(o.h, function(l, f2) {
              if (l.id === c)
                return o.h.splice(f2, 1), 1;
            });
          } };
          return o.i++, o.h.push(s), s;
        }
      }
    }
    return null;
  }
  function li(t, e, r) {
    var n = e.length, i = Aa(t, e);
    if (i.length !== n) {
      for (var a = 0, o = i; r[o] !== void 0; )
        a++, o = i.substring(0, 150 - 3) + Da(a);
      i = o;
    }
    return i;
  }
  function Aa(t, e) {
    var r;
    return e && (e = oe(e.toString()), e.length > 150 && (r = e.substring(0, 150), t.throwInternal(S.WARNING, h.NameTooLong, "name is too long.  It has been truncated to 150 characters.", { name: e }, true))), r || e;
  }
  function ae(t, e, r) {
    r === void 0 && (r = 1024);
    var n;
    return e && (r = r || 1024, e = oe(e), e.toString().length > r && (n = e.toString().substring(0, r), t.throwInternal(S.WARNING, h.StringValueTooLong, "string value is too long. It has been truncated to " + r + " characters.", { value: e }, true))), n || e;
  }
  function Tt(t, e) {
    return di(t, e, 2048, h.UrlTooLong);
  }
  function Nr(t, e) {
    var r;
    return e && e.length > 32768 && (r = e.substring(0, 32768), t.throwInternal(S.WARNING, h.MessageTruncated, "message is too long, it has been truncated to 32768 characters.", { message: e }, true)), r || e;
  }
  function fi(t, e) {
    var r;
    if (e) {
      var n = "" + e;
      n.length > 32768 && (r = n.substring(0, 32768), t.throwInternal(S.WARNING, h.ExceptionTruncated, "exception is too long, it has been truncated to 32768 characters.", { exception: e }, true));
    }
    return r || e;
  }
  function Be(t, e) {
    if (e) {
      var r = {};
      $(e, function(n, i) {
        if (st(i) && mt())
          try {
            i = we().stringify(i);
          } catch (a) {
            t.throwInternal(S.WARNING, h.CannotSerializeObjectNonSerializable, "custom property is not valid", { exception: a }, true);
          }
        i = ae(t, i, 8192), n = li(t, n, r), r[n] = i;
      }), e = r;
    }
    return e;
  }
  function ze(t, e) {
    if (e) {
      var r = {};
      $(e, function(n, i) {
        n = li(t, n, r), r[n] = i;
      }), e = r;
    }
    return e;
  }
  function pi(t, e) {
    return e && di(t, e, 128, h.IdTooLong).toString();
  }
  function di(t, e, r, n) {
    var i;
    return e && (e = oe(e), e.length > r && (i = e.substring(0, r), t.throwInternal(S.WARNING, n, "input is too long, it has been truncated to " + r + " characters.", { data: e }, true))), i || e;
  }
  function Da(t) {
    var e = "00" + t;
    return e.substr(e.length - 3);
  }
  function Ut(t) {
    var e = null;
    if (z(Event))
      e = new Event(t);
    else {
      var r = De();
      r && r.createEvent && (e = r.createEvent("Event"), e.initEvent(t, true, true));
    }
    return e;
  }
  function ee(t, e) {
    return e === void 0 && (e = false), t == null ? e : t.toString().toLowerCase() === "true";
  }
  function Ge(t) {
    (isNaN(t) || t < 0) && (t = 0), t = Math.round(t);
    var e = "" + t % 1e3, r = "" + Math.floor(t / 1e3) % 60, n = "" + Math.floor(t / (1e3 * 60)) % 60, i = "" + Math.floor(t / (1e3 * 60 * 60)) % 24, a = Math.floor(t / (1e3 * 60 * 60 * 24));
    return e = e.length === 1 ? "00" + e : e.length === 2 ? "0" + e : e, r = r.length < 2 ? "0" + r : r, n = n.length < 2 ? "0" + n : n, i = i.length < 2 ? "0" + i : i, (a > 0 ? a + "." : "") + i + ":" + n + ":" + r + "." + e;
  }
  function kr() {
    var t = Le();
    return "sendBeacon" in t && t.sendBeacon;
  }
  function un(t, e) {
    var r = null;
    return R(t, function(n) {
      if (n.identifier === e)
        return r = n, -1;
    }), r;
  }
  function cn(t, e, r, n, i) {
    return !i && U(t) && (t === "Script error." || t === "Script error");
  }
  function Ra() {
    return Rr() ? gi(Zt.LocalStorage) : null;
  }
  function gi(t) {
    try {
      if (x(ot()))
        return null;
      var e = /* @__PURE__ */ new Date(), r = Ee(t === Zt.LocalStorage ? "localStorage" : "sessionStorage");
      r.setItem(e.toString(), e.toString());
      var n = r.getItem(e.toString()) !== e.toString();
      if (r.removeItem(e.toString()), !n)
        return r;
    } catch (i) {
    }
    return null;
  }
  function Ma() {
    return wt() ? gi(Zt.SessionStorage) : null;
  }
  function pn() {
    pr = false, dr = false;
  }
  function Rr() {
    return pr === void 0 && (pr = !!gi(Zt.LocalStorage)), pr;
  }
  function dn(t, e) {
    var r = Ra();
    if (r !== null)
      try {
        return r.getItem(e);
      } catch (n) {
        pr = false, t.throwInternal(S.WARNING, h.BrowserCannotReadLocalStorage, "Browser failed read of local storage. " + G(n), { exception: O(n) });
      }
    return null;
  }
  function gn(t, e, r) {
    var n = Ra();
    if (n !== null)
      try {
        return n.setItem(e, r), true;
      } catch (i) {
        pr = false, t.throwInternal(S.WARNING, h.BrowserCannotWriteLocalStorage, "Browser failed write to local storage. " + G(i), { exception: O(i) });
      }
    return false;
  }
  function vn(t, e) {
    var r = Ra();
    if (r !== null)
      try {
        return r.removeItem(e), true;
      } catch (n) {
        pr = false, t.throwInternal(S.WARNING, h.BrowserFailedRemovalFromLocalStorage, "Browser failed removal of local storage item. " + G(n), { exception: O(n) });
      }
    return false;
  }
  function wt() {
    return dr === void 0 && (dr = !!gi(Zt.SessionStorage)), dr;
  }
  function La() {
    var t = [];
    return wt() && $(Ee("sessionStorage"), function(e) {
      t.push(e);
    }), t;
  }
  function Yt(t, e) {
    var r = Ma();
    if (r !== null)
      try {
        return r.getItem(e);
      } catch (n) {
        dr = false, t.throwInternal(S.WARNING, h.BrowserCannotReadSessionStorage, "Browser failed read of session storage. " + G(n), { exception: O(n) });
      }
    return null;
  }
  function $t(t, e, r) {
    var n = Ma();
    if (n !== null)
      try {
        return n.setItem(e, r), true;
      } catch (i) {
        dr = false, t.throwInternal(S.WARNING, h.BrowserCannotWriteSessionStorage, "Browser failed write to session storage. " + G(i), { exception: O(i) });
      }
    return false;
  }
  function mn(t, e) {
    var r = Ma();
    if (r !== null)
      try {
        return r.removeItem(e), true;
      } catch (n) {
        dr = false, t.throwInternal(S.WARNING, h.BrowserFailedRemovalFromSessionStorage, "Browser failed removal of session storage item. " + G(n), { exception: O(n) });
      }
    return false;
  }
  function gr(t) {
    var e = Is, r = sl, n = r[e];
    return Ss.createElement ? r[e] || (n = r[e] = Ss.createElement("a")) : n = { host: vi(t, true) }, n.href = t, e++, e >= r.length && (e = 0), Is = e, n;
  }
  function hn(t) {
    var e, r = gr(t);
    return r && (e = r.href), e;
  }
  function Ua(t) {
    var e, r = gr(t);
    return r && (e = r.pathname), e;
  }
  function xn(t, e) {
    return t ? t.toUpperCase() + " " + e : e;
  }
  function vi(t, e) {
    var r = yn(t, e) || "";
    if (r) {
      var n = r.match(/(www[0-9]?\.)?(.[^/:]+)(\:[\d]+)?/i);
      if (n != null && n.length > 3 && U(n[2]) && n[2].length > 0)
        return n[2] + (n[3] || "");
    }
    return r;
  }
  function yn(t, e) {
    var r = null;
    if (t) {
      var n = t.match(/(\w*):\/\/(.[^/:]+)(\:[\d]+)?/i);
      if (n != null && n.length > 2 && U(n[2]) && n[2].length > 0 && (r = n[2] || "", e && n.length > 2)) {
        var i = (n[1] || "").toLowerCase(), a = n[3] || "";
        (i === "http" && a === ":80" || i === "https" && a === ":443") && (a = ""), r += a;
      }
    }
    return r;
  }
  function Mr(t) {
    return ul.indexOf(t.toLowerCase()) !== -1;
  }
  function Cs(t, e, r, n) {
    var i, a = n, o = n;
    if (e && e.length > 0) {
      var u = gr(e);
      if (i = u.host, !a)
        if (u.pathname != null) {
          var s = u.pathname.length === 0 ? "/" : u.pathname;
          s.charAt(0) !== "/" && (s = "/" + s), o = u.pathname, a = ae(t, r ? r + " " + s : s);
        } else
          a = ae(t, e);
    } else
      i = n, a = n;
    return { target: i, name: a, data: o };
  }
  function vr() {
    var t = Je();
    if (t && t.now && t.timing) {
      var e = t.now() + t.timing.navigationStart;
      if (e > 0)
        return e;
    }
    return pe();
  }
  function ve(t, e) {
    var r = null;
    return t !== 0 && e !== 0 && !x(t) && !x(e) && (r = e - t), r;
  }
  function mi(t) {
    if (!t)
      return {};
    var e = t.split(cl), r = Kr(e, function(i, a) {
      var o = a.split(ll);
      if (o.length === 2) {
        var u = o[0].toLowerCase(), s = o[1];
        i[u] = s;
      }
      return i;
    }, {});
    if (Ye(r).length > 0) {
      if (r.endpointsuffix) {
        var n = r.location ? r.location + "." : "";
        r.ingestionendpoint = r.ingestionendpoint || "https://" + n + "dc." + r.endpointsuffix;
      }
      r.ingestionendpoint = r.ingestionendpoint || fn;
    }
    return r;
  }
  function Ja(t, e) {
    var r = t;
    return r && !U(r) && (JSON && JSON.stringify ? (r = JSON.stringify(t), e && (!r || r === "{}") && (z(t.toString) ? r = t.toString() : r = "" + t)) : r = "" + t + " - (Missing JSON.stringify)"), r || "";
  }
  function Os(t, e) {
    var r = t;
    return t && (r = t[Xa] || t[Us] || "", r && !U(r) && (r = Ja(r, true)), t.filename && (r = r + " @" + (t.filename || "") + ":" + (t.lineno || "?") + ":" + (t.colno || "?"))), e && e !== "String" && e !== "Object" && e !== "Error" && (r || "").indexOf(e) === -1 && (r = e + ": " + r), r || "";
  }
  function pl(t) {
    return st(t) ? "hasFullStack" in t && "typeName" in t : false;
  }
  function dl(t) {
    return st(t) ? "ver" in t && "exceptions" in t && "properties" in t : false;
  }
  function Ls(t) {
    return t && t.src && U(t.src) && t.obj && Fe(t.obj);
  }
  function Lr(t) {
    var e = t || "";
    U(e) || (U(e[ft]) ? e = e[ft] : e = "" + e);
    var r = e.split(`
`);
    return { src: e, obj: r };
  }
  function gl(t) {
    for (var e = [], r = t.split(`
`), n = 0; n < r.length; n++) {
      var i = r[n];
      r[n + 1] && (i += "@" + r[n + 1], n++), e.push(i);
    }
    return { src: t, obj: e };
  }
  function Bs(t) {
    var e = null;
    if (t)
      try {
        if (t[ft])
          e = Lr(t[ft]);
        else if (t[_r] && t[_r][ft])
          e = Lr(t[_r][ft]);
        else if (t.exception && t.exception[ft])
          e = Lr(t.exception[ft]);
        else if (Ls(t))
          e = t;
        else if (Ls(t[Wa]))
          e = t[Wa];
        else if (window.opera && t[Xa])
          e = gl(t.message);
        else if (U(t))
          e = Lr(t);
        else {
          var r = t[Xa] || t[Us] || "";
          U(t[Ms]) && (r && (r += `
`), r += " from " + t[Ms]), r && (e = Lr(r));
        }
      } catch (n) {
        e = Lr(n);
      }
    return e || { src: "", obj: null };
  }
  function vl(t) {
    var e = "";
    return t && (t.obj ? R(t.obj, function(r) {
      e += r + `
`;
    }) : e = t.src || ""), e;
  }
  function ml(t) {
    var e, r = t.obj;
    if (r && r.length > 0) {
      e = [];
      var n = 0, i = 0;
      R(r, function(E) {
        var b = E.toString();
        if (Qa.regex.test(b)) {
          var p = new Qa(b, n++);
          i += p.sizeInBytes, e.push(p);
        }
      });
      var a = 32 * 1024;
      if (i > a)
        for (var o = 0, u = e.length - 1, s = 0, c = o, l = u; o < u; ) {
          var f2 = e[o].sizeInBytes, g = e[u].sizeInBytes;
          if (s += f2 + g, s > a) {
            var C = l - c + 1;
            e.splice(c, C);
            break;
          }
          c = o, l = u, o++, u--;
        }
    }
    return e;
  }
  function xi(t) {
    var e = "";
    if (t && (e = t.typeName || t.name || "", !e))
      try {
        var r = /function (.{1,200})\(/, n = r.exec(t.constructor.toString());
        e = n && n.length > 1 ? n[1] : "";
      } catch (i) {
      }
    return e;
  }
  function Ka(t) {
    if (t)
      try {
        if (!U(t)) {
          var e = xi(t), r = Ja(t, false);
          return (!r || r === "{}") && (t[_r] && (t = t[_r], e = xi(t)), r = Ja(t, true)), r.indexOf(e) !== 0 && e !== "String" ? e + ":" + r : r;
        }
      } catch (n) {
      }
    return "" + (t || "");
  }
  function tr(t) {
    var e = "ai." + t + ".";
    return function(r) {
      return e + r;
    };
  }
  function Pn(t, e) {
    t && t.dispatchEvent && e && t.dispatchEvent(e);
  }
  function xe(t, e, r) {
    return K(t, e, r, br);
  }
  function Ti(t) {
    try {
      return t.responseText;
    } catch (e) {
    }
    return null;
  }
  function Xu(t) {
    return !(typeof t != "string" || !t || t.match(/,|;|=| |\|/));
  }
  function Br(t, e) {
    t && t[e] && Ye(t[e]).length === 0 && delete t[e];
  }
  function ic(t, e, r) {
    var n = 0, i = t[e], a = t[r];
    return i && a && (n = ve(i, a)), n;
  }
  function yr(t, e, r, n, i) {
    var a = 0, o = ic(r, n, i);
    return o && (a = rr(t, e, Ge(o))), a;
  }
  function rr(t, e, r) {
    var n = "ajaxPerf", i = 0;
    if (t && e && r) {
      var a = t[n] = t[n] || {};
      a[e] = r, i = 1;
    }
    return i;
  }
  function Cl(t, e) {
    var r = t.perfTiming, n = e[rt] || {}, i = 0, a = "name", o = "Start", u = "End", s = "domainLookup", c = "connect", l = "redirect", f2 = "request", g = "response", C = "duration", E = "startTime", b = s + o, p = s + u, m = c + o, y = c + u, w = f2 + o, L = f2 + u, k = g + o, Q = g + u, ye = l + o, J = l = u, de = "transferSize", be = "encodedBodySize", pt = "decodedBodySize", it = "serverTiming";
    if (r) {
      i |= yr(n, l, r, ye, J), i |= yr(n, s, r, b, p), i |= yr(n, c, r, m, y), i |= yr(n, f2, r, w, L), i |= yr(n, g, r, k, Q), i |= yr(n, "networkConnect", r, E, y), i |= yr(n, "sentRequest", r, w, Q);
      var dt = r[C];
      dt || (dt = ic(r, E, Q) || 0), i |= rr(n, C, dt), i |= rr(n, "perfTotal", dt);
      var d = r[it];
      if (d) {
        var T = {};
        R(d, function(D, A) {
          var H = ji(D[a] || "" + A), _ = T[H] || {};
          $(D, function(j, Z) {
            (j !== a && U(Z) || ar(Z)) && (_[j] && (Z = _[j] + ";" + Z), (Z || !U(Z)) && (_[j] = Z));
          }), T[H] = _;
        }), i |= rr(n, it, T);
      }
      i |= rr(n, de, r[de]), i |= rr(n, be, r[be]), i |= rr(n, pt, r[pt]);
    } else
      t.perfMark && (i |= rr(n, "missing", t.perfAttempts));
    i && (e[rt] = n);
  }
  function El() {
    var t = ot();
    return !t || x(t.Request) || x(t.Request[Ie]) || x(t[Fn]) ? null : t[Fn];
  }
  function wl(t) {
    var e = false;
    if (typeof XMLHttpRequest !== Ue && !x(XMLHttpRequest)) {
      var r = XMLHttpRequest[Ie];
      e = !x(r) && !x(r.open) && !x(r.send) && !x(r.abort);
    }
    var n = sr();
    if (n && n < 9 && (e = false), e)
      try {
        var i = new XMLHttpRequest();
        i[nt] = {};
        var a = XMLHttpRequest[Ie].open;
        XMLHttpRequest[Ie].open = a;
      } catch (o) {
        e = false, Rn(t, h.FailedMonitorAjaxOpen, "Failed to enable XMLHttpRequest monitoring, extension is not supported", { exception: O(o) });
      }
    return e;
  }
  function bi(t) {
    var e = "";
    try {
      !x(t) && !x(t[nt]) && !x(t[nt].requestUrl) && (e += "(url: '" + t[nt].requestUrl + "')");
    } catch (r) {
    }
    return e;
  }
  function Rn(t, e, r, n, i) {
    t[kn]()[lc](S.CRITICAL, e, r, n, i);
  }
  function Pi(t, e, r, n, i) {
    t[kn]()[lc](S.WARNING, e, r, n, i);
  }
  function Nn(t, e, r) {
    return function(n) {
      Rn(t, e, r, { ajaxDiagnosticsMessage: bi(n.inst), exception: O(n.err) });
    };
  }
  function zr(t, e) {
    return t && e ? t.indexOf(e) : -1;
  }
  var Sc, xo, mo, Cc, Tc, ho, at, I, Ec, At, So, Io, gt2, Xe, Ue, Ie, Hr, vt, Ir, Cr, Un, On, nr, Bn, Ni, Vl, ql, bc, yt, ki, Co, To, ne, Hn, Nt, Vn, qn, Li, Er, Ac, _i, Vr, Ao, Eo, Do, zn, Fi, Ri, wo, Kn, qr, Po, bo, Lc, Ce, S, h, jr, _o, ko, Fo, Ro, Mo, Lo, vf, mf, _c, zi, Me, Uo, Uc, Oc, Bc, zc, Hc, Vc, Oo, qc, jc, Gc, Ji, Qi, Wi, Xi, Kc, Ar, Wc, Xc, Jc, Rt, Zn, Yn, Dr, ur, Xr, ra, Jr, Vo, qo, Lt, $n, jo, ei, ia, ti, et, aa, oa, Go, Ko, Wo, ua, ca, Yc, Xo, Jo, Qo, Zo, ga, la, pa, Yo, $o, Kt, ht, ri, fa, es, Zr, ts, ii, oi, tl, os, Yr, ma, $r, ha, en, ss, us, Wt, cs, tn, rn, ya, nn, an, on, rl, Jt, gs, vs, ms, nl, il, hs, ys, X, te, ba, Na, ct, ka, ln, Et, fr, Ot, Fr, fn, ce, lt, Zt, Ke, Fa, pr, dr, _a5, Ss, Is, sl, Oa, ul, Sn, Ba, Pt, za, Ha, cl, ll, Va, Ts, In, qa, Cn, ja, Es, ws2, Tn, Ps, hi, Ga, He, bs, As, Ds, Ns, ks, Fs, Rs, fl, _r, ft, Wa, Ms, Xa, Us, me, _s, Qa, zs, Hs, Vs, yi, qs, js, Gs, Ks, Ws, Ve, Xs, mr, Si, Ne, Js, Qs, Zs, qe, Ys, $s, eu, Qe, tu, ru, nu, Ze, iu, xt, au, Bt, ou, Za, su, En, Pe, Ii, Ur, Ya, er, hr, wn, xr, $a, tt, uu, _e, re, cu, zt, Or, Ci, he, lu, fu, pu, hl, du, gu, vu, mu, eo, bn, hu, xu, to, yu, Su, Iu, ro, se, ke, Cu, le, Tu, no, Eu, wu, Pu, bu, Au, Du, Nu, ku, xl, io, Fu, Ru, Mu, Lu, _u, Uu, Ou, An, Bu, ao, yl, oo, zu, Hu, Vu, qu, ju, Gu, Sl, Ku, Wu, Ju, Qu, Zu, Yu, $u, ec, Ei, wi, tc, rc, Il, Dn, nc, so, rt, Tl, uo, ac, Th, oc, co, sc, uc, kn, nt, lc, Fn, cc, Mn, fc, lo, fo, pc, Pl, dc, Ai, po, bl, gc, vc, mc, hc, xc, yc, wc, yo, Ln, je, _n, Al, go;
  var init_telemetryReporter_web_min = __esm({
    "node_modules/@vscode/extension-telemetry/lib/telemetryReporter.web.min.js"() {
      Sc = __toESM(__require("vscode"));
      xo = Object.defineProperty;
      mo = Object.getOwnPropertySymbols;
      Cc = Object.prototype.hasOwnProperty;
      Tc = Object.prototype.propertyIsEnumerable;
      ho = /* @__PURE__ */ __name((t, e, r) => e in t ? xo(t, e, { enumerable: true, configurable: true, writable: true, value: r }) : t[e] = r, "ho");
      at = /* @__PURE__ */ __name((t, e) => {
        for (var r in e || (e = {}))
          Cc.call(e, r) && ho(t, r, e[r]);
        if (mo)
          for (var r of mo(e))
            Tc.call(e, r) && ho(t, r, e[r]);
        return t;
      }, "at");
      I = /* @__PURE__ */ __name((t, e) => () => (t && (e = t(t = 0)), e), "I");
      Ec = /* @__PURE__ */ __name((t, e) => {
        for (var r in e)
          xo(t, r, { get: e[r], enumerable: true });
      }, "Ec");
      At = /* @__PURE__ */ __name((t, e, r) => new Promise((n, i) => {
        var a = /* @__PURE__ */ __name((s) => {
          try {
            u(r.next(s));
          } catch (c) {
            i(c);
          }
        }, "a"), o = /* @__PURE__ */ __name((s) => {
          try {
            u(r.throw(s));
          } catch (c) {
            i(c);
          }
        }, "o"), u = /* @__PURE__ */ __name((s) => s.done ? n(s.value) : Promise.resolve(s.value).then(a, o), "u");
        u((r = r.apply(t, e)).next());
      }), "At");
      Io = I(() => {
        So = { Unknown: 0, NonRetryableStatus: 1, InvalidEvent: 2, SizeLimitExceeded: 3, KillSwitch: 4, QueueFull: 5 };
      });
      Bn = I(() => {
        gt2 = "function", Xe = "object", Ue = "undefined", Ie = "prototype", Hr = "hasOwnProperty", vt = Object, Ir = vt[Ie], Cr = vt.assign, Un = vt.create, On = vt.defineProperty, nr = Ir[Hr];
      });
      __name(ot, "ot");
      __name(Tr, "Tr");
      __name(Dt, "Dt");
      Ni = I(() => {
        Bn();
      });
      __name(B, "B");
      Co = I(() => {
        Bn();
        Ni();
        Vl = (ot() || {}).Symbol, ql = (ot() || {}).Reflect, bc = /* @__PURE__ */ __name(function(t) {
          for (var e, r = 1, n = arguments.length; r < n; r++) {
            e = arguments[r];
            for (var i in e)
              Ir[Hr].call(e, i) && (t[i] = e[i]);
          }
          return t;
        }, "bc"), yt = Cr || bc, ki = /* @__PURE__ */ __name(function(t, e) {
          return ki = vt.setPrototypeOf || { __proto__: [] } instanceof Array && function(r, n) {
            r.__proto__ = n;
          } || function(r, n) {
            for (var i in n)
              n[Hr](i) && (r[i] = n[i]);
          }, ki(t, e);
        }, "ki");
      });
      To = I(() => {
      });
      ne = I(() => {
        Bn();
        Ni();
        Co();
        To();
      });
      __name(kt, "kt");
      __name(No, "No");
      __name(Ui, "Ui");
      __name(ir, "ir");
      __name(jn, "jn");
      __name(Oi, "Oi");
      __name(Gn, "Gn");
      __name(Dc, "Dc");
      __name(Bi, "Bi");
      __name(Nc, "Nc");
      __name(kc, "kc");
      __name(Fc, "Fc");
      __name(Rc, "Rc");
      __name(Mc, "Mc");
      __name(Mi, "Mi");
      __name(W, "W");
      Ce = I(() => {
        Hn = "constructor", Nt = "prototype", Vn = "function", qn = "_dynInstFuncs", Li = "_isDynProxy", Er = "_dynClass", Ac = "_dynCls$", _i = "_dynInstChk", Vr = _i, Ao = "_dfOpts", Eo = "_unknown_", Do = "__proto__", zn = "_dyn" + Do, Fi = "_dynInstProto", Ri = "useBaseInst", wo = "setInstFuncs", Kn = Object, qr = Kn.getPrototypeOf, Po = Kn.getOwnPropertyNames, bo = 0;
        Lc = { setInstFuncs: true, useBaseInst: true };
        W[Ao] = Lc;
      });
      jr = I(() => {
        (function(t) {
          t[t.CRITICAL = 1] = "CRITICAL", t[t.WARNING = 2] = "WARNING";
        })(S || (S = {}));
        h = { BrowserDoesNotSupportLocalStorage: 0, BrowserCannotReadLocalStorage: 1, BrowserCannotReadSessionStorage: 2, BrowserCannotWriteLocalStorage: 3, BrowserCannotWriteSessionStorage: 4, BrowserFailedRemovalFromLocalStorage: 5, BrowserFailedRemovalFromSessionStorage: 6, CannotSendEmptyTelemetry: 7, ClientPerformanceMathError: 8, ErrorParsingAISessionCookie: 9, ErrorPVCalc: 10, ExceptionWhileLoggingError: 11, FailedAddingTelemetryToBuffer: 12, FailedMonitorAjaxAbort: 13, FailedMonitorAjaxDur: 14, FailedMonitorAjaxOpen: 15, FailedMonitorAjaxRSC: 16, FailedMonitorAjaxSend: 17, FailedMonitorAjaxGetCorrelationHeader: 18, FailedToAddHandlerForOnBeforeUnload: 19, FailedToSendQueuedTelemetry: 20, FailedToReportDataLoss: 21, FlushFailed: 22, MessageLimitPerPVExceeded: 23, MissingRequiredFieldSpecification: 24, NavigationTimingNotSupported: 25, OnError: 26, SessionRenewalDateIsZero: 27, SenderNotInitialized: 28, StartTrackEventFailed: 29, StopTrackEventFailed: 30, StartTrackFailed: 31, StopTrackFailed: 32, TelemetrySampledAndNotSent: 33, TrackEventFailed: 34, TrackExceptionFailed: 35, TrackMetricFailed: 36, TrackPVFailed: 37, TrackPVFailedCalc: 38, TrackTraceFailed: 39, TransmissionFailed: 40, FailedToSetStorageBuffer: 41, FailedToRestoreStorageBuffer: 42, InvalidBackendResponse: 43, FailedToFixDepricatedValues: 44, InvalidDurationValue: 45, TelemetryEnvelopeInvalid: 46, CreateEnvelopeError: 47, CannotSerializeObject: 48, CannotSerializeObjectNonSerializable: 49, CircularReferenceDetected: 50, ClearAuthContextFailed: 51, ExceptionTruncated: 52, IllegalCharsInName: 53, ItemNotInArray: 54, MaxAjaxPerPVExceeded: 55, MessageTruncated: 56, NameTooLong: 57, SampleRateOutOfRange: 58, SetAuthContextFailed: 59, SetAuthContextFailedAccountName: 60, StringValueTooLong: 61, StartCalledMoreThanOnce: 62, StopCalledWithoutStart: 63, TelemetryInitializerFailed: 64, TrackArgumentsNotSpecified: 65, UrlTooLong: 66, SessionStorageBufferFull: 67, CannotAccessCookie: 68, IdTooLong: 69, InvalidEvent: 70, FailedMonitorAjaxSetRequestHeader: 71, SendBrowserInfoOnUserInit: 72, PluginException: 73, NotificationException: 74, SnippetScriptLoadFailure: 99, InvalidInstrumentationKey: 100, CannotParseAiBlobValue: 101, InvalidContentBlob: 102, TrackPageActionEventFailed: 103 };
      });
      __name(Hi, "Hi");
      __name(Vi, "Vi");
      __name(fe, "fe");
      __name(x, "x");
      __name(qi, "qi");
      __name(wr, "wr");
      __name(st, "st");
      __name(z, "z");
      __name(Vt, "Vt");
      __name(Wn, "Wn");
      __name(ji, "ji");
      __name($, "$");
      __name(Gi, "Gi");
      __name(Te, "Te");
      __name(Pr, "Pr");
      __name(Fe, "Fe");
      __name(qt, "qt");
      __name(U, "U");
      __name(ar, "ar");
      __name(Gr, "Gr");
      __name(Re, "Re");
      __name(R, "R");
      __name(Ft, "Ft");
      __name(jt, "jt");
      __name(Kr, "Kr");
      __name(oe, "oe");
      __name(Ye, "Ye");
      __name(St, "St");
      __name(pe, "pe");
      __name(G, "G");
      __name(K, "K");
      __name(ge, "ge");
      __name(Xn, "Xn");
      __name(br, "br");
      __name(Ae, "Ae");
      __name(Wr, "Wr");
      __name(Ki, "Ki");
      __name(Jn, "Jn");
      Me = I(() => {
        ne();
        _o = "on", ko = "attachEvent", Fo = "addEventListener", Ro = "detachEvent", Mo = "removeEventListener", Lo = On, vf = vt.freeze, mf = vt.seal;
        _c = !{ toString: null }.propertyIsEnumerable("toString"), zi = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];
      });
      __name(Ee, "Ee");
      __name(or, "or");
      __name(It, "It");
      __name(Qn, "Qn");
      __name(De, "De");
      __name(Bo, "Bo");
      __name(Le, "Le");
      __name(zo, "zo");
      __name(Zi, "Zi");
      __name($e, "$e");
      __name(Yi, "Yi");
      __name(Je, "Je");
      __name(mt, "mt");
      __name(we, "we");
      __name($i, "$i");
      __name(ea, "ea");
      __name(ta, "ta");
      __name(Gt, "Gt");
      __name(sr, "sr");
      __name(O, "O");
      Ar = I(() => {
        "use strict";
        ne();
        Me();
        Uo = "window", Uc = "document", Oc = "navigator", Bc = "history", zc = "location", Hc = "console", Vc = "performance", Oo = "JSON", qc = "crypto", jc = "msCrypto", Gc = "ReactNative", Ji = "msie", Qi = "trident/", Wi = null, Xi = null, Kc = false;
      });
      __name(Ho, "Ho");
      __name(Mt, "Mt");
      Yn = I(() => {
        "use strict";
        jr();
        Ar();
        Ce();
        Me();
        Wc = "AI (Internal): ", Xc = "AI: ", Jc = "AITR_";
        Rt = function() {
          function t(e, r, n, i) {
            n === void 0 && (n = false);
            var a = this;
            a.messageId = e, a.message = (n ? Xc : Wc) + e;
            var o = "";
            mt() && (o = we().stringify(i));
            var u = (r ? " message:" + Ho(r) : "") + (i ? " props:" + Ho(o) : "");
            a.message += u;
          }
          __name(t, "t");
          return t.dataType = "MessageData", t;
        }();
        Zn = function() {
          function t(e) {
            this.identifier = "DiagnosticLogger", this.queue = [];
            var r = 0, n = {};
            W(t, this, function(i) {
              x(e) && (e = {}), i.consoleLoggingLevel = function() {
                return a("loggingLevelConsole", 0);
              }, i.telemetryLoggingLevel = function() {
                return a("loggingLevelTelemetry", 1);
              }, i.maxInternalMessageLimit = function() {
                return a("maxMessageLimit", 25);
              }, i.enableDebugExceptions = function() {
                return a("enableDebugExceptions", false);
              }, i.throwInternal = function(u, s, c, l, f2) {
                f2 === void 0 && (f2 = false);
                var g = new Rt(s, c, f2, l);
                if (i.enableDebugExceptions())
                  throw g;
                if (!fe(g.message)) {
                  var C = i.consoleLoggingLevel();
                  if (f2) {
                    var E = +g.messageId;
                    !n[E] && C >= S.WARNING && (i.warnToConsole(g.message), n[E] = true);
                  } else
                    C >= S.WARNING && i.warnToConsole(g.message);
                  i.logInternalMessage(u, g);
                }
              }, i.warnToConsole = function(u) {
                var s = Yi();
                if (s) {
                  var c = "log";
                  s.warn && (c = "warn"), z(s[c]) && s[c](u);
                }
              }, i.resetInternalMessageCount = function() {
                r = 0, n = {};
              }, i.logInternalMessage = function(u, s) {
                if (!o()) {
                  var c = true, l = Jc + s.messageId;
                  if (n[l] ? c = false : n[l] = true, c && (u <= i.telemetryLoggingLevel() && (i.queue.push(s), r++), r === i.maxInternalMessageLimit())) {
                    var f2 = "Internal events throttle limit per PageView reached for this app.", g = new Rt(h.MessageLimitPerPVExceeded, f2, false);
                    i.queue.push(g), i.warnToConsole(f2);
                  }
                }
              };
              function a(u, s) {
                var c = e[u];
                return x(c) ? s : c;
              }
              __name(a, "a");
              function o() {
                return r >= i.maxInternalMessageLimit();
              }
              __name(o, "o");
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      __name(ut, "ut");
      Jr = I(() => {
        Ce();
        Me();
        Dr = "ctx", ur = function() {
          function t(e, r, n) {
            var i = this, a = false;
            if (i.start = pe(), i.name = e, i.isAsync = n, i.isChildEvt = function() {
              return false;
            }, z(r)) {
              var o;
              a = St(i, "payload", function() {
                return !o && z(r) && (o = r(), r = null), o;
              });
            }
            i.getCtx = function(u) {
              return u ? u === t.ParentContextKey || u === t.ChildrenContextKey ? i[u] : (i[Dr] || {})[u] : null;
            }, i.setCtx = function(u, s) {
              if (u)
                if (u === t.ParentContextKey)
                  i[u] || (i.isChildEvt = function() {
                    return true;
                  }), i[u] = s;
                else if (u === t.ChildrenContextKey)
                  i[u] = s;
                else {
                  var c = i[Dr] = i[Dr] || {};
                  c[u] = s;
                }
            }, i.complete = function() {
              var u = 0, s = i.getCtx(t.ChildrenContextKey);
              if (Fe(s))
                for (var c = 0; c < s.length; c++) {
                  var l = s[c];
                  l && (u += l.time);
                }
              i.time = pe() - i.start, i.exTime = i.time - u, i.complete = function() {
              }, !a && z(r) && (i.payload = r());
            };
          }
          __name(t, "t");
          return t.ParentContextKey = "parent", t.ChildrenContextKey = "childEvts", t;
        }(), Xr = function() {
          function t(e) {
            this.ctx = {}, W(t, this, function(r) {
              r.create = function(n, i, a) {
                return new ur(n, i, a);
              }, r.fire = function(n) {
                n && (n.complete(), e && e.perfEvent(n));
              }, r.setCtx = function(n, i) {
                if (n) {
                  var a = r[Dr] = r[Dr] || {};
                  a[n] = i;
                }
              }, r.getCtx = function(n) {
                return (r[Dr] || {})[n];
              };
            });
          }
          __name(t, "t");
          return t;
        }(), ra = "CoreUtils.doPerf";
      });
      qo = I(() => {
        "use strict";
        Jr();
        jr();
        Me();
        Vo = function() {
          function t(e, r) {
            var n = this, i = null, a = z(e.processTelemetry), o = z(e.setNextPlugin);
            n._hasRun = false, n.getPlugin = function() {
              return e;
            }, n.getNext = function() {
              return i;
            }, n.setNext = function(u) {
              i = u;
            }, n.processTelemetry = function(u, s) {
              s || (s = r);
              var c = e ? e.identifier : "TelemetryPluginChain";
              ut(s ? s.core() : null, function() {
                return c + ":processTelemetry";
              }, function() {
                if (e && a) {
                  n._hasRun = true;
                  try {
                    s.setNext(i), o && e.setNextPlugin(i), i && (i._hasRun = false), e.processTelemetry(u, s);
                  } catch (f2) {
                    var l = i && i._hasRun;
                    (!i || !l) && s.diagLog().throwInternal(S.CRITICAL, h.PluginException, "Plugin [" + e.identifier + "] failed during processTelemetry - " + f2), i && !l && i.processTelemetry(u, s);
                  }
                } else
                  i && (n._hasRun = true, i.processTelemetry(u, s));
              }, function() {
                return { item: u };
              }, !u.sync);
            };
          }
          __name(t, "t");
          return t;
        }();
      });
      __name(na, "na");
      __name(Qc, "Qc");
      __name(Zc, "Zc");
      $n = I(() => {
        "use strict";
        Yn();
        qo();
        Me();
        Lt = function() {
          function t(e, r, n, i) {
            var a = this, o = null;
            i !== null && (e && z(e.getPlugin) ? o = Qc(e, a, i || e.getPlugin()) : i ? o = Zc(e, a, i) : fe(i) && (o = na(e, a))), a.core = function() {
              return n;
            }, a.diagLog = function() {
              return Mt(n, r);
            }, a.getCfg = function() {
              return r;
            }, a.getExtCfg = function(u, s) {
              s === void 0 && (s = {});
              var c;
              if (r) {
                var l = r.extensionConfig;
                l && u && (c = l[u]);
              }
              return c || s;
            }, a.getConfig = function(u, s, c) {
              c === void 0 && (c = false);
              var l, f2 = a.getExtCfg(u, null);
              return f2 && !x(f2[s]) ? l = f2[s] : r && !x(r[s]) && (l = r[s]), x(l) ? c : l;
            }, a.hasNext = function() {
              return o != null;
            }, a.getNext = function() {
              return o;
            }, a.setNext = function(u) {
              o = u;
            }, a.processNext = function(u) {
              var s = o;
              s && (o = s.getNext(), s.processTelemetry(u, a));
            }, a.createNew = function(u, s) {
              return u === void 0 && (u = null), new t(u || o, r, n, s);
            };
          }
          __name(t, "t");
          return t;
        }();
      });
      ia = I(() => {
        jo = "iKey", ei = "extensionConfig";
      });
      aa = I(() => {
        "use strict";
        $n();
        Me();
        ia();
        ti = "getPlugin", et = function() {
          function t() {
            var e = this, r = false, n = null, i = null;
            e.core = null, e.diagLog = function(a) {
              return e._getTelCtx(a).diagLog();
            }, e.isInitialized = function() {
              return r;
            }, e.setInitialized = function(a) {
              r = a;
            }, e.setNextPlugin = function(a) {
              i = a;
            }, e.processNext = function(a, o) {
              o ? o.processNext(a) : i && z(i.processTelemetry) && i.processTelemetry(a, null);
            }, e._getTelCtx = function(a) {
              a === void 0 && (a = null);
              var o = a;
              if (!o) {
                var u = n || new Lt(null, {}, e.core);
                i && i[ti] ? o = u.createNew(null, i[ti]) : o = u.createNew(null, i);
              }
              return o;
            }, e._baseTelInit = function(a, o, u, s) {
              a && K(a, ei, [], null, x), !s && o && (s = o.getProcessTelContext().getNext());
              var c = i;
              i && i[ti] && (c = i[ti]()), e.core = o, n = new Lt(s, a, o, c), r = true;
            };
          }
          __name(t, "t");
          return t.prototype.initialize = function(e, r, n, i) {
            this._baseTelInit(e, r, n, i);
          }, t;
        }();
      });
      __name(Qr, "Qr");
      __name(sa, "sa");
      ua = I(() => {
        "use strict";
        Me();
        oa = "processTelemetry", Go = "priority", Ko = "setNextPlugin", Wo = "isInitialized";
      });
      Jo = I(() => {
        "use strict";
        ne();
        Ce();
        aa();
        $n();
        ua();
        Me();
        ca = 500, Yc = "Channel has invalid priority", Xo = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            r.identifier = "ChannelControllerPlugin", r.priority = ca;
            var n;
            W(e, r, function(u, s) {
              u.setNextPlugin = function(c) {
              }, u.processTelemetry = function(c, l) {
                n && R(n, function(f2) {
                  if (f2.length > 0) {
                    var g = r._getTelCtx(l).createNew(f2);
                    g.processNext(c);
                  }
                });
              }, u.getChannelControls = function() {
                return n;
              }, u.initialize = function(c, l, f2) {
                u.isInitialized() || (s.initialize(c, l, f2), o((c || {}).channels, f2), R(n, function(g) {
                  return Qr(new Lt(g, c, l), f2);
                }));
              };
            });
            function i(u) {
              R(u, function(s) {
                s.priority < ca && Ae(Yc + s.identifier);
              });
            }
            __name(i, "i");
            function a(u) {
              u && u.length > 0 && (u = u.sort(function(s, c) {
                return s.priority - c.priority;
              }), i(u), n.push(u));
            }
            __name(a, "a");
            function o(u, s) {
              if (n = [], u && R(u, function(l) {
                return a(l);
              }), s) {
                var c = [];
                R(s, function(l) {
                  l.priority > ca && c.push(l);
                }), a(c);
              }
            }
            __name(o, "o");
            return r;
          }
          __name(e, "e");
          return e._staticInit = function() {
            var r = e.prototype;
            St(r, "ChannelControls", r.getChannelControls), St(r, "channelQueue", r.getChannelControls);
          }(), e;
        }(et);
      });
      __name(va, "va");
      __name(ni, "ni");
      __name($c, "$c");
      __name(lr, "lr");
      __name(cr, "cr");
      __name(da, "da");
      __name(as, "as");
      __name(rs, "rs");
      __name(ns, "ns");
      __name(el, "el");
      __name(is, "is");
      __name(ai, "ai");
      oi = I(() => {
        jr();
        Ar();
        Me();
        Qo = "toGMTString", Zo = "toUTCString", ga = "cookie", la = "expires", pa = "enabled", Yo = "isCookieUseDisabled", $o = "disableCookiesUsage", Kt = "_ckMgr", ht = "", ri = null, fa = null, es = null, Zr = De(), ts = {}, ii = {};
      });
      ma = I(() => {
        "use strict";
        ne();
        Ce();
        Jo();
        $n();
        ua();
        Jr();
        oi();
        Me();
        ia();
        tl = "Extensions must provide callback to initialize", os = "_notificationManager", Yr = function() {
          function t() {
            var e = false, r, n, i, a, o;
            W(t, this, function(u) {
              u._extensions = new Array(), n = new Xo(), u.logger = Dt({ throwInternal: function(s, c, l, f2, g) {
                g === void 0 && (g = false);
              }, warnToConsole: function(s) {
              }, resetInternalMessageCount: function() {
              } }), r = [], u.isInitialized = function() {
                return e;
              }, u.initialize = function(s, c, l, f2) {
                u.isInitialized() && Ae("Core should not be initialized more than once"), (!s || x(s.instrumentationKey)) && Ae("Please provide instrumentation key"), i = f2, u[os] = f2, u.config = s || {}, s.extensions = x(s.extensions) ? [] : s.extensions;
                var g = ge(s, ei);
                g.NotificationManager = f2, l && (u.logger = l);
                var C = [];
                C.push.apply(C, c.concat(s.extensions)), C = sa(C);
                var E = [], b = [], p = {};
                R(C, function(m) {
                  (x(m) || x(m.initialize)) && Ae(tl);
                  var y = m.priority, w = m.identifier;
                  m && y && (x(p[y]) ? p[y] = w : l.warnToConsole("Two extensions have same priority #" + y + " - " + p[y] + ", " + w)), !y || y < n.priority ? E.push(m) : b.push(m);
                }), C.push(n), E.push(n), C = sa(C), u._extensions = C, Qr(new Lt([n], s, u), C), Qr(new Lt(E, s, u), C), u._extensions = E, u.getTransmissionControls().length === 0 && Ae("No channels available"), e = true, u.releaseQueue();
              }, u.getTransmissionControls = function() {
                return n.getChannelControls();
              }, u.track = function(s) {
                K(s, jo, u.config.instrumentationKey, null, Xn), K(s, "time", Re(/* @__PURE__ */ new Date()), null, Xn), K(s, "ver", "4.0", null, x), u.isInitialized() ? u.getProcessTelContext().processNext(s) : r.push(s);
              }, u.getProcessTelContext = function() {
                var s = u._extensions, c = s;
                return (!s || s.length === 0) && (c = [n]), new Lt(c, u.config, u);
              }, u.getNotifyMgr = function() {
                return i || (i = Dt({ addNotificationListener: function(s) {
                }, removeNotificationListener: function(s) {
                }, eventsSent: function(s) {
                }, eventsDiscarded: function(s, c) {
                }, eventsSendRequest: function(s, c) {
                } }), u[os] = i), i;
              }, u.getCookieMgr = function() {
                return o || (o = cr(u.config, u.logger)), o;
              }, u.setCookieMgr = function(s) {
                o = s;
              }, u.getPerfMgr = function() {
                return a || u.config && u.config.enablePerfMgr && (a = new Xr(u.getNotifyMgr())), a;
              }, u.setPerfMgr = function(s) {
                a = s;
              }, u.eventCnt = function() {
                return r.length;
              }, u.releaseQueue = function() {
                r.length > 0 && (R(r, function(s) {
                  u.getProcessTelContext().processNext(s);
                }), r = []);
              };
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      ha = I(() => {
        Ce();
        Me();
        $r = function() {
          function t(e) {
            this.listeners = [];
            var r = !!(e || {}).perfEvtsSendAll;
            W(t, this, function(n) {
              n.addNotificationListener = function(i) {
                n.listeners.push(i);
              }, n.removeNotificationListener = function(i) {
                for (var a = Ft(n.listeners, i); a > -1; )
                  n.listeners.splice(a, 1), a = Ft(n.listeners, i);
              }, n.eventsSent = function(i) {
                R(n.listeners, function(a) {
                  a && a.eventsSent && setTimeout(function() {
                    return a.eventsSent(i);
                  }, 0);
                });
              }, n.eventsDiscarded = function(i, a) {
                R(n.listeners, function(o) {
                  o && o.eventsDiscarded && setTimeout(function() {
                    return o.eventsDiscarded(i, a);
                  }, 0);
                });
              }, n.eventsSendRequest = function(i, a) {
                R(n.listeners, function(o) {
                  if (o && o.eventsSendRequest)
                    if (a)
                      setTimeout(function() {
                        return o.eventsSendRequest(i, a);
                      }, 0);
                    else
                      try {
                        o.eventsSendRequest(i, a);
                      } catch (u) {
                      }
                });
              }, n.perfEvent = function(i) {
                i && (r || !i.isChildEvt()) && R(n.listeners, function(a) {
                  if (a && a.perfEvent)
                    if (i.isAsync)
                      setTimeout(function() {
                        return a.perfEvent(i);
                      }, 0);
                    else
                      try {
                        a.perfEvent(i);
                      } catch (o) {
                      }
                });
              };
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      ss = I(() => {
        ne();
        ma();
        Io();
        ha();
        Jr();
        Yn();
        Ce();
        Me();
        en = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            return W(e, r, function(n, i) {
              n.initialize = function(u, s, c, l) {
                i.initialize(u, s, c || new Zn(u), l || new $r(u));
              }, n.track = function(u) {
                ut(n.getPerfMgr(), function() {
                  return "AppInsightsCore:track";
                }, function() {
                  u === null && (o(u), Ae("Invalid telemetry item")), a(u), i.track(u);
                }, function() {
                  return { item: u };
                }, !u.sync);
              }, n.addNotificationListener = function(u) {
                var s = n.getNotifyMgr();
                s && s.addNotificationListener(u);
              }, n.removeNotificationListener = function(u) {
                var s = n.getNotifyMgr();
                s && s.removeNotificationListener(u);
              }, n.pollInternalLogs = function(u) {
                var s = n.config.diagnosticLogInterval;
                return (!s || !(s > 0)) && (s = 1e4), setInterval(function() {
                  var c = n.logger ? n.logger.queue : [];
                  R(c, function(l) {
                    var f2 = { name: u || "InternalMessageId: " + l.messageId, iKey: n.config.instrumentationKey, time: Re(/* @__PURE__ */ new Date()), baseType: Rt.dataType, baseData: { message: l.message } };
                    n.track(f2);
                  }), c.length = 0;
                }, s);
              };
              function a(u) {
                if (x(u.name))
                  throw o(u), Error("telemetry name required");
              }
              __name(a, "a");
              function o(u) {
                var s = n.getNotifyMgr();
                s && s.eventsDiscarded([u], So.InvalidEvent);
              }
              __name(o, "o");
            }), r;
          }
          __name(e, "e");
          return e;
        }(Yr);
      });
      __name(ls, "ls");
      __name(fs, "fs");
      __name(si, "si");
      __name(Ct, "Ct");
      __name(xa, "xa");
      __name(ui, "ui");
      ya = I(() => {
        Ar();
        Me();
        us = 4294967296, Wt = 4294967295, cs = false, tn = 123456789, rn = 987654321;
      });
      __name(_t, "_t");
      __name(ps, "ps");
      __name(ds, "ds");
      __name(Xt, "Xt");
      __name(Oe, "Oe");
      __name(Qt, "Qt");
      __name(ci, "ci");
      __name(Sa, "Sa");
      __name(Ia, "Ia");
      __name(Ca, "Ca");
      __name(Ta, "Ta");
      gs = I(() => {
        "use strict";
        ne();
        oi();
        Ar();
        Me();
        ya();
        nn = null;
        on = { _canUseCookies: void 0, isTypeof: Vi, isUndefined: fe, isNullOrUndefined: x, hasOwnProperty: wr, isFunction: z, isObject: st, isDate: Pr, isArray: Fe, isError: qt, isString: U, isNumber: ar, isBoolean: Gr, toISOString: Re, arrForEach: R, arrIndexOf: Ft, arrMap: jt, arrReduce: Kr, strTrim: oe, objCreate: Dt, objKeys: Ye, objDefineAccessors: St, addEventHandler: _t, dateNow: pe, isIE: Gt, disableCookies: ci, newGuid: ps, perfNow: ds, newId: Xt, randomValue: si, random32: Ct, mwcRandomSeed: xa, mwcRandom32: ui, generateW3CId: Oe }, rl = /[xy]/g, Jt = { Attach: Vt, AttachEvent: Vt, Detach: Wn, DetachEvent: Wn };
      });
      __name(wa, "wa");
      __name(Ea, "Ea");
      __name(al, "al");
      __name(ol, "ol");
      __name(xs, "xs");
      __name(Pa, "Pa");
      __name(sn, "sn");
      ys = I(() => {
        ne();
        Me();
        vs = "_aiHooks", ms = ["req", "rsp", "hkErr", "fnErr"], nl = "__proto__", il = "constructor";
        hs = Object.getPrototypeOf;
      });
      X = I(() => {
        ss();
        ma();
        aa();
        ya();
        gs();
        Me();
        Ar();
        ne();
        ha();
        Jr();
        Yn();
        jr();
        ys();
        oi();
      });
      ba = I(() => {
        te = { requestContextHeader: "Request-Context", requestContextTargetKey: "appId", requestContextAppIdFormat: "appId=cid-v1:", requestIdHeader: "Request-Id", traceParentHeader: "traceparent", traceStateHeader: "tracestate", sdkContextHeader: "Sdk-Context", sdkContextHeaderAppIdRequest: "appId", requestContextHeaderLowerCase: "request-context" };
      });
      __name(li, "li");
      __name(Aa, "Aa");
      __name(ae, "ae");
      __name(Tt, "Tt");
      __name(Nr, "Nr");
      __name(fi, "fi");
      __name(Be, "Be");
      __name(ze, "ze");
      __name(pi, "pi");
      __name(di, "di");
      __name(Da, "Da");
      ct = I(() => {
        X();
        Na = { MAX_NAME_LENGTH: 150, MAX_ID_LENGTH: 128, MAX_PROPERTY_LENGTH: 8192, MAX_STRING_LENGTH: 1024, MAX_URL_LENGTH: 2048, MAX_MESSAGE_LENGTH: 32768, MAX_EXCEPTION_LENGTH: 32768, sanitizeKeyAndAddUniqueness: li, sanitizeKey: Aa, sanitizeString: ae, sanitizeUrl: Tt, sanitizeMessage: Nr, sanitizeException: fi, sanitizeProperties: Be, sanitizeMeasurements: ze, sanitizeId: pi, sanitizeInput: di, padNumber: Da, trim: oe };
      });
      __name(Ut, "Ut");
      ka = I(() => {
        X();
      });
      __name(ee, "ee");
      __name(Ge, "Ge");
      __name(kr, "kr");
      __name(un, "un");
      __name(cn, "cn");
      ln = I(() => {
        X();
      });
      lt = I(() => {
        Et = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation", fr = "sampleRate", Ot = "ProcessLegacy", Fr = "http.method", fn = "https://dc.services.visualstudio.com", ce = "not_specified";
      });
      Fa = I(() => {
        (function(t) {
          t[t.LocalStorage = 0] = "LocalStorage", t[t.SessionStorage = 1] = "SessionStorage";
        })(Zt || (Zt = {}));
        (function(t) {
          t[t.AI = 0] = "AI", t[t.AI_AND_W3C = 1] = "AI_AND_W3C", t[t.W3C = 2] = "W3C";
        })(Ke || (Ke = {}));
      });
      __name(Ra, "Ra");
      __name(gi, "gi");
      __name(Ma, "Ma");
      __name(pn, "pn");
      __name(Rr, "Rr");
      __name(dn, "dn");
      __name(gn, "gn");
      __name(vn, "vn");
      __name(wt, "wt");
      __name(La, "La");
      __name(Yt, "Yt");
      __name($t, "$t");
      __name(mn, "mn");
      _a5 = I(() => {
        X();
        Fa();
        pr = void 0, dr = void 0;
      });
      __name(gr, "gr");
      __name(hn, "hn");
      __name(Ua, "Ua");
      __name(xn, "xn");
      __name(vi, "vi");
      __name(yn, "yn");
      Oa = I(() => {
        X();
        Ss = De() || {}, Is = 0, sl = [null, null, null, null, null];
      });
      __name(Mr, "Mr");
      __name(Cs, "Cs");
      __name(vr, "vr");
      __name(ve, "ve");
      Ha = I(() => {
        X();
        ba();
        ct();
        ka();
        ln();
        lt();
        _a5();
        Oa();
        ul = ["https://dc.services.visualstudio.com/v2/track", "https://breeze.aimon.applicationinsights.io/v2/track", "https://dc-int.services.visualstudio.com/v2/track"];
        Sn = { NotSpecified: ce, createDomEvent: Ut, disableStorage: pn, isInternalApplicationInsightsEndpoint: Mr, canUseLocalStorage: Rr, getStorage: dn, setStorage: gn, removeStorage: vn, canUseSessionStorage: wt, getSessionStorageKeys: La, getSessionStorage: Yt, setSessionStorage: $t, removeSessionStorage: mn, disableCookies: ci, canUseCookies: Sa, disallowsSameSiteNone: ai, setCookie: Ca, stringToBoolOrDefault: ee, getCookie: Ia, deleteCookie: Ta, trim: oe, newId: Xt, random32: function() {
          return Ct(true);
        }, generateW3CId: Oe, isArray: Fe, isError: qt, isDate: Pr, toISOStringForIE8: Re, getIEVersion: sr, msToTimeSpan: Ge, isCrossOriginError: cn, dump: O, getExceptionName: G, addEventHandler: Vt, IsBeaconApiSupported: kr, getExtension: un }, Ba = { parseUrl: gr, getAbsoluteUrl: hn, getPathName: Ua, getCompleteUrl: xn, parseHost: vi, parseFullHost: yn }, Pt = { correlationIdPrefix: "cid-v1:", canIncludeCorrelationHeader: function(t, e, r) {
          if (!e || t && t.disableCorrelationHeaders)
            return false;
          if (t && t.correlationHeaderExcludePatterns) {
            for (var n = 0; n < t.correlationHeaderExcludePatterns.length; n++)
              if (t.correlationHeaderExcludePatterns[n].test(e))
                return false;
          }
          var i = gr(e).host.toLowerCase();
          if (i && (i.indexOf(":443") !== -1 || i.indexOf(":80") !== -1) && (i = (yn(e, true) || "").toLowerCase()), (!t || !t.enableCorsCorrelation) && i && i !== r)
            return false;
          var a = t && t.correlationHeaderDomains;
          if (a) {
            var o;
            if (R(a, function(c) {
              var l = new RegExp(c.toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
              o = o || l.test(i);
            }), !o)
              return false;
          }
          var u = t && t.correlationHeaderExcludedDomains;
          if (!u || u.length === 0)
            return true;
          for (var n = 0; n < u.length; n++) {
            var s = new RegExp(u[n].toLowerCase().replace(/\\/g, "\\\\").replace(/\./g, "\\.").replace(/\*/g, ".*"));
            if (s.test(i))
              return false;
          }
          return i && i.length > 0;
        }, getCorrelationContext: function(t) {
          if (t) {
            var e = Pt.getCorrelationContextValue(t, te.requestContextTargetKey);
            if (e && e !== Pt.correlationIdPrefix)
              return e;
          }
        }, getCorrelationContextValue: function(t, e) {
          if (t)
            for (var r = t.split(","), n = 0; n < r.length; ++n) {
              var i = r[n].split("=");
              if (i.length === 2 && i[0] === e)
                return i[1];
            }
        } };
        za = { Now: vr, GetDuration: ve };
      });
      __name(mi, "mi");
      Ts = I(() => {
        lt();
        X();
        cl = ";", ll = "=";
        Va = { parse: mi };
      });
      qa = I(() => {
        In = function() {
          function t() {
          }
          __name(t, "t");
          return t;
        }();
      });
      ja = I(() => {
        ne();
        qa();
        Cn = function(t) {
          B(e, t);
          function e() {
            return t.call(this) || this;
          }
          __name(e, "e");
          return e;
        }(In);
      });
      ws2 = I(() => {
        Es = function() {
          function t() {
            this.ver = 1, this.sampleRate = 100, this.tags = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      Ps = I(() => {
        ne();
        ws2();
        ct();
        X();
        lt();
        Tn = function(t) {
          B(e, t);
          function e(r, n, i) {
            var a = t.call(this) || this;
            return a.name = ae(r, i) || ce, a.data = n, a.time = Re(/* @__PURE__ */ new Date()), a.aiDataContract = { time: 1, iKey: 1, name: 1, sampleRate: function() {
              return a.sampleRate === 100 ? 4 : 1;
            }, tags: 1, data: 1 }, a;
          }
          __name(e, "e");
          return e;
        }(Es);
      });
      Ga = I(() => {
        hi = function() {
          function t() {
            this.ver = 2, this.properties = {}, this.measurements = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      bs = I(() => {
        ne();
        Ga();
        ct();
        lt();
        He = function(t) {
          B(e, t);
          function e(r, n, i, a) {
            var o = t.call(this) || this;
            return o.aiDataContract = { ver: 1, name: 1, properties: 0, measurements: 0 }, o.name = ae(r, n) || ce, o.properties = Be(r, i), o.measurements = ze(r, a), o;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.Event", e.dataType = "EventData", e;
        }(hi);
      });
      Ds = I(() => {
        As = function() {
          function t() {
          }
          __name(t, "t");
          return t;
        }();
      });
      ks = I(() => {
        Ns = function() {
          function t() {
            this.ver = 2, this.exceptions = [], this.properties = {}, this.measurements = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      Rs = I(() => {
        Fs = function() {
          function t() {
            this.hasFullStack = true, this.parsedStack = [];
          }
          __name(t, "t");
          return t;
        }();
      });
      __name(Ja, "Ja");
      __name(Os, "Os");
      __name(pl, "pl");
      __name(dl, "dl");
      __name(Ls, "Ls");
      __name(Lr, "Lr");
      __name(gl, "gl");
      __name(Bs, "Bs");
      __name(vl, "vl");
      __name(ml, "ml");
      __name(xi, "xi");
      __name(Ka, "Ka");
      zs = I(() => {
        ne();
        Ds();
        ks();
        Rs();
        ct();
        X();
        lt();
        fl = "<no_method>", _r = "error", ft = "stack", Wa = "stackDetails", Ms = "errorSrc", Xa = "message", Us = "description";
        me = function(t) {
          B(e, t);
          function e(r, n, i, a, o, u) {
            var s = t.call(this) || this;
            return s.aiDataContract = { ver: 1, exceptions: 1, severityLevel: 0, properties: 0, measurements: 0 }, dl(n) ? (s.exceptions = n.exceptions, s.properties = n.properties, s.measurements = n.measurements, n.severityLevel && (s.severityLevel = n.severityLevel), n.id && (s.id = n.id), n.problemGroup && (s.problemGroup = n.problemGroup), s.ver = 2, x(n.isManual) || (s.isManual = n.isManual)) : (i || (i = {}), s.exceptions = [new _s(r, n, i)], s.properties = Be(r, i), s.measurements = ze(r, a), o && (s.severityLevel = o), u && (s.id = u)), s;
          }
          __name(e, "e");
          return e.CreateAutoException = function(r, n, i, a, o, u, s, c) {
            var l = xi(o || u || r);
            return { message: Os(r, l), url: n, lineNumber: i, columnNumber: a, error: Ka(o || u || r), evt: Ka(u || r), typeName: l, stackDetails: Bs(s || o || u), errorSrc: c };
          }, e.CreateFromInterface = function(r, n, i, a) {
            var o = n.exceptions && jt(n.exceptions, function(s) {
              return _s.CreateFromInterface(r, s);
            }), u = new e(r, yt({}, n, { exceptions: o }), i, a);
            return u;
          }, e.prototype.toInterface = function() {
            var r = this, n = r.exceptions, i = r.properties, a = r.measurements, o = r.severityLevel, u = r.ver, s = r.problemGroup, c = r.id, l = r.isManual, f2 = n instanceof Array && jt(n, function(g) {
              return g.toInterface();
            }) || void 0;
            return { ver: "4.0", exceptions: f2, severityLevel: o, properties: i, measurements: a, problemGroup: s, id: c, isManual: l };
          }, e.CreateSimpleException = function(r, n, i, a, o, u) {
            return { exceptions: [{ hasFullStack: true, message: r, stack: o, typeName: n }] };
          }, e.envelopeType = "Microsoft.ApplicationInsights.{0}.Exception", e.dataType = "ExceptionData", e.formatError = Ka, e;
        }(Ns), _s = function(t) {
          B(e, t);
          function e(r, n, i) {
            var a = t.call(this) || this;
            if (a.aiDataContract = { id: 0, outerId: 0, typeName: 1, message: 1, hasFullStack: 0, stack: 0, parsedStack: 2 }, pl(n))
              a.typeName = n.typeName, a.message = n.message, a[ft] = n[ft], a.parsedStack = n.parsedStack, a.hasFullStack = n.hasFullStack;
            else {
              var o = n, u = o && o.evt;
              qt(o) || (o = o[_r] || u || o), a.typeName = ae(r, xi(o)) || ce, a.message = Nr(r, Os(n || o, a.typeName)) || ce;
              var s = n[Wa] || Bs(n);
              a.parsedStack = ml(s), a[ft] = fi(r, vl(s)), a.hasFullStack = Fe(a.parsedStack) && a.parsedStack.length > 0, i && (i.typeName = i.typeName || a.typeName);
            }
            return a;
          }
          __name(e, "e");
          return e.prototype.toInterface = function() {
            var r = this.parsedStack instanceof Array && jt(this.parsedStack, function(i) {
              return i.toInterface();
            }), n = { id: this.id, outerId: this.outerId, typeName: this.typeName, message: this.message, hasFullStack: this.hasFullStack, stack: this[ft], parsedStack: r || void 0 };
            return n;
          }, e.CreateFromInterface = function(r, n) {
            var i = n.parsedStack instanceof Array && jt(n.parsedStack, function(o) {
              return Qa.CreateFromInterface(o);
            }) || n.parsedStack, a = new e(r, yt({}, n, { parsedStack: i }));
            return a;
          }, e;
        }(Fs), Qa = function(t) {
          B(e, t);
          function e(r, n) {
            var i = t.call(this) || this;
            if (i.sizeInBytes = 0, i.aiDataContract = { level: 1, method: 1, assembly: 0, fileName: 0, line: 0 }, typeof r == "string") {
              var a = r;
              i.level = n, i.method = fl, i.assembly = oe(a), i.fileName = "", i.line = 0;
              var o = a.match(e.regex);
              o && o.length >= 5 && (i.method = oe(o[2]) || i.method, i.fileName = oe(o[4]), i.line = parseInt(o[5]) || 0);
            } else
              i.level = r.level, i.method = r.method, i.assembly = r.assembly, i.fileName = r.fileName, i.line = r.line, i.sizeInBytes = 0;
            return i.sizeInBytes += i.method.length, i.sizeInBytes += i.fileName.length, i.sizeInBytes += i.assembly.length, i.sizeInBytes += e.baseSize, i.sizeInBytes += i.level.toString().length, i.sizeInBytes += i.line.toString().length, i;
          }
          __name(e, "e");
          return e.CreateFromInterface = function(r) {
            return new e(r, null);
          }, e.prototype.toInterface = function() {
            return { level: this.level, method: this.method, assembly: this.assembly, fileName: this.fileName, line: this.line };
          }, e.regex = /^([\s]+at)?[\s]{0,50}([^\@\()]+?)[\s]{0,50}(\@|\()([^\(\n]+):([0-9]+):([0-9]+)(\)?)$/, e.baseSize = 58, e;
        }(As);
      });
      Vs = I(() => {
        Hs = function() {
          function t() {
            this.ver = 2, this.metrics = [], this.properties = {}, this.measurements = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      qs = I(() => {
        (function(t) {
          t[t.Measurement = 0] = "Measurement", t[t.Aggregation = 1] = "Aggregation";
        })(yi || (yi = {}));
      });
      Gs = I(() => {
        qs();
        js = function() {
          function t() {
            this.kind = yi.Measurement;
          }
          __name(t, "t");
          return t;
        }();
      });
      Ws = I(() => {
        ne();
        Gs();
        Ks = function(t) {
          B(e, t);
          function e() {
            var r = t !== null && t.apply(this, arguments) || this;
            return r.aiDataContract = { name: 1, kind: 0, value: 1, count: 0, min: 0, max: 0, stdDev: 0 }, r;
          }
          __name(e, "e");
          return e;
        }(js);
      });
      Xs = I(() => {
        ne();
        Vs();
        ct();
        Ws();
        lt();
        Ve = function(t) {
          B(e, t);
          function e(r, n, i, a, o, u, s, c) {
            var l = t.call(this) || this;
            l.aiDataContract = { ver: 1, metrics: 1, properties: 0 };
            var f2 = new Ks();
            return f2.count = a > 0 ? a : void 0, f2.max = isNaN(u) || u === null ? void 0 : u, f2.min = isNaN(o) || o === null ? void 0 : o, f2.name = ae(r, n) || ce, f2.value = i, l.metrics = [f2], l.properties = Be(r, s), l.measurements = ze(r, c), l;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.Metric", e.dataType = "MetricData", e;
        }(Hs);
      });
      Si = I(() => {
        ne();
        Ga();
        mr = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            return r.ver = 2, r.properties = {}, r.measurements = {}, r;
          }
          __name(e, "e");
          return e;
        }(hi);
      });
      Js = I(() => {
        ne();
        Si();
        ct();
        ln();
        lt();
        Ne = function(t) {
          B(e, t);
          function e(r, n, i, a, o, u, s) {
            var c = t.call(this) || this;
            return c.aiDataContract = { ver: 1, name: 0, url: 0, duration: 0, properties: 0, measurements: 0, id: 0 }, c.id = pi(r, s), c.url = Tt(r, i), c.name = ae(r, n) || ce, isNaN(a) || (c.duration = Ge(a)), c.properties = Be(r, o), c.measurements = ze(r, u), c;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.Pageview", e.dataType = "PageviewData", e;
        }(mr);
      });
      Zs = I(() => {
        Qs = function() {
          function t() {
            this.ver = 2, this.success = true, this.properties = {}, this.measurements = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      Ys = I(() => {
        ne();
        ct();
        Ha();
        Zs();
        ln();
        qe = function(t) {
          B(e, t);
          function e(r, n, i, a, o, u, s, c, l, f2, g, C) {
            l === void 0 && (l = "Ajax");
            var E = t.call(this) || this;
            E.aiDataContract = { id: 1, ver: 1, name: 0, resultCode: 0, duration: 0, success: 0, data: 0, target: 0, type: 0, properties: 0, measurements: 0, kind: 0, value: 0, count: 0, min: 0, max: 0, stdDev: 0, dependencyKind: 0, dependencySource: 0, commandName: 0, dependencyTypeName: 0 }, E.id = n, E.duration = Ge(o), E.success = u, E.resultCode = s + "", E.type = ae(r, l);
            var b = Cs(r, i, c, a);
            return E.data = Tt(r, a) || b.data, E.target = ae(r, b.target), f2 && (E.target = E.target + " | " + f2), E.name = ae(r, b.name), E.properties = Be(r, g), E.measurements = ze(r, C), E;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.RemoteDependency", e.dataType = "RemoteDependencyData", e;
        }(Qs);
      });
      eu = I(() => {
        $s = function() {
          function t() {
            this.ver = 2, this.properties = {}, this.measurements = {};
          }
          __name(t, "t");
          return t;
        }();
      });
      tu = I(() => {
        ne();
        eu();
        ct();
        lt();
        Qe = function(t) {
          B(e, t);
          function e(r, n, i, a, o) {
            var u = t.call(this) || this;
            return u.aiDataContract = { ver: 1, message: 1, severityLevel: 0, properties: 0 }, n = n || ce, u.message = Nr(r, n), u.properties = Be(r, a), u.measurements = ze(r, o), i && (u.severityLevel = i), u;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.Message", e.dataType = "MessageData", e;
        }($s);
      });
      nu = I(() => {
        ne();
        Si();
        ru = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            return r.ver = 2, r.properties = {}, r.measurements = {}, r;
          }
          __name(e, "e");
          return e;
        }(mr);
      });
      iu = I(() => {
        ne();
        nu();
        ct();
        lt();
        Ze = function(t) {
          B(e, t);
          function e(r, n, i, a, o, u, s) {
            var c = t.call(this) || this;
            return c.aiDataContract = { ver: 1, name: 0, url: 0, duration: 0, perfTotal: 0, networkConnect: 0, sentRequest: 0, receivedResponse: 0, domProcessing: 0, properties: 0, measurements: 0 }, c.url = Tt(r, i), c.name = ae(r, n) || ce, c.properties = Be(r, o), c.measurements = ze(r, u), s && (c.domProcessing = s.domProcessing, c.duration = s.duration, c.networkConnect = s.networkConnect, c.perfTotal = s.perfTotal, c.receivedResponse = s.receivedResponse, c.sentRequest = s.sentRequest), c;
          }
          __name(e, "e");
          return e.envelopeType = "Microsoft.ApplicationInsights.{0}.PageviewPerformance", e.dataType = "PageviewPerformanceData", e;
        }(ru);
      });
      au = I(() => {
        ne();
        ja();
        xt = function(t) {
          B(e, t);
          function e(r, n) {
            var i = t.call(this) || this;
            return i.aiDataContract = { baseType: 1, baseData: 1 }, i.baseType = r, i.baseData = n, i;
          }
          __name(e, "e");
          return e;
        }(Cn);
      });
      ou = I(() => {
        (function(t) {
          t[t.Verbose = 0] = "Verbose", t[t.Information = 1] = "Information", t[t.Warning = 2] = "Warning", t[t.Error = 3] = "Error", t[t.Critical = 4] = "Critical";
        })(Bt || (Bt = {}));
      });
      su = I(() => {
        X();
        Za = function() {
          function t() {
          }
          __name(t, "t");
          return t.getConfig = function(e, r, n, i) {
            i === void 0 && (i = false);
            var a;
            return n && e.extensionConfig && e.extensionConfig[n] && !x(e.extensionConfig[n][r]) ? a = e.extensionConfig[n][r] : a = e[r], x(a) ? i : a;
          }, t;
        }();
      });
      __name(tr, "tr");
      $a = I(() => {
        ne();
        X();
        En = tr("application"), Pe = tr("device"), Ii = tr("location"), Ur = tr("operation"), Ya = tr("session"), er = tr("user"), hr = tr("cloud"), wn = tr("internal"), xr = function(t) {
          B(e, t);
          function e() {
            return t.call(this) || this;
          }
          __name(e, "e");
          return e;
        }(Ki({ applicationVersion: En("ver"), applicationBuild: En("build"), applicationTypeId: En("typeId"), applicationId: En("applicationId"), applicationLayer: En("layer"), deviceId: Pe("id"), deviceIp: Pe("ip"), deviceLanguage: Pe("language"), deviceLocale: Pe("locale"), deviceModel: Pe("model"), deviceFriendlyName: Pe("friendlyName"), deviceNetwork: Pe("network"), deviceNetworkName: Pe("networkName"), deviceOEMName: Pe("oemName"), deviceOS: Pe("os"), deviceOSVersion: Pe("osVersion"), deviceRoleInstance: Pe("roleInstance"), deviceRoleName: Pe("roleName"), deviceScreenResolution: Pe("screenResolution"), deviceType: Pe("type"), deviceMachineName: Pe("machineName"), deviceVMName: Pe("vmName"), deviceBrowser: Pe("browser"), deviceBrowserVersion: Pe("browserVersion"), locationIp: Ii("ip"), locationCountry: Ii("country"), locationProvince: Ii("province"), locationCity: Ii("city"), operationId: Ur("id"), operationName: Ur("name"), operationParentId: Ur("parentId"), operationRootId: Ur("rootId"), operationSyntheticSource: Ur("syntheticSource"), operationCorrelationVector: Ur("correlationVector"), sessionId: Ya("id"), sessionIsFirst: Ya("isFirst"), sessionIsNew: Ya("isNew"), userAccountAcquisitionDate: er("accountAcquisitionDate"), userAccountId: er("accountId"), userAgent: er("userAgent"), userId: er("id"), userStoreRegion: er("storeRegion"), userAuthUserId: er("authUserId"), userAnonymousUserAcquisitionDate: er("anonUserAcquisitionDate"), userAuthenticatedUserAcquisitionDate: er("authUserAcquisitionDate"), cloudName: hr("name"), cloudRole: hr("role"), cloudRoleVer: hr("roleVer"), cloudRoleInstance: hr("roleInstance"), cloudEnvironment: hr("environment"), cloudLocation: hr("location"), cloudDeploymentUnit: hr("deploymentUnit"), internalNodeName: wn("nodeName"), internalSdkVersion: wn("sdkVersion"), internalAgentVersion: wn("agentVersion"), internalSnippet: wn("snippet"), internalSdkSrc: wn("sdkSrc") }));
      });
      uu = I(() => {
        ct();
        X();
        lt();
        tt = function() {
          function t() {
          }
          __name(t, "t");
          return t.create = function(e, r, n, i, a, o) {
            if (n = ae(i, n) || ce, x(e) || x(r) || x(n))
              throw Error("Input doesn't contain all required fields");
            var u = { name: n, time: Re(/* @__PURE__ */ new Date()), iKey: "", ext: o || {}, tags: [], data: {}, baseType: r, baseData: e };
            return x(a) || $(a, function(s, c) {
              u.data[s] = c;
            }), u;
          }, t;
        }();
      });
      cu = I(() => {
        $a();
        _e = { UserExt: "user", DeviceExt: "device", TraceExt: "trace", WebExt: "web", AppExt: "app", OSExt: "os", SessionExt: "ses", SDKExt: "sdk" }, re = new xr();
      });
      he = I(() => {
        Ha();
        Ts();
        ba();
        lt();
        ja();
        qa();
        Ps();
        bs();
        zs();
        Xs();
        Js();
        Si();
        Ys();
        tu();
        iu();
        au();
        ou();
        su();
        $a();
        ct();
        uu();
        cu();
        Fa();
        ln();
        ka();
        _a5();
        Oa();
        zt = "AppInsightsPropertiesPlugin", Or = "AppInsightsChannelPlugin", Ci = "ApplicationInsightsAnalytics";
      });
      fu = I(() => {
        he();
        X();
        Ce();
        lu = function() {
          function t(e, r, n, i) {
            W(t, this, function(a) {
              var o = null, u = [], s = false, c;
              n && (c = n.logger);
              function l() {
                n && R(n.getTransmissionControls(), function(g) {
                  R(g, function(C) {
                    return C.flush(true);
                  });
                });
              }
              __name(l, "l");
              function f2(g) {
                u.push(g), o || (o = setInterval(function() {
                  var C = u.slice(0), E = false;
                  u = [], R(C, function(b) {
                    b() ? E = true : u.push(b);
                  }), u.length === 0 && (clearInterval(o), o = null), E && l();
                }, 100));
              }
              __name(f2, "f");
              a.trackPageView = function(g, C) {
                var E = g.name;
                if (x(E) || typeof E != "string") {
                  var b = De();
                  E = g.name = b && b.title || "";
                }
                var p = g.uri;
                if (x(p) || typeof p != "string") {
                  var m = $e();
                  p = g.uri = m && m.href || "";
                }
                if (!i.isPerformanceTimingSupported()) {
                  e.sendPageViewInternal(g, C), l(), c.throwInternal(S.WARNING, h.NavigationTimingNotSupported, "trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.");
                  return;
                }
                var y = false, w, L = i.getPerformanceTiming().navigationStart;
                L > 0 && (w = ve(L, +/* @__PURE__ */ new Date()), i.shouldCollectDuration(w) || (w = void 0));
                var k;
                !x(C) && !x(C.duration) && (k = C.duration), (r || !isNaN(k)) && (isNaN(k) && (C || (C = {}), C.duration = w), e.sendPageViewInternal(g, C), l(), y = true);
                var Q = 6e4;
                C || (C = {}), f2(function() {
                  var ye = false;
                  try {
                    if (i.isPerformanceTimingDataReady()) {
                      ye = true;
                      var J = { name: E, uri: p };
                      i.populatePageViewPerformanceEvent(J), !J.isValid && !y ? (C.duration = w, e.sendPageViewInternal(g, C)) : (y || (C.duration = J.durationMs, e.sendPageViewInternal(g, C)), s || (e.sendPageViewPerformanceInternal(J, C), s = true));
                    } else
                      L > 0 && ve(L, +/* @__PURE__ */ new Date()) > Q && (ye = true, y || (C.duration = Q, e.sendPageViewInternal(g, C)));
                  } catch (de) {
                    c.throwInternal(S.CRITICAL, h.TrackPVFailedCalc, "trackPageView failed on page load calculation: " + G(de), { exception: O(de) });
                  }
                  return ye;
                });
              };
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      du = I(() => {
        he();
        X();
        pu = function() {
          function t(e, r) {
            this.prevPageVisitDataKeyName = "prevPageVisitData", this.pageVisitTimeTrackingHandler = r, this._logger = e;
          }
          __name(t, "t");
          return t.prototype.trackPreviousPageVisit = function(e, r) {
            try {
              var n = this.restartPageVisitTimer(e, r);
              n && this.pageVisitTimeTrackingHandler(n.pageName, n.pageUrl, n.pageVisitTime);
            } catch (i) {
              this._logger.warnToConsole("Auto track page visit time failed, metric will not be collected: " + O(i));
            }
          }, t.prototype.restartPageVisitTimer = function(e, r) {
            try {
              var n = this.stopPageVisitTimer();
              return this.startPageVisitTimer(e, r), n;
            } catch (i) {
              return this._logger.warnToConsole("Call to restart failed: " + O(i)), null;
            }
          }, t.prototype.startPageVisitTimer = function(e, r) {
            try {
              if (wt()) {
                Yt(this._logger, this.prevPageVisitDataKeyName) != null && Ae("Cannot call startPageVisit consecutively without first calling stopPageVisit");
                var n = new hl(e, r), i = we().stringify(n);
                $t(this._logger, this.prevPageVisitDataKeyName, i);
              }
            } catch (a) {
              this._logger.warnToConsole("Call to start failed: " + O(a));
            }
          }, t.prototype.stopPageVisitTimer = function() {
            try {
              if (wt()) {
                var e = pe(), r = Yt(this._logger, this.prevPageVisitDataKeyName);
                if (r && mt()) {
                  var n = we().parse(r);
                  return n.pageVisitTime = e - n.pageVisitStartTime, mn(this._logger, this.prevPageVisitDataKeyName), n;
                } else
                  return null;
              }
              return null;
            } catch (i) {
              return this._logger.warnToConsole("Stop page visit timer failed: " + O(i)), null;
            }
          }, t;
        }(), hl = function() {
          function t(e, r) {
            this.pageVisitStartTime = pe(), this.pageName = e, this.pageUrl = r;
          }
          __name(t, "t");
          return t;
        }();
      });
      vu = I(() => {
        he();
        X();
        gu = function() {
          function t(e) {
            this.MAX_DURATION_ALLOWED = 36e5, e && (this._logger = e.logger);
          }
          __name(t, "t");
          return t.prototype.populatePageViewPerformanceEvent = function(e) {
            e.isValid = false;
            var r = this.getPerformanceNavigationTiming(), n = this.getPerformanceTiming(), i = 0, a = 0, o = 0, u = 0, s = 0;
            (r || n) && (r ? (i = r.duration, a = r.startTime === 0 ? r.connectEnd : ve(r.startTime, r.connectEnd), o = ve(r.requestStart, r.responseStart), u = ve(r.responseStart, r.responseEnd), s = ve(r.responseEnd, r.loadEventEnd)) : (i = ve(n.navigationStart, n.loadEventEnd), a = ve(n.navigationStart, n.connectEnd), o = ve(n.requestStart, n.responseStart), u = ve(n.responseStart, n.responseEnd), s = ve(n.responseEnd, n.loadEventEnd)), i === 0 ? this._logger.throwInternal(S.WARNING, h.ErrorPVCalc, "error calculating page view performance.", { total: i, network: a, request: o, response: u, dom: s }) : this.shouldCollectDuration(i, a, o, u, s) ? i < Math.floor(a) + Math.floor(o) + Math.floor(u) + Math.floor(s) ? this._logger.throwInternal(S.WARNING, h.ClientPerformanceMathError, "client performance math error.", { total: i, network: a, request: o, response: u, dom: s }) : (e.durationMs = i, e.perfTotal = e.duration = Ge(i), e.networkConnect = Ge(a), e.sentRequest = Ge(o), e.receivedResponse = Ge(u), e.domProcessing = Ge(s), e.isValid = true) : this._logger.throwInternal(S.WARNING, h.InvalidDurationValue, "Invalid page load duration value. Browser perf data won't be sent.", { total: i, network: a, request: o, response: u, dom: s }));
          }, t.prototype.getPerformanceTiming = function() {
            return this.isPerformanceTimingSupported() ? Je().timing : null;
          }, t.prototype.getPerformanceNavigationTiming = function() {
            return this.isPerformanceNavigationTimingSupported() ? Je().getEntriesByType("navigation")[0] : null;
          }, t.prototype.isPerformanceNavigationTimingSupported = function() {
            var e = Je();
            return e && e.getEntriesByType && e.getEntriesByType("navigation").length > 0;
          }, t.prototype.isPerformanceTimingSupported = function() {
            var e = Je();
            return e && e.timing;
          }, t.prototype.isPerformanceTimingDataReady = function() {
            var e = Je(), r = e ? e.timing : 0;
            return r && r.domainLookupStart > 0 && r.navigationStart > 0 && r.responseStart > 0 && r.requestStart > 0 && r.loadEventEnd > 0 && r.responseEnd > 0 && r.connectEnd > 0 && r.domLoading > 0;
          }, t.prototype.shouldCollectDuration = function() {
            for (var e = [], r = 0; r < arguments.length; r++)
              e[r] = arguments[r];
            var n = Le() || {}, i = ["googlebot", "adsbot-google", "apis-google", "mediapartners-google"], a = n.userAgent, o = false;
            if (a)
              for (var u = 0; u < i.length; u++)
                o = o || a.toLowerCase().indexOf(i[u]) !== -1;
            if (o)
              return false;
            for (var u = 0; u < e.length; u++)
              if (e[u] < 0 || e[u] >= this.MAX_DURATION_ALLOWED)
                return false;
            return true;
          }, t;
        }();
      });
      __name(Pn, "Pn");
      xu = I(() => {
        ne();
        he();
        X();
        fu();
        du();
        vu();
        Ce();
        mu = "duration", eo = "event";
        bn = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            r.identifier = Ci, r.priority = 180, r.autoRoutePVDelay = 500;
            var n, i, a, o = 0, u, s;
            return W(e, r, function(c, l) {
              var f2 = $e(true);
              u = f2 && f2.href || "", c.getCookieMgr = function() {
                return lr(c.core);
              }, c.processTelemetry = function(p, m) {
                ut(c.core, function() {
                  return c.identifier + ":processTelemetry";
                }, function() {
                  var y = false, w = c._telemetryInitializers.length;
                  m = c._getTelCtx(m);
                  for (var L = 0; L < w; ++L) {
                    var k = c._telemetryInitializers[L];
                    if (k)
                      try {
                        if (k.apply(null, [p]) === false) {
                          y = true;
                          break;
                        }
                      } catch (Q) {
                        m.diagLog().throwInternal(S.CRITICAL, h.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + G(Q), { exception: O(Q) }, true);
                      }
                  }
                  y || c.processNext(p, m);
                }, function() {
                  return { item: p };
                }, !p.sync);
              }, c.trackEvent = function(p, m) {
                try {
                  var y = tt.create(p, He.dataType, He.envelopeType, c.diagLog(), m);
                  c.core.track(y);
                } catch (w) {
                  c.diagLog().throwInternal(S.WARNING, h.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + G(w), { exception: O(w) });
                }
              }, c.startTrackEvent = function(p) {
                try {
                  n.start(p);
                } catch (m) {
                  c.diagLog().throwInternal(S.CRITICAL, h.StartTrackEventFailed, "startTrackEvent failed, event will not be collected: " + G(m), { exception: O(m) });
                }
              }, c.stopTrackEvent = function(p, m, y) {
                try {
                  n.stop(p, void 0, m);
                } catch (w) {
                  c.diagLog().throwInternal(S.CRITICAL, h.StopTrackEventFailed, "stopTrackEvent failed, event will not be collected: " + G(w), { exception: O(w) });
                }
              }, c.trackTrace = function(p, m) {
                try {
                  var y = tt.create(p, Qe.dataType, Qe.envelopeType, c.diagLog(), m);
                  c.core.track(y);
                } catch (w) {
                  c.diagLog().throwInternal(S.WARNING, h.TrackTraceFailed, "trackTrace failed, trace will not be collected: " + G(w), { exception: O(w) });
                }
              }, c.trackMetric = function(p, m) {
                try {
                  var y = tt.create(p, Ve.dataType, Ve.envelopeType, c.diagLog(), m);
                  c.core.track(y);
                } catch (w) {
                  c.diagLog().throwInternal(S.CRITICAL, h.TrackMetricFailed, "trackMetric failed, metric will not be collected: " + G(w), { exception: O(w) });
                }
              }, c.trackPageView = function(p, m) {
                try {
                  var y = p || {};
                  c._pageViewManager.trackPageView(y, yt({}, y.properties, y.measurements, m)), c.config.autoTrackPageVisitTime && c._pageVisitTimeManager.trackPreviousPageVisit(y.name, y.uri);
                } catch (w) {
                  c.diagLog().throwInternal(S.CRITICAL, h.TrackPVFailed, "trackPageView failed, page view will not be collected: " + G(w), { exception: O(w) });
                }
              }, c.sendPageViewInternal = function(p, m, y) {
                var w = De();
                w && (p.refUri = p.refUri === void 0 ? w.referrer : p.refUri);
                var L = tt.create(p, Ne.dataType, Ne.envelopeType, c.diagLog(), m, y);
                c.core.track(L), o = 0;
              }, c.sendPageViewPerformanceInternal = function(p, m, y) {
                var w = tt.create(p, Ze.dataType, Ze.envelopeType, c.diagLog(), m, y);
                c.core.track(w);
              }, c.trackPageViewPerformance = function(p, m) {
                try {
                  c._pageViewPerformanceManager.populatePageViewPerformanceEvent(p), c.sendPageViewPerformanceInternal(p, m);
                } catch (y) {
                  c.diagLog().throwInternal(S.CRITICAL, h.TrackPVFailed, "trackPageViewPerformance failed, page view will not be collected: " + G(y), { exception: O(y) });
                }
              }, c.startTrackPage = function(p) {
                try {
                  if (typeof p != "string") {
                    var m = De();
                    p = m && m.title || "";
                  }
                  i.start(p);
                } catch (y) {
                  c.diagLog().throwInternal(S.CRITICAL, h.StartTrackFailed, "startTrackPage failed, page view may not be collected: " + G(y), { exception: O(y) });
                }
              }, c.stopTrackPage = function(p, m, y, w) {
                try {
                  if (typeof p != "string") {
                    var L = De();
                    p = L && L.title || "";
                  }
                  if (typeof m != "string") {
                    var k = $e();
                    m = k && k.href || "";
                  }
                  i.stop(p, m, y, w), c.config.autoTrackPageVisitTime && c._pageVisitTimeManager.trackPreviousPageVisit(p, m);
                } catch (Q) {
                  c.diagLog().throwInternal(S.CRITICAL, h.StopTrackFailed, "stopTrackPage failed, page view will not be collected: " + G(Q), { exception: O(Q) });
                }
              }, c.sendExceptionInternal = function(p, m, y) {
                var w = p.exception || p.error || new Error(ce), L = new me(c.diagLog(), w, p.properties || m, p.measurements, p.severityLevel, p.id).toInterface(), k = tt.create(L, me.dataType, me.envelopeType, c.diagLog(), m, y);
                c.core.track(k);
              }, c.trackException = function(p, m) {
                try {
                  c.sendExceptionInternal(p, m);
                } catch (y) {
                  c.diagLog().throwInternal(S.CRITICAL, h.TrackExceptionFailed, "trackException failed, exception will not be collected: " + G(y), { exception: O(y) });
                }
              }, c._onerror = function(p) {
                var m = p && p.error, y = p && p.evt;
                try {
                  if (!y) {
                    var w = It();
                    w && (y = w[eo]);
                  }
                  var L = p && p.url || (De() || {}).URL, k = p.errorSrc || "window.onerror@" + L + ":" + (p.lineNumber || 0) + ":" + (p.columnNumber || 0), Q = { errorSrc: k, url: L, lineNumber: p.lineNumber || 0, columnNumber: p.columnNumber || 0, message: p.message };
                  cn(p.message, p.url, p.lineNumber, p.columnNumber, p.error) ? b(me.CreateAutoException("Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.", L, p.lineNumber || 0, p.columnNumber || 0, m, y, null, k), Q) : (p.errorSrc || (p.errorSrc = k), c.trackException({ exception: p, severityLevel: Bt.Error }, Q));
                } catch (J) {
                  var ye = m ? m.name + ", " + m.message : "null";
                  c.diagLog().throwInternal(S.CRITICAL, h.ExceptionWhileLoggingError, "_onError threw exception while logging error, error will not be collected: " + G(J), { exception: O(J), errorString: ye });
                }
              }, c.addTelemetryInitializer = function(p) {
                c._telemetryInitializers.push(p);
              }, c.initialize = function(p, m, y, w) {
                if (!c.isInitialized()) {
                  if (x(m))
                    throw Error("Error initializing");
                  l.initialize(p, m, y, w), c.setInitialized(false);
                  var L = c._getTelCtx(), k = c.identifier;
                  c.config = L.getExtCfg(k);
                  var Q = e.getDefaultConfig(p);
                  Q !== void 0 && $(Q, function(A, H) {
                    c.config[A] = L.getConfig(k, A, H), c.config[A] === void 0 && (c.config[A] = H);
                  }), c.config.isStorageUseDisabled && pn();
                  var ye = { instrumentationKey: function() {
                    return p.instrumentationKey;
                  }, accountId: function() {
                    return c.config.accountId || p.accountId;
                  }, sessionRenewalMs: function() {
                    return c.config.sessionRenewalMs || p.sessionRenewalMs;
                  }, sessionExpirationMs: function() {
                    return c.config.sessionExpirationMs || p.sessionExpirationMs;
                  }, sampleRate: function() {
                    return c.config.samplingPercentage || p.samplingPercentage;
                  }, sdkExtension: function() {
                    return c.config.sdkExtension || p.sdkExtension;
                  }, isBrowserLinkTrackingEnabled: function() {
                    return c.config.isBrowserLinkTrackingEnabled || p.isBrowserLinkTrackingEnabled;
                  }, appId: function() {
                    return c.config.appId || p.appId;
                  } };
                  c._pageViewPerformanceManager = new gu(c.core), c._pageViewManager = new lu(r, c.config.overridePageViewDuration, c.core, c._pageViewPerformanceManager), c._pageVisitTimeManager = new pu(c.diagLog(), function(A, H, _) {
                    return g(A, H, _);
                  }), c._telemetryInitializers = c._telemetryInitializers || [], C(ye), n = new hu(c.diagLog(), "trackEvent"), n.action = function(A, H, _, j) {
                    j || (j = {}), j[mu] = _.toString(), c.trackEvent({ name: A, properties: j });
                  }, i = new hu(c.diagLog(), "trackPageView"), i.action = function(A, H, _, j, Z) {
                    x(j) && (j = {}), j[mu] = _.toString();
                    var ie = { name: A, uri: H, properties: j, measurements: Z };
                    c.sendPageViewInternal(ie, j);
                  };
                  var J = It(), de = Zi(), be = $e(true), pt = r;
                  if (c.config.disableExceptionTracking === false && !c.config.autoExceptionInstrumented && J) {
                    var it = "onerror", dt = J[it];
                    J.onerror = function(A, H, _, j, Z) {
                      var ie = J[eo], Ht = dt && dt(A, H, _, j, Z);
                      return Ht !== true && pt._onerror(me.CreateAutoException(A, H, _, j, Z, ie)), Ht;
                    }, c.config.autoExceptionInstrumented = true;
                  }
                  if (c.config.disableExceptionTracking === false && c.config.enableUnhandledPromiseRejectionTracking === true && !c.config.autoUnhandledPromiseInstrumented && J) {
                    var d = "onunhandledrejection", T = J[d];
                    J[d] = function(A) {
                      var H = J[eo], _ = T && T.call(J, A);
                      return _ !== true && pt._onerror(me.CreateAutoException(A.reason.toString(), be ? be.href : "", 0, 0, A, H)), _;
                    }, c.config.autoUnhandledPromiseInstrumented = true;
                  }
                  if (c.config.enableAutoRouteTracking === true && de && z(de.pushState) && z(de.replaceState) && J && typeof Event != "undefined") {
                    var D = r;
                    R(y, function(A) {
                      A.identifier === zt && (a = A);
                    }), de.pushState = function(A) {
                      return function() {
                        var _ = A.apply(this, arguments);
                        return Pn(J, Ut(D.config.namePrefix + "pushState")), Pn(J, Ut(D.config.namePrefix + "locationchange")), _;
                      };
                    }(de.pushState), de.replaceState = function(A) {
                      return function() {
                        var _ = A.apply(this, arguments);
                        return Pn(J, Ut(D.config.namePrefix + "replaceState")), Pn(J, Ut(D.config.namePrefix + "locationchange")), _;
                      };
                    }(de.replaceState), J.addEventListener && (J.addEventListener(D.config.namePrefix + "popstate", function() {
                      Pn(J, Ut(D.config.namePrefix + "locationchange"));
                    }), J.addEventListener(D.config.namePrefix + "locationchange", function() {
                      if (a && a.context && a.context.telemetryTrace) {
                        a.context.telemetryTrace.traceID = Oe();
                        var A = "_unknown_";
                        be && be.pathname && (A = be.pathname + (be.hash || "")), a.context.telemetryTrace.name = A;
                      }
                      s && (u = s), s = be && be.href || "", setTimeout(function(H) {
                        D.trackPageView({ refUri: H, properties: { duration: 0 } });
                      }.bind(r, u), D.autoRoutePVDelay);
                    }));
                  }
                  c.setInitialized(true);
                }
              };
              function g(p, m, y) {
                var w = { PageName: p, PageUrl: m };
                c.trackMetric({ name: "PageVisitTime", average: y, max: y, min: y, sampleCount: 1 }, w);
              }
              __name(g, "g");
              function C(p) {
                if (!p.isBrowserLinkTrackingEnabled()) {
                  var m = ["/browserLinkSignalR/", "/__browserLink/"], y = /* @__PURE__ */ __name(function(w) {
                    if (w.baseType === qe.dataType) {
                      var L = w.baseData;
                      if (L) {
                        for (var k = 0; k < m.length; k++)
                          if (L.target && L.target.indexOf(m[k]) >= 0)
                            return false;
                      }
                    }
                    return true;
                  }, "y");
                  E(y);
                }
              }
              __name(C, "C");
              function E(p) {
                c._telemetryInitializers.push(p);
              }
              __name(E, "E");
              function b(p, m) {
                var y = tt.create(p, me.dataType, me.envelopeType, c.diagLog(), m);
                c.core.track(y);
              }
              __name(b, "b");
            }), r;
          }
          __name(e, "e");
          return e.getDefaultConfig = function(r) {
            return r || (r = {}), r.sessionRenewalMs = 30 * 60 * 1e3, r.sessionExpirationMs = 24 * 60 * 60 * 1e3, r.disableExceptionTracking = ee(r.disableExceptionTracking), r.autoTrackPageVisitTime = ee(r.autoTrackPageVisitTime), r.overridePageViewDuration = ee(r.overridePageViewDuration), r.enableUnhandledPromiseRejectionTracking = ee(r.enableUnhandledPromiseRejectionTracking), (isNaN(r.samplingPercentage) || r.samplingPercentage <= 0 || r.samplingPercentage >= 100) && (r.samplingPercentage = 100), r.isStorageUseDisabled = ee(r.isStorageUseDisabled), r.isBrowserLinkTrackingEnabled = ee(r.isBrowserLinkTrackingEnabled), r.enableAutoRouteTracking = ee(r.enableAutoRouteTracking), r.namePrefix = r.namePrefix || "", r.enableDebug = ee(r.enableDebug), r.disableFlushOnBeforeUnload = ee(r.disableFlushOnBeforeUnload), r.disableFlushOnUnload = ee(r.disableFlushOnUnload, r.disableFlushOnBeforeUnload), r;
          }, e.Version = "2.6.4", e;
        }(et), hu = function() {
          function t(e, r) {
            var n = this, i = {};
            n.start = function(a) {
              typeof i[a] != "undefined" && e.throwInternal(S.WARNING, h.StartCalledMoreThanOnce, "start was called more than once for this event without calling stop.", { name: a, key: a }, true), i[a] = +/* @__PURE__ */ new Date();
            }, n.stop = function(a, o, u, s) {
              var c = i[a];
              if (isNaN(c))
                e.throwInternal(S.WARNING, h.StopCalledWithoutStart, "stop was called without a corresponding start.", { name: a, key: a }, true);
              else {
                var l = +/* @__PURE__ */ new Date(), f2 = ve(c, l);
                n.action(a, o, f2, u, s);
              }
              delete i[a], i[a] = void 0;
            };
          }
          __name(t, "t");
          return t;
        }();
      });
      to = I(() => {
        xu();
      });
      Iu = I(() => {
        he();
        X();
        Ce();
        yu = function() {
          function t(e) {
            var r = [];
            W(t, this, function(n) {
              n.enqueue = function(i) {
                r.push(i);
              }, n.count = function() {
                return r.length;
              }, n.clear = function() {
                r.length = 0;
              }, n.getItems = function() {
                return r.slice(0);
              }, n.batchPayloads = function(i) {
                if (i && i.length > 0) {
                  var a = e.emitLineDelimitedJson() ? i.join(`
`) : "[" + i.join(",") + "]";
                  return a;
                }
                return null;
              }, n.markAsSent = function(i) {
                n.clear();
              }, n.clearSent = function(i) {
              };
            });
          }
          __name(t, "t");
          return t;
        }(), Su = function() {
          function t(e, r) {
            var n = false, i;
            W(t, this, function(a) {
              var o = c(t.BUFFER_KEY), u = c(t.SENT_BUFFER_KEY);
              i = o.concat(u), i.length > t.MAX_BUFFER_SIZE && (i.length = t.MAX_BUFFER_SIZE), l(t.SENT_BUFFER_KEY, []), l(t.BUFFER_KEY, i), a.enqueue = function(f2) {
                if (i.length >= t.MAX_BUFFER_SIZE) {
                  n || (e.throwInternal(S.WARNING, h.SessionStorageBufferFull, "Maximum buffer size reached: " + i.length, true), n = true);
                  return;
                }
                i.push(f2), l(t.BUFFER_KEY, i);
              }, a.count = function() {
                return i.length;
              }, a.clear = function() {
                i = [], l(t.BUFFER_KEY, []), l(t.SENT_BUFFER_KEY, []), n = false;
              }, a.getItems = function() {
                return i.slice(0);
              }, a.batchPayloads = function(f2) {
                if (f2 && f2.length > 0) {
                  var g = r.emitLineDelimitedJson() ? f2.join(`
`) : "[" + f2.join(",") + "]";
                  return g;
                }
                return null;
              }, a.markAsSent = function(f2) {
                i = s(f2, i), l(t.BUFFER_KEY, i);
                var g = c(t.SENT_BUFFER_KEY);
                g instanceof Array && f2 instanceof Array && (g = g.concat(f2), g.length > t.MAX_BUFFER_SIZE && (e.throwInternal(S.CRITICAL, h.SessionStorageBufferFull, "Sent buffer reached its maximum size: " + g.length, true), g.length = t.MAX_BUFFER_SIZE), l(t.SENT_BUFFER_KEY, g));
              }, a.clearSent = function(f2) {
                var g = c(t.SENT_BUFFER_KEY);
                g = s(f2, g), l(t.SENT_BUFFER_KEY, g);
              };
              function s(f2, g) {
                var C = [];
                return R(g, function(E) {
                  !z(E) && Ft(f2, E) === -1 && C.push(E);
                }), C;
              }
              __name(s, "s");
              function c(f2) {
                var g = f2;
                try {
                  g = r.namePrefix && r.namePrefix() ? r.namePrefix() + "_" + g : g;
                  var C = Yt(e, g);
                  if (C) {
                    var E = we().parse(C);
                    if (U(E) && (E = we().parse(E)), E && Fe(E))
                      return E;
                  }
                } catch (b) {
                  e.throwInternal(S.CRITICAL, h.FailedToRestoreStorageBuffer, " storage key: " + g + ", " + G(b), { exception: O(b) });
                }
                return [];
              }
              __name(c, "c");
              function l(f2, g) {
                var C = f2;
                try {
                  C = r.namePrefix && r.namePrefix() ? r.namePrefix() + "_" + C : C;
                  var E = JSON.stringify(g);
                  $t(e, C, E);
                } catch (b) {
                  $t(e, C, JSON.stringify([])), e.throwInternal(S.WARNING, h.FailedToSetStorageBuffer, " storage key: " + C + ", " + G(b) + ". Buffer cleared", { exception: O(b) });
                }
              }
              __name(l, "l");
            });
          }
          __name(t, "t");
          return t.BUFFER_KEY = "AI_buffer", t.SENT_BUFFER_KEY = "AI_sentBuffer", t.MAX_BUFFER_SIZE = 2e3, t;
        }();
      });
      __name(xe, "xe");
      Du = I(() => {
        ne();
        he();
        X();
        ro = "baseType", se = "baseData", ke = "properties", Cu = "true";
        le = function() {
          function t() {
          }
          __name(t, "t");
          return t.extractPropsAndMeasurements = function(e, r, n) {
            x(e) || $(e, function(i, a) {
              ar(a) ? n[i] = a : U(a) ? r[i] = a : mt() && (r[i] = we().stringify(a));
            });
          }, t.createEnvelope = function(e, r, n, i) {
            var a = new Tn(e, i, r);
            xe(a, "sampleRate", n[fr]), (n[se] || {}).startTime && (a.time = Re(n[se].startTime)), a.iKey = n.iKey;
            var o = n.iKey.replace(/-/g, "");
            return a.name = a.name.replace("{0}", o), t.extractPartAExtensions(n, a), n.tags = n.tags || [], Jn(a);
          }, t.extractPartAExtensions = function(e, r) {
            var n = r.tags = r.tags || {}, i = e.ext = e.ext || {}, a = e.tags = e.tags || [], o = i.user;
            o && (xe(n, re.userAuthUserId, o.authId), xe(n, re.userId, o.id || o.localId));
            var u = i.app;
            u && xe(n, re.sessionId, u.sesId);
            var s = i.device;
            s && (xe(n, re.deviceId, s.id || s.localId), xe(n, re.deviceType, s.deviceClass), xe(n, re.deviceIp, s.ip), xe(n, re.deviceModel, s.model), xe(n, re.deviceType, s.deviceType));
            var c = e.ext.web;
            if (c) {
              xe(n, re.deviceLanguage, c.browserLang), xe(n, re.deviceBrowserVersion, c.browserVer), xe(n, re.deviceBrowser, c.browser);
              var l = r.data = r.data || {}, f2 = l[se] = l[se] || {}, g = f2[ke] = f2[ke] || {};
              xe(g, "domain", c.domain), xe(g, "isManual", c.isManual ? Cu : null), xe(g, "screenRes", c.screenRes), xe(g, "userConsent", c.userConsent ? Cu : null);
            }
            var C = i.os;
            C && xe(n, re.deviceOS, C.name);
            var E = i.trace;
            E && (xe(n, re.operationParentId, E.parentID), xe(n, re.operationName, E.name), xe(n, re.operationId, E.traceID));
            for (var b = {}, p = a.length - 1; p >= 0; p--) {
              var m = a[p];
              $(m, function(w, L) {
                b[w] = L;
              }), a.splice(p, 1);
            }
            $(a, function(w, L) {
              b[w] = L;
            });
            var y = yt({}, n, b);
            y[re.internalSdkVersion] || (y[re.internalSdkVersion] = "javascript:" + t.Version), r.tags = Jn(y);
          }, t.prototype.Init = function(e, r) {
            this._logger = e, x(r[se]) && this._logger.throwInternal(S.CRITICAL, h.TelemetryEnvelopeInvalid, "telemetryItem.baseData cannot be null.");
          }, t.Version = "2.6.4", t;
        }(), Tu = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = n[se].measurements || {}, a = n[se][ke] || {};
            le.extractPropsAndMeasurements(n.data, a, i);
            var o = n[se];
            if (x(o))
              return r.warnToConsole("Invalid input for dependency data"), null;
            var u = o[ke] && o[ke][Fr] ? o[ke][Fr] : "GET", s = new qe(r, o.id, o.target, o.name, o.duration, o.success, o.responseCode, u, o.type, o.correlationContext, a, i), c = new xt(qe.dataType, s);
            return le.createEnvelope(r, qe.envelopeType, n, c);
          }, e.DependencyEnvelopeCreator = new e(), e;
        }(le), no = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = {}, a = {};
            n[ro] !== He.dataType && (i.baseTypeSource = n[ro]), n[ro] === He.dataType ? (i = n[se][ke] || {}, a = n[se].measurements || {}) : n[se] && le.extractPropsAndMeasurements(n[se], i, a), le.extractPropsAndMeasurements(n.data, i, a);
            var o = n[se].name, u = new He(r, o, i, a), s = new xt(He.dataType, u);
            return le.createEnvelope(r, He.envelopeType, n, s);
          }, e.EventEnvelopeCreator = new e(), e;
        }(le), Eu = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = n[se].measurements || {}, a = n[se][ke] || {};
            le.extractPropsAndMeasurements(n.data, a, i);
            var o = n[se], u = me.CreateFromInterface(r, o, a, i), s = new xt(me.dataType, u);
            return le.createEnvelope(r, me.envelopeType, n, s);
          }, e.ExceptionEnvelopeCreator = new e(), e;
        }(le), wu = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = n[se], a = i[ke] || {}, o = i.measurements || {};
            le.extractPropsAndMeasurements(n.data, a, o);
            var u = new Ve(r, i.name, i.average, i.sampleCount, i.min, i.max, a, o), s = new xt(Ve.dataType, u);
            return le.createEnvelope(r, Ve.envelopeType, n, s);
          }, e.MetricEnvelopeCreator = new e(), e;
        }(le), Pu = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = "duration", a, o = n[se];
            !x(o) && !x(o[ke]) && !x(o[ke][i]) ? (a = o[ke][i], delete o[ke][i]) : !x(n.data) && !x(n.data[i]) && (a = n.data[i], delete n.data[i]);
            var u = n[se], s;
            ((n.ext || {}).trace || {}).traceID && (s = n.ext.trace.traceID);
            var c = u.id || s, l = u.name, f2 = u.uri, g = u[ke] || {}, C = u.measurements || {};
            if (x(u.refUri) || (g.refUri = u.refUri), x(u.pageType) || (g.pageType = u.pageType), x(u.isLoggedIn) || (g.isLoggedIn = u.isLoggedIn.toString()), !x(u[ke])) {
              var E = u[ke];
              $(E, function(m, y) {
                g[m] = y;
              });
            }
            le.extractPropsAndMeasurements(n.data, g, C);
            var b = new Ne(r, l, f2, a, g, C, c), p = new xt(Ne.dataType, b);
            return le.createEnvelope(r, Ne.envelopeType, n, p);
          }, e.PageViewEnvelopeCreator = new e(), e;
        }(le), bu = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = n[se], a = i.name, o = i.uri || i.url, u = i[ke] || {}, s = i.measurements || {};
            le.extractPropsAndMeasurements(n.data, u, s);
            var c = new Ze(r, a, o, void 0, u, s, i), l = new xt(Ze.dataType, c);
            return le.createEnvelope(r, Ze.envelopeType, n, l);
          }, e.PageViewPerformanceEnvelopeCreator = new e(), e;
        }(le), Au = function(t) {
          B(e, t);
          function e() {
            return t !== null && t.apply(this, arguments) || this;
          }
          __name(e, "e");
          return e.prototype.Create = function(r, n) {
            t.prototype.Init.call(this, r, n);
            var i = n[se].message, a = n[se].severityLevel, o = n[se][ke] || {}, u = n[se].measurements || {};
            le.extractPropsAndMeasurements(n.data, o, u);
            var s = new Qe(r, i, a, o, u), c = new xt(Qe.dataType, s);
            return le.createEnvelope(r, Qe.envelopeType, n, c);
          }, e.TraceEnvelopeCreator = new e(), e;
        }(le);
      });
      ku = I(() => {
        X();
        Ce();
        Nu = function() {
          function t(e) {
            W(t, this, function(r) {
              r.serialize = function(o) {
                var u = n(o, "root");
                try {
                  return we().stringify(u);
                } catch (s) {
                  e.throwInternal(S.CRITICAL, h.CannotSerializeObject, s && z(s.toString) ? s.toString() : "Error serializing object", null, true);
                }
              };
              function n(o, u) {
                var s = "__aiCircularRefCheck", c = {};
                if (!o)
                  return e.throwInternal(S.CRITICAL, h.CannotSerializeObject, "cannot serialize object because it is null or undefined", { name: u }, true), c;
                if (o[s])
                  return e.throwInternal(S.WARNING, h.CircularReferenceDetected, "Circular reference detected while serializing object", { name: u }, true), c;
                if (!o.aiDataContract) {
                  if (u === "measurements")
                    c = a(o, "number", u);
                  else if (u === "properties")
                    c = a(o, "string", u);
                  else if (u === "tags")
                    c = a(o, "string", u);
                  else if (Fe(o))
                    c = i(o, u);
                  else {
                    e.throwInternal(S.WARNING, h.CannotSerializeObjectNonSerializable, "Attempting to serialize an object which does not implement ISerializable", { name: u }, true);
                    try {
                      we().stringify(o), c = o;
                    } catch (l) {
                      e.throwInternal(S.CRITICAL, h.CannotSerializeObject, l && z(l.toString) ? l.toString() : "Error serializing object", null, true);
                    }
                  }
                  return c;
                }
                return o[s] = true, $(o.aiDataContract, function(l, f2) {
                  var g = z(f2) ? f2() & 1 : f2 & 1, C = z(f2) ? f2() & 4 : f2 & 4, E = f2 & 2, b = o[l] !== void 0, p = st(o[l]) && o[l] !== null;
                  if (g && !b && !E)
                    e.throwInternal(S.CRITICAL, h.MissingRequiredFieldSpecification, "Missing required field specification. The field is required but not present on source", { field: l, name: u });
                  else if (!C) {
                    var m = void 0;
                    p ? E ? m = i(o[l], l) : m = n(o[l], l) : m = o[l], m !== void 0 && (c[l] = m);
                  }
                }), delete o[s], c;
              }
              __name(n, "n");
              function i(o, u) {
                var s;
                if (o)
                  if (!Fe(o))
                    e.throwInternal(S.CRITICAL, h.ItemNotInArray, `This field was specified as an array in the contract but the item is not an array.\r
`, { name: u }, true);
                  else {
                    s = [];
                    for (var c = 0; c < o.length; c++) {
                      var l = o[c], f2 = n(l, u + "[" + c + "]");
                      s.push(f2);
                    }
                  }
                return s;
              }
              __name(i, "i");
              function a(o, u, s) {
                var c;
                return o && (c = {}, $(o, function(l, f2) {
                  if (u === "string")
                    f2 === void 0 ? c[l] = "undefined" : f2 === null ? c[l] = "null" : f2.toString ? c[l] = f2.toString() : c[l] = "invalid field: toString() is not defined.";
                  else if (u === "number")
                    if (f2 === void 0)
                      c[l] = "undefined";
                    else if (f2 === null)
                      c[l] = "null";
                    else {
                      var g = parseFloat(f2);
                      isNaN(g) ? c[l] = "NaN" : c[l] = g;
                    }
                  else
                    c[l] = "invalid field: " + s + " is of unknown type.", e.throwInternal(S.CRITICAL, c[l], null, true);
                })), c;
              }
              __name(a, "a");
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      Fu = I(() => {
        X();
        Ce();
        xl = function() {
          function t() {
            var e = It(), r = De(), n = false, i = true;
            W(t, this, function(a) {
              try {
                if (e && Jt.Attach(e, "online", s) && (Jt.Attach(e, "offline", c), n = true), r) {
                  var o = r.body || r;
                  fe(o.ononline) || (o.ononline = s, o.onoffline = c, n = true);
                }
                if (n) {
                  var u = Le();
                  u && !x(u.onLine) && (i = u.onLine);
                }
              } catch (l) {
                n = false;
              }
              a.isListening = n, a.isOnline = function() {
                var l = true, f2 = Le();
                return n ? l = i : f2 && !x(f2.onLine) && (l = f2.onLine), l;
              }, a.isOffline = function() {
                return !a.isOnline();
              };
              function s() {
                i = true;
              }
              __name(s, "s");
              function c() {
                i = false;
              }
              __name(c, "c");
            });
          }
          __name(t, "t");
          return t.Offline = new t(), t;
        }(), io = xl.Offline;
      });
      Mu = I(() => {
        Ru = function() {
          function t() {
          }
          __name(t, "t");
          return t.prototype.getHashCodeScore = function(e) {
            var r = this.getHashCode(e) / t.INT_MAX_VALUE;
            return r * 100;
          }, t.prototype.getHashCode = function(e) {
            if (e === "")
              return 0;
            for (; e.length < t.MIN_INPUT_LENGTH; )
              e = e.concat(e);
            for (var r = 5381, n = 0; n < e.length; ++n)
              r = (r << 5) + r + e.charCodeAt(n), r = r & r;
            return Math.abs(r);
          }, t.INT_MAX_VALUE = 2147483647, t.MIN_INPUT_LENGTH = 8, t;
        }();
      });
      _u = I(() => {
        Mu();
        he();
        Lu = function() {
          function t() {
            this.hashCodeGeneragor = new Ru(), this.keys = new xr();
          }
          __name(t, "t");
          return t.prototype.getSamplingScore = function(e) {
            var r = 0;
            return e.tags && e.tags[this.keys.userId] ? r = this.hashCodeGeneragor.getHashCodeScore(e.tags[this.keys.userId]) : e.ext && e.ext.user && e.ext.user.id ? r = this.hashCodeGeneragor.getHashCodeScore(e.ext.user.id) : e.tags && e.tags[this.keys.operationId] ? r = this.hashCodeGeneragor.getHashCodeScore(e.tags[this.keys.operationId]) : e.ext && e.ext.telemetryTrace && e.ext.telemetryTrace.traceID ? r = this.hashCodeGeneragor.getHashCodeScore(e.ext.telemetryTrace.traceID) : r = Math.random() * 100, r;
          }, t;
        }();
      });
      Ou = I(() => {
        _u();
        he();
        X();
        Uu = function() {
          function t(e, r) {
            this.INT_MAX_VALUE = 2147483647, this._logger = r || Mt(null), (e > 100 || e < 0) && (this._logger.throwInternal(S.WARNING, h.SampleRateOutOfRange, "Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.", { samplingRate: e }, true), e = 100), this.sampleRate = e, this.samplingScoreGenerator = new Lu();
          }
          __name(t, "t");
          return t.prototype.isSampledIn = function(e) {
            var r = this.sampleRate, n = false;
            return r == null || r >= 100 || e.baseType === Ve.dataType ? true : (n = this.samplingScoreGenerator.getSamplingScore(e) < r, n);
          }, t;
        }();
      });
      __name(Ti, "Ti");
      Bu = I(() => {
        ne();
        Iu();
        Du();
        ku();
        he();
        X();
        Fu();
        Ou();
        Ce();
        An = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            r.priority = 1001, r.identifier = Or, r._XMLHttpRequestSupported = false;
            var n, i, a, o, u, s, c = {};
            return W(e, r, function(l, f2) {
              function g() {
                Ae("Method not implemented.");
              }
              __name(g, "g");
              l.pause = g, l.resume = g, l.flush = function() {
                try {
                  l.triggerSend(true, null, 1);
                } catch (d) {
                  l.diagLog().throwInternal(S.CRITICAL, h.FlushFailed, "flush failed, telemetry will not be collected: " + G(d), { exception: O(d) });
                }
              }, l.onunloadFlush = function() {
                if ((l._senderConfig.onunloadDisableBeacon() === false || l._senderConfig.isBeaconApiDisabled() === false) && kr())
                  try {
                    l.triggerSend(true, p, 2);
                  } catch (d) {
                    l.diagLog().throwInternal(S.CRITICAL, h.FailedToSendQueuedTelemetry, "failed to flush with beacon sender on page unload, telemetry will not be collected: " + G(d), { exception: O(d) });
                  }
                else
                  l.flush();
              }, l.teardown = g, l.addHeader = function(d, T) {
                c[d] = T;
              }, l.initialize = function(d, T, D, A) {
                f2.initialize(d, T, D, A);
                var H = l._getTelCtx(), _ = l.identifier;
                u = new Nu(T.logger), n = 0, i = null, a = 0, l._sender = null, s = 0;
                var j = e._getDefaultAppInsightsChannelConfig();
                if (l._senderConfig = e._getEmptyAppInsightsChannelConfig(), $(j, function(v, P) {
                  l._senderConfig[v] = function() {
                    return H.getConfig(_, v, P());
                  };
                }), l._buffer = l._senderConfig.enableSessionStorageBuffer() && wt() ? new Su(l.diagLog(), l._senderConfig) : new yu(l._senderConfig), l._sample = new Uu(l._senderConfig.samplingPercentage(), l.diagLog()), dt(d) || l.diagLog().throwInternal(S.CRITICAL, h.InvalidInstrumentationKey, "Invalid Instrumentation key " + d.instrumentationKey), !Mr(l._senderConfig.endpointUrl()) && l._senderConfig.customHeaders() && l._senderConfig.customHeaders().length > 0 && R(l._senderConfig.customHeaders(), function(v) {
                  r.addHeader(v.header, v.value);
                }), !l._senderConfig.isBeaconApiDisabled() && kr())
                  l._sender = p;
                else {
                  var Z = Ee("XMLHttpRequest");
                  if (Z) {
                    var ie = new Z();
                    "withCredentials" in ie ? (l._sender = m, l._XMLHttpRequestSupported = true) : typeof XDomainRequest !== Ue && (l._sender = de);
                  } else {
                    var Ht = Ee("fetch");
                    Ht && (l._sender = y);
                  }
                }
              }, l.processTelemetry = function(d, T) {
                T = l._getTelCtx(T);
                try {
                  if (l._senderConfig.disableTelemetry())
                    return;
                  if (!d) {
                    T.diagLog().throwInternal(S.CRITICAL, h.CannotSendEmptyTelemetry, "Cannot send empty telemetry");
                    return;
                  }
                  if (d.baseData && !d.baseType) {
                    T.diagLog().throwInternal(S.CRITICAL, h.InvalidEvent, "Cannot send telemetry without baseData and baseType");
                    return;
                  }
                  if (d.baseType || (d.baseType = "EventData"), !l._sender) {
                    T.diagLog().throwInternal(S.CRITICAL, h.SenderNotInitialized, "Sender was not initialized");
                    return;
                  }
                  if (C(d))
                    d[fr] = l._sample.sampleRate;
                  else {
                    T.diagLog().throwInternal(S.WARNING, h.TelemetrySampledAndNotSent, "Telemetry item was sampled out and not sent", { SampleRate: l._sample.sampleRate });
                    return;
                  }
                  var D = e.constructEnvelope(d, l._senderConfig.instrumentationKey(), T.diagLog());
                  if (!D) {
                    T.diagLog().throwInternal(S.CRITICAL, h.CreateEnvelopeError, "Unable to create an AppInsights envelope");
                    return;
                  }
                  var A = false;
                  if (d.tags && d.tags[Ot] && (R(d.tags[Ot], function(Z) {
                    try {
                      Z && Z(D) === false && (A = true, T.diagLog().warnToConsole("Telemetry processor check returns false"));
                    } catch (ie) {
                      T.diagLog().throwInternal(S.CRITICAL, h.TelemetryInitializerFailed, "One of telemetry initializers failed, telemetry item will not be sent: " + G(ie), { exception: O(ie) }, true);
                    }
                  }), delete d.tags[Ot]), A)
                    return;
                  var H = u.serialize(D), _ = l._buffer.getItems(), j = l._buffer.batchPayloads(_);
                  j && j.length + H.length > l._senderConfig.maxBatchSizeInBytes() && l.triggerSend(true, null, 10), l._buffer.enqueue(H), Q();
                } catch (Z) {
                  T.diagLog().throwInternal(S.WARNING, h.FailedAddingTelemetryToBuffer, "Failed adding telemetry to the sender's buffer, some telemetry will be lost: " + G(Z), { exception: O(Z) });
                }
                l.processNext(d, T);
              }, l._xhrReadyStateChange = function(d, T, D) {
                d.readyState === 4 && E(d.status, T, d.responseURL, D, J(d), Ti(d) || d.response);
              }, l.triggerSend = function(d, T, D) {
                d === void 0 && (d = true);
                try {
                  if (l._senderConfig.disableTelemetry())
                    l._buffer.clear();
                  else {
                    if (l._buffer.count() > 0) {
                      var A = l._buffer.getItems();
                      it(D || 0, d), T ? T.call(r, A, d) : l._sender(A, d);
                    }
                    a = +/* @__PURE__ */ new Date();
                  }
                  clearTimeout(o), o = null, i = null;
                } catch (_) {
                  var H = sr();
                  (!H || H > 9) && l.diagLog().throwInternal(S.CRITICAL, h.TransmissionFailed, "Telemetry transmission failed, some telemetry will be lost: " + G(_), { exception: O(_) });
                }
              }, l._onError = function(d, T, D) {
                l.diagLog().throwInternal(S.WARNING, h.OnError, "Failed to send telemetry.", { message: T }), l._buffer.clearSent(d);
              }, l._onPartialSuccess = function(d, T) {
                for (var D = [], A = [], H = T.errors.reverse(), _ = 0, j = H; _ < j.length; _++) {
                  var Z = j[_], ie = d.splice(Z.index, 1)[0];
                  ye(Z.statusCode) ? A.push(ie) : D.push(ie);
                }
                d.length > 0 && l._onSuccess(d, T.itemsAccepted), D.length > 0 && l._onError(D, J(null, ["partial success", T.itemsAccepted, "of", T.itemsReceived].join(" "))), A.length > 0 && (L(A), l.diagLog().throwInternal(S.WARNING, h.TransmissionFailed, "Partial success. Delivered: " + d.length + ", Failed: " + D.length + ". Will retry to send " + A.length + " our of " + T.itemsReceived + " items"));
              }, l._onSuccess = function(d, T) {
                l._buffer.clearSent(d);
              }, l._xdrOnLoad = function(d, T) {
                var D = Ti(d);
                if (d && (D + "" == "200" || D === ""))
                  n = 0, l._onSuccess(T, 0);
                else {
                  var A = w(D);
                  A && A.itemsReceived && A.itemsReceived > A.itemsAccepted && !l._senderConfig.isRetryDisabled() ? l._onPartialSuccess(T, A) : l._onError(T, be(d));
                }
              };
              function C(d) {
                return l._sample.isSampledIn(d);
              }
              __name(C, "C");
              function E(d, T, D, A, H, _) {
                var j = null;
                if (l._appId || (j = w(_), j && j.appId && (l._appId = j.appId)), (d < 200 || d >= 300) && d !== 0) {
                  if ((d === 301 || d === 307 || d === 308) && !b(D)) {
                    l._onError(T, H);
                    return;
                  }
                  !l._senderConfig.isRetryDisabled() && ye(d) ? (L(T), l.diagLog().throwInternal(S.WARNING, h.TransmissionFailed, ". Response code " + d + ". Will retry to send " + T.length + " items.")) : l._onError(T, H);
                } else if (io.isOffline()) {
                  if (!l._senderConfig.isRetryDisabled()) {
                    var Z = 10;
                    L(T, Z), l.diagLog().throwInternal(S.WARNING, h.TransmissionFailed, ". Offline - Response Code: " + d + ". Offline status: " + io.isOffline() + ". Will retry to send " + T.length + " items.");
                  }
                } else
                  b(D), d === 206 ? (j || (j = w(_)), j && !l._senderConfig.isRetryDisabled() ? l._onPartialSuccess(T, j) : l._onError(T, H)) : (n = 0, l._onSuccess(T, A));
              }
              __name(E, "E");
              function b(d) {
                return s >= 10 ? false : !x(d) && d !== "" && d !== l._senderConfig.endpointUrl() ? (l._senderConfig.endpointUrl = function() {
                  return d;
                }, ++s, true) : false;
              }
              __name(b, "b");
              function p(d, T) {
                var D = l._senderConfig.endpointUrl(), A = l._buffer.batchPayloads(d), H = new Blob([A], { type: "text/plain;charset=UTF-8" }), _ = Le().sendBeacon(D, H);
                _ ? (l._buffer.markAsSent(d), l._onSuccess(d, d.length)) : (m(d, true), l.diagLog().throwInternal(S.WARNING, h.TransmissionFailed, ". Failed to send telemetry with Beacon API, retried with xhrSender."));
              }
              __name(p, "p");
              function m(d, T) {
                var D = new XMLHttpRequest(), A = l._senderConfig.endpointUrl();
                try {
                  D[Et] = true;
                } catch (_) {
                }
                D.open("POST", A, T), D.setRequestHeader("Content-type", "application/json"), Mr(A) && D.setRequestHeader(te.sdkContextHeader, te.sdkContextHeaderAppIdRequest), R(Ye(c), function(_) {
                  D.setRequestHeader(_, c[_]);
                }), D.onreadystatechange = function() {
                  return l._xhrReadyStateChange(D, d, d.length);
                }, D.onerror = function(_) {
                  return l._onError(d, J(D), _);
                };
                var H = l._buffer.batchPayloads(d);
                D.send(H), l._buffer.markAsSent(d);
              }
              __name(m, "m");
              function y(d, T) {
                var D = l._senderConfig.endpointUrl(), A = l._buffer.batchPayloads(d), H = new Blob([A], { type: "text/plain;charset=UTF-8" }), _ = new Headers();
                Mr(D) && _.append(te.sdkContextHeader, te.sdkContextHeaderAppIdRequest), R(Ye(c), function(ie) {
                  _.append(ie, c[ie]);
                });
                var j = { method: "POST", headers: _, body: H }, Z = new Request(D, j);
                fetch(Z).then(function(ie) {
                  if (ie.ok)
                    ie.text().then(function(Ht) {
                      E(ie.status, d, ie.url, d.length, ie.statusText, Ht);
                    }), l._buffer.markAsSent(d);
                  else
                    throw Error(ie.statusText);
                }).catch(function(ie) {
                  l._onError(d, ie.message);
                });
              }
              __name(y, "y");
              function w(d) {
                try {
                  if (d && d !== "") {
                    var T = we().parse(d);
                    if (T && T.itemsReceived && T.itemsReceived >= T.itemsAccepted && T.itemsReceived - T.itemsAccepted === T.errors.length)
                      return T;
                  }
                } catch (D) {
                  l.diagLog().throwInternal(S.CRITICAL, h.InvalidBackendResponse, "Cannot parse the response. " + G(D), { response: d });
                }
                return null;
              }
              __name(w, "w");
              function L(d, T) {
                if (T === void 0 && (T = 1), !(!d || d.length === 0)) {
                  l._buffer.clearSent(d), n++;
                  for (var D = 0, A = d; D < A.length; D++) {
                    var H = A[D];
                    l._buffer.enqueue(H);
                  }
                  k(T), Q();
                }
              }
              __name(L, "L");
              function k(d) {
                var T = 10, D;
                if (n <= 1)
                  D = T;
                else {
                  var A = (Math.pow(2, n) - 1) / 2, H = Math.floor(Math.random() * A * T) + 1;
                  H = d * H, D = Math.max(Math.min(H, 3600), T);
                }
                var _ = pe() + D * 1e3;
                i = _;
              }
              __name(k, "k");
              function Q() {
                if (!o) {
                  var d = i ? Math.max(0, i - pe()) : 0, T = Math.max(l._senderConfig.maxBatchInterval(), d);
                  o = setTimeout(function() {
                    l.triggerSend(true, null, 1);
                  }, T);
                }
              }
              __name(Q, "Q");
              function ye(d) {
                return d === 408 || d === 429 || d === 500 || d === 503;
              }
              __name(ye, "ye");
              function J(d, T) {
                return d ? "XMLHttpRequest,Status:" + d.status + ",Response:" + Ti(d) || d.response || "" : T;
              }
              __name(J, "J");
              function de(d, T) {
                var D = It(), A = new XDomainRequest();
                A.onload = function() {
                  return l._xdrOnLoad(A, d);
                }, A.onerror = function(Z) {
                  return l._onError(d, be(A), Z);
                };
                var H = D && D.location && D.location.protocol || "";
                if (l._senderConfig.endpointUrl().lastIndexOf(H, 0) !== 0) {
                  l.diagLog().throwInternal(S.WARNING, h.TransmissionFailed, ". Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol."), l._buffer.clear();
                  return;
                }
                var _ = l._senderConfig.endpointUrl().replace(/^(https?:)/, "");
                A.open("POST", _);
                var j = l._buffer.batchPayloads(d);
                A.send(j), l._buffer.markAsSent(d);
              }
              __name(de, "de");
              function be(d, T) {
                return d ? "XDomainRequest,Response:" + Ti(d) || "" : T;
              }
              __name(be, "be");
              function pt() {
                var d = "getNotifyMgr";
                return l.core[d] ? l.core[d]() : l.core._notificationManager;
              }
              __name(pt, "pt");
              function it(d, T) {
                var D = pt();
                if (D && D.eventsSendRequest)
                  try {
                    D.eventsSendRequest(d, T);
                  } catch (A) {
                    l.diagLog().throwInternal(S.CRITICAL, h.NotificationException, "send request notification failed: " + G(A), { exception: O(A) });
                  }
              }
              __name(it, "it");
              function dt(d) {
                var T = x(d.disableInstrumentationKeyValidation) ? false : d.disableInstrumentationKeyValidation;
                if (T)
                  return true;
                var D = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", A = new RegExp(D);
                return A.test(d.instrumentationKey);
              }
              __name(dt, "dt");
            }), r;
          }
          __name(e, "e");
          return e.constructEnvelope = function(r, n, i) {
            var a;
            switch (n !== r.iKey && !x(n) ? a = yt({}, r, { iKey: n }) : a = r, a.baseType) {
              case He.dataType:
                return no.EventEnvelopeCreator.Create(i, a);
              case Qe.dataType:
                return Au.TraceEnvelopeCreator.Create(i, a);
              case Ne.dataType:
                return Pu.PageViewEnvelopeCreator.Create(i, a);
              case Ze.dataType:
                return bu.PageViewPerformanceEnvelopeCreator.Create(i, a);
              case me.dataType:
                return Eu.ExceptionEnvelopeCreator.Create(i, a);
              case Ve.dataType:
                return wu.MetricEnvelopeCreator.Create(i, a);
              case qe.dataType:
                return Tu.DependencyEnvelopeCreator.Create(i, a);
              default:
                return no.EventEnvelopeCreator.Create(i, a);
            }
          }, e._getDefaultAppInsightsChannelConfig = function() {
            return { endpointUrl: function() {
              return "https://dc.services.visualstudio.com/v2/track";
            }, emitLineDelimitedJson: function() {
              return false;
            }, maxBatchInterval: function() {
              return 15e3;
            }, maxBatchSizeInBytes: function() {
              return 102400;
            }, disableTelemetry: function() {
              return false;
            }, enableSessionStorageBuffer: function() {
              return true;
            }, isRetryDisabled: function() {
              return false;
            }, isBeaconApiDisabled: function() {
              return true;
            }, onunloadDisableBeacon: function() {
              return false;
            }, instrumentationKey: function() {
            }, namePrefix: function() {
            }, samplingPercentage: function() {
              return 100;
            }, customHeaders: function() {
            } };
          }, e._getEmptyAppInsightsChannelConfig = function() {
            return { endpointUrl: void 0, emitLineDelimitedJson: void 0, maxBatchInterval: void 0, maxBatchSizeInBytes: void 0, disableTelemetry: void 0, enableSessionStorageBuffer: void 0, isRetryDisabled: void 0, isBeaconApiDisabled: void 0, onunloadDisableBeacon: void 0, instrumentationKey: void 0, namePrefix: void 0, samplingPercentage: void 0, customHeaders: void 0 };
          }, e;
        }(et);
      });
      ao = I(() => {
        Bu();
      });
      Hu = I(() => {
        Ce();
        he();
        X();
        yl = "ai_session", oo = function() {
          function t() {
          }
          __name(t, "t");
          return t;
        }(), zu = function() {
          function t(e, r) {
            var n = this, i, a, o = Mt(r), u = lr(r);
            W(t, n, function(s) {
              e || (e = {}), z(e.sessionExpirationMs) || (e.sessionExpirationMs = function() {
                return t.acquisitionSpan;
              }), z(e.sessionRenewalMs) || (e.sessionRenewalMs = function() {
                return t.renewalSpan;
              }), s.config = e;
              var c = s.config.sessionCookiePostfix && s.config.sessionCookiePostfix() ? s.config.sessionCookiePostfix() : s.config.namePrefix && s.config.namePrefix() ? s.config.namePrefix() : "";
              i = /* @__PURE__ */ __name(function() {
                return yl + c;
              }, "i"), s.automaticSession = new oo(), s.update = function() {
                var b = pe(), p = false, m = s.automaticSession;
                m.id || (p = !l(m, b));
                var y = s.config.sessionExpirationMs();
                if (!p && y > 0) {
                  var w = s.config.sessionRenewalMs(), L = b - m.acquisitionDate, k = b - m.renewalDate;
                  p = L < 0 || k < 0, p = p || L > y, p = p || k > w;
                }
                p ? g(b) : (!a || b - a > t.cookieUpdateInterval) && C(m, b);
              }, s.backup = function() {
                var b = s.automaticSession;
                E(b.id, b.acquisitionDate, b.renewalDate);
              };
              function l(b, p) {
                var m = false, y = u.get(i());
                if (y && z(y.split))
                  m = f2(b, y);
                else {
                  var w = dn(o, i());
                  w && (m = f2(b, w));
                }
                return m || !!b.id;
              }
              __name(l, "l");
              function f2(b, p) {
                var m = false, y = ", session will be reset", w = p.split("|");
                if (w.length >= 2)
                  try {
                    var L = +w[1] || 0, k = +w[2] || 0;
                    isNaN(L) || L <= 0 ? o.throwInternal(S.WARNING, h.SessionRenewalDateIsZero, "AI session acquisition date is 0" + y) : isNaN(k) || k <= 0 ? o.throwInternal(S.WARNING, h.SessionRenewalDateIsZero, "AI session renewal date is 0" + y) : w[0] && (b.id = w[0], b.acquisitionDate = L, b.renewalDate = k, m = true);
                  } catch (Q) {
                    o.throwInternal(S.CRITICAL, h.ErrorParsingAISessionCookie, "Error parsing ai_session value [" + (p || "") + "]" + y + " - " + G(Q), { exception: O(Q) });
                  }
                return m;
              }
              __name(f2, "f");
              function g(b) {
                var p = s.config || {}, m = (p.getNewId ? p.getNewId() : null) || Xt;
                s.automaticSession.id = m(p.idLength ? p.idLength() : 22), s.automaticSession.acquisitionDate = b, C(s.automaticSession, b), Rr() || o.throwInternal(S.WARNING, h.BrowserDoesNotSupportLocalStorage, "Browser does not support local storage. Session durations will be inaccurate.");
              }
              __name(g, "g");
              function C(b, p) {
                var m = b.acquisitionDate;
                b.renewalDate = p;
                var y = s.config, w = y.sessionRenewalMs(), L = m + y.sessionExpirationMs() - p, k = [b.id, m, p], Q = 0;
                L < w ? Q = L / 1e3 : Q = w / 1e3;
                var ye = y.cookieDomain ? y.cookieDomain() : null;
                u.set(i(), k.join("|"), y.sessionExpirationMs() > 0 ? Q : null, ye), a = p;
              }
              __name(C, "C");
              function E(b, p, m) {
                gn(o, i(), [b, p, m].join("|"));
              }
              __name(E, "E");
            });
          }
          __name(t, "t");
          return t.acquisitionSpan = 864e5, t.renewalSpan = 18e5, t.cookieUpdateInterval = 6e4, t;
        }();
      });
      qu = I(() => {
        Vu = function() {
          function t() {
          }
          __name(t, "t");
          return t;
        }();
      });
      Gu = I(() => {
        ju = function() {
          function t() {
            this.id = "browser", this.deviceClass = "Browser";
          }
          __name(t, "t");
          return t;
        }();
      });
      Wu = I(() => {
        Sl = "2.6.4", Ku = function() {
          function t(e) {
            this.sdkVersion = (e.sdkExtension && e.sdkExtension() ? e.sdkExtension() + "_" : "") + "javascript:" + Sl;
          }
          __name(t, "t");
          return t;
        }();
      });
      __name(Xu, "Xu");
      Qu = I(() => {
        Ce();
        he();
        X();
        Ju = function() {
          function t(e, r) {
            this.isNewUser = false;
            var n = Mt(r), i = lr(r), a;
            W(t, this, function(o) {
              o.config = e;
              var u = o.config.userCookiePostfix && o.config.userCookiePostfix() ? o.config.userCookiePostfix() : "";
              a = /* @__PURE__ */ __name(function() {
                return t.userCookieName + u;
              }, "a");
              var s = i.get(a());
              if (s) {
                o.isNewUser = false;
                var c = s.split(t.cookieSeparator);
                c.length > 0 && (o.id = c[0]);
              }
              if (!o.id) {
                var l = e || {}, f2 = (l.getNewId ? l.getNewId() : null) || Xt;
                o.id = f2(l.idLength ? e.idLength() : 22);
                var g = 31536e3, C = Re(/* @__PURE__ */ new Date());
                o.accountAcquisitionDate = C, o.isNewUser = true;
                var E = [o.id, C];
                i.set(a(), E.join(t.cookieSeparator), g);
                var b = e.namePrefix && e.namePrefix() ? e.namePrefix() + "ai_session" : "ai_session";
                vn(n, b);
              }
              o.accountId = e.accountId ? e.accountId() : void 0;
              var p = i.get(t.authUserCookieName);
              if (p) {
                p = decodeURI(p);
                var m = p.split(t.cookieSeparator);
                m[0] && (o.authenticatedId = m[0]), m.length > 1 && m[1] && (o.accountId = m[1]);
              }
              o.setAuthenticatedUserContext = function(y, w, L) {
                L === void 0 && (L = false);
                var k = !Xu(y) || w && !Xu(w);
                if (k) {
                  n.throwInternal(S.WARNING, h.SetAuthContextFailedAccountName, "Setting auth user context failed. User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.", true);
                  return;
                }
                o.authenticatedId = y;
                var Q = o.authenticatedId;
                w && (o.accountId = w, Q = [o.authenticatedId, o.accountId].join(t.cookieSeparator)), L && i.set(t.authUserCookieName, encodeURI(Q));
              }, o.clearAuthenticatedUserContext = function() {
                o.authenticatedId = null, o.accountId = null, i.del(t.authUserCookieName);
              };
            });
          }
          __name(t, "t");
          return t.cookieSeparator = "|", t.userCookieName = "ai_user", t.authUserCookieName = "ai_authUser", t;
        }();
      });
      Yu = I(() => {
        Zu = function() {
          function t() {
          }
          __name(t, "t");
          return t;
        }();
      });
      ec = I(() => {
        he();
        X();
        $u = function() {
          function t(e, r, n, i) {
            var a = this;
            a.traceID = e || Oe(), a.parentID = r, a.name = n;
            var o = $e();
            !n && o && o.pathname && (a.name = o.pathname), a.name = ae(i, a.name);
          }
          __name(t, "t");
          return t;
        }();
      });
      __name(Br, "Br");
      rc = I(() => {
        Ce();
        X();
        Hu();
        he();
        qu();
        Gu();
        Wu();
        Qu();
        Yu();
        ec();
        Ei = "ext", wi = "tags";
        tc = function() {
          function t(e, r) {
            var n = this, i = e.logger;
            this.appId = function() {
              return null;
            }, W(t, this, function(a) {
              a.application = new Vu(), a.internal = new Ku(r), or() && (a.sessionManager = new zu(r, e), a.device = new ju(), a.location = new Zu(), a.user = new Ju(r, e), a.telemetryTrace = new $u(void 0, void 0, void 0, i), a.session = new oo()), a.applySessionContext = function(o, u) {
                var s = a.session, c = a.sessionManager;
                s && U(s.id) ? K(ge(o.ext, _e.AppExt), "sesId", s.id) : c && c.automaticSession && K(ge(o.ext, _e.AppExt), "sesId", c.automaticSession.id, U);
              }, a.applyOperatingSystemContxt = function(o, u) {
                K(o.ext, _e.OSExt, a.os);
              }, a.applyApplicationContext = function(o, u) {
                var s = a.application;
                if (s) {
                  var c = ge(o, wi);
                  K(c, re.applicationVersion, s.ver, U), K(c, re.applicationBuild, s.build, U);
                }
              }, a.applyDeviceContext = function(o, u) {
                var s = a.device;
                if (s) {
                  var c = ge(ge(o, Ei), _e.DeviceExt);
                  K(c, "localId", s.id, U), K(c, "ip", s.ip, U), K(c, "model", s.model, U), K(c, "deviceClass", s.deviceClass, U);
                }
              }, a.applyInternalContext = function(o, u) {
                var s = a.internal;
                if (s) {
                  var c = ge(o, wi);
                  K(c, re.internalAgentVersion, s.agentVersion, U), K(c, re.internalSdkVersion, s.sdkVersion, U), (o.baseType === Rt.dataType || o.baseType === Ne.dataType) && (K(c, re.internalSnippet, s.snippetVer, U), K(c, re.internalSdkSrc, s.sdkSrc, U));
                }
              }, a.applyLocationContext = function(o, u) {
                var s = n.location;
                s && K(ge(o, wi, []), re.locationIp, s.ip, U);
              }, a.applyOperationContext = function(o, u) {
                var s = a.telemetryTrace;
                if (s) {
                  var c = ge(ge(o, Ei), _e.TraceExt, { traceID: void 0, parentID: void 0 });
                  K(c, "traceID", s.traceID, U), K(c, "name", s.name, U), K(c, "parentID", s.parentID, U);
                }
              }, a.applyWebContext = function(o, u) {
                var s = n.web;
                s && K(ge(o, Ei), _e.WebExt, s);
              }, a.applyUserContext = function(o, u) {
                var s = a.user;
                if (s) {
                  var c = ge(o, wi, []);
                  K(c, re.userAccountId, s.accountId, U);
                  var l = ge(ge(o, Ei), _e.UserExt);
                  K(l, "id", s.id, U), K(l, "authId", s.authenticatedId, U);
                }
              }, a.cleanUp = function(o, u) {
                var s = o.ext;
                s && (Br(s, _e.DeviceExt), Br(s, _e.UserExt), Br(s, _e.WebExt), Br(s, _e.OSExt), Br(s, _e.AppExt), Br(s, _e.TraceExt));
              };
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      nc = I(() => {
        ne();
        Ce();
        X();
        rc();
        he();
        Il = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            r.priority = 110, r.identifier = zt;
            var n, i;
            return W(e, r, function(a, o) {
              a.initialize = function(s, c, l, f2) {
                o.initialize(s, c, l, f2);
                var g = a._getTelCtx(), C = a.identifier, E = e.getDefaultConfig();
                i = i || {}, $(E, function(b, p) {
                  i[b] = function() {
                    return g.getConfig(C, b, p());
                  };
                }), a.context = new tc(c, i), n = un(l, Or), a.context.appId = function() {
                  return n ? n._appId : null;
                }, a._extConfig = i;
              }, a.processTelemetry = function(s, c) {
                if (!x(s)) {
                  c = a._getTelCtx(c), s.name === Ne.envelopeType && c.diagLog().resetInternalMessageCount();
                  var l = a.context || {};
                  if (l.session && typeof a.context.session.id != "string" && l.sessionManager && l.sessionManager.update(), u(s, c), l.user && l.user.isNewUser) {
                    l.user.isNewUser = false;
                    var f2 = new Rt(h.SendBrowserInfoOnUserInit, (Le() || {}).userAgent || "");
                    c.diagLog().logInternalMessage(S.CRITICAL, f2);
                  }
                  a.processNext(s, c);
                }
              };
              function u(s, c) {
                ge(s, "tags", []), ge(s, "ext", {});
                var l = a.context;
                l.applySessionContext(s, c), l.applyApplicationContext(s, c), l.applyDeviceContext(s, c), l.applyOperationContext(s, c), l.applyUserContext(s, c), l.applyOperatingSystemContxt(s, c), l.applyWebContext(s, c), l.applyLocationContext(s, c), l.applyInternalContext(s, c), l.cleanUp(s, c);
              }
              __name(u, "u");
            }), r;
          }
          __name(e, "e");
          return e.getDefaultConfig = function() {
            var r = { instrumentationKey: function() {
            }, accountId: function() {
              return null;
            }, sessionRenewalMs: function() {
              return 18e5;
            }, samplingPercentage: function() {
              return 100;
            }, sessionExpirationMs: function() {
              return 864e5;
            }, cookieDomain: function() {
              return null;
            }, sdkExtension: function() {
              return null;
            }, isBrowserLinkTrackingEnabled: function() {
              return false;
            }, appId: function() {
              return null;
            }, namePrefix: function() {
            }, sessionCookiePostfix: function() {
            }, userCookiePostfix: function() {
            }, idLength: function() {
              return 22;
            }, getNewId: function() {
              return null;
            } };
            return r;
          }, e;
        }(et), Dn = Il;
      });
      so = I(() => {
        nc();
      });
      __name(ic, "ic");
      __name(yr, "yr");
      __name(rr, "rr");
      __name(Cl, "Cl");
      ac = I(() => {
        he();
        X();
        Ce();
        rt = "properties";
        Tl = function() {
          function t() {
            var e = this;
            e.openDone = false, e.setRequestHeaderDone = false, e.sendDone = false, e.abortDone = false, e.stateChangeAttached = false;
          }
          __name(t, "t");
          return t;
        }(), uo = function() {
          function t(e, r, n) {
            var i = this, a = n, o = "responseText";
            i.perfMark = null, i.completed = false, i.requestHeadersSize = null, i.requestHeaders = null, i.responseReceivingDuration = null, i.callbackDuration = null, i.ajaxTotalDuration = null, i.aborted = 0, i.pageUrl = null, i.requestUrl = null, i.requestSize = 0, i.method = null, i.status = null, i.requestSentTime = null, i.responseStartedTime = null, i.responseFinishedTime = null, i.callbackFinishedTime = null, i.endTime = null, i.xhrMonitoringState = new Tl(), i.clientFailure = 0, i.traceID = e, i.spanID = r, W(t, i, function(u) {
              u.getAbsoluteUrl = function() {
                return u.requestUrl ? hn(u.requestUrl) : null;
              }, u.getPathName = function() {
                return u.requestUrl ? Tt(a, xn(u.method, u.requestUrl)) : null;
              }, u.CreateTrackItem = function(s, c, l) {
                if (u.ajaxTotalDuration = Math.round(ve(u.requestSentTime, u.responseFinishedTime) * 1e3) / 1e3, u.ajaxTotalDuration < 0)
                  return null;
                var f2 = (b = { id: "|" + u.traceID + "." + u.spanID, target: u.getAbsoluteUrl(), name: u.getPathName(), type: s, startTime: null, duration: u.ajaxTotalDuration, success: +u.status >= 200 && +u.status < 400, responseCode: +u.status, method: u.method }, b[rt] = { HttpMethod: u.method }, b);
                if (u.requestSentTime && (f2.startTime = /* @__PURE__ */ new Date(), f2.startTime.setTime(u.requestSentTime)), Cl(u, f2), c && Ye(u.requestHeaders).length > 0 && (f2[rt] = f2[rt] || {}, f2[rt].requestHeaders = u.requestHeaders), l) {
                  var g = l();
                  if (g) {
                    var C = g.correlationContext;
                    if (C && (f2.correlationContext = C), g.headerMap && Ye(g.headerMap).length > 0 && (f2[rt] = f2[rt] || {}, f2[rt].responseHeaders = g.headerMap), u.status >= 400) {
                      var E = g.type;
                      f2[rt] = f2[rt] || {}, (E === "" || E === "text") && (f2[rt][o] = g[o] ? g.statusText + " - " + g[o] : g.statusText), E === "json" && (f2[rt][o] = g.response ? g.statusText + " - " + JSON.stringify(g.response) : g.statusText);
                    }
                  }
                }
                return f2;
                var b;
              };
            });
          }
          __name(t, "t");
          return t;
        }();
      });
      oc = I(() => {
        X();
        X();
        Th = function() {
          function t() {
          }
          __name(t, "t");
          return t.GetLength = function(e) {
            var r = 0;
            if (!x(e)) {
              var n = "";
              try {
                n = e.toString();
              } catch (i) {
              }
              r = n.length, r = isNaN(r) ? 0 : r;
            }
            return r;
          }, t;
        }();
      });
      sc = I(() => {
        X();
        co = function() {
          function t(e, r) {
            var n = this;
            n.traceFlag = t.DEFAULT_TRACE_FLAG, n.version = t.DEFAULT_VERSION, e && t.isValidTraceId(e) ? n.traceId = e : n.traceId = Oe(), r && t.isValidSpanId(r) ? n.spanId = r : n.spanId = Oe().substr(0, 16);
          }
          __name(t, "t");
          return t.isValidTraceId = function(e) {
            return e.match(/^[0-9a-f]{32}$/) && e !== "00000000000000000000000000000000";
          }, t.isValidSpanId = function(e) {
            return e.match(/^[0-9a-f]{16}$/) && e !== "0000000000000000";
          }, t.prototype.toString = function() {
            var e = this;
            return e.version + "-" + e.traceId + "-" + e.spanId + "-" + e.traceFlag;
          }, t.DEFAULT_TRACE_FLAG = "01", t.DEFAULT_VERSION = "00", t;
        }();
      });
      __name(El, "El");
      __name(wl, "wl");
      __name(bi, "bi");
      __name(Rn, "Rn");
      __name(Pi, "Pi");
      __name(Nn, "Nn");
      __name(zr, "zr");
      fc = I(() => {
        ne();
        he();
        X();
        ac();
        oc();
        sc();
        Ce();
        uc = "ai.ajxmn.", kn = "diagLog", nt = "ajaxData", lc = "throwInternal", Fn = "fetch", cc = 0;
        Mn = function(t) {
          B(e, t);
          function e() {
            var r = t.call(this) || this;
            r.identifier = e.identifier, r.priority = 120;
            var n = "trackDependencyDataInternal", i = $e(), a = false, o = false, u = i && i.host && i.host.toLowerCase(), s = e.getEmptyConfig(), c = false, l = 0, f2, g, C, E, b = false, p = 0, m = false, y = [], w = {}, L;
            return W(e, r, function(k, Q) {
              k.initialize = function(v, P, N, F) {
                if (!k.isInitialized()) {
                  Q.initialize(v, P, N, F);
                  var M = k._getTelCtx(), q = e.getDefaultConfig();
                  $(q, function(We, Sr) {
                    s[We] = M.getConfig(e.identifier, We, Sr);
                  });
                  var V = s.distributedTracingMode;
                  if (c = s.enableRequestHeaderTracking, b = s.enableAjaxPerfTracking, p = s.maxAjaxCallsPerView, m = s.enableResponseHeaderTracking, L = s.excludeRequestFromAutoTrackingPatterns, C = V === Ke.AI || V === Ke.AI_AND_W3C, g = V === Ke.AI_AND_W3C || V === Ke.W3C, b) {
                    var Y = v.instrumentationKey || "unkwn";
                    Y.length > 5 ? E = uc + Y.substring(Y.length - 5) + "." : E = uc + Y + ".";
                  }
                  if (s.disableAjaxTracking === false && be(), J(), N.length > 0 && N) {
                    for (var ue = void 0, Se = 0; !ue && Se < N.length; )
                      N[Se] && N[Se].identifier === zt && (ue = N[Se]), Se++;
                    ue && (f2 = ue.context);
                  }
                }
              }, k.teardown = function() {
                R(y, function(v) {
                  v.rm();
                }), y = [], a = false, o = false, k.setInitialized(false);
              }, k.trackDependencyData = function(v, P) {
                k[n](v, P);
              }, k.includeCorrelationHeaders = function(v, P, N, F) {
                var M = k._currentWindowHost || u;
                if (P) {
                  if (Pt.canIncludeCorrelationHeader(s, v.getAbsoluteUrl(), M)) {
                    if (N || (N = {}), N.headers = new Headers(N.headers || (P instanceof Request ? P.headers || {} : {})), C) {
                      var q = "|" + v.traceID + "." + v.spanID;
                      N.headers.set(te.requestIdHeader, q), c && (v.requestHeaders[te.requestIdHeader] = q);
                    }
                    var V = s.appId || f2 && f2.appId();
                    if (V && (N.headers.set(te.requestContextHeader, te.requestContextAppIdFormat + V), c && (v.requestHeaders[te.requestContextHeader] = te.requestContextAppIdFormat + V)), g) {
                      var Y = new co(v.traceID, v.spanID);
                      N.headers.set(te.traceParentHeader, Y.toString()), c && (v.requestHeaders[te.traceParentHeader] = Y.toString());
                    }
                  }
                  return N;
                } else if (F) {
                  if (Pt.canIncludeCorrelationHeader(s, v.getAbsoluteUrl(), M)) {
                    if (C) {
                      var q = "|" + v.traceID + "." + v.spanID;
                      F.setRequestHeader(te.requestIdHeader, q), c && (v.requestHeaders[te.requestIdHeader] = q);
                    }
                    var V = s.appId || f2 && f2.appId();
                    if (V && (F.setRequestHeader(te.requestContextHeader, te.requestContextAppIdFormat + V), c && (v.requestHeaders[te.requestContextHeader] = te.requestContextAppIdFormat + V)), g) {
                      var Y = new co(v.traceID, v.spanID);
                      F.setRequestHeader(te.traceParentHeader, Y.toString()), c && (v.requestHeaders[te.traceParentHeader] = Y.toString());
                    }
                  }
                  return F;
                }
              }, k[n] = function(v, P, N) {
                if (p === -1 || l < p) {
                  (s.distributedTracingMode === Ke.W3C || s.distributedTracingMode === Ke.AI_AND_W3C) && typeof v.id == "string" && v.id[v.id.length - 1] !== "." && (v.id += "."), x(v.startTime) && (v.startTime = /* @__PURE__ */ new Date());
                  var F = tt.create(v, qe.dataType, qe.envelopeType, k[kn](), P, N);
                  k.core.track(F);
                } else
                  l === p && Rn(k, h.MaxAjaxPerPVExceeded, "Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.", true);
                ++l;
              };
              function ye(v) {
                var P = true;
                return (v || s.ignoreHeaders) && R(s.ignoreHeaders, function(N) {
                  if (N.toLowerCase() === v.toLowerCase())
                    return P = false, -1;
                }), P;
              }
              __name(ye, "ye");
              function J() {
                var v = El();
                if (!!v) {
                  var P = ot(), N = v.polyfill;
                  s.disableFetchTracking === false ? (y.push(sn(P, Fn, { req: function(F, M, q) {
                    var V;
                    if (a && !pt(null, M, q) && !(N && o)) {
                      var Y = F.ctx();
                      V = j(M, q);
                      var ue = k.includeCorrelationHeaders(V, M, q);
                      ue !== q && F.set(1, ue), Y.data = V;
                    }
                  }, rsp: function(F, M) {
                    var q = F.ctx().data;
                    q && (F.rslt = F.rslt.then(function(V) {
                      return ie(F, (V || {}).status, V, q, function() {
                        var Y = { statusText: V.statusText, headerMap: null, correlationContext: Ht(V) };
                        if (m) {
                          var ue = {};
                          V.headers.forEach(function(Se, We) {
                            ye(We) && (ue[We] = Se);
                          }), Y.headerMap = ue;
                        }
                        return Y;
                      }), V;
                    }).catch(function(V) {
                      throw ie(F, 0, M, q, null, { error: V.message }), V;
                    }));
                  }, hkErr: Nn(k, h.FailedMonitorAjaxOpen, "Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.") })), a = true) : N && y.push(sn(P, Fn, { req: function(F, M, q) {
                    pt(null, M, q);
                  } })), N && (P[Fn].polyfill = N);
                }
              }
              __name(J, "J");
              function de(v, P, N) {
                y.push(Pa(v, P, N));
              }
              __name(de, "de");
              function be() {
                wl(k) && !o && (de(XMLHttpRequest, "open", { req: function(v, P, N, F) {
                  var M = v.inst, q = M[nt];
                  !pt(M, N) && it(M, true) && (!q || !q.xhrMonitoringState.openDone) && dt(M, P, N, F);
                }, hkErr: Nn(k, h.FailedMonitorAjaxOpen, "Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.") }), de(XMLHttpRequest, "send", { req: function(v, P) {
                  var N = v.inst, F = N[nt];
                  it(N) && !F.xhrMonitoringState.sendDone && (H("xhr", F), F.requestSentTime = vr(), k.includeCorrelationHeaders(F, void 0, void 0, N), F.xhrMonitoringState.sendDone = true);
                }, hkErr: Nn(k, h.FailedMonitorAjaxSend, "Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.") }), de(XMLHttpRequest, "abort", { req: function(v) {
                  var P = v.inst, N = P[nt];
                  it(P) && !N.xhrMonitoringState.abortDone && (N.aborted = 1, N.xhrMonitoringState.abortDone = true);
                }, hkErr: Nn(k, h.FailedMonitorAjaxAbort, "Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.") }), c && de(XMLHttpRequest, "setRequestHeader", { req: function(v, P, N) {
                  var F = v.inst;
                  it(F) && ye(P) && (F[nt].requestHeaders[P] = N);
                }, hkErr: Nn(k, h.FailedMonitorAjaxSetRequestHeader, "Failed to monitor XMLHttpRequest.setRequestHeader, monitoring data for this ajax call may be incorrect.") }), o = true);
              }
              __name(be, "be");
              function pt(v, P, N) {
                var F = false, M = ((U(P) ? P : (P || {}).url || "") || "").toLowerCase();
                if (R(L, function(Y) {
                  var ue = Y;
                  U(Y) && (ue = new RegExp(Y)), F || (F = ue.test(M));
                }), F)
                  return F;
                var q = zr(M, "?"), V = zr(M, "#");
                return (q === -1 || V !== -1 && V < q) && (q = V), q !== -1 && (M = M.substring(0, q)), x(v) ? x(P) || (F = (typeof P == "object" ? P[Et] === true : false) || (N ? N[Et] === true : false)) : F = v[Et] === true || M[Et] === true, F ? w[M] || (w[M] = 1) : w[M] && (F = true), F;
              }
              __name(pt, "pt");
              function it(v, P) {
                var N = true, F = o;
                return x(v) || (N = P === true || !x(v[nt])), F && N;
              }
              __name(it, "it");
              function dt(v, P, N, F) {
                var M = f2 && f2.telemetryTrace && f2.telemetryTrace.traceID || Oe(), q = Oe().substr(0, 16), V = new uo(M, q, k[kn]());
                V.method = P, V.requestUrl = N, V.xhrMonitoringState.openDone = true, V.requestHeaders = {}, V.async = F, v[nt] = V, d(v);
              }
              __name(dt, "dt");
              function d(v) {
                v[nt].xhrMonitoringState.stateChangeAttached = Jt.Attach(v, "readystatechange", function() {
                  try {
                    v && v.readyState === 4 && it(v) && D(v);
                  } catch (N) {
                    var P = O(N);
                    (!P || zr(P.toLowerCase(), "c00c023f") === -1) && Rn(k, h.FailedMonitorAjaxRSC, "Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.", { ajaxDiagnosticsMessage: bi(v), exception: P });
                  }
                });
              }
              __name(d, "d");
              function T(v) {
                try {
                  var P = v.responseType;
                  if (P === "" || P === "text")
                    return v.responseText;
                } catch (N) {
                }
                return null;
              }
              __name(T, "T");
              function D(v) {
                var P = v[nt];
                P.responseFinishedTime = vr(), P.status = v.status;
                function N(F, M) {
                  var q = M || {};
                  q.ajaxDiagnosticsMessage = bi(v), F && (q.exception = O(F)), Pi(k, h.FailedMonitorAjaxDur, "Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.", q);
                }
                __name(N, "N");
                _("xmlhttprequest", P, function() {
                  try {
                    var F = P.CreateTrackItem("Ajax", c, function() {
                      var M = { statusText: v.statusText, headerMap: null, correlationContext: A(v), type: v.responseType, responseText: T(v), response: v.response };
                      if (m) {
                        var q = v.getAllResponseHeaders();
                        if (q) {
                          var V = oe(q).split(/[\r\n]+/), Y = {};
                          R(V, function(ue) {
                            var Se = ue.split(": "), We = Se.shift(), Sr = Se.join(": ");
                            ye(We) && (Y[We] = Sr);
                          }), M.headerMap = Y;
                        }
                      }
                      return M;
                    });
                    F ? k[n](F) : N(null, { requestSentTime: P.requestSentTime, responseFinishedTime: P.responseFinishedTime });
                  } finally {
                    try {
                      v[nt] = null;
                    } catch (M) {
                    }
                  }
                }, function(F) {
                  N(F, null);
                });
              }
              __name(D, "D");
              function A(v) {
                try {
                  var P = v.getAllResponseHeaders();
                  if (P !== null) {
                    var N = zr(P.toLowerCase(), te.requestContextHeaderLowerCase);
                    if (N !== -1) {
                      var F = v.getResponseHeader(te.requestContextHeader);
                      return Pt.getCorrelationContext(F);
                    }
                  }
                } catch (M) {
                  Pi(k, h.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", { ajaxDiagnosticsMessage: bi(v), exception: O(M) });
                }
              }
              __name(A, "A");
              function H(v, P) {
                if (P.requestUrl && E && b) {
                  var N = Je();
                  if (N && z(N.mark)) {
                    cc++;
                    var F = E + v + "#" + cc;
                    N.mark(F);
                    var M = N.getEntriesByName(F);
                    M && M.length === 1 && (P.perfMark = M[0]);
                  }
                }
              }
              __name(H, "H");
              function _(v, P, N, F) {
                var M = P.perfMark, q = Je(), V = s.maxAjaxPerfLookupAttempts, Y = s.ajaxPerfLookupDelay, ue = P.requestUrl, Se = 0;
                (/* @__PURE__ */ __name(function We() {
                  try {
                    if (q && M) {
                      Se++;
                      for (var Sr = null, vo = q.getEntries(), Di = vo.length - 1; Di >= 0; Di--) {
                        var bt = vo[Di];
                        if (bt) {
                          if (bt.entryType === "resource")
                            bt.initiatorType === v && (zr(bt.name, ue) !== -1 || zr(ue, bt.name) !== -1) && (Sr = bt);
                          else if (bt.entryType === "mark" && bt.name === M.name) {
                            P.perfTiming = Sr;
                            break;
                          }
                          if (bt.startTime < M.startTime - 1e3)
                            break;
                        }
                      }
                    }
                    !M || P.perfTiming || Se >= V || P.async === false ? (M && z(q.clearMarks) && q.clearMarks(M.name), P.perfAttempts = Se, N()) : setTimeout(We, Y);
                  } catch (Ic) {
                    F(Ic);
                  }
                }, "We"))();
              }
              __name(_, "_");
              function j(v, P) {
                var N = f2 && f2.telemetryTrace && f2.telemetryTrace.traceID || Oe(), F = Oe().substr(0, 16), M = new uo(N, F, k[kn]());
                M.requestSentTime = vr(), v instanceof Request ? M.requestUrl = v ? v.url : "" : M.requestUrl = v;
                var q = "GET";
                P && P.method ? q = P.method : v && v instanceof Request && (q = v.method), M.method = q;
                var V = {};
                if (c) {
                  var Y = new Headers((P ? P.headers : 0) || (v instanceof Request ? v.headers || {} : {}));
                  Y.forEach(function(ue, Se) {
                    ye(Se) && (V[Se] = ue);
                  });
                }
                return M.requestHeaders = V, H("fetch", M), M;
              }
              __name(j, "j");
              function Z(v) {
                var P = "";
                try {
                  x(v) || (typeof v == "string" ? P += "(url: '" + v + "')" : P += "(url: '" + v.url + "')");
                } catch (N) {
                  Rn(k, h.FailedMonitorAjaxOpen, "Failed to grab failed fetch diagnostics message", { exception: O(N) });
                }
                return P;
              }
              __name(Z, "Z");
              function ie(v, P, N, F, M, q) {
                if (!F)
                  return;
                function V(Y, ue, Se) {
                  var We = Se || {};
                  We.fetchDiagnosticsMessage = Z(N), ue && (We.exception = O(ue)), Pi(k, Y, "Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.", We);
                }
                __name(V, "V");
                F.responseFinishedTime = vr(), F.status = P, _("fetch", F, function() {
                  var Y = F.CreateTrackItem("Fetch", c, M);
                  Y ? k[n](Y) : V(h.FailedMonitorAjaxDur, null, { requestSentTime: F.requestSentTime, responseFinishedTime: F.responseFinishedTime });
                }, function(Y) {
                  V(h.FailedMonitorAjaxGetCorrelationHeader, Y, null);
                });
              }
              __name(ie, "ie");
              function Ht(v) {
                if (v && v.headers)
                  try {
                    var P = v.headers.get(te.requestContextHeader);
                    return Pt.getCorrelationContext(P);
                  } catch (N) {
                    Pi(k, h.FailedMonitorAjaxGetCorrelationHeader, "Failed to get Request-Context correlation header as it may be not included in the response or not accessible.", { fetchDiagnosticsMessage: Z(v), exception: O(N) });
                  }
              }
              __name(Ht, "Ht");
            }), r;
          }
          __name(e, "e");
          return e.getDefaultConfig = function() {
            var r = { maxAjaxCallsPerView: 500, disableAjaxTracking: false, disableFetchTracking: true, excludeRequestFromAutoTrackingPatterns: void 0, disableCorrelationHeaders: false, distributedTracingMode: Ke.AI_AND_W3C, correlationHeaderExcludedDomains: ["*.blob.core.windows.net", "*.blob.core.chinacloudapi.cn", "*.blob.core.cloudapi.de", "*.blob.core.usgovcloudapi.net"], correlationHeaderDomains: void 0, correlationHeaderExcludePatterns: void 0, appId: void 0, enableCorsCorrelation: false, enableRequestHeaderTracking: false, enableResponseHeaderTracking: false, enableAjaxErrorStatusText: false, enableAjaxPerfTracking: false, maxAjaxPerfLookupAttempts: 3, ajaxPerfLookupDelay: 25, ignoreHeaders: ["Authorization", "X-API-Key", "WWW-Authenticate"] };
            return r;
          }, e.getEmptyConfig = function() {
            var r = this.getDefaultConfig();
            return $(r, function(n) {
              r[n] = void 0;
            }), r;
          }, e.prototype.processTelemetry = function(r, n) {
            this.processNext(r, n);
          }, e.identifier = "AjaxDependencyPlugin", e;
        }(et);
      });
      lo = I(() => {
        fc();
      });
      po = I(() => {
        X();
        to();
        ao();
        so();
        lo();
        he();
        pc = ["snippet", "dependencies", "properties", "_snippetVersion", "appInsightsNew", "getSKUDefaults"], Pl = { Default: 0, Required: 1, Array: 2, Hidden: 4 }, dc = { __proto__: null, PropertiesPluginIdentifier: zt, BreezeChannelIdentifier: Or, AnalyticsPluginIdentifier: Ci, Util: Sn, CorrelationIdHelper: Pt, UrlHelper: Ba, DateTimeUtils: za, ConnectionStringParser: Va, FieldType: Pl, RequestHeaders: te, DisabledPropertyName: Et, ProcessLegacy: Ot, SampleRate: fr, HttpMethod: Fr, DEFAULT_BREEZE_ENDPOINT: fn, AIData: Cn, AIBase: In, Envelope: Tn, Event: He, Exception: me, Metric: Ve, PageView: Ne, PageViewData: mr, RemoteDependencyData: qe, Trace: Qe, PageViewPerformance: Ze, Data: xt, SeverityLevel: Bt, ConfigurationManager: Za, ContextTagKeys: xr, DataSanitizer: Na, TelemetryItemCreator: tt, CtxTagKeys: re, Extensions: _e, DistributedTracingModes: Ke }, Ai = function() {
          function t(e) {
            var r = this;
            r._snippetVersion = "" + (e.sv || e.version || ""), e.queue = e.queue || [], e.version = e.version || 2;
            var n = e.config || {};
            if (n.connectionString) {
              var i = mi(n.connectionString), a = i.ingestionendpoint;
              n.endpointUrl = a ? a + "/v2/track" : n.endpointUrl, n.instrumentationKey = i.instrumentationkey || n.instrumentationKey;
            }
            r.appInsights = new bn(), r.properties = new Dn(), r.dependencies = new Mn(), r.core = new en(), r._sender = new An(), r.snippet = e, r.config = n, r.getSKUDefaults();
          }
          __name(t, "t");
          return t.prototype.getCookieMgr = function() {
            return this.appInsights.getCookieMgr();
          }, t.prototype.trackEvent = function(e, r) {
            this.appInsights.trackEvent(e, r);
          }, t.prototype.trackPageView = function(e) {
            var r = e || {};
            this.appInsights.trackPageView(r);
          }, t.prototype.trackPageViewPerformance = function(e) {
            var r = e || {};
            this.appInsights.trackPageViewPerformance(r);
          }, t.prototype.trackException = function(e) {
            e && !e.exception && e.error && (e.exception = e.error), this.appInsights.trackException(e);
          }, t.prototype._onerror = function(e) {
            this.appInsights._onerror(e);
          }, t.prototype.trackTrace = function(e, r) {
            this.appInsights.trackTrace(e, r);
          }, t.prototype.trackMetric = function(e, r) {
            this.appInsights.trackMetric(e, r);
          }, t.prototype.startTrackPage = function(e) {
            this.appInsights.startTrackPage(e);
          }, t.prototype.stopTrackPage = function(e, r, n, i) {
            this.appInsights.stopTrackPage(e, r, n, i);
          }, t.prototype.startTrackEvent = function(e) {
            this.appInsights.startTrackEvent(e);
          }, t.prototype.stopTrackEvent = function(e, r, n) {
            this.appInsights.stopTrackEvent(e, r, n);
          }, t.prototype.addTelemetryInitializer = function(e) {
            return this.appInsights.addTelemetryInitializer(e);
          }, t.prototype.setAuthenticatedUserContext = function(e, r, n) {
            n === void 0 && (n = false), this.properties.context.user.setAuthenticatedUserContext(e, r, n);
          }, t.prototype.clearAuthenticatedUserContext = function() {
            this.properties.context.user.clearAuthenticatedUserContext();
          }, t.prototype.trackDependencyData = function(e) {
            this.dependencies.trackDependencyData(e);
          }, t.prototype.flush = function(e) {
            var r = this;
            e === void 0 && (e = true), ut(this.core, function() {
              return "AISKU.flush";
            }, function() {
              R(r.core.getTransmissionControls(), function(n) {
                R(n, function(i) {
                  i.flush(e);
                });
              });
            }, null, e);
          }, t.prototype.onunloadFlush = function(e) {
            e === void 0 && (e = true), R(this.core.getTransmissionControls(), function(r) {
              R(r, function(n) {
                n.onunloadFlush ? n.onunloadFlush() : n.flush(e);
              });
            });
          }, t.prototype.loadAppInsights = function(e, r, n) {
            var i = this;
            e === void 0 && (e = false);
            var a = this;
            function o(u) {
              if (u) {
                var s = "";
                x(a._snippetVersion) || (s += a._snippetVersion), e && (s += ".lg"), a.context && a.context.internal && (a.context.internal.snippetVer = s || "-"), $(a, function(c, l) {
                  U(c) && !z(l) && c && c[0] !== "_" && pc.indexOf(c) === -1 && (u[c] = l);
                });
              }
            }
            __name(o, "o");
            return e && a.config.extensions && a.config.extensions.length > 0 && Ae("Extensions not allowed in legacy mode"), ut(a.core, function() {
              return "AISKU.loadAppInsights";
            }, function() {
              var u = [];
              u.push(a._sender), u.push(a.properties), u.push(a.dependencies), u.push(a.appInsights), a.core.initialize(a.config, u, r, n), a.context = a.properties.context, fo && a.context && (a.context.internal.sdkSrc = fo), o(a.snippet), a.emptyQueue(), a.pollInternalLogs(), a.addHousekeepingBeforeUnload(i);
            }), a;
          }, t.prototype.updateSnippetDefinitions = function(e) {
            Wr(e, this, function(r) {
              return r && pc.indexOf(r) === -1;
            });
          }, t.prototype.emptyQueue = function() {
            var e = this;
            try {
              if (Fe(e.snippet.queue)) {
                for (var r = e.snippet.queue.length, n = 0; n < r; n++) {
                  var i = e.snippet.queue[n];
                  i();
                }
                e.snippet.queue = void 0, delete e.snippet.queue;
              }
            } catch (o) {
              var a = {};
              o && z(o.toString) && (a.exception = o.toString());
            }
          }, t.prototype.pollInternalLogs = function() {
            this.core.pollInternalLogs();
          }, t.prototype.addHousekeepingBeforeUnload = function(e) {
            if (or() || Qn()) {
              var r = /* @__PURE__ */ __name(function() {
                e.onunloadFlush(false), R(e.appInsights.core._extensions, function(i) {
                  if (i.identifier === zt)
                    return i && i.context && i.context._sessionManager && i.context._sessionManager.backup(), -1;
                });
              }, "r");
              if (!e.appInsights.config.disableFlushOnBeforeUnload) {
                var n = _t("beforeunload", r);
                n = _t("unload", r) || n, n = _t("pagehide", r) || n, n = _t("visibilitychange", r) || n, !n && !ta() && e.appInsights.core.logger.throwInternal(S.CRITICAL, h.FailedToAddHandlerForOnBeforeUnload, "Could not add handler for beforeunload and pagehide");
              }
              e.appInsights.config.disableFlushOnUnload || (_t("pagehide", r), _t("visibilitychange", r));
            }
          }, t.prototype.getSender = function() {
            return this._sender;
          }, t.prototype.getSKUDefaults = function() {
            var e = this;
            e.config.diagnosticLogInterval = e.config.diagnosticLogInterval && e.config.diagnosticLogInterval > 0 ? e.config.diagnosticLogInterval : 1e4;
          }, t;
        }();
        (function() {
          var t = null, e = false, r = ["://js.monitor.azure.com/", "://az416426.vo.msecnd.net/"];
          try {
            var n = (document || {}).currentScript;
            n && (t = n.src);
          } catch (u) {
          }
          if (t)
            try {
              var i = t.toLowerCase();
              if (i) {
                for (var a = "", o = 0; o < r.length; o++)
                  if (i.indexOf(r[o]) !== -1) {
                    a = "cdn" + (o + 1), i.indexOf("/scripts/") === -1 && (i.indexOf("/next/") !== -1 ? a += "-next" : i.indexOf("/beta/") !== -1 && (a += "-beta")), fo = a + (e ? ".mod" : "");
                    break;
                  }
              }
            } catch (u) {
            }
        })();
      });
      vc = I(() => {
        he();
        X();
        bl = ["snippet", "getDefaultConfig", "_hasLegacyInitializers", "_queue", "_processLegacyInitializers"], gc = function() {
          function t(e, r) {
            this._hasLegacyInitializers = false, this._queue = [], this.config = t.getDefaultConfig(e.config), this.appInsightsNew = r, this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) };
          }
          __name(t, "t");
          return t.getDefaultConfig = function(e) {
            return e || (e = {}), e.endpointUrl = e.endpointUrl || "https://dc.services.visualstudio.com/v2/track", e.sessionRenewalMs = 30 * 60 * 1e3, e.sessionExpirationMs = 24 * 60 * 60 * 1e3, e.maxBatchSizeInBytes = e.maxBatchSizeInBytes > 0 ? e.maxBatchSizeInBytes : 102400, e.maxBatchInterval = isNaN(e.maxBatchInterval) ? 15e3 : e.maxBatchInterval, e.enableDebug = ee(e.enableDebug), e.disableExceptionTracking = ee(e.disableExceptionTracking), e.disableTelemetry = ee(e.disableTelemetry), e.verboseLogging = ee(e.verboseLogging), e.emitLineDelimitedJson = ee(e.emitLineDelimitedJson), e.diagnosticLogInterval = e.diagnosticLogInterval || 1e4, e.autoTrackPageVisitTime = ee(e.autoTrackPageVisitTime), (isNaN(e.samplingPercentage) || e.samplingPercentage <= 0 || e.samplingPercentage >= 100) && (e.samplingPercentage = 100), e.disableAjaxTracking = ee(e.disableAjaxTracking), e.maxAjaxCallsPerView = isNaN(e.maxAjaxCallsPerView) ? 500 : e.maxAjaxCallsPerView, e.isBeaconApiDisabled = ee(e.isBeaconApiDisabled, true), e.disableCorrelationHeaders = ee(e.disableCorrelationHeaders), e.correlationHeaderExcludedDomains = e.correlationHeaderExcludedDomains || ["*.blob.core.windows.net", "*.blob.core.chinacloudapi.cn", "*.blob.core.cloudapi.de", "*.blob.core.usgovcloudapi.net"], e.disableFlushOnBeforeUnload = ee(e.disableFlushOnBeforeUnload), e.disableFlushOnUnload = ee(e.disableFlushOnUnload, e.disableFlushOnBeforeUnload), e.enableSessionStorageBuffer = ee(e.enableSessionStorageBuffer, true), e.isRetryDisabled = ee(e.isRetryDisabled), e.isCookieUseDisabled = ee(e.isCookieUseDisabled), e.isStorageUseDisabled = ee(e.isStorageUseDisabled), e.isBrowserLinkTrackingEnabled = ee(e.isBrowserLinkTrackingEnabled), e.enableCorsCorrelation = ee(e.enableCorsCorrelation), e;
          }, t.prototype.addTelemetryInitializers = function(e) {
            var r = this;
            this._hasLegacyInitializers || (this.appInsightsNew.addTelemetryInitializer(function(n) {
              r._processLegacyInitializers(n);
            }), this._hasLegacyInitializers = true), this._queue.push(e);
          }, t.prototype.getCookieMgr = function() {
            return this.appInsightsNew.getCookieMgr();
          }, t.prototype.startTrackPage = function(e) {
            this.appInsightsNew.startTrackPage(e);
          }, t.prototype.stopTrackPage = function(e, r, n, i) {
            this.appInsightsNew.stopTrackPage(e, r, n);
          }, t.prototype.trackPageView = function(e, r, n, i, a) {
            var o = { name: e, uri: r, properties: n, measurements: i };
            this.appInsightsNew.trackPageView(o);
          }, t.prototype.trackEvent = function(e, r, n) {
            this.appInsightsNew.trackEvent({ name: e });
          }, t.prototype.trackDependency = function(e, r, n, i, a, o, u) {
            this.appInsightsNew.trackDependencyData({ id: e, target: n, type: i, duration: a, properties: { HttpMethod: r }, success: o, responseCode: u });
          }, t.prototype.trackException = function(e, r, n, i, a) {
            this.appInsightsNew.trackException({ exception: e });
          }, t.prototype.trackMetric = function(e, r, n, i, a, o) {
            this.appInsightsNew.trackMetric({ name: e, average: r, sampleCount: n, min: i, max: a });
          }, t.prototype.trackTrace = function(e, r, n) {
            this.appInsightsNew.trackTrace({ message: e, severityLevel: n });
          }, t.prototype.flush = function(e) {
            this.appInsightsNew.flush(e);
          }, t.prototype.setAuthenticatedUserContext = function(e, r, n) {
            this.appInsightsNew.context.user.setAuthenticatedUserContext(e, r, n);
          }, t.prototype.clearAuthenticatedUserContext = function() {
            this.appInsightsNew.context.user.clearAuthenticatedUserContext();
          }, t.prototype._onerror = function(e, r, n, i, a) {
            this.appInsightsNew._onerror({ message: e, url: r, lineNumber: n, columnNumber: i, error: a });
          }, t.prototype.startTrackEvent = function(e) {
            this.appInsightsNew.startTrackEvent(e);
          }, t.prototype.stopTrackEvent = function(e, r, n) {
            this.appInsightsNew.stopTrackEvent(e, r, n);
          }, t.prototype.downloadAndSetup = function(e) {
            Ae("downloadAndSetup not implemented in web SKU");
          }, t.prototype.updateSnippetDefinitions = function(e) {
            Wr(e, this, function(r) {
              return r && bl.indexOf(r) === -1;
            });
          }, t.prototype.loadAppInsights = function() {
            var e = this;
            if (this.config.iKey) {
              var r = this.trackPageView;
              this.trackPageView = function(a, o, u) {
                r.apply(e, [null, a, o, u]);
              };
            }
            var n = "logPageView";
            typeof this.snippet[n] == "function" && (this[n] = function(a, o, u) {
              e.trackPageView(null, a, o, u);
            });
            var i = "logEvent";
            return typeof this.snippet[i] == "function" && (this[i] = function(a, o, u) {
              e.trackEvent(a, o, u);
            }), this;
          }, t.prototype._processLegacyInitializers = function(e) {
            return e.tags[Ot] = this._queue, e;
          }, t;
        }();
      });
      hc = I(() => {
        vc();
        po();
        X();
        mc = function() {
          function t() {
          }
          __name(t, "t");
          return t.getAppInsights = function(e, r) {
            var n = new Ai(e), i = r !== 2;
            if (Qt(), r === 2)
              return n.updateSnippetDefinitions(e), n.loadAppInsights(i), n;
            var a = new gc(e, n);
            return a.updateSnippetDefinitions(e), n.loadAppInsights(i), a;
          }, t;
        }();
      });
      xc = {};
      Ec(xc, { AppInsightsCore: () => en, ApplicationAnalytics: () => bn, ApplicationInsights: () => Ai, ApplicationInsightsContainer: () => mc, BaseCore: () => Yr, BaseTelemetryPlugin: () => et, CoreUtils: () => on, DependenciesPlugin: () => Mn, DistributedTracingModes: () => Ke, Event: () => He, Exception: () => me, LoggingSeverity: () => S, Metric: () => Ve, NotificationManager: () => $r, PageView: () => Ne, PageViewPerformance: () => Ze, PerfEvent: () => ur, PerfManager: () => Xr, PropertiesPlugin: () => Dn, RemoteDependencyData: () => qe, Sender: () => An, SeverityLevel: () => Bt, Telemetry: () => dc, Trace: () => Qe, Util: () => Sn, _InternalMessageId: () => h, doPerf: () => ut });
      yc = I(() => {
        po();
        hc();
        X();
        he();
        ao();
        to();
        so();
        lo();
      });
      wc = /* @__PURE__ */ __name((t, e, r) => At(void 0, null, function* () {
        let n = yield Promise.resolve().then(() => (init_Index(), Index_exports)), i = yield Promise.resolve().then(() => (init_Index2(), Index_exports2)), a = new n.AppInsightsCore(), o = new i.PostChannel(), u = { instrumentationKey: t, endpointUrl: "https://mobile.events.data.microsoft.com/OneCollector/1.0", loggingLevelTelemetry: 0, loggingLevelConsole: 0, disableCookiesUsage: true, disableDbgExt: true, disableInstrumentationKeyValidation: true, channels: [[o]] };
        if (r) {
          u.extensionConfig = {};
          let l = { alwaysUseXhrOverride: true, httpXHROverride: r };
          u.extensionConfig[o.identifier] = l;
        }
        let c = e.workspace.getConfiguration("telemetry").get("internalTesting");
        return a.initialize(u, []), a.addTelemetryInitializer((l) => {
          var f2, g;
          !c || (l.ext = (f2 = l.ext) != null ? f2 : {}, l.ext.utc = (g = l.ext.utc) != null ? g : {}, l.ext.utc.flags = 8462029);
        }), a;
      }), "wc");
      yo = /* @__PURE__ */ __name((t, e, r) => At(void 0, null, function* () {
        let n = yield wc(t, e, r);
        return { logEvent: (a, o) => {
          try {
            n == null || n.track({ name: a, baseData: { name: a, properties: o == null ? void 0 : o.properties, measurements: o == null ? void 0 : o.measurements } });
          } catch (u) {
            throw new Error(`Failed to log event to app insights!
` + u.message);
          }
        }, logException: (a, o) => {
          throw new Error("1DS SDK does not support logging exceptions, please use logEvent for exception tracking");
        }, flush: () => At(void 0, null, function* () {
          try {
            n == null || n.unload();
          } catch (a) {
            throw new Error(`Failed to flush app insights!
` + a.message);
          }
        }) };
      }), "yo");
      Ln = /* @__PURE__ */ __name(class {
        constructor(e, r) {
          this._instantiationStatus = 0;
          this._eventQueue = [];
          this._exceptionQueue = [];
          this._clientFactory = r, this._key = e;
        }
        logEvent(e, r) {
          if (!this._telemetryClient) {
            this._instantiationStatus !== 2 && this._eventQueue.push({ eventName: e, data: r });
            return;
          }
          this._telemetryClient.logEvent(e, r);
        }
        logException(e, r) {
          if (!this._telemetryClient) {
            this._instantiationStatus !== 2 && this._exceptionQueue.push({ exception: e, data: r });
            return;
          }
          this._telemetryClient.logException(e, r);
        }
        flush() {
          return At(this, null, function* () {
            this._telemetryClient && (yield this._telemetryClient.flush(), this._telemetryClient = void 0);
          });
        }
        _flushQueues() {
          this._eventQueue.forEach(({ eventName: e, data: r }) => this.logEvent(e, r)), this._eventQueue = [], this._exceptionQueue.forEach(({ exception: e, data: r }) => this.logException(e, r)), this._exceptionQueue = [];
        }
        instantiateAppender() {
          this._instantiationStatus === 0 && (this._instantiationStatus = 1, this._clientFactory(this._key).then((e) => {
            this._telemetryClient = e, this._instantiationStatus = 2, this._flushQueues();
          }).catch((e) => {
            console.error(e), this._instantiationStatus = 2;
          }));
        }
      }, "Ln");
      je = /* @__PURE__ */ __name(class {
        constructor(e) {
          this.vscodeAPI = e;
        }
        getTelemetryLevel() {
          let e = "telemetry", r = "enableTelemetry";
          try {
            let n = this.vscodeAPI.env.telemetryConfiguration;
            return n.isUsageEnabled && n.isErrorsEnabled && n.isCrashEnabled ? "on" : n.isErrorsEnabled && n.isCrashEnabled ? "error" : "off";
          } catch (n) {
            return this.vscodeAPI.env.isTelemetryEnabled !== void 0 ? this.vscodeAPI.env.isTelemetryEnabled ? "on" : "off" : this.vscodeAPI.workspace.getConfiguration(e).get(r) ? "on" : "off";
          }
        }
        static applyReplacements(e, r) {
          for (let n of Object.keys(e))
            for (let i of r)
              i.lookup.test(n) && (i.replacementString !== void 0 ? e[n] = i.replacementString : delete e[n]);
        }
        static shouldUseOneDataSystemSDK(e) {
          return e.length === 74 && e[32] === "-" && e[41] === "-" && e[46] === "-" && e[51] === "-" && e[56] === "-" && e[69] === "-";
        }
        static getInstance(e) {
          return je._instance || (je._instance = new je(e)), je._instance;
        }
      }, "je");
      _n = /* @__PURE__ */ __name(class {
        constructor(e, r, n, i, a, o) {
          this.extensionId = e;
          this.extensionVersion = r;
          this.telemetryAppender = n;
          this.osShim = i;
          this.vscodeAPI = a;
          this.firstParty = false;
          this.userOptIn = false;
          this.errorOptIn = false;
          this.disposables = [];
          this.firstParty = !!o, this.updateUserOptStatus(), a.env.onDidChangeTelemetryEnabled !== void 0 ? (this.disposables.push(a.env.onDidChangeTelemetryEnabled(() => this.updateUserOptStatus())), this.disposables.push(a.workspace.onDidChangeConfiguration(() => this.updateUserOptStatus()))) : this.disposables.push(a.workspace.onDidChangeConfiguration(() => this.updateUserOptStatus()));
        }
        updateUserOptStatus() {
          let e = je.getInstance(this.vscodeAPI).getTelemetryLevel();
          this.userOptIn = e === "on", this.errorOptIn = e === "error" || this.userOptIn, (this.userOptIn || this.errorOptIn) && this.telemetryAppender.instantiateAppender();
        }
        cleanRemoteName(e) {
          if (!e)
            return "none";
          let r = "other";
          return ["ssh-remote", "dev-container", "attached-container", "wsl", "codespaces"].forEach((n) => {
            e.indexOf(`${n}`) === 0 && (r = n);
          }), r;
        }
        get extension() {
          return this._extension === void 0 && (this._extension = this.vscodeAPI.extensions.getExtension(this.extensionId)), this._extension;
        }
        cloneAndChange(e, r) {
          if (e === null || typeof e != "object" || typeof r != "function")
            return e;
          let n = {};
          for (let i in e)
            n[i] = r(i, e[i]);
          return n;
        }
        shouldSendErrorTelemetry() {
          return this.errorOptIn === false ? false : this.firstParty ? !(this.vscodeAPI.env.remoteName && this.cleanRemoteName(this.vscodeAPI.env.remoteName) === "other") : true;
        }
        getCommonProperties() {
          let e = {};
          if (e["common.os"] = this.osShim.platform, e["common.nodeArch"] = this.osShim.architecture, e["common.platformversion"] = (this.osShim.release || "").replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/, "$1$2$3"), e["common.extname"] = this.extensionId, e["common.extversion"] = this.extensionVersion, this.vscodeAPI && this.vscodeAPI.env) {
            switch (e["common.vscodemachineid"] = this.vscodeAPI.env.machineId, e["common.vscodesessionid"] = this.vscodeAPI.env.sessionId, e["common.vscodeversion"] = this.vscodeAPI.version, e["common.isnewappinstall"] = this.vscodeAPI.env.isNewAppInstall ? this.vscodeAPI.env.isNewAppInstall.toString() : "false", e["common.product"] = this.vscodeAPI.env.appHost, this.vscodeAPI.env.uiKind) {
              case this.vscodeAPI.UIKind.Web:
                e["common.uikind"] = "web";
                break;
              case this.vscodeAPI.UIKind.Desktop:
                e["common.uikind"] = "desktop";
                break;
              default:
                e["common.uikind"] = "unknown";
            }
            e["common.remotename"] = this.cleanRemoteName(this.vscodeAPI.env.remoteName);
          }
          return e;
        }
        anonymizeFilePaths(e, r) {
          let n;
          if (e == null)
            return "";
          let i = [];
          this.vscodeAPI.env.appRoot !== "" && i.push(new RegExp(this.vscodeAPI.env.appRoot.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gi")), this.extension && i.push(new RegExp(this.extension.extensionPath.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "gi"));
          let a = e;
          if (r) {
            let o = [];
            for (let l of i)
              for (; (n = l.exec(e)) && n; )
                o.push([n.index, l.lastIndex]);
            let u = /^[\\/]?(node_modules|node_modules\.asar)[\\/]/, s = /(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-._]+(\\\\|\\|\/))+[\w-._]*/g, c = 0;
            for (a = ""; (n = s.exec(e)) && n; )
              n[0] && !u.test(n[0]) && o.every(([l, f2]) => n.index < l || n.index >= f2) && (a += e.substring(c, n.index) + "<REDACTED: user-file-path>", c = s.lastIndex);
            c < e.length && (a += e.substr(c));
          }
          for (let o of i)
            a = a.replace(o, "");
          return a;
        }
        removePropertiesWithPossibleUserInfo(e) {
          if (typeof e != "object")
            return;
          let r = {};
          for (let n of Object.keys(e)) {
            let i = e[n];
            if (!i)
              continue;
            let a = /@[a-zA-Z0-9-.]+/, o = /(key|token|sig|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/, u = /xox[pbaors]-[a-zA-Z0-9]+-[a-zA-Z0-9-]+?/;
            o.test(i.toLowerCase()) ? r[n] = "<REDACTED: secret>" : a.test(i) ? r[n] = "<REDACTED: email>" : u.test(i) ? r[n] = "<REDACTED: token>" : r[n] = i;
          }
          return r;
        }
        get telemetryLevel() {
          switch (je.getInstance(this.vscodeAPI).getTelemetryLevel()) {
            case "on":
              return "all";
            case "error":
              return "error";
            case "off":
              return "off";
          }
        }
        internalSendTelemetryEvent(e, r, n, i, a) {
          if ((this.userOptIn || a) && e !== "") {
            if (r = at(at({}, r), this.getCommonProperties()), i) {
              let o = this.cloneAndChange(r, (u, s) => this.anonymizeFilePaths(s, this.firstParty));
              r = this.removePropertiesWithPossibleUserInfo(o);
            }
            r = r != null ? r : {}, n = n != null ? n : {}, e = `${this.extensionId}/${e}`, this.telemetryAppender.logEvent(e, { properties: r, measurements: n });
          }
        }
        sendTelemetryEvent(e, r, n) {
          this.internalSendTelemetryEvent(e, r, n, true, false);
        }
        sendRawTelemetryEvent(e, r, n) {
          this.internalSendTelemetryEvent(e, r, n, false, false);
        }
        sendDangerousTelemetryEvent(e, r, n, i = true) {
          this.telemetryAppender.instantiateAppender(), this.internalSendTelemetryEvent(e, r, n, i, true);
        }
        internalSendTelemetryErrorEvent(e, r, n, i, a) {
          if ((this.shouldSendErrorTelemetry() || a) && e !== "") {
            if (r = at(at({}, r), this.getCommonProperties()), i) {
              let o = this.cloneAndChange(r, (u, s) => this.anonymizeFilePaths(s, this.firstParty));
              r = this.removePropertiesWithPossibleUserInfo(o);
            }
            r = r != null ? r : {}, n = n != null ? n : {}, e = `${this.extensionId}/${e}`, this.telemetryAppender.logEvent(e, { properties: r, measurements: n });
          }
        }
        sendTelemetryErrorEvent(e, r, n) {
          this.internalSendTelemetryErrorEvent(e, r, n, true, false);
        }
        sendDangerousTelemetryErrorEvent(e, r, n, i = true) {
          this.telemetryAppender.instantiateAppender(), this.internalSendTelemetryErrorEvent(e, r, n, i, true);
        }
        internalSendTelemetryException(e, r, n, i, a) {
          if ((this.shouldSendErrorTelemetry() || a) && e) {
            if (r = at(at({}, r), this.getCommonProperties()), i) {
              let o = this.cloneAndChange(r, (u, s) => this.anonymizeFilePaths(s, this.firstParty));
              e.stack && (e.stack = this.anonymizeFilePaths(e.stack, this.firstParty)), r = this.removePropertiesWithPossibleUserInfo(o);
            }
            r = r != null ? r : {}, n = n != null ? n : {}, this.telemetryAppender.logException(e, { properties: r, measurements: n });
          }
        }
        sendTelemetryException(e, r, n) {
          this.internalSendTelemetryException(e, r, n, true, false);
        }
        sendDangerousTelemetryException(e, r, n, i = true) {
          this.telemetryAppender.instantiateAppender(), this.internalSendTelemetryException(e, r, n, i, true);
        }
        dispose() {
          return this.telemetryAppender.flush(), Promise.all(this.disposables.map((e) => e.dispose()));
        }
      }, "_n");
      Al = /* @__PURE__ */ __name((t, e) => At(void 0, null, function* () {
        let r;
        try {
          let i = yield Promise.resolve().then(() => (yc(), xc)), a;
          t && t.indexOf("AIF-") === 0 && (a = "https://vscode.vortex.data.microsoft.com/collect/v1"), r = new i.ApplicationInsights({ config: { instrumentationKey: t, endpointUrl: a, disableAjaxTracking: true, disableExceptionTracking: true, disableFetchTracking: true, disableCorrelationHeaders: true, disableCookiesUsage: true, autoTrackPageVisitTime: false, emitLineDelimitedJson: true, disableInstrumentationKeyValidation: true } }), r.loadAppInsights(), a && fetch(a).catch(() => r = void 0);
        } catch (i) {
          return Promise.reject(i);
        }
        return { logEvent: (i, a) => {
          let o = at(at({}, a == null ? void 0 : a.properties), a == null ? void 0 : a.measurements);
          e != null && e.length && je.applyReplacements(o, e), r == null || r.trackEvent({ name: i }, o);
        }, logException: (i, a) => {
          let o = at(at({}, a == null ? void 0 : a.properties), a == null ? void 0 : a.measurements);
          e != null && e.length && je.applyReplacements(o, e), r == null || r.trackException({ exception: i, properties: o });
        }, flush: () => At(void 0, null, function* () {
          r == null || r.flush();
        }) };
      }), "Al");
      go = /* @__PURE__ */ __name(class extends _n {
        constructor(e, r, n, i, a) {
          let o = /* @__PURE__ */ __name((s) => Al(s, a), "o");
          je.shouldUseOneDataSystemSDK(n) && (o = /* @__PURE__ */ __name((s) => yo(s, Sc), "o"));
          let u = new Ln(n, o);
          n && (n.indexOf("AIF-") === 0 || je.shouldUseOneDataSystemSDK(n)) && (i = true), super(e, r, u, { release: navigator.appVersion, platform: "web", architecture: "web" }, Sc, i);
        }
      }, "go");
    }
  });

  // node_modules/console-browserify/index.js
  var require_console_browserify = __commonJS({
    "node_modules/console-browserify/index.js"(exports, module) {
      var util = require_util();
      var assert = require_assert();
      function now() {
        return (/* @__PURE__ */ new Date()).getTime();
      }
      __name(now, "now");
      var slice = Array.prototype.slice;
      var console2;
      var times = {};
      if (typeof global !== "undefined" && global.console) {
        console2 = global.console;
      } else if (typeof window !== "undefined" && window.console) {
        console2 = window.console;
      } else {
        console2 = {};
      }
      var functions = [
        [log2, "log"],
        [info, "info"],
        [warn, "warn"],
        [error, "error"],
        [time, "time"],
        [timeEnd, "timeEnd"],
        [trace, "trace"],
        [dir, "dir"],
        [consoleAssert, "assert"]
      ];
      for (i = 0; i < functions.length; i++) {
        tuple = functions[i];
        f2 = tuple[0];
        name = tuple[1];
        if (!console2[name]) {
          console2[name] = f2;
        }
      }
      var tuple;
      var f2;
      var name;
      var i;
      module.exports = console2;
      function log2() {
      }
      __name(log2, "log");
      function info() {
        console2.log.apply(console2, arguments);
      }
      __name(info, "info");
      function warn() {
        console2.log.apply(console2, arguments);
      }
      __name(warn, "warn");
      function error() {
        console2.warn.apply(console2, arguments);
      }
      __name(error, "error");
      function time(label) {
        times[label] = now();
      }
      __name(time, "time");
      function timeEnd(label) {
        var time2 = times[label];
        if (!time2) {
          throw new Error("No such label: " + label);
        }
        delete times[label];
        var duration = now() - time2;
        console2.log(label + ": " + duration + "ms");
      }
      __name(timeEnd, "timeEnd");
      function trace() {
        var err = new Error();
        err.name = "Trace";
        err.message = util.format.apply(null, arguments);
        console2.error(err.stack);
      }
      __name(trace, "trace");
      function dir(object) {
        console2.log(util.inspect(object) + "\n");
      }
      __name(dir, "dir");
      function consoleAssert(expression) {
        if (!expression) {
          var arr = slice.call(arguments, 1);
          assert.ok(false, util.format.apply(null, arr));
        }
      }
      __name(consoleAssert, "consoleAssert");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/DebugReporter.js
  var require_DebugReporter = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/DebugReporter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DebugReporter = void 0;
      var console2 = require_console_browserify();
      var DebugReporter = class {
        constructor(_extensionName, _extensionVersion, _verbose) {
          this._extensionName = _extensionName;
          this._extensionVersion = _extensionVersion;
          this._verbose = _verbose;
        }
        sendTelemetryErrorEvent(eventName, properties6, measures, _errorProps) {
          try {
            const propertiesString = JSON.stringify(properties6 || {});
            const measuresString = JSON.stringify(measures || {});
            if (this._verbose) {
              const msg = `** TELEMETRY("${this._extensionName}/${eventName}", ${this._extensionVersion}) properties=${propertiesString}, measures=${measuresString}`;
              console2.log(msg);
            }
          } catch (error) {
            console2.error(`ERROR (DebugReporter): ${error}`);
          }
        }
      };
      __name(DebugReporter, "DebugReporter");
      exports.DebugReporter = DebugReporter;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/getPackageInfo.js
  var require_getPackageInfo = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/getPackageInfo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getPackageInfo = void 0;
      var extensionVariables_1 = require_extensionVariables();
      var packageInfo;
      function getPackageInfo(ctx) {
        if (!packageInfo) {
          if (!ctx) {
            ctx = extensionVariables_1.ext.context;
          }
          const packageJson = ctx.extension.packageJSON;
          const extensionName = packageJson.name;
          const extensionVersion = packageJson.version;
          const aiKey = packageJson.aiKey;
          const publisher = packageJson.publisher;
          const bugsUrl = !packageJson.bugs ? void 0 : typeof packageJson.bugs === "string" ? packageJson.bugs : packageJson.bugs.url;
          if (!aiKey) {
            throw new Error("Extension's package.json is missing aiKey");
          }
          if (!extensionName) {
            throw new Error("Extension's package.json is missing name");
          }
          if (!publisher) {
            throw new Error("Extension's package.json is missing publisher");
          }
          if (!extensionVersion) {
            throw new Error("Extension's package.json is missing version");
          }
          const extensionId = `${packageJson.publisher}.${packageJson.name}`;
          packageInfo = { extensionName, extensionVersion, aiKey, extensionId, bugsUrl };
        }
        return packageInfo;
      }
      __name(getPackageInfo, "getPackageInfo");
      exports.getPackageInfo = getPackageInfo;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/createTelemetryReporter.js
  var require_createTelemetryReporter = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/createTelemetryReporter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createTelemetryReporter = void 0;
      var process2 = require_browser();
      var vscode23 = __require("vscode");
      var extension_telemetry_1 = (init_telemetryReporter_web_min(), __toCommonJS(telemetryReporter_web_min_exports));
      var DebugReporter_1 = require_DebugReporter();
      var getPackageInfo_1 = require_getPackageInfo();
      var debugTelemetryEnabled = !/^(false|0)?$/i.test(process2.env.DEBUGTELEMETRY || "");
      var debugTelemetryVerbose = /^(verbose|v)$/i.test(process2.env.DEBUGTELEMETRY || "");
      function createTelemetryReporter(ctx) {
        const { extensionName, extensionVersion, aiKey } = (0, getPackageInfo_1.getPackageInfo)(ctx);
        let newReporter;
        if (debugTelemetryEnabled) {
          console.warn(`${extensionName}: DEBUGTELEMETRY mode enabled (${debugTelemetryVerbose ? "verbose" : "quiet"}) - not sending telemetry`);
          newReporter = new DebugReporter_1.DebugReporter(extensionName, extensionVersion, debugTelemetryVerbose);
        } else {
          const reporter = new extension_telemetry_1.default(extensionName, extensionVersion, aiKey);
          ctx.subscriptions.push(reporter);
          newReporter = reporter;
        }
        newReporter.sendTelemetryErrorEvent("info", { isActivationEvent: "true", product: vscode23.env.appName, language: vscode23.env.language }, void 0, []);
        return newReporter;
      }
      __name(createTelemetryReporter, "createTelemetryReporter");
      exports.createTelemetryReporter = createTelemetryReporter;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/extensionVariables.js
  var require_extensionVariables = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/extensionVariables.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerUIExtensionVariables = exports.ext = void 0;
      var assert = require_assert();
      var vscode_1 = __require("vscode");
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var createTelemetryReporter_1 = require_createTelemetryReporter();
      var localize_1 = require_localize();
      var parseError_1 = require_parseError();
      var UninitializedExtensionVariables = class {
        constructor() {
          this._error = new Error((0, localize_1.localize)("uninitializedError", '"registerUIExtensionVariables" must be called before using the vscode-azureextensionui package.'));
        }
        get context() {
          throw this._error;
        }
        get outputChannel() {
          throw this._error;
        }
        get _internalReporter() {
          throw this._error;
        }
      };
      __name(UninitializedExtensionVariables, "UninitializedExtensionVariables");
      exports.ext = new UninitializedExtensionVariables();
      function registerUIExtensionVariables2(extVars) {
        if (exports.ext === extVars) {
          return;
        }
        assert(extVars.context, "registerUIExtensionVariables: Missing context");
        assert(extVars.outputChannel, "registerUIExtensionVariables: Missing outputChannel");
        exports.ext = Object.assign(extVars, { _internalReporter: (0, createTelemetryReporter_1.createTelemetryReporter)(extVars.context) });
        (0, callWithTelemetryAndErrorHandling_1.registerErrorHandler)(handleEntryNotFound);
      }
      __name(registerUIExtensionVariables2, "registerUIExtensionVariables");
      exports.registerUIExtensionVariables = registerUIExtensionVariables2;
      function handleEntryNotFound(context) {
        return __awaiter6(this, void 0, void 0, function* () {
          if ((0, parseError_1.parseError)(context.error).message === "Entry not found in cache.") {
            context.error = new Error((0, localize_1.localize)("mustReload", "Your VS Code window must be reloaded to perform this action."));
            context.errorHandling.suppressReportIssue = true;
            context.errorHandling.buttons = [
              {
                title: (0, localize_1.localize)("reloadWindow", "Reload Window"),
                callback: () => __awaiter6(this, void 0, void 0, function* () {
                  yield vscode_1.commands.executeCommand("workbench.action.reloadWindow");
                })
              }
            ];
          }
        });
      }
      __name(handleEntryNotFound, "handleEntryNotFound");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/node_modules/escape-string-regexp/index.js
  var require_escape_string_regexp = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/node_modules/escape-string-regexp/index.js"(exports, module) {
      "use strict";
      var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
      module.exports = (string) => {
        if (typeof string !== "string") {
          throw new TypeError("Expected a string");
        }
        return string.replace(matchOperatorsRegex, "\\$&");
      };
    }
  });

  // node_modules/os-browserify/browser.js
  var require_browser2 = __commonJS({
    "node_modules/os-browserify/browser.js"(exports) {
      exports.endianness = function() {
        return "LE";
      };
      exports.hostname = function() {
        if (typeof location !== "undefined") {
          return location.hostname;
        } else
          return "";
      };
      exports.loadavg = function() {
        return [];
      };
      exports.uptime = function() {
        return 0;
      };
      exports.freemem = function() {
        return Number.MAX_VALUE;
      };
      exports.totalmem = function() {
        return Number.MAX_VALUE;
      };
      exports.cpus = function() {
        return [];
      };
      exports.type = function() {
        return "Browser";
      };
      exports.release = function() {
        if (typeof navigator !== "undefined") {
          return navigator.appVersion;
        }
        return "";
      };
      exports.networkInterfaces = exports.getNetworkInterfaces = function() {
        return {};
      };
      exports.arch = function() {
        return "javascript";
      };
      exports.platform = function() {
        return "browser";
      };
      exports.tmpdir = exports.tmpDir = function() {
        return "/tmp";
      };
      exports.EOL = "\n";
      exports.homedir = function() {
        return "/";
      };
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/masking.js
  var require_masking = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/masking.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getRedactedLabel = exports.maskValue = exports.maskUserInfo = exports.callWithMaskHandling = exports.addValuesToMaskFromAzureId = exports.addExtensionValueToMask = exports.resetUsernameMask = void 0;
      var escape2 = require_escape_string_regexp();
      var os3 = require_browser2();
      var parseError_1 = require_parseError();
      var UnmaskedUsernameMaxLength = 3;
      var _extValuesToMask;
      function getExtValuesToMask() {
        if (!_extValuesToMask) {
          _extValuesToMask = [];
        }
        return _extValuesToMask;
      }
      __name(getExtValuesToMask, "getExtValuesToMask");
      var _usernameMask = void 0;
      function getUsernameMask(getUsername) {
        if (_usernameMask === void 0) {
          try {
            const username2 = getUsername();
            if (username2.length <= UnmaskedUsernameMaxLength) {
              _usernameMask = null;
            } else {
              _usernameMask = new RegExp(`\\b${username2}\\b`, "gi");
            }
          } catch (_a7) {
            _usernameMask = null;
          }
        }
        return _usernameMask;
      }
      __name(getUsernameMask, "getUsernameMask");
      function resetUsernameMask() {
        _usernameMask = void 0;
      }
      __name(resetUsernameMask, "resetUsernameMask");
      exports.resetUsernameMask = resetUsernameMask;
      function addExtensionValueToMask(...values) {
        const extValuesToMask = getExtValuesToMask();
        for (const v of values) {
          if (v && !extValuesToMask.includes(v)) {
            extValuesToMask.push(v);
          }
        }
      }
      __name(addExtensionValueToMask, "addExtensionValueToMask");
      exports.addExtensionValueToMask = addExtensionValueToMask;
      function addValuesToMaskFromAzureId(context, id) {
        var _a7;
        const parts = (id || "").toLowerCase().split("/");
        if (parts[1] === "subscriptions" && parts[3] === "resourcegroups") {
          context.valuesToMask.push(parts[2]);
          context.valuesToMask.push(parts[4]);
          if (parts[5] === "providers" && ((_a7 = parts[6]) === null || _a7 === void 0 ? void 0 : _a7.startsWith("microsoft.")) && parts[8]) {
            context.valuesToMask.push(parts[8]);
          }
        }
      }
      __name(addValuesToMaskFromAzureId, "addValuesToMaskFromAzureId");
      exports.addValuesToMaskFromAzureId = addValuesToMaskFromAzureId;
      function callWithMaskHandling(callback, valueToMask) {
        return __awaiter6(this, void 0, void 0, function* () {
          try {
            return yield callback();
          } catch (error) {
            const parsedError = (0, parseError_1.parseError)(error);
            if (parsedError.isUserCancelledError) {
              throw error;
            }
            throw new Error(maskValue(parsedError.message, valueToMask));
          }
        });
      }
      __name(callWithMaskHandling, "callWithMaskHandling");
      exports.callWithMaskHandling = callWithMaskHandling;
      function maskUserInfo(unknownArg, actionValuesToMask, lessAggressive = false, getUsername = () => os3.userInfo().username) {
        let data = String(unknownArg);
        const valuesToMask = actionValuesToMask.concat(getExtValuesToMask()).sort((a, b) => b.length - a.length);
        for (const value of valuesToMask) {
          data = maskValue(data, value);
        }
        if (!lessAggressive) {
          data = data.replace(/\S+@\S+/gi, getRedactedLabel("email"));
          data = data.replace(/\b[0-9a-f\-\:\.]{4,}\b/gi, getRedactedLabel("id"));
        }
        data = data.replace(/[a-z]+:\/\/\S*/gi, getRedactedLabel("url"));
        data = data.replace(/\S+(?<!(?<!\-)\basp)\.(com|org|net)\S*/gi, getRedactedLabel("url"));
        data = data.replace(/\S*(key|token|sig|password|passwd|pwd)[="':\s]+\S*/gi, getRedactedLabel("key"));
        const usernameMask = getUsernameMask(getUsername);
        if (usernameMask) {
          data = data.replace(usernameMask, getRedactedLabel("username"));
        }
        return data;
      }
      __name(maskUserInfo, "maskUserInfo");
      exports.maskUserInfo = maskUserInfo;
      function maskValue(data, valueToMask) {
        if (valueToMask) {
          const formsOfValue = [valueToMask, encodeURIComponent(valueToMask)];
          for (const v of formsOfValue) {
            data = data.replace(new RegExp(escape2(v), "gi"), "---");
          }
        }
        return data;
      }
      __name(maskValue, "maskValue");
      exports.maskValue = maskValue;
      function getRedactedLabel(reason) {
        return `redacted:${reason}`;
      }
      __name(getRedactedLabel, "getRedactedLabel");
      exports.getRedactedLabel = getRedactedLabel;
    }
  });

  // node_modules/dayjs/dayjs.min.js
  var require_dayjs_min = __commonJS({
    "node_modules/dayjs/dayjs.min.js"(exports, module) {
      !function(t, e) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
      }(exports, function() {
        "use strict";
        var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f2 = "month", h2 = "quarter", c = "year", d = "date", l = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t2) {
          var e2 = ["th", "st", "nd", "rd"], n2 = t2 % 100;
          return "[" + t2 + (e2[(n2 - 20) % 10] || e2[n2] || e2[0]) + "]";
        } }, m = /* @__PURE__ */ __name(function(t2, e2, n2) {
          var r2 = String(t2);
          return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
        }, "m"), v = { s: m, z: function(t2) {
          var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
          return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
        }, m: /* @__PURE__ */ __name(function t2(e2, n2) {
          if (e2.date() < n2.date())
            return -t2(n2, e2);
          var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f2), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f2);
          return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
        }, "t"), a: function(t2) {
          return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
        }, p: function(t2) {
          return { M: f2, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h2 }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
        }, u: function(t2) {
          return void 0 === t2;
        } }, g = "en", D = {};
        D[g] = M;
        var p = /* @__PURE__ */ __name(function(t2) {
          return t2 instanceof _;
        }, "p"), S2 = /* @__PURE__ */ __name(function t2(e2, n2, r2) {
          var i2;
          if (!e2)
            return g;
          if ("string" == typeof e2) {
            var s2 = e2.toLowerCase();
            D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
            var u2 = e2.split("-");
            if (!i2 && u2.length > 1)
              return t2(u2[0]);
          } else {
            var a2 = e2.name;
            D[a2] = e2, i2 = a2;
          }
          return !r2 && i2 && (g = i2), i2 || !r2 && g;
        }, "t"), w = /* @__PURE__ */ __name(function(t2, e2) {
          if (p(t2))
            return t2.clone();
          var n2 = "object" == typeof e2 ? e2 : {};
          return n2.date = t2, n2.args = arguments, new _(n2);
        }, "w"), O2 = v;
        O2.l = S2, O2.i = p, O2.w = function(t2, e2) {
          return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
        };
        var _ = function() {
          function M2(t2) {
            this.$L = S2(t2.locale, null, true), this.parse(t2);
          }
          __name(M2, "M");
          var m2 = M2.prototype;
          return m2.parse = function(t2) {
            this.$d = function(t3) {
              var e2 = t3.date, n2 = t3.utc;
              if (null === e2)
                return /* @__PURE__ */ new Date(NaN);
              if (O2.u(e2))
                return /* @__PURE__ */ new Date();
              if (e2 instanceof Date)
                return new Date(e2);
              if ("string" == typeof e2 && !/Z$/i.test(e2)) {
                var r2 = e2.match($2);
                if (r2) {
                  var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                  return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
                }
              }
              return new Date(e2);
            }(t2), this.$x = t2.x || {}, this.init();
          }, m2.init = function() {
            var t2 = this.$d;
            this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
          }, m2.$utils = function() {
            return O2;
          }, m2.isValid = function() {
            return !(this.$d.toString() === l);
          }, m2.isSame = function(t2, e2) {
            var n2 = w(t2);
            return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
          }, m2.isAfter = function(t2, e2) {
            return w(t2) < this.startOf(e2);
          }, m2.isBefore = function(t2, e2) {
            return this.endOf(e2) < w(t2);
          }, m2.$g = function(t2, e2, n2) {
            return O2.u(t2) ? this[e2] : this.set(n2, t2);
          }, m2.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, m2.valueOf = function() {
            return this.$d.getTime();
          }, m2.startOf = function(t2, e2) {
            var n2 = this, r2 = !!O2.u(e2) || e2, h3 = O2.p(t2), l2 = /* @__PURE__ */ __name(function(t3, e3) {
              var i2 = O2.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
              return r2 ? i2 : i2.endOf(a);
            }, "l"), $3 = /* @__PURE__ */ __name(function(t3, e3) {
              return O2.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
            }, "$"), y2 = this.$W, M3 = this.$M, m3 = this.$D, v2 = "set" + (this.$u ? "UTC" : "");
            switch (h3) {
              case c:
                return r2 ? l2(1, 0) : l2(31, 11);
              case f2:
                return r2 ? l2(1, M3) : l2(0, M3 + 1);
              case o:
                var g2 = this.$locale().weekStart || 0, D2 = (y2 < g2 ? y2 + 7 : y2) - g2;
                return l2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
              case a:
              case d:
                return $3(v2 + "Hours", 0);
              case u:
                return $3(v2 + "Minutes", 1);
              case s:
                return $3(v2 + "Seconds", 2);
              case i:
                return $3(v2 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, m2.endOf = function(t2) {
            return this.startOf(t2, false);
          }, m2.$set = function(t2, e2) {
            var n2, o2 = O2.p(t2), h3 = "set" + (this.$u ? "UTC" : ""), l2 = (n2 = {}, n2[a] = h3 + "Date", n2[d] = h3 + "Date", n2[f2] = h3 + "Month", n2[c] = h3 + "FullYear", n2[u] = h3 + "Hours", n2[s] = h3 + "Minutes", n2[i] = h3 + "Seconds", n2[r] = h3 + "Milliseconds", n2)[o2], $3 = o2 === a ? this.$D + (e2 - this.$W) : e2;
            if (o2 === f2 || o2 === c) {
              var y2 = this.clone().set(d, 1);
              y2.$d[l2]($3), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
            } else
              l2 && this.$d[l2]($3);
            return this.init(), this;
          }, m2.set = function(t2, e2) {
            return this.clone().$set(t2, e2);
          }, m2.get = function(t2) {
            return this[O2.p(t2)]();
          }, m2.add = function(r2, h3) {
            var d2, l2 = this;
            r2 = Number(r2);
            var $3 = O2.p(h3), y2 = /* @__PURE__ */ __name(function(t2) {
              var e2 = w(l2);
              return O2.w(e2.date(e2.date() + Math.round(t2 * r2)), l2);
            }, "y");
            if ($3 === f2)
              return this.set(f2, this.$M + r2);
            if ($3 === c)
              return this.set(c, this.$y + r2);
            if ($3 === a)
              return y2(1);
            if ($3 === o)
              return y2(7);
            var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[$3] || 1, m3 = this.$d.getTime() + r2 * M3;
            return O2.w(m3, this);
          }, m2.subtract = function(t2, e2) {
            return this.add(-1 * t2, e2);
          }, m2.format = function(t2) {
            var e2 = this, n2 = this.$locale();
            if (!this.isValid())
              return n2.invalidDate || l;
            var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O2.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f3 = n2.months, h3 = /* @__PURE__ */ __name(function(t3, n3, i3, s3) {
              return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
            }, "h"), c2 = /* @__PURE__ */ __name(function(t3) {
              return O2.s(s2 % 12 || 12, t3, "0");
            }, "c"), d2 = n2.meridiem || function(t3, e3, n3) {
              var r3 = t3 < 12 ? "AM" : "PM";
              return n3 ? r3.toLowerCase() : r3;
            }, $3 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O2.s(a2 + 1, 2, "0"), MMM: h3(n2.monthsShort, a2, f3, 3), MMMM: h3(f3, a2), D: this.$D, DD: O2.s(this.$D, 2, "0"), d: String(this.$W), dd: h3(n2.weekdaysMin, this.$W, o2, 2), ddd: h3(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O2.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O2.s(u2, 2, "0"), s: String(this.$s), ss: O2.s(this.$s, 2, "0"), SSS: O2.s(this.$ms, 3, "0"), Z: i2 };
            return r2.replace(y, function(t3, e3) {
              return e3 || $3[t3] || i2.replace(":", "");
            });
          }, m2.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, m2.diff = function(r2, d2, l2) {
            var $3, y2 = O2.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, v2 = this - M3, g2 = O2.m(this, M3);
            return g2 = ($3 = {}, $3[c] = g2 / 12, $3[f2] = g2, $3[h2] = g2 / 3, $3[o] = (v2 - m3) / 6048e5, $3[a] = (v2 - m3) / 864e5, $3[u] = v2 / n, $3[s] = v2 / e, $3[i] = v2 / t, $3)[y2] || v2, l2 ? g2 : O2.a(g2);
          }, m2.daysInMonth = function() {
            return this.endOf(f2).$D;
          }, m2.$locale = function() {
            return D[this.$L];
          }, m2.locale = function(t2, e2) {
            if (!t2)
              return this.$L;
            var n2 = this.clone(), r2 = S2(t2, e2, true);
            return r2 && (n2.$L = r2), n2;
          }, m2.clone = function() {
            return O2.w(this.$d, this);
          }, m2.toDate = function() {
            return new Date(this.valueOf());
          }, m2.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, m2.toISOString = function() {
            return this.$d.toISOString();
          }, m2.toString = function() {
            return this.$d.toUTCString();
          }, M2;
        }(), T = _.prototype;
        return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f2], ["$y", c], ["$D", d]].forEach(function(t2) {
          T[t2[1]] = function(e2) {
            return this.$g(e2, t2[0], t2[1]);
          };
        }), w.extend = function(t2, e2) {
          return t2.$i || (t2(e2, _, w), t2.$i = true), w;
        }, w.locale = S2, w.isDayjs = p, w.unix = function(t2) {
          return w(1e3 * t2);
        }, w.en = D[g], w.Ls = D, w.p = {}, w;
      });
    }
  });

  // node_modules/dayjs/plugin/relativeTime.js
  var require_relativeTime = __commonJS({
    "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
      !function(r, e) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (r = "undefined" != typeof globalThis ? globalThis : r || self).dayjs_plugin_relativeTime = e();
      }(exports, function() {
        "use strict";
        return function(r, e, t) {
          r = r || {};
          var n = e.prototype, o = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
          function i(r2, e2, t2, o2) {
            return n.fromToBase(r2, e2, t2, o2);
          }
          __name(i, "i");
          t.en.relativeTime = o, n.fromToBase = function(e2, n2, i2, d2, u) {
            for (var f2, a, s, l = i2.$locale().relativeTime || o, h2 = r.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m = h2.length, c = 0; c < m; c += 1) {
              var y = h2[c];
              y.d && (f2 = d2 ? t(e2).diff(i2, y.d, true) : i2.diff(e2, y.d, true));
              var p = (r.rounding || Math.round)(Math.abs(f2));
              if (s = f2 > 0, p <= y.r || !y.r) {
                p <= 1 && c > 0 && (y = h2[c - 1]);
                var v = l[y.l];
                u && (p = u("" + p)), a = "string" == typeof v ? v.replace("%d", p) : v(p, n2, y.l, s);
                break;
              }
            }
            if (n2)
              return a;
            var M = s ? l.future : l.past;
            return "function" == typeof M ? M(a) : M.replace("%s", a);
          }, n.to = function(r2, e2) {
            return i(r2, e2, this, true);
          }, n.from = function(r2, e2) {
            return i(r2, e2, this);
          };
          var d = /* @__PURE__ */ __name(function(r2) {
            return r2.$u ? t.utc() : t();
          }, "d");
          n.toNow = function(r2) {
            return this.to(d(this), r2);
          }, n.fromNow = function(r2) {
            return this.from(d(this), r2);
          };
        };
      });
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/addTreeItemValuesToMask.js
  var require_addTreeItemValuesToMask = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/addTreeItemValuesToMask.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.addTreeItemValuesToMask = void 0;
      var masking_1 = require_masking();
      function addTreeItemValuesToMask(context, treeItem, treeItemSource) {
        (0, masking_1.addValuesToMaskFromAzureId)(context, treeItem.fullId);
        context.telemetry.properties.treeItemSource = treeItemSource;
        let tiToMask = treeItem;
        while (tiToMask) {
          if (!tiToMask.suppressMaskLabel) {
            context.valuesToMask.push(tiToMask.label);
          }
          context.valuesToMask.push(...tiToMask.valuesToMask);
          tiToMask = tiToMask.parent;
        }
      }
      __name(addTreeItemValuesToMask, "addTreeItemValuesToMask");
      exports.addTreeItemValuesToMask = addTreeItemValuesToMask;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/registerCommand.js
  var require_registerCommand = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/registerCommand.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerCommand = void 0;
      var vscode_1 = __require("vscode");
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var extensionVariables_1 = require_extensionVariables();
      var addTreeItemValuesToMask_1 = require_addTreeItemValuesToMask();
      var AzExtTreeItem_1 = require_AzExtTreeItem();
      function registerCommand2(commandId, callback, debounce, telemetryId) {
        let lastClickTime;
        extensionVariables_1.ext.context.subscriptions.push(vscode_1.commands.registerCommand(commandId, (...args) => __awaiter6(this, void 0, void 0, function* () {
          if (debounce) {
            if (debounceCommand(debounce, lastClickTime)) {
              return;
            }
            lastClickTime = Date.now();
          }
          return yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)(telemetryId || commandId, (context) => {
            if (args.length > 0) {
              const firstArg = args[0];
              if (firstArg instanceof AzExtTreeItem_1.AzExtTreeItem) {
                context.telemetry.properties.contextValue = firstArg.contextValue;
              } else if (firstArg instanceof vscode_1.Uri) {
                context.telemetry.properties.contextValue = "Uri";
              }
              for (const arg of args) {
                if (arg instanceof AzExtTreeItem_1.AzExtTreeItem) {
                  (0, addTreeItemValuesToMask_1.addTreeItemValuesToMask)(context, arg, "command");
                }
              }
            }
            return callback(context, ...args);
          });
        })));
      }
      __name(registerCommand2, "registerCommand");
      exports.registerCommand = registerCommand2;
      function debounceCommand(debounce, lastClickTime) {
        if (lastClickTime && lastClickTime + debounce > Date.now()) {
          return true;
        }
        return false;
      }
      __name(debounceCommand, "debounceCommand");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/openUrl.js
  var require_openUrl = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/openUrl.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.openUrl = void 0;
      var vscode_1 = __require("vscode");
      function openUrl6(url) {
        return __awaiter6(this, void 0, void 0, function* () {
          yield vscode_1.env.openExternal(url);
        });
      }
      __name(openUrl6, "openUrl");
      exports.openUrl = openUrl6;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/reportAnIssue.js
  var require_reportAnIssue = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/reportAnIssue.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getReportAnIssueLink = exports.reportAnIssue = exports.maxUrlLength = void 0;
      var os3 = require_browser2();
      var vscode23 = __require("vscode");
      var getPackageInfo_1 = require_getPackageInfo();
      var localize_1 = require_localize();
      var openUrl_1 = require_openUrl();
      exports.maxUrlLength = 2e3;
      function reportAnIssue(issue) {
        return __awaiter6(this, void 0, void 0, function* () {
          const link = yield getReportAnIssueLink(issue);
          yield (0, openUrl_1.openUrl)(link);
        });
      }
      __name(reportAnIssue, "reportAnIssue");
      exports.reportAnIssue = reportAnIssue;
      function getReportAnIssueLink(issue) {
        return __awaiter6(this, void 0, void 0, function* () {
          const { extensionVersion } = (0, getPackageInfo_1.getPackageInfo)();
          const stack = ((issue === null || issue === void 0 ? void 0 : issue.error.stack) || "").replace(/\r\n/g, "\n");
          let body4 = `
<!-- ${(0, localize_1.localize)("reportIssue_removePrivateInfo", "IMPORTANT: Please be sure to remove any private information before submitting.")} -->

${(0, localize_1.localize)("reportIssue_isItConsistent", "Does this occur consistently? <!-- TODO: Type Yes or No -->")}
Repro steps:
<!-- ${(0, localize_1.localize)("reportIssue_enterReproSteps", "TODO: Share the steps needed to reliably reproduce the problem. Please include actual and expected results.")} -->

1.
2.`;
          if (issue) {
            body4 += `

Action: ${issue.callbackId}
Error type: ${issue.error.errorType}
Error Message: ${issue.error.message}
`;
          }
          body4 += `

Version: ${extensionVersion}
OS: ${process.platform}
OS Release: ${os3.release()}
Product: ${vscode23.env.appName}
Product Version: ${vscode23.version}
Language: ${vscode23.env.language}`;
          const details = Object.assign({}, stack ? { "Call Stack": stack } : {}, issue === null || issue === void 0 ? void 0 : issue.issueProperties);
          for (const propName of Object.getOwnPropertyNames(details)) {
            const value = details[propName];
            body4 += createBodyDetail(propName, String(value));
          }
          const simpleLink = createNewIssueLinkFromBody(body4);
          if (simpleLink.length <= exports.maxUrlLength) {
            return simpleLink;
          }
          yield vscode23.env.clipboard.writeText(body4);
          return createNewIssueLinkFromBody((0, localize_1.localize)("pasteIssue", "The issue text was copied to the clipboard.  Please paste it into this window."));
        });
      }
      __name(getReportAnIssueLink, "getReportAnIssueLink");
      exports.getReportAnIssueLink = getReportAnIssueLink;
      function createNewIssueLinkFromBody(issueBody) {
        const { extensionName, bugsUrl } = (0, getPackageInfo_1.getPackageInfo)();
        const baseUrl = bugsUrl || `https://github.com/Microsoft/${extensionName}/issues`;
        return `${baseUrl}/new?body=${encodeURIComponent(issueBody)}`;
      }
      __name(createNewIssueLinkFromBody, "createNewIssueLinkFromBody");
      function createBodyDetail(detailName, detail) {
        return `

<details>
<summary>${detailName}</summary>

\`\`\`
${detail}
\`\`\`

</details>
`;
      }
      __name(createBodyDetail, "createBodyDetail");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/registerReportIssueCommand.js
  var require_registerReportIssueCommand = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/registerReportIssueCommand.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerReportIssueCommand = exports.cacheIssueForCommand = void 0;
      var dayjs = require_dayjs_min();
      var relativeTime = require_relativeTime();
      var localize_1 = require_localize();
      var registerCommand_1 = require_registerCommand();
      var reportAnIssue_1 = require_reportAnIssue();
      var nonNull_1 = require_nonNull();
      dayjs.extend(relativeTime);
      var cachedIssues;
      function cacheIssueForCommand(issue) {
        if (cachedIssues) {
          cachedIssues.push(issue);
          cachedIssues = cachedIssues.filter((i) => {
            return i === issue || i.callbackId !== issue.callbackId || i.error.message !== issue.error.message;
          });
          const maxIssues = 50;
          if (cachedIssues.length > maxIssues) {
            cachedIssues.shift();
          }
        }
      }
      __name(cacheIssueForCommand, "cacheIssueForCommand");
      exports.cacheIssueForCommand = cacheIssueForCommand;
      function registerReportIssueCommand2(commandId) {
        cachedIssues = [];
        (0, registerCommand_1.registerCommand)(commandId, (context) => __awaiter6(this, void 0, void 0, function* () {
          context.errorHandling.suppressDisplay = true;
          context.errorHandling.suppressReportIssue = true;
          cachedIssues = (0, nonNull_1.nonNullValue)(cachedIssues, "cachedIssues");
          if (cachedIssues.length === 0) {
            yield (0, reportAnIssue_1.reportAnIssue)(void 0);
          } else {
            const picks = cachedIssues.reverse().map((i) => {
              return {
                label: i.error.message,
                description: i.error.errorType,
                detail: `${i.callbackId} - ${dayjs(i.time).fromNow()}`,
                data: i
              };
            });
            picks.unshift({
              label: (0, localize_1.localize)("emptyIssue", "$(keyboard) Manually enter error"),
              data: void 0
            });
            const placeHolder = (0, localize_1.localize)("selectError", "Select the error you would like to report");
            const issue = (yield context.ui.showQuickPick(picks, { placeHolder, stepName: "reportIssue", suppressPersistence: true })).data;
            yield (0, reportAnIssue_1.reportAnIssue)(issue);
          }
        }));
      }
      __name(registerReportIssueCommand2, "registerReportIssueCommand");
      exports.registerReportIssueCommand = registerReportIssueCommand2;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/timeout.js
  var require_timeout = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/timeout.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.rejectOnTimeout = exports.valueOnTimeout = void 0;
      var localize_1 = require_localize();
      var TimeoutError = class extends Error {
      };
      __name(TimeoutError, "TimeoutError");
      function valueOnTimeout(timeoutMs, timeoutValue, action) {
        return __awaiter6(this, void 0, void 0, function* () {
          try {
            return yield rejectOnTimeout(timeoutMs, action);
          } catch (err) {
            if (err instanceof TimeoutError) {
              return timeoutValue;
            }
            throw err;
          }
        });
      }
      __name(valueOnTimeout, "valueOnTimeout");
      exports.valueOnTimeout = valueOnTimeout;
      function rejectOnTimeout(timeoutMs, action, callerTimeOutMessage) {
        return __awaiter6(this, void 0, void 0, function* () {
          return yield new Promise((resolve, reject) => __awaiter6(this, void 0, void 0, function* () {
            let timer = setTimeout(() => {
              timer = void 0;
              reject(new TimeoutError(callerTimeOutMessage || (0, localize_1.localize)("timeout", "Execution timed out.")));
            }, timeoutMs);
            let value;
            let error;
            try {
              value = yield action();
              clearTimeout(timer);
              resolve(value);
            } catch (err) {
              error = err;
              clearTimeout(timer);
              reject(error);
            }
          }));
        });
      }
      __name(rejectOnTimeout, "rejectOnTimeout");
      exports.rejectOnTimeout = rejectOnTimeout;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/inputValidation.js
  var require_inputValidation = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/inputValidation.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validOnTimeoutOrException = void 0;
      var timeout_1 = require_timeout();
      var inputValidationTimeoutMs = 2e3;
      function validOnTimeoutOrException(inputValidation, timeoutMs) {
        return __awaiter6(this, void 0, void 0, function* () {
          try {
            timeoutMs || (timeoutMs = inputValidationTimeoutMs);
            return yield (0, timeout_1.valueOnTimeout)(timeoutMs, void 0, inputValidation);
          } catch (error) {
            return void 0;
          }
        });
      }
      __name(validOnTimeoutOrException, "validOnTimeoutOrException");
      exports.validOnTimeoutOrException = validOnTimeoutOrException;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showInputBox.js
  var require_showInputBox = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showInputBox.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.showInputBox = void 0;
      var vscode_1 = __require("vscode");
      var constants_1 = require_constants();
      var errors_1 = require_errors();
      var inputValidation_1 = require_inputValidation();
      var nonNull_1 = require_nonNull();
      var openUrl_1 = require_openUrl();
      function showInputBox(context, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const disposables = [];
          try {
            const inputBox = createInputBox(context, options);
            disposables.push(inputBox);
            let latestValidation = options.validateInput ? Promise.resolve(options.validateInput(inputBox.value)) : Promise.resolve("");
            return yield new Promise((resolve, reject) => {
              disposables.push(inputBox.onDidChangeValue((text) => __awaiter6(this, void 0, void 0, function* () {
                if (options.validateInput) {
                  const validation = Promise.resolve(options.validateInput(text));
                  latestValidation = validation;
                  const message = yield validation;
                  if (validation === latestValidation) {
                    inputBox.validationMessage = message || "";
                  }
                }
              })), inputBox.onDidAccept(() => __awaiter6(this, void 0, void 0, function* () {
                inputBox.enabled = false;
                inputBox.busy = true;
                const validateInputResult = yield latestValidation;
                const asyncValidationResult = options.asyncValidationTask ? yield options.asyncValidationTask(inputBox.value) : void 0;
                if (!validateInputResult && !asyncValidationResult) {
                  resolve(inputBox.value);
                } else if (validateInputResult) {
                  inputBox.validationMessage = validateInputResult;
                } else if (asyncValidationResult) {
                  inputBox.validationMessage = asyncValidationResult;
                }
                inputBox.enabled = true;
                inputBox.busy = false;
              })), inputBox.onDidTriggerButton((btn) => __awaiter6(this, void 0, void 0, function* () {
                if (btn === vscode_1.QuickInputButtons.Back) {
                  reject(new errors_1.GoBackError());
                } else if (btn === constants_1.AzExtQuickInputButtons.LearnMore) {
                  yield (0, openUrl_1.openUrl)((0, nonNull_1.nonNullProp)(options, "learnMoreLink"));
                  context.telemetry.properties.learnMoreStep = context.telemetry.properties.lastStep;
                }
              })), inputBox.onDidHide(() => {
                reject(new errors_1.UserCancelledError());
              }));
              inputBox.show();
            });
          } finally {
            disposables.forEach((d) => {
              d.dispose();
            });
          }
        });
      }
      __name(showInputBox, "showInputBox");
      exports.showInputBox = showInputBox;
      function createInputBox(context, options) {
        var _a7;
        const inputBox = vscode_1.window.createInputBox();
        const wizard = context.ui.wizard;
        if (wizard && wizard.showTitle) {
          inputBox.title = wizard.title;
          if (!wizard.hideStepCount && wizard.title) {
            inputBox.step = wizard.currentStep;
            inputBox.totalSteps = wizard.totalSteps;
          }
        }
        const buttons = [];
        if (wizard === null || wizard === void 0 ? void 0 : wizard.showBackButton) {
          buttons.push(vscode_1.QuickInputButtons.Back);
        }
        if (options.learnMoreLink) {
          buttons.push(constants_1.AzExtQuickInputButtons.LearnMore);
        }
        inputBox.buttons = buttons;
        if (options.ignoreFocusOut === void 0) {
          options.ignoreFocusOut = true;
        }
        const validateInput = options.validateInput;
        if (validateInput) {
          options.validateInput = (v) => __awaiter6(this, void 0, void 0, function* () {
            return (0, inputValidation_1.validOnTimeoutOrException)(() => __awaiter6(this, void 0, void 0, function* () {
              return yield validateInput(v);
            }));
          });
        }
        if (!inputBox.password) {
          inputBox.value = (wizard === null || wizard === void 0 ? void 0 : wizard.getCachedInputBoxValue()) || options.value || "";
        }
        inputBox.ignoreFocusOut = !!options.ignoreFocusOut;
        inputBox.password = !!options.password;
        inputBox.placeholder = options.placeHolder;
        inputBox.prompt = options.prompt;
        (_a7 = inputBox.title) !== null && _a7 !== void 0 ? _a7 : inputBox.title = options.title;
        return inputBox;
      }
      __name(createInputBox, "createInputBox");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showOpenDialog.js
  var require_showOpenDialog = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showOpenDialog.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.showOpenDialog = void 0;
      var vscode_1 = __require("vscode");
      var errors_1 = require_errors();
      function showOpenDialog(options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const result = yield vscode_1.window.showOpenDialog(options);
          if (result === void 0 || result.length === 0) {
            throw new errors_1.UserCancelledError();
          } else {
            return result;
          }
        });
      }
      __name(showOpenDialog, "showOpenDialog");
      exports.showOpenDialog = showOpenDialog;
    }
  });

  // polyfills/empty.js
  var empty_exports = {};
  __export(empty_exports, {
    default: () => empty_default
  });
  var empty_default;
  var init_empty = __esm({
    "polyfills/empty.js"() {
      empty_default = {};
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/randomUtils.js
  var require_randomUtils = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/randomUtils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.randomUtils = void 0;
      var crypto2 = (init_empty(), __toCommonJS(empty_exports));
      var randomUtils;
      (function(randomUtils2) {
        function getPseudononymousStringHash(s, encoding = "base64") {
          return crypto2.createHash("sha256").update(s).digest(encoding);
        }
        __name(getPseudononymousStringHash, "getPseudononymousStringHash");
        randomUtils2.getPseudononymousStringHash = getPseudononymousStringHash;
        function getRandomHexString(length = 6) {
          const buffer = crypto2.randomBytes(Math.ceil(length / 2));
          return buffer.toString("hex").slice(0, length);
        }
        __name(getRandomHexString, "getRandomHexString");
        randomUtils2.getRandomHexString = getRandomHexString;
        function getRandomInteger(minimumInclusive, maximumExclusive) {
          if (maximumExclusive <= minimumInclusive) {
            throw new Error(`Maximum must be strictly greater than minimum`);
          }
          return Math.floor(Math.random() * (maximumExclusive - minimumInclusive)) + minimumInclusive;
        }
        __name(getRandomInteger, "getRandomInteger");
        randomUtils2.getRandomInteger = getRandomInteger;
      })(randomUtils = exports.randomUtils || (exports.randomUtils = {}));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showQuickPick.js
  var require_showQuickPick = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showQuickPick.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createQuickPickItems = exports.createQuickPick = exports.showQuickPick = void 0;
      var vscode_1 = __require("vscode");
      var constants_1 = require_constants();
      var errors_1 = require_errors();
      var extensionVariables_1 = require_extensionVariables();
      var localize_1 = require_localize();
      var nonNull_1 = require_nonNull();
      var openUrl_1 = require_openUrl();
      var randomUtils_1 = require_randomUtils();
      function showQuickPick(context, picks, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const disposables = [];
          try {
            const quickPick = createQuickPick(context, options);
            disposables.push(quickPick);
            const recentlyUsedKey = getRecentlyUsedKey(options);
            const groups = [];
            const result = yield new Promise((resolve, reject) => __awaiter6(this, void 0, void 0, function* () {
              disposables.push(quickPick.onDidAccept(() => __awaiter6(this, void 0, void 0, function* () {
                try {
                  if (options.canPickMany) {
                    resolve(Array.from(quickPick.selectedItems));
                  } else {
                    const selectedItem = quickPick.selectedItems[0];
                    if (selectedItem) {
                      if (selectedItem.onPicked) {
                        yield selectedItem.onPicked();
                      } else {
                        resolve(selectedItem);
                      }
                    }
                  }
                } catch (error) {
                  reject(error);
                }
              })), quickPick.onDidTriggerButton((btn) => __awaiter6(this, void 0, void 0, function* () {
                if (btn === vscode_1.QuickInputButtons.Back) {
                  reject(new errors_1.GoBackError());
                } else if (btn === constants_1.AzExtQuickInputButtons.LearnMore) {
                  yield (0, openUrl_1.openUrl)((0, nonNull_1.nonNullProp)(options, "learnMoreLink"));
                  context.telemetry.properties.learnMoreStep = context.telemetry.properties.lastStep;
                }
              })), quickPick.onDidHide(() => {
                reject(new errors_1.UserCancelledError());
              }));
              quickPick.busy = true;
              quickPick.enabled = false;
              quickPick.show();
              try {
                quickPick.items = yield createQuickPickItems(picks, options, groups, recentlyUsedKey);
                if (shouldDisplayGroups(groups)) {
                  quickPick.activeItems = [groups[0].picks[0]];
                }
                if (options.canPickMany && options.isPickSelected) {
                  quickPick.selectedItems = quickPick.items.filter((p) => options.isPickSelected(p));
                }
                quickPick.placeholder = options.placeHolder;
                quickPick.busy = false;
                quickPick.enabled = true;
              } catch (err) {
                reject(err);
              }
            }));
            if (recentlyUsedKey && !Array.isArray(result) && !result.suppressPersistence) {
              yield extensionVariables_1.ext.context.globalState.update(recentlyUsedKey, getRecentlyUsedValue(result));
            }
            return result;
          } finally {
            disposables.forEach((d) => {
              d.dispose();
            });
          }
        });
      }
      __name(showQuickPick, "showQuickPick");
      exports.showQuickPick = showQuickPick;
      function createQuickPick(context, options) {
        const quickPick = vscode_1.window.createQuickPick();
        const wizard = context.ui.wizard;
        if (wizard && wizard.showTitle) {
          quickPick.title = wizard.title;
          if (!wizard.hideStepCount && wizard.title) {
            quickPick.step = wizard.currentStep;
            quickPick.totalSteps = wizard.totalSteps;
          }
        }
        const buttons = [];
        if (wizard === null || wizard === void 0 ? void 0 : wizard.showBackButton) {
          buttons.push(vscode_1.QuickInputButtons.Back);
        }
        if (options.learnMoreLink) {
          buttons.push(constants_1.AzExtQuickInputButtons.LearnMore);
        }
        quickPick.buttons = buttons;
        if (options.ignoreFocusOut === void 0) {
          options.ignoreFocusOut = true;
        }
        if (options.canPickMany && options.placeHolder) {
          options.placeHolder += (0, localize_1.localize)("canPickManyInstructions", " (Press 'Space' to select and 'Enter' to confirm)");
        }
        quickPick.placeholder = options.loadingPlaceHolder || options.placeHolder;
        quickPick.ignoreFocusOut = !!options.ignoreFocusOut;
        quickPick.matchOnDescription = !!options.matchOnDescription;
        quickPick.matchOnDetail = !!options.matchOnDetail;
        quickPick.canSelectMany = !!options.canPickMany;
        return quickPick;
      }
      __name(createQuickPick, "createQuickPick");
      exports.createQuickPick = createQuickPick;
      function getRecentlyUsedKey(options) {
        let recentlyUsedKey;
        const unhashedKey = options.id || options.placeHolder;
        if (unhashedKey && !options.canPickMany) {
          recentlyUsedKey = `showQuickPick.${randomUtils_1.randomUtils.getPseudononymousStringHash(unhashedKey)}`;
        }
        return recentlyUsedKey;
      }
      __name(getRecentlyUsedKey, "getRecentlyUsedKey");
      function createQuickPickItems(picks, options, groups, recentlyUsedKey, globalState = void 0) {
        return __awaiter6(this, void 0, void 0, function* () {
          picks = yield picks;
          globalState !== null && globalState !== void 0 ? globalState : globalState = extensionVariables_1.ext.context.globalState;
          picks = bumpHighPriorityAndRecentlyUsed(picks, globalState, !!options.suppressPersistence, recentlyUsedKey);
          if (picks.length === 0) {
            if (options.noPicksMessage) {
              picks.push({ label: options.noPicksMessage, suppressPersistence: true, onPicked: () => __awaiter6(this, void 0, void 0, function* () {
              }) });
            }
            return picks;
          } else if (!options.enableGrouping) {
            return picks;
          } else {
            if (options.canPickMany) {
              throw new Error('Internal error: "canPickMany" and "enableGrouping" are not supported at the same time.');
            }
            for (const pick of picks) {
              const groupName = pick.group;
              const group = groups.find((g) => g.name === groupName);
              if (group) {
                group.picks.push(pick);
              } else {
                groups.push({ name: groupName, picks: [pick] });
              }
            }
            return getGroupedPicks(groups);
          }
        });
      }
      __name(createQuickPickItems, "createQuickPickItems");
      exports.createQuickPickItems = createQuickPickItems;
      function bumpHighPriorityAndRecentlyUsed(picks, globalState, suppressPersistance, recentlyUsedKey) {
        const recentlyUsedValue = suppressPersistance || !recentlyUsedKey ? void 0 : globalState.get(recentlyUsedKey);
        let recentlyUsedIndex = -1;
        if (recentlyUsedValue) {
          recentlyUsedIndex = picks.findIndex((p) => getRecentlyUsedValue(p) === recentlyUsedValue);
          if (recentlyUsedIndex >= 0) {
            const recentlyUsedItem = picks[recentlyUsedIndex];
            if (!recentlyUsedItem.suppressPersistence) {
              const recentlyUsed = (0, localize_1.localize)("recentlyUsed", "(recently used)");
              if (!recentlyUsedItem.description) {
                recentlyUsedItem.description = recentlyUsed;
              } else if (!recentlyUsedItem.description.includes(recentlyUsed)) {
                recentlyUsedItem.description = `${recentlyUsedItem.description} ${recentlyUsed}`;
              }
            } else {
              recentlyUsedIndex = -1;
            }
          }
        }
        return stableSortPicks(picks, recentlyUsedIndex);
      }
      __name(bumpHighPriorityAndRecentlyUsed, "bumpHighPriorityAndRecentlyUsed");
      function stableSortPicks(picks, recentlyUsedIndex) {
        function getPriorityAsNumber(pick, index) {
          switch (pick.priority) {
            case "highest":
              return recentlyUsedIndex === index ? 0 : 1;
            case "normal":
            default:
              return recentlyUsedIndex === index ? 2 : 3;
          }
        }
        __name(getPriorityAsNumber, "getPriorityAsNumber");
        const sortableFacade = picks.map((pick, index) => [index, getPriorityAsNumber(pick, index)]);
        sortableFacade.sort((a, b) => a[1] - b[1]);
        const sortedPicks = sortableFacade.map((item) => picks[item[0]]);
        return sortedPicks;
      }
      __name(stableSortPicks, "stableSortPicks");
      function getGroupedPicks(groups) {
        let picks = [];
        if (shouldDisplayGroups(groups)) {
          for (const group of groups) {
            if (!group.name) {
              picks.push(...group.picks);
            } else {
              picks.push({
                label: group.name,
                kind: vscode_1.QuickPickItemKind.Separator,
                data: group
              });
              picks.push(...group.picks);
            }
          }
        } else {
          picks = picks.concat(...groups.map((g) => g.picks));
        }
        return picks;
      }
      __name(getGroupedPicks, "getGroupedPicks");
      function shouldDisplayGroups(groups) {
        return groups.filter((g) => g.name).length > 1;
      }
      __name(shouldDisplayGroups, "shouldDisplayGroups");
      function getRecentlyUsedValue(item) {
        return randomUtils_1.randomUtils.getPseudononymousStringHash(item.id || item.label);
      }
      __name(getRecentlyUsedValue, "getRecentlyUsedValue");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showWarningMessage.js
  var require_showWarningMessage = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/userInput/showWarningMessage.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.showWarningMessage = void 0;
      var vscode_1 = __require("vscode");
      var DialogResponses_1 = require_DialogResponses();
      var errors_1 = require_errors();
      var localize_1 = require_localize();
      var openUrl_1 = require_openUrl();
      function showWarningMessage(context, message, ...args) {
        var _a7;
        return __awaiter6(this, void 0, void 0, function* () {
          const learnMoreLink = args[0] && args[0].learnMoreLink;
          if (learnMoreLink) {
            args.push(DialogResponses_1.DialogResponses.learnMore);
          }
          const back = { title: (0, localize_1.localize)("back", "Back") };
          if ((_a7 = context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.showBackButton) {
            args.push(back);
          }
          while (true) {
            const result = yield vscode_1.window.showWarningMessage(message, ...args);
            if (learnMoreLink && result === DialogResponses_1.DialogResponses.learnMore) {
              context.telemetry.properties.learnMoreStep = context.telemetry.properties.lastStep;
              yield (0, openUrl_1.openUrl)(learnMoreLink);
            } else if (result === void 0 || result === DialogResponses_1.DialogResponses.cancel) {
              throw new errors_1.UserCancelledError();
            } else if (result === back) {
              throw new errors_1.GoBackError();
            } else {
              return result;
            }
          }
        });
      }
      __name(showWarningMessage, "showWarningMessage");
      exports.showWarningMessage = showWarningMessage;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/userInput/AzExtUserInput.js
  var require_AzExtUserInput = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/userInput/AzExtUserInput.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtUserInput = void 0;
      var vscode_1 = __require("vscode");
      var errors_1 = require_errors();
      var showInputBox_1 = require_showInputBox();
      var showOpenDialog_1 = require_showOpenDialog();
      var showQuickPick_1 = require_showQuickPick();
      var showWarningMessage_1 = require_showWarningMessage();
      var AzExtUserInput = class {
        constructor(context) {
          this._onDidFinishPromptEmitter = new vscode_1.EventEmitter();
          this._isPrompting = false;
          this._context = context;
        }
        get onDidFinishPrompt() {
          return this._onDidFinishPromptEmitter.event;
        }
        get isPrompting() {
          return this._isPrompting;
        }
        showQuickPick(picks, options) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            addStepTelemetry(this._context, options.stepName, "quickPick", options.placeHolder);
            if ((_a7 = this._context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.cancellationToken.isCancellationRequested) {
              throw new errors_1.UserCancelledError();
            }
            try {
              this._isPrompting = true;
              const result = yield (0, showQuickPick_1.showQuickPick)(this._context, picks, options);
              this._onDidFinishPromptEmitter.fire({ value: result });
              return result;
            } finally {
              this._isPrompting = false;
            }
          });
        }
        showInputBox(options) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            addStepTelemetry(this._context, options.stepName, "inputBox", options.prompt);
            if ((_a7 = this._context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.cancellationToken.isCancellationRequested) {
              throw new errors_1.UserCancelledError();
            }
            try {
              this._isPrompting = true;
              const result = yield (0, showInputBox_1.showInputBox)(this._context, options);
              this._onDidFinishPromptEmitter.fire({
                value: result,
                matchesDefault: result === options.value
              });
              return result;
            } finally {
              this._isPrompting = false;
            }
          });
        }
        showOpenDialog(options) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            addStepTelemetry(this._context, options.stepName, "openDialog", options.title);
            if ((_a7 = this._context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.cancellationToken.isCancellationRequested) {
              throw new errors_1.UserCancelledError();
            }
            try {
              this._isPrompting = true;
              const result = yield (0, showOpenDialog_1.showOpenDialog)(options);
              this._onDidFinishPromptEmitter.fire({ value: result });
              return result;
            } finally {
              this._isPrompting = false;
            }
          });
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        showWarningMessage(message, ...args) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            let stepName;
            const firstArg = args[0];
            if (typeof firstArg === "object" && firstArg && "stepName" in firstArg) {
              stepName = firstArg.stepName;
            }
            addStepTelemetry(this._context, stepName, "warningMessage", message);
            if ((_a7 = this._context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.cancellationToken.isCancellationRequested) {
              throw new errors_1.UserCancelledError();
            }
            try {
              this._isPrompting = true;
              const result = yield (0, showWarningMessage_1.showWarningMessage)(this._context, message, ...args);
              this._onDidFinishPromptEmitter.fire({ value: result });
              return result;
            } finally {
              this._isPrompting = false;
            }
          });
        }
      };
      __name(AzExtUserInput, "AzExtUserInput");
      exports.AzExtUserInput = AzExtUserInput;
      function addStepTelemetry(context, stepName, stepType, description) {
        var _a7;
        if (!stepName) {
          stepName = (_a7 = context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.currentStepId;
        }
        if (!stepName) {
          stepName = description ? `${stepType}|${convertToStepName(description)}` : stepType;
        }
        context.telemetry.properties.lastStep = stepName;
      }
      __name(addStepTelemetry, "addStepTelemetry");
      function convertToStepName(prompt) {
        return prompt.replace(/\s/g, "").slice(0, 20);
      }
      __name(convertToStepName, "convertToStepName");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/textStrings.js
  var require_textStrings = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/textStrings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.countLines = exports.limitLines = void 0;
      function limitLines(s, n) {
        const match = s.match(new RegExp(`((\\r\\n|\\n)?.*$){0,${n}}`, "m"));
        return match ? match[0] : "";
      }
      __name(limitLines, "limitLines");
      exports.limitLines = limitLines;
      function countLines(s) {
        if (!s) {
          return 0;
        }
        const match = s.match(/(\r\n|\n)/g);
        return match ? match.length + 1 : 1;
      }
      __name(countLines, "countLines");
      exports.countLines = countLines;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/callWithTelemetryAndErrorHandling.js
  var require_callWithTelemetryAndErrorHandling = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/callWithTelemetryAndErrorHandling.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerTelemetryHandler = exports.registerErrorHandler = exports.registerOnActionStartHandler = exports.callWithTelemetryAndErrorHandling = exports.callWithTelemetryAndErrorHandlingSync = void 0;
      var vscode_1 = __require("vscode");
      var DialogResponses_1 = require_DialogResponses();
      var extensionVariables_1 = require_extensionVariables();
      var localize_1 = require_localize();
      var masking_1 = require_masking();
      var parseError_1 = require_parseError();
      var registerReportIssueCommand_1 = require_registerReportIssueCommand();
      var reportAnIssue_1 = require_reportAnIssue();
      var AzExtUserInput_1 = require_AzExtUserInput();
      var textStrings_1 = require_textStrings();
      var maxStackLines = 3;
      function initContext(callbackId) {
        const start = Date.now();
        const context = {
          telemetry: {
            properties: {
              isActivationEvent: "false",
              lastStep: "",
              result: "Succeeded",
              stack: "",
              error: "",
              errorMessage: ""
            },
            measurements: {
              duration: 0
            },
            suppressIfSuccessful: false,
            suppressAll: false
          },
          errorHandling: {
            suppressDisplay: false,
            rethrow: false,
            issueProperties: {}
          },
          ui: void 0,
          valuesToMask: []
        };
        context.ui = new AzExtUserInput_1.AzExtUserInput(context);
        const handlerContext = Object.assign(context, { callbackId });
        for (const handler of Object.values(onActionStartHandlers)) {
          try {
            handler(handlerContext);
          } catch (_a7) {
          }
        }
        return [start, context];
      }
      __name(initContext, "initContext");
      function callWithTelemetryAndErrorHandlingSync4(callbackId, callback) {
        const [start, context] = initContext(callbackId);
        try {
          return callback(context);
        } catch (error) {
          handleError2(context, callbackId, error);
          return void 0;
        } finally {
          handleTelemetry(context, callbackId, start);
        }
      }
      __name(callWithTelemetryAndErrorHandlingSync4, "callWithTelemetryAndErrorHandlingSync");
      exports.callWithTelemetryAndErrorHandlingSync = callWithTelemetryAndErrorHandlingSync4;
      function callWithTelemetryAndErrorHandling12(callbackId, callback) {
        return __awaiter6(this, void 0, void 0, function* () {
          const [start, context] = initContext(callbackId);
          try {
            return yield Promise.resolve(callback(context));
          } catch (error) {
            handleError2(context, callbackId, error);
            return void 0;
          } finally {
            handleTelemetry(context, callbackId, start);
          }
        });
      }
      __name(callWithTelemetryAndErrorHandling12, "callWithTelemetryAndErrorHandling");
      exports.callWithTelemetryAndErrorHandling = callWithTelemetryAndErrorHandling12;
      var onActionStartHandlers = {};
      var errorHandlers = {};
      var telemetryHandlers = {};
      function registerOnActionStartHandler(handler) {
        return registerHandler(handler, onActionStartHandlers);
      }
      __name(registerOnActionStartHandler, "registerOnActionStartHandler");
      exports.registerOnActionStartHandler = registerOnActionStartHandler;
      function registerErrorHandler2(handler) {
        return registerHandler(handler, errorHandlers);
      }
      __name(registerErrorHandler2, "registerErrorHandler");
      exports.registerErrorHandler = registerErrorHandler2;
      function registerTelemetryHandler(handler) {
        return registerHandler(handler, telemetryHandlers);
      }
      __name(registerTelemetryHandler, "registerTelemetryHandler");
      exports.registerTelemetryHandler = registerTelemetryHandler;
      var handlerCount = 0;
      function registerHandler(handler, handlers) {
        handlerCount += 1;
        const id = handlerCount;
        handlers[id] = handler;
        return {
          dispose: () => {
            delete handlers[id];
          }
        };
      }
      __name(registerHandler, "registerHandler");
      function handleError2(context, callbackId, error) {
        let rethrow = false;
        const errorContext = Object.assign(context, { error, callbackId });
        try {
          for (const handler of Object.values(errorHandlers)) {
            try {
              handler(errorContext);
            } catch (_a7) {
            }
          }
          const errorData = (0, parseError_1.parseError)(errorContext.error);
          const unMaskedMessage = errorData.message;
          errorData.message = (0, masking_1.maskUserInfo)(errorData.message, context.valuesToMask);
          if (errorData.stepName) {
            context.telemetry.properties.lastStep = errorData.stepName;
          }
          if (errorData.isUserCancelledError) {
            context.telemetry.properties.result = "Canceled";
            context.errorHandling.suppressDisplay = true;
            context.errorHandling.rethrow = false;
          } else {
            context.telemetry.properties.result = "Failed";
            context.telemetry.properties.error = errorData.errorType;
            context.telemetry.properties.errorMessage = errorData.message;
            context.telemetry.properties.stack = errorData.stack ? (0, textStrings_1.limitLines)(errorData.stack, maxStackLines) : void 0;
            if (context.telemetry.suppressIfSuccessful || context.telemetry.suppressAll) {
              context.telemetry.properties.suppressTelemetry = "true";
            }
          }
          const issue = {
            callbackId: errorContext.callbackId,
            error: errorData,
            issueProperties: context.errorHandling.issueProperties,
            time: Date.now()
          };
          if (!context.errorHandling.suppressDisplay || context.errorHandling.forceIncludeInReportIssueCommand) {
            (0, registerReportIssueCommand_1.cacheIssueForCommand)(issue);
          }
          if (!context.errorHandling.suppressDisplay) {
            extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("outputError", "Error: {0}", unMaskedMessage));
            let message;
            if (unMaskedMessage.includes("\n")) {
              extensionVariables_1.ext.outputChannel.show();
              message = (0, localize_1.localize)("multilineError", "An error has occured. Check output window for more details.");
            } else {
              message = unMaskedMessage;
            }
            const items = [];
            if (!context.errorHandling.suppressReportIssue) {
              items.push(DialogResponses_1.DialogResponses.reportAnIssue);
            }
            if (context.errorHandling.buttons) {
              items.push(...context.errorHandling.buttons);
            }
            void vscode_1.window.showErrorMessage(message, ...items).then((result) => __awaiter6(this, void 0, void 0, function* () {
              if (result === DialogResponses_1.DialogResponses.reportAnIssue) {
                yield (0, reportAnIssue_1.reportAnIssue)(issue);
              } else if (result && "callback" in result) {
                yield result.callback();
              }
            }));
          }
          if (context.errorHandling.rethrow) {
            rethrow = true;
            throw errorContext.error;
          }
        } catch (internalError) {
          if (rethrow) {
            throw internalError;
          } else {
            sendHandlerFailedEvent(errorContext, "error");
          }
        }
      }
      __name(handleError2, "handleError");
      function handleTelemetry(context, callbackId, start) {
        const handlerContext = Object.assign(context, { callbackId });
        try {
          for (const handler of Object.values(telemetryHandlers)) {
            try {
              handler(handlerContext);
            } catch (_a7) {
            }
          }
          if (shouldSendTelemtry(context)) {
            const end = Date.now();
            context.telemetry.measurements.duration = (end - start) / 1e3;
            context.valuesToMask = context.valuesToMask.filter((v, index) => context.valuesToMask.indexOf(v) === index);
            for (const [key, value] of Object.entries(context.telemetry.properties)) {
              if (value) {
                if (/(error|exception)/i.test(key)) {
                  context.telemetry.properties[key] = context.telemetry.maskEntireErrorMessage ? (0, masking_1.getRedactedLabel)("action") : (0, masking_1.maskUserInfo)(value, context.valuesToMask);
                } else {
                  context.telemetry.properties[key] = (0, masking_1.maskUserInfo)(
                    value,
                    context.valuesToMask,
                    true
                    /* lessAggressive */
                  );
                }
              }
            }
            extensionVariables_1.ext._internalReporter.sendTelemetryErrorEvent(getTelemetryEventName(handlerContext), context.telemetry.properties, context.telemetry.measurements);
          }
        } catch (_b2) {
          sendHandlerFailedEvent(handlerContext, "telemetry");
        }
      }
      __name(handleTelemetry, "handleTelemetry");
      function shouldSendTelemtry(context) {
        return !context.telemetry.suppressAll && !(context.telemetry.suppressIfSuccessful && context.telemetry.properties.result === "Succeeded");
      }
      __name(shouldSendTelemtry, "shouldSendTelemtry");
      function sendHandlerFailedEvent(context, handlerName) {
        try {
          if (shouldSendTelemtry(context)) {
            extensionVariables_1.ext._internalReporter.sendTelemetryErrorEvent(getTelemetryEventName(context), { handlerFailed: handlerName });
          }
        } catch (_a7) {
        }
      }
      __name(sendHandlerFailedEvent, "sendHandlerFailedEvent");
      function getTelemetryEventName(context) {
        return context.telemetry.eventVersion ? `${context.callbackId}V${context.telemetry.eventVersion}` : context.callbackId;
      }
      __name(getTelemetryEventName, "getTelemetryEventName");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/AzExtTreeFileSystem.js
  var require_AzExtTreeFileSystem = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/AzExtTreeFileSystem.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtTreeFileSystem = void 0;
      var querystring_1 = require_querystring_es3();
      var vscode_1 = __require("vscode");
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var localize_1 = require_localize();
      var nonNull_1 = require_nonNull();
      var unsupportedError = new Error((0, localize_1.localize)("notSupported", "This operation is not supported."));
      var AzExtTreeFileSystem2 = class {
        constructor() {
          this.itemCache = /* @__PURE__ */ new Map();
          this._emitter = new vscode_1.EventEmitter();
          this._bufferedEvents = [];
        }
        get onDidChangeFile() {
          return this._emitter.event;
        }
        showTextDocument(item, options) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = this.getUriFromItem(item);
            this.itemCache.set(item.id, item);
            yield vscode_1.window.showTextDocument(uri, options);
          });
        }
        watch() {
          return new vscode_1.Disposable(() => {
          });
        }
        stat(uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            return (yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)("stat", (context) => __awaiter6(this, void 0, void 0, function* () {
              context.telemetry.suppressIfSuccessful = true;
              const item = yield this.lookup(context, uri);
              return yield this.statImpl(context, item, uri);
            }))) || { type: vscode_1.FileType.Unknown, ctime: 0, mtime: 0, size: 0 };
          });
        }
        readFile(uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            return (yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)("readFile", (context) => __awaiter6(this, void 0, void 0, function* () {
              context.errorHandling.rethrow = true;
              context.errorHandling.suppressDisplay = true;
              context.telemetry.eventVersion = 2;
              const item = yield this.lookup(context, uri);
              return yield this.readFileImpl(context, item, uri);
            }))) || Buffer.from("");
          });
        }
        writeFile(uri, content) {
          return __awaiter6(this, void 0, void 0, function* () {
            yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)("writeFile", (context) => __awaiter6(this, void 0, void 0, function* () {
              var _a7;
              const item = yield this.lookup(context, uri);
              yield this.writeFileImpl(context, item, content, uri);
              yield (_a7 = item.refresh) === null || _a7 === void 0 ? void 0 : _a7.call(item, context);
            }));
          });
        }
        readDirectory(_uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            throw unsupportedError;
          });
        }
        createDirectory(_uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            throw unsupportedError;
          });
        }
        delete(_uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            throw unsupportedError;
          });
        }
        rename(_uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            throw unsupportedError;
          });
        }
        /**
         * Uses a simple buffer to group events that occur within a few milliseconds of each other
         * Adapted from https://github.com/microsoft/vscode-extension-samples/blob/master/fsprovider-sample/src/fileSystemProvider.ts
         */
        fireSoon(...events) {
          this._bufferedEvents.push(...events.map((e) => {
            return {
              type: e.type,
              uri: this.getUriFromItem(e.item)
            };
          }));
          if (this._fireSoonHandle) {
            clearTimeout(this._fireSoonHandle);
          }
          this._fireSoonHandle = setTimeout(() => {
            this._emitter.fire(this._bufferedEvents);
            this._bufferedEvents.length = 0;
          }, 5);
        }
        findItem(query) {
          return this.itemCache.get(query.id);
        }
        getUriFromItem(item) {
          const data = {
            filePath: this.getFilePath(item),
            query: {
              id: item.id
            }
          };
          const query = (0, querystring_1.stringify)(data.query);
          const filePath = encodeURIComponent(data.filePath);
          return vscode_1.Uri.parse(`${this.scheme}:///${filePath}?${query}`);
        }
        lookup(context, uri) {
          return __awaiter6(this, void 0, void 0, function* () {
            const item = this.findItem(this.getQueryFromUri(uri));
            if (!item) {
              context.telemetry.suppressAll = true;
              context.errorHandling.rethrow = true;
              context.errorHandling.suppressDisplay = true;
              throw vscode_1.FileSystemError.FileNotFound(uri);
            } else {
              return item;
            }
          });
        }
        getQueryFromUri(uri) {
          const query = (0, querystring_1.parse)(uri.query);
          const id = (0, nonNull_1.nonNullProp)(query, "id");
          if (typeof id === "string") {
            return Object.assign(query, { id });
          } else {
            throw new Error('Internal Error: Expected "id" to be type string.');
          }
        }
      };
      __name(AzExtTreeFileSystem2, "AzExtTreeFileSystem");
      exports.AzExtTreeFileSystem = AzExtTreeFileSystem2;
    }
  });

  // node_modules/semver/internal/constants.js
  var require_constants2 = __commonJS({
    "node_modules/semver/internal/constants.js"(exports, module) {
      var SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256;
      var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
      9007199254740991;
      var MAX_SAFE_COMPONENT_LENGTH = 16;
      module.exports = {
        SEMVER_SPEC_VERSION,
        MAX_LENGTH,
        MAX_SAFE_INTEGER,
        MAX_SAFE_COMPONENT_LENGTH
      };
    }
  });

  // node_modules/semver/internal/debug.js
  var require_debug = __commonJS({
    "node_modules/semver/internal/debug.js"(exports, module) {
      var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
      };
      module.exports = debug;
    }
  });

  // node_modules/semver/internal/re.js
  var require_re = __commonJS({
    "node_modules/semver/internal/re.js"(exports, module) {
      var { MAX_SAFE_COMPONENT_LENGTH } = require_constants2();
      var debug = require_debug();
      exports = module.exports = {};
      var re2 = exports.re = [];
      var src = exports.src = [];
      var t = exports.t = {};
      var R2 = 0;
      var createToken = /* @__PURE__ */ __name((name, value, isGlobal) => {
        const index = R2++;
        debug(name, index, value);
        t[name] = index;
        src[index] = value;
        re2[index] = new RegExp(value, isGlobal ? "g" : void 0);
      }, "createToken");
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
      createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
      createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
      createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
      createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
      createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
      createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
      createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
      createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
      createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
      createToken("FULL", `^${src[t.FULLPLAIN]}$`);
      createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
      createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
      createToken("COERCERTL", src[t.COERCE], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
      exports.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
      createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
      exports.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
      createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
      createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
      createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
      exports.comparatorTrimReplace = "$1$2$3";
      createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
      createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    }
  });

  // node_modules/semver/internal/parse-options.js
  var require_parse_options = __commonJS({
    "node_modules/semver/internal/parse-options.js"(exports, module) {
      var opts = ["includePrerelease", "loose", "rtl"];
      var parseOptions = /* @__PURE__ */ __name((options) => !options ? {} : typeof options !== "object" ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => {
        o[k] = true;
        return o;
      }, {}), "parseOptions");
      module.exports = parseOptions;
    }
  });

  // node_modules/semver/internal/identifiers.js
  var require_identifiers = __commonJS({
    "node_modules/semver/internal/identifiers.js"(exports, module) {
      var numeric = /^[0-9]+$/;
      var compareIdentifiers = /* @__PURE__ */ __name((a, b) => {
        const anum = numeric.test(a);
        const bnum = numeric.test(b);
        if (anum && bnum) {
          a = +a;
          b = +b;
        }
        return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
      }, "compareIdentifiers");
      var rcompareIdentifiers = /* @__PURE__ */ __name((a, b) => compareIdentifiers(b, a), "rcompareIdentifiers");
      module.exports = {
        compareIdentifiers,
        rcompareIdentifiers
      };
    }
  });

  // node_modules/semver/classes/semver.js
  var require_semver = __commonJS({
    "node_modules/semver/classes/semver.js"(exports, module) {
      var debug = require_debug();
      var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants2();
      var { re: re2, t } = require_re();
      var parseOptions = require_parse_options();
      var { compareIdentifiers } = require_identifiers();
      var SemVer = class {
        constructor(version2, options) {
          options = parseOptions(options);
          if (version2 instanceof SemVer) {
            if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
              return version2;
            } else {
              version2 = version2.version;
            }
          } else if (typeof version2 !== "string") {
            throw new TypeError(`Invalid Version: ${version2}`);
          }
          if (version2.length > MAX_LENGTH) {
            throw new TypeError(
              `version is longer than ${MAX_LENGTH} characters`
            );
          }
          debug("SemVer", version2, options);
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          const m = version2.trim().match(options.loose ? re2[t.LOOSE] : re2[t.FULL]);
          if (!m) {
            throw new TypeError(`Invalid Version: ${version2}`);
          }
          this.raw = version2;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(other) {
          debug("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof SemVer)) {
            if (typeof other === "string" && other === this.version) {
              return 0;
            }
            other = new SemVer(other, this.options);
          }
          if (other.version === this.version) {
            return 0;
          }
          return this.compareMain(other) || this.comparePre(other);
        }
        compareMain(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }
        comparePre(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          let i = 0;
          do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        compareBuild(other) {
          if (!(other instanceof SemVer)) {
            other = new SemVer(other, this.options);
          }
          let i = 0;
          do {
            const a = this.build[i];
            const b = other.build[i];
            debug("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        // preminor will bump the version up to the next minor release, and immediately
        // down to pre-release. premajor and prepatch work the same way.
        inc(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier);
              this.inc("pre", identifier);
              break;
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier);
              }
              this.inc("pre", identifier);
              break;
            case "major":
              if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            case "pre":
              if (this.prerelease.length === 0) {
                this.prerelease = [0];
              } else {
                let i = this.prerelease.length;
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }
                if (i === -1) {
                  this.prerelease.push(0);
                }
              }
              if (identifier) {
                if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = [identifier, 0];
                  }
                } else {
                  this.prerelease = [identifier, 0];
                }
              }
              break;
            default:
              throw new Error(`invalid increment argument: ${release}`);
          }
          this.format();
          this.raw = this.version;
          return this;
        }
      };
      __name(SemVer, "SemVer");
      module.exports = SemVer;
    }
  });

  // node_modules/semver/functions/parse.js
  var require_parse2 = __commonJS({
    "node_modules/semver/functions/parse.js"(exports, module) {
      var { MAX_LENGTH } = require_constants2();
      var { re: re2, t } = require_re();
      var SemVer = require_semver();
      var parseOptions = require_parse_options();
      var parse4 = /* @__PURE__ */ __name((version2, options) => {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          return version2;
        }
        if (typeof version2 !== "string") {
          return null;
        }
        if (version2.length > MAX_LENGTH) {
          return null;
        }
        const r = options.loose ? re2[t.LOOSE] : re2[t.FULL];
        if (!r.test(version2)) {
          return null;
        }
        try {
          return new SemVer(version2, options);
        } catch (er2) {
          return null;
        }
      }, "parse");
      module.exports = parse4;
    }
  });

  // node_modules/semver/functions/valid.js
  var require_valid = __commonJS({
    "node_modules/semver/functions/valid.js"(exports, module) {
      var parse4 = require_parse2();
      var valid = /* @__PURE__ */ __name((version2, options) => {
        const v = parse4(version2, options);
        return v ? v.version : null;
      }, "valid");
      module.exports = valid;
    }
  });

  // node_modules/semver/functions/clean.js
  var require_clean = __commonJS({
    "node_modules/semver/functions/clean.js"(exports, module) {
      var parse4 = require_parse2();
      var clean = /* @__PURE__ */ __name((version2, options) => {
        const s = parse4(version2.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      }, "clean");
      module.exports = clean;
    }
  });

  // node_modules/semver/functions/inc.js
  var require_inc = __commonJS({
    "node_modules/semver/functions/inc.js"(exports, module) {
      var SemVer = require_semver();
      var inc = /* @__PURE__ */ __name((version2, release, options, identifier) => {
        if (typeof options === "string") {
          identifier = options;
          options = void 0;
        }
        try {
          return new SemVer(
            version2 instanceof SemVer ? version2.version : version2,
            options
          ).inc(release, identifier).version;
        } catch (er2) {
          return null;
        }
      }, "inc");
      module.exports = inc;
    }
  });

  // node_modules/semver/functions/compare.js
  var require_compare = __commonJS({
    "node_modules/semver/functions/compare.js"(exports, module) {
      var SemVer = require_semver();
      var compare = /* @__PURE__ */ __name((a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose)), "compare");
      module.exports = compare;
    }
  });

  // node_modules/semver/functions/eq.js
  var require_eq = __commonJS({
    "node_modules/semver/functions/eq.js"(exports, module) {
      var compare = require_compare();
      var eq2 = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) === 0, "eq");
      module.exports = eq2;
    }
  });

  // node_modules/semver/functions/diff.js
  var require_diff = __commonJS({
    "node_modules/semver/functions/diff.js"(exports, module) {
      var parse4 = require_parse2();
      var eq2 = require_eq();
      var diff = /* @__PURE__ */ __name((version1, version2) => {
        if (eq2(version1, version2)) {
          return null;
        } else {
          const v1 = parse4(version1);
          const v2 = parse4(version2);
          const hasPre = v1.prerelease.length || v2.prerelease.length;
          const prefix = hasPre ? "pre" : "";
          const defaultResult = hasPre ? "prerelease" : "";
          for (const key in v1) {
            if (key === "major" || key === "minor" || key === "patch") {
              if (v1[key] !== v2[key]) {
                return prefix + key;
              }
            }
          }
          return defaultResult;
        }
      }, "diff");
      module.exports = diff;
    }
  });

  // node_modules/semver/functions/major.js
  var require_major = __commonJS({
    "node_modules/semver/functions/major.js"(exports, module) {
      var SemVer = require_semver();
      var major = /* @__PURE__ */ __name((a, loose) => new SemVer(a, loose).major, "major");
      module.exports = major;
    }
  });

  // node_modules/semver/functions/minor.js
  var require_minor = __commonJS({
    "node_modules/semver/functions/minor.js"(exports, module) {
      var SemVer = require_semver();
      var minor = /* @__PURE__ */ __name((a, loose) => new SemVer(a, loose).minor, "minor");
      module.exports = minor;
    }
  });

  // node_modules/semver/functions/patch.js
  var require_patch = __commonJS({
    "node_modules/semver/functions/patch.js"(exports, module) {
      var SemVer = require_semver();
      var patch = /* @__PURE__ */ __name((a, loose) => new SemVer(a, loose).patch, "patch");
      module.exports = patch;
    }
  });

  // node_modules/semver/functions/prerelease.js
  var require_prerelease = __commonJS({
    "node_modules/semver/functions/prerelease.js"(exports, module) {
      var parse4 = require_parse2();
      var prerelease = /* @__PURE__ */ __name((version2, options) => {
        const parsed = parse4(version2, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      }, "prerelease");
      module.exports = prerelease;
    }
  });

  // node_modules/semver/functions/rcompare.js
  var require_rcompare = __commonJS({
    "node_modules/semver/functions/rcompare.js"(exports, module) {
      var compare = require_compare();
      var rcompare = /* @__PURE__ */ __name((a, b, loose) => compare(b, a, loose), "rcompare");
      module.exports = rcompare;
    }
  });

  // node_modules/semver/functions/compare-loose.js
  var require_compare_loose = __commonJS({
    "node_modules/semver/functions/compare-loose.js"(exports, module) {
      var compare = require_compare();
      var compareLoose = /* @__PURE__ */ __name((a, b) => compare(a, b, true), "compareLoose");
      module.exports = compareLoose;
    }
  });

  // node_modules/semver/functions/compare-build.js
  var require_compare_build = __commonJS({
    "node_modules/semver/functions/compare-build.js"(exports, module) {
      var SemVer = require_semver();
      var compareBuild = /* @__PURE__ */ __name((a, b, loose) => {
        const versionA = new SemVer(a, loose);
        const versionB = new SemVer(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      }, "compareBuild");
      module.exports = compareBuild;
    }
  });

  // node_modules/semver/functions/sort.js
  var require_sort = __commonJS({
    "node_modules/semver/functions/sort.js"(exports, module) {
      var compareBuild = require_compare_build();
      var sort = /* @__PURE__ */ __name((list, loose) => list.sort((a, b) => compareBuild(a, b, loose)), "sort");
      module.exports = sort;
    }
  });

  // node_modules/semver/functions/rsort.js
  var require_rsort = __commonJS({
    "node_modules/semver/functions/rsort.js"(exports, module) {
      var compareBuild = require_compare_build();
      var rsort = /* @__PURE__ */ __name((list, loose) => list.sort((a, b) => compareBuild(b, a, loose)), "rsort");
      module.exports = rsort;
    }
  });

  // node_modules/semver/functions/gt.js
  var require_gt = __commonJS({
    "node_modules/semver/functions/gt.js"(exports, module) {
      var compare = require_compare();
      var gt3 = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) > 0, "gt");
      module.exports = gt3;
    }
  });

  // node_modules/semver/functions/lt.js
  var require_lt = __commonJS({
    "node_modules/semver/functions/lt.js"(exports, module) {
      var compare = require_compare();
      var lt2 = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) < 0, "lt");
      module.exports = lt2;
    }
  });

  // node_modules/semver/functions/neq.js
  var require_neq = __commonJS({
    "node_modules/semver/functions/neq.js"(exports, module) {
      var compare = require_compare();
      var neq = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) !== 0, "neq");
      module.exports = neq;
    }
  });

  // node_modules/semver/functions/gte.js
  var require_gte = __commonJS({
    "node_modules/semver/functions/gte.js"(exports, module) {
      var compare = require_compare();
      var gte = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) >= 0, "gte");
      module.exports = gte;
    }
  });

  // node_modules/semver/functions/lte.js
  var require_lte = __commonJS({
    "node_modules/semver/functions/lte.js"(exports, module) {
      var compare = require_compare();
      var lte = /* @__PURE__ */ __name((a, b, loose) => compare(a, b, loose) <= 0, "lte");
      module.exports = lte;
    }
  });

  // node_modules/semver/functions/cmp.js
  var require_cmp = __commonJS({
    "node_modules/semver/functions/cmp.js"(exports, module) {
      var eq2 = require_eq();
      var neq = require_neq();
      var gt3 = require_gt();
      var gte = require_gte();
      var lt2 = require_lt();
      var lte = require_lte();
      var cmp = /* @__PURE__ */ __name((a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a === b;
          case "!==":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a !== b;
          case "":
          case "=":
          case "==":
            return eq2(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt3(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt2(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError(`Invalid operator: ${op}`);
        }
      }, "cmp");
      module.exports = cmp;
    }
  });

  // node_modules/semver/functions/coerce.js
  var require_coerce = __commonJS({
    "node_modules/semver/functions/coerce.js"(exports, module) {
      var SemVer = require_semver();
      var parse4 = require_parse2();
      var { re: re2, t } = require_re();
      var coerce = /* @__PURE__ */ __name((version2, options) => {
        if (version2 instanceof SemVer) {
          return version2;
        }
        if (typeof version2 === "number") {
          version2 = String(version2);
        }
        if (typeof version2 !== "string") {
          return null;
        }
        options = options || {};
        let match = null;
        if (!options.rtl) {
          match = version2.match(re2[t.COERCE]);
        } else {
          let next;
          while ((next = re2[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
            if (!match || next.index + next[0].length !== match.index + match[0].length) {
              match = next;
            }
            re2[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
          }
          re2[t.COERCERTL].lastIndex = -1;
        }
        if (match === null) {
          return null;
        }
        return parse4(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
      }, "coerce");
      module.exports = coerce;
    }
  });

  // node_modules/yallist/iterator.js
  var require_iterator = __commonJS({
    "node_modules/yallist/iterator.js"(exports, module) {
      "use strict";
      module.exports = function(Yallist) {
        Yallist.prototype[Symbol.iterator] = function* () {
          for (let walker = this.head; walker; walker = walker.next) {
            yield walker.value;
          }
        };
      };
    }
  });

  // node_modules/yallist/yallist.js
  var require_yallist = __commonJS({
    "node_modules/yallist/yallist.js"(exports, module) {
      "use strict";
      module.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;
      function Yallist(list) {
        var self2 = this;
        if (!(self2 instanceof Yallist)) {
          self2 = new Yallist();
        }
        self2.tail = null;
        self2.head = null;
        self2.length = 0;
        if (list && typeof list.forEach === "function") {
          list.forEach(function(item) {
            self2.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self2.push(arguments[i]);
          }
        }
        return self2;
      }
      __name(Yallist, "Yallist");
      Yallist.prototype.removeNode = function(node) {
        if (node.list !== this) {
          throw new Error("removing node which does not belong to this list");
        }
        var next = node.next;
        var prev = node.prev;
        if (next) {
          next.prev = prev;
        }
        if (prev) {
          prev.next = next;
        }
        if (node === this.head) {
          this.head = next;
        }
        if (node === this.tail) {
          this.tail = prev;
        }
        node.list.length--;
        node.next = null;
        node.prev = null;
        node.list = null;
        return next;
      };
      Yallist.prototype.unshiftNode = function(node) {
        if (node === this.head) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var head = this.head;
        node.list = this;
        node.next = head;
        if (head) {
          head.prev = node;
        }
        this.head = node;
        if (!this.tail) {
          this.tail = node;
        }
        this.length++;
      };
      Yallist.prototype.pushNode = function(node) {
        if (node === this.tail) {
          return;
        }
        if (node.list) {
          node.list.removeNode(node);
        }
        var tail = this.tail;
        node.list = this;
        node.prev = tail;
        if (tail) {
          tail.next = node;
        }
        this.tail = node;
        if (!this.head) {
          this.head = node;
        }
        this.length++;
      };
      Yallist.prototype.push = function() {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.unshift = function() {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.pop = function() {
        if (!this.tail) {
          return void 0;
        }
        var res = this.tail.value;
        this.tail = this.tail.prev;
        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.shift = function() {
        if (!this.head) {
          return void 0;
        }
        var res = this.head.value;
        this.head = this.head.next;
        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.forEach = function(fn2, thisp) {
        thisp = thisp || this;
        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn2.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };
      Yallist.prototype.forEachReverse = function(fn2, thisp) {
        thisp = thisp || this;
        for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
          fn2.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };
      Yallist.prototype.get = function(n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          walker = walker.next;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.getReverse = function(n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          walker = walker.prev;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.map = function(fn2, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.head; walker !== null; ) {
          res.push(fn2.call(thisp, walker.value, this));
          walker = walker.next;
        }
        return res;
      };
      Yallist.prototype.mapReverse = function(fn2, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.tail; walker !== null; ) {
          res.push(fn2.call(thisp, walker.value, this));
          walker = walker.prev;
        }
        return res;
      };
      Yallist.prototype.reduce = function(fn2, initial) {
        var acc;
        var walker = this.head;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = 0; walker !== null; i++) {
          acc = fn2(acc, walker.value, i);
          walker = walker.next;
        }
        return acc;
      };
      Yallist.prototype.reduceReverse = function(fn2, initial) {
        var acc;
        var walker = this.tail;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn2(acc, walker.value, i);
          walker = walker.prev;
        }
        return acc;
      };
      Yallist.prototype.toArray = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }
        return arr;
      };
      Yallist.prototype.toArrayReverse = function() {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }
        return arr;
      };
      Yallist.prototype.slice = function(from, to2) {
        to2 = to2 || this.length;
        if (to2 < 0) {
          to2 += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to2 < from || to2 < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to2 > this.length) {
          to2 = this.length;
        }
        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next;
        }
        for (; walker !== null && i < to2; i++, walker = walker.next) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.sliceReverse = function(from, to2) {
        to2 = to2 || this.length;
        if (to2 < 0) {
          to2 += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to2 < from || to2 < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to2 > this.length) {
          to2 = this.length;
        }
        for (var i = this.length, walker = this.tail; walker !== null && i > to2; i--) {
          walker = walker.prev;
        }
        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
        if (start > this.length) {
          start = this.length - 1;
        }
        if (start < 0) {
          start = this.length + start;
        }
        for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
          walker = walker.next;
        }
        var ret = [];
        for (var i = 0; walker && i < deleteCount; i++) {
          ret.push(walker.value);
          walker = this.removeNode(walker);
        }
        if (walker === null) {
          walker = this.tail;
        }
        if (walker !== this.head && walker !== this.tail) {
          walker = walker.prev;
        }
        for (var i = 0; i < nodes.length; i++) {
          walker = insert(this, walker, nodes[i]);
        }
        return ret;
      };
      Yallist.prototype.reverse = function() {
        var head = this.head;
        var tail = this.tail;
        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }
        this.head = tail;
        this.tail = head;
        return this;
      };
      function insert(self2, node, value) {
        var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
        if (inserted.next === null) {
          self2.tail = inserted;
        }
        if (inserted.prev === null) {
          self2.head = inserted;
        }
        self2.length++;
        return inserted;
      }
      __name(insert, "insert");
      function push(self2, item) {
        self2.tail = new Node(item, self2.tail, null, self2);
        if (!self2.head) {
          self2.head = self2.tail;
        }
        self2.length++;
      }
      __name(push, "push");
      function unshift(self2, item) {
        self2.head = new Node(item, null, self2.head, self2);
        if (!self2.tail) {
          self2.tail = self2.head;
        }
        self2.length++;
      }
      __name(unshift, "unshift");
      function Node(value, prev, next, list) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list);
        }
        this.list = list;
        this.value = value;
        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }
        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }
      __name(Node, "Node");
      try {
        require_iterator()(Yallist);
      } catch (er2) {
      }
    }
  });

  // node_modules/lru-cache/index.js
  var require_lru_cache = __commonJS({
    "node_modules/lru-cache/index.js"(exports, module) {
      "use strict";
      var Yallist = require_yallist();
      var MAX = Symbol("max");
      var LENGTH = Symbol("length");
      var LENGTH_CALCULATOR = Symbol("lengthCalculator");
      var ALLOW_STALE = Symbol("allowStale");
      var MAX_AGE = Symbol("maxAge");
      var DISPOSE = Symbol("dispose");
      var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
      var LRU_LIST = Symbol("lruList");
      var CACHE = Symbol("cache");
      var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
      var naiveLength = /* @__PURE__ */ __name(() => 1, "naiveLength");
      var LRUCache = class {
        constructor(options) {
          if (typeof options === "number")
            options = { max: options };
          if (!options)
            options = {};
          if (options.max && (typeof options.max !== "number" || options.max < 0))
            throw new TypeError("max must be a non-negative number");
          const max = this[MAX] = options.max || Infinity;
          const lc2 = options.length || naiveLength;
          this[LENGTH_CALCULATOR] = typeof lc2 !== "function" ? naiveLength : lc2;
          this[ALLOW_STALE] = options.stale || false;
          if (options.maxAge && typeof options.maxAge !== "number")
            throw new TypeError("maxAge must be a number");
          this[MAX_AGE] = options.maxAge || 0;
          this[DISPOSE] = options.dispose;
          this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
          this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
          this.reset();
        }
        // resize the cache when the max changes.
        set max(mL) {
          if (typeof mL !== "number" || mL < 0)
            throw new TypeError("max must be a non-negative number");
          this[MAX] = mL || Infinity;
          trim(this);
        }
        get max() {
          return this[MAX];
        }
        set allowStale(allowStale) {
          this[ALLOW_STALE] = !!allowStale;
        }
        get allowStale() {
          return this[ALLOW_STALE];
        }
        set maxAge(mA) {
          if (typeof mA !== "number")
            throw new TypeError("maxAge must be a non-negative number");
          this[MAX_AGE] = mA;
          trim(this);
        }
        get maxAge() {
          return this[MAX_AGE];
        }
        // resize the cache when the lengthCalculator changes.
        set lengthCalculator(lC) {
          if (typeof lC !== "function")
            lC = naiveLength;
          if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
              this[LENGTH] += hit.length;
            });
          }
          trim(this);
        }
        get lengthCalculator() {
          return this[LENGTH_CALCULATOR];
        }
        get length() {
          return this[LENGTH];
        }
        get itemCount() {
          return this[LRU_LIST].length;
        }
        rforEach(fn2, thisp) {
          thisp = thisp || this;
          for (let walker = this[LRU_LIST].tail; walker !== null; ) {
            const prev = walker.prev;
            forEachStep(this, fn2, walker, thisp);
            walker = prev;
          }
        }
        forEach(fn2, thisp) {
          thisp = thisp || this;
          for (let walker = this[LRU_LIST].head; walker !== null; ) {
            const next = walker.next;
            forEachStep(this, fn2, walker, thisp);
            walker = next;
          }
        }
        keys() {
          return this[LRU_LIST].toArray().map((k) => k.key);
        }
        values() {
          return this[LRU_LIST].toArray().map((k) => k.value);
        }
        reset() {
          if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
            this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
          }
          this[CACHE] = /* @__PURE__ */ new Map();
          this[LRU_LIST] = new Yallist();
          this[LENGTH] = 0;
        }
        dump() {
          return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
            k: hit.key,
            v: hit.value,
            e: hit.now + (hit.maxAge || 0)
          }).toArray().filter((h2) => h2);
        }
        dumpLru() {
          return this[LRU_LIST];
        }
        set(key, value, maxAge) {
          maxAge = maxAge || this[MAX_AGE];
          if (maxAge && typeof maxAge !== "number")
            throw new TypeError("maxAge must be a number");
          const now = maxAge ? Date.now() : 0;
          const len = this[LENGTH_CALCULATOR](value, key);
          if (this[CACHE].has(key)) {
            if (len > this[MAX]) {
              del(this, this[CACHE].get(key));
              return false;
            }
            const node = this[CACHE].get(key);
            const item = node.value;
            if (this[DISPOSE]) {
              if (!this[NO_DISPOSE_ON_SET])
                this[DISPOSE](key, item.value);
            }
            item.now = now;
            item.maxAge = maxAge;
            item.value = value;
            this[LENGTH] += len - item.length;
            item.length = len;
            this.get(key);
            trim(this);
            return true;
          }
          const hit = new Entry(key, value, len, now, maxAge);
          if (hit.length > this[MAX]) {
            if (this[DISPOSE])
              this[DISPOSE](key, value);
            return false;
          }
          this[LENGTH] += hit.length;
          this[LRU_LIST].unshift(hit);
          this[CACHE].set(key, this[LRU_LIST].head);
          trim(this);
          return true;
        }
        has(key) {
          if (!this[CACHE].has(key))
            return false;
          const hit = this[CACHE].get(key).value;
          return !isStale(this, hit);
        }
        get(key) {
          return get(this, key, true);
        }
        peek(key) {
          return get(this, key, false);
        }
        pop() {
          const node = this[LRU_LIST].tail;
          if (!node)
            return null;
          del(this, node);
          return node.value;
        }
        del(key) {
          del(this, this[CACHE].get(key));
        }
        load(arr) {
          this.reset();
          const now = Date.now();
          for (let l = arr.length - 1; l >= 0; l--) {
            const hit = arr[l];
            const expiresAt = hit.e || 0;
            if (expiresAt === 0)
              this.set(hit.k, hit.v);
            else {
              const maxAge = expiresAt - now;
              if (maxAge > 0) {
                this.set(hit.k, hit.v, maxAge);
              }
            }
          }
        }
        prune() {
          this[CACHE].forEach((value, key) => get(this, key, false));
        }
      };
      __name(LRUCache, "LRUCache");
      var get = /* @__PURE__ */ __name((self2, key, doUse) => {
        const node = self2[CACHE].get(key);
        if (node) {
          const hit = node.value;
          if (isStale(self2, hit)) {
            del(self2, node);
            if (!self2[ALLOW_STALE])
              return void 0;
          } else {
            if (doUse) {
              if (self2[UPDATE_AGE_ON_GET])
                node.value.now = Date.now();
              self2[LRU_LIST].unshiftNode(node);
            }
          }
          return hit.value;
        }
      }, "get");
      var isStale = /* @__PURE__ */ __name((self2, hit) => {
        if (!hit || !hit.maxAge && !self2[MAX_AGE])
          return false;
        const diff = Date.now() - hit.now;
        return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
      }, "isStale");
      var trim = /* @__PURE__ */ __name((self2) => {
        if (self2[LENGTH] > self2[MAX]) {
          for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
            const prev = walker.prev;
            del(self2, walker);
            walker = prev;
          }
        }
      }, "trim");
      var del = /* @__PURE__ */ __name((self2, node) => {
        if (node) {
          const hit = node.value;
          if (self2[DISPOSE])
            self2[DISPOSE](hit.key, hit.value);
          self2[LENGTH] -= hit.length;
          self2[CACHE].delete(hit.key);
          self2[LRU_LIST].removeNode(node);
        }
      }, "del");
      var Entry = class {
        constructor(key, value, length, now, maxAge) {
          this.key = key;
          this.value = value;
          this.length = length;
          this.now = now;
          this.maxAge = maxAge || 0;
        }
      };
      __name(Entry, "Entry");
      var forEachStep = /* @__PURE__ */ __name((self2, fn2, node, thisp) => {
        let hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            hit = void 0;
        }
        if (hit)
          fn2.call(thisp, hit.value, hit.key, self2);
      }, "forEachStep");
      module.exports = LRUCache;
    }
  });

  // node_modules/semver/classes/range.js
  var require_range = __commonJS({
    "node_modules/semver/classes/range.js"(exports, module) {
      var Range2 = class {
        constructor(range, options) {
          options = parseOptions(options);
          if (range instanceof Range2) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
              return range;
            } else {
              return new Range2(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            this.raw = range.value;
            this.set = [[range]];
            this.format();
            return this;
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range;
          this.set = range.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${range}`);
          }
          if (this.set.length > 1) {
            const first = this.set[0];
            this.set = this.set.filter((c) => !isNullSet(c[0]));
            if (this.set.length === 0) {
              this.set = [first];
            } else if (this.set.length > 1) {
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
          }
          this.format();
        }
        format() {
          this.range = this.set.map((comps) => {
            return comps.join(" ").trim();
          }).join("||").trim();
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(range) {
          range = range.trim();
          const memoOpts = Object.keys(this.options).join(",");
          const memoKey = `parseRange:${memoOpts}:${range}`;
          const cached = cache.get(memoKey);
          if (cached) {
            return cached;
          }
          const loose = this.options.loose;
          const hr2 = loose ? re2[t.HYPHENRANGELOOSE] : re2[t.HYPHENRANGE];
          range = range.replace(hr2, hyphenReplace(this.options.includePrerelease));
          debug("hyphen replace", range);
          range = range.replace(re2[t.COMPARATORTRIM], comparatorTrimReplace);
          debug("comparator trim", range);
          range = range.replace(re2[t.TILDETRIM], tildeTrimReplace);
          range = range.replace(re2[t.CARETTRIM], caretTrimReplace);
          range = range.split(/\s+/).join(" ");
          let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
          if (loose) {
            rangeList = rangeList.filter((comp) => {
              debug("loose invalid filter", comp, this.options);
              return !!comp.match(re2[t.COMPARATORLOOSE]);
            });
          }
          debug("range list", rangeList);
          const rangeMap = /* @__PURE__ */ new Map();
          const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
          for (const comp of comparators) {
            if (isNullSet(comp)) {
              return [comp];
            }
            rangeMap.set(comp.value, comp);
          }
          if (rangeMap.size > 1 && rangeMap.has("")) {
            rangeMap.delete("");
          }
          const result = [...rangeMap.values()];
          cache.set(memoKey, result);
          return result;
        }
        intersects(range, options) {
          if (!(range instanceof Range2)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((thisComparators) => {
            return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
              return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
                return rangeComparators.every((rangeComparator) => {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }
        // if ANY of the sets match ALL of its comparators, then pass
        test(version2) {
          if (!version2) {
            return false;
          }
          if (typeof version2 === "string") {
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er2) {
              return false;
            }
          }
          for (let i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version2, this.options)) {
              return true;
            }
          }
          return false;
        }
      };
      __name(Range2, "Range");
      module.exports = Range2;
      var LRU = require_lru_cache();
      var cache = new LRU({ max: 1e3 });
      var parseOptions = require_parse_options();
      var Comparator = require_comparator();
      var debug = require_debug();
      var SemVer = require_semver();
      var {
        re: re2,
        t,
        comparatorTrimReplace,
        tildeTrimReplace,
        caretTrimReplace
      } = require_re();
      var isNullSet = /* @__PURE__ */ __name((c) => c.value === "<0.0.0-0", "isNullSet");
      var isAny = /* @__PURE__ */ __name((c) => c.value === "", "isAny");
      var isSatisfiable = /* @__PURE__ */ __name((comparators, options) => {
        let result = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while (result && remainingComparators.length) {
          result = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options);
          });
          testComparator = remainingComparators.pop();
        }
        return result;
      }, "isSatisfiable");
      var parseComparator = /* @__PURE__ */ __name((comp, options) => {
        debug("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug("caret", comp);
        comp = replaceTildes(comp, options);
        debug("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug("xrange", comp);
        comp = replaceStars(comp, options);
        debug("stars", comp);
        return comp;
      }, "parseComparator");
      var isX = /* @__PURE__ */ __name((id) => !id || id.toLowerCase() === "x" || id === "*", "isX");
      var replaceTildes = /* @__PURE__ */ __name((comp, options) => comp.trim().split(/\s+/).map((c) => {
        return replaceTilde(c, options);
      }).join(" "), "replaceTildes");
      var replaceTilde = /* @__PURE__ */ __name((comp, options) => {
        const r = options.loose ? re2[t.TILDELOOSE] : re2[t.TILDE];
        return comp.replace(r, (_, M, m, p, pr2) => {
          debug("tilde", comp, _, M, m, p, pr2);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
          } else if (pr2) {
            debug("replaceTilde pr", pr2);
            ret = `>=${M}.${m}.${p}-${pr2} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
          }
          debug("tilde return", ret);
          return ret;
        });
      }, "replaceTilde");
      var replaceCarets = /* @__PURE__ */ __name((comp, options) => comp.trim().split(/\s+/).map((c) => {
        return replaceCaret(c, options);
      }).join(" "), "replaceCarets");
      var replaceCaret = /* @__PURE__ */ __name((comp, options) => {
        debug("caret", comp, options);
        const r = options.loose ? re2[t.CARETLOOSE] : re2[t.CARET];
        const z2 = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr2) => {
          debug("caret", comp, _, M, m, p, pr2);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z2} <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z2} <${M}.${+m + 1}.0-0`;
            } else {
              ret = `>=${M}.${m}.0${z2} <${+M + 1}.0.0-0`;
            }
          } else if (pr2) {
            debug("replaceCaret pr", pr2);
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr2} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}-${pr2} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr2} <${+M + 1}.0.0-0`;
            }
          } else {
            debug("no pr");
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z2} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}${z2} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
          }
          debug("caret return", ret);
          return ret;
        });
      }, "replaceCaret");
      var replaceXRanges = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceXRanges", comp, options);
        return comp.split(/\s+/).map((c) => {
          return replaceXRange(c, options);
        }).join(" ");
      }, "replaceXRanges");
      var replaceXRange = /* @__PURE__ */ __name((comp, options) => {
        comp = comp.trim();
        const r = options.loose ? re2[t.XRANGELOOSE] : re2[t.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr2) => {
          debug("xRange", comp, ret, gtlt, M, m, p, pr2);
          const xM = isX(M);
          const xm = xM || isX(m);
          const xp = xm || isX(p);
          const anyX = xp;
          if (gtlt === "=" && anyX) {
            gtlt = "";
          }
          pr2 = options.includePrerelease ? "-0" : "";
          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              ret = "<0.0.0-0";
            } else {
              ret = "*";
            }
          } else if (gtlt && anyX) {
            if (xm) {
              m = 0;
            }
            p = 0;
            if (gtlt === ">") {
              gtlt = ">=";
              if (xm) {
                M = +M + 1;
                m = 0;
                p = 0;
              } else {
                m = +m + 1;
                p = 0;
              }
            } else if (gtlt === "<=") {
              gtlt = "<";
              if (xm) {
                M = +M + 1;
              } else {
                m = +m + 1;
              }
            }
            if (gtlt === "<") {
              pr2 = "-0";
            }
            ret = `${gtlt + M}.${m}.${p}${pr2}`;
          } else if (xm) {
            ret = `>=${M}.0.0${pr2} <${+M + 1}.0.0-0`;
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr2} <${M}.${+m + 1}.0-0`;
          }
          debug("xRange return", ret);
          return ret;
        });
      }, "replaceXRange");
      var replaceStars = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceStars", comp, options);
        return comp.trim().replace(re2[t.STAR], "");
      }, "replaceStars");
      var replaceGTE0 = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceGTE0", comp, options);
        return comp.trim().replace(re2[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
      }, "replaceGTE0");
      var hyphenReplace = /* @__PURE__ */ __name((incPr) => ($0, from, fM, fm, fp, fpr, fb, to2, tM, tm, tp, tpr, tb) => {
        if (isX(fM)) {
          from = "";
        } else if (isX(fm)) {
          from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        } else if (isX(fp)) {
          from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        } else if (fpr) {
          from = `>=${from}`;
        } else {
          from = `>=${from}${incPr ? "-0" : ""}`;
        }
        if (isX(tM)) {
          to2 = "";
        } else if (isX(tm)) {
          to2 = `<${+tM + 1}.0.0-0`;
        } else if (isX(tp)) {
          to2 = `<${tM}.${+tm + 1}.0-0`;
        } else if (tpr) {
          to2 = `<=${tM}.${tm}.${tp}-${tpr}`;
        } else if (incPr) {
          to2 = `<${tM}.${tm}.${+tp + 1}-0`;
        } else {
          to2 = `<=${to2}`;
        }
        return `${from} ${to2}`.trim();
      }, "hyphenReplace");
      var testSet = /* @__PURE__ */ __name((set, version2, options) => {
        for (let i = 0; i < set.length; i++) {
          if (!set[i].test(version2)) {
            return false;
          }
        }
        if (version2.prerelease.length && !options.includePrerelease) {
          for (let i = 0; i < set.length; i++) {
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
              continue;
            }
            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      }, "testSet");
    }
  });

  // node_modules/semver/classes/comparator.js
  var require_comparator = __commonJS({
    "node_modules/semver/classes/comparator.js"(exports, module) {
      var ANY = Symbol("SemVer ANY");
      var Comparator = class {
        static get ANY() {
          return ANY;
        }
        constructor(comp, options) {
          options = parseOptions(options);
          if (comp instanceof Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          debug("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug("comp", this);
        }
        parse(comp) {
          const r = this.options.loose ? re2[t.COMPARATORLOOSE] : re2[t.COMPARATOR];
          const m = comp.match(r);
          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
          }
          this.operator = m[1] !== void 0 ? m[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(version2) {
          debug("Comparator.test", version2, this.options.loose);
          if (this.semver === ANY || version2 === ANY) {
            return true;
          }
          if (typeof version2 === "string") {
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er2) {
              return false;
            }
          }
          return cmp(version2, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
          if (!(comp instanceof Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (!options || typeof options !== "object") {
            options = {
              loose: !!options,
              includePrerelease: false
            };
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new Range2(comp.value, options).test(this.value);
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true;
            }
            return new Range2(this.value, options).test(comp.semver);
          }
          const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
          const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
          const sameSemVer = this.semver.version === comp.semver.version;
          const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
          const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
          const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }
      };
      __name(Comparator, "Comparator");
      module.exports = Comparator;
      var parseOptions = require_parse_options();
      var { re: re2, t } = require_re();
      var cmp = require_cmp();
      var debug = require_debug();
      var SemVer = require_semver();
      var Range2 = require_range();
    }
  });

  // node_modules/semver/functions/satisfies.js
  var require_satisfies = __commonJS({
    "node_modules/semver/functions/satisfies.js"(exports, module) {
      var Range2 = require_range();
      var satisfies = /* @__PURE__ */ __name((version2, range, options) => {
        try {
          range = new Range2(range, options);
        } catch (er2) {
          return false;
        }
        return range.test(version2);
      }, "satisfies");
      module.exports = satisfies;
    }
  });

  // node_modules/semver/ranges/to-comparators.js
  var require_to_comparators = __commonJS({
    "node_modules/semver/ranges/to-comparators.js"(exports, module) {
      var Range2 = require_range();
      var toComparators = /* @__PURE__ */ __name((range, options) => new Range2(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" ")), "toComparators");
      module.exports = toComparators;
    }
  });

  // node_modules/semver/ranges/max-satisfying.js
  var require_max_satisfying = __commonJS({
    "node_modules/semver/ranges/max-satisfying.js"(exports, module) {
      var SemVer = require_semver();
      var Range2 = require_range();
      var maxSatisfying = /* @__PURE__ */ __name((versions, range, options) => {
        let max = null;
        let maxSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range2(range, options);
        } catch (er2) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!max || maxSV.compare(v) === -1) {
              max = v;
              maxSV = new SemVer(max, options);
            }
          }
        });
        return max;
      }, "maxSatisfying");
      module.exports = maxSatisfying;
    }
  });

  // node_modules/semver/ranges/min-satisfying.js
  var require_min_satisfying = __commonJS({
    "node_modules/semver/ranges/min-satisfying.js"(exports, module) {
      var SemVer = require_semver();
      var Range2 = require_range();
      var minSatisfying = /* @__PURE__ */ __name((versions, range, options) => {
        let min = null;
        let minSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range2(range, options);
        } catch (er2) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!min || minSV.compare(v) === 1) {
              min = v;
              minSV = new SemVer(min, options);
            }
          }
        });
        return min;
      }, "minSatisfying");
      module.exports = minSatisfying;
    }
  });

  // node_modules/semver/ranges/min-version.js
  var require_min_version = __commonJS({
    "node_modules/semver/ranges/min-version.js"(exports, module) {
      var SemVer = require_semver();
      var Range2 = require_range();
      var gt3 = require_gt();
      var minVersion = /* @__PURE__ */ __name((range, loose) => {
        range = new Range2(range, loose);
        let minver = new SemVer("0.0.0");
        if (range.test(minver)) {
          return minver;
        }
        minver = new SemVer("0.0.0-0");
        if (range.test(minver)) {
          return minver;
        }
        minver = null;
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let setMin = null;
          comparators.forEach((comparator) => {
            const compver = new SemVer(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++;
                } else {
                  compver.prerelease.push(0);
                }
                compver.raw = compver.format();
              case "":
              case ">=":
                if (!setMin || gt3(compver, setMin)) {
                  setMin = compver;
                }
                break;
              case "<":
              case "<=":
                break;
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
          });
          if (setMin && (!minver || gt3(minver, setMin))) {
            minver = setMin;
          }
        }
        if (minver && range.test(minver)) {
          return minver;
        }
        return null;
      }, "minVersion");
      module.exports = minVersion;
    }
  });

  // node_modules/semver/ranges/valid.js
  var require_valid2 = __commonJS({
    "node_modules/semver/ranges/valid.js"(exports, module) {
      var Range2 = require_range();
      var validRange = /* @__PURE__ */ __name((range, options) => {
        try {
          return new Range2(range, options).range || "*";
        } catch (er2) {
          return null;
        }
      }, "validRange");
      module.exports = validRange;
    }
  });

  // node_modules/semver/ranges/outside.js
  var require_outside = __commonJS({
    "node_modules/semver/ranges/outside.js"(exports, module) {
      var SemVer = require_semver();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var Range2 = require_range();
      var satisfies = require_satisfies();
      var gt3 = require_gt();
      var lt2 = require_lt();
      var lte = require_lte();
      var gte = require_gte();
      var outside = /* @__PURE__ */ __name((version2, range, hilo, options) => {
        version2 = new SemVer(version2, options);
        range = new Range2(range, options);
        let gtfn, ltefn, ltfn, comp, ecomp;
        switch (hilo) {
          case ">":
            gtfn = gt3;
            ltefn = lte;
            ltfn = lt2;
            comp = ">";
            ecomp = ">=";
            break;
          case "<":
            gtfn = lt2;
            ltefn = gte;
            ltfn = gt3;
            comp = "<";
            ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version2, range, options)) {
          return false;
        }
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let high = null;
          let low = null;
          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0");
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator;
            }
          });
          if (high.operator === comp || high.operator === ecomp) {
            return false;
          }
          if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
            return false;
          } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
            return false;
          }
        }
        return true;
      }, "outside");
      module.exports = outside;
    }
  });

  // node_modules/semver/ranges/gtr.js
  var require_gtr = __commonJS({
    "node_modules/semver/ranges/gtr.js"(exports, module) {
      var outside = require_outside();
      var gtr = /* @__PURE__ */ __name((version2, range, options) => outside(version2, range, ">", options), "gtr");
      module.exports = gtr;
    }
  });

  // node_modules/semver/ranges/ltr.js
  var require_ltr = __commonJS({
    "node_modules/semver/ranges/ltr.js"(exports, module) {
      var outside = require_outside();
      var ltr = /* @__PURE__ */ __name((version2, range, options) => outside(version2, range, "<", options), "ltr");
      module.exports = ltr;
    }
  });

  // node_modules/semver/ranges/intersects.js
  var require_intersects = __commonJS({
    "node_modules/semver/ranges/intersects.js"(exports, module) {
      var Range2 = require_range();
      var intersects = /* @__PURE__ */ __name((r1, r2, options) => {
        r1 = new Range2(r1, options);
        r2 = new Range2(r2, options);
        return r1.intersects(r2);
      }, "intersects");
      module.exports = intersects;
    }
  });

  // node_modules/semver/ranges/simplify.js
  var require_simplify = __commonJS({
    "node_modules/semver/ranges/simplify.js"(exports, module) {
      var satisfies = require_satisfies();
      var compare = require_compare();
      module.exports = (versions, range, options) => {
        const set = [];
        let first = null;
        let prev = null;
        const v = versions.sort((a, b) => compare(a, b, options));
        for (const version2 of v) {
          const included = satisfies(version2, range, options);
          if (included) {
            prev = version2;
            if (!first) {
              first = version2;
            }
          } else {
            if (prev) {
              set.push([first, prev]);
            }
            prev = null;
            first = null;
          }
        }
        if (first) {
          set.push([first, null]);
        }
        const ranges = [];
        for (const [min, max] of set) {
          if (min === max) {
            ranges.push(min);
          } else if (!max && min === v[0]) {
            ranges.push("*");
          } else if (!max) {
            ranges.push(`>=${min}`);
          } else if (min === v[0]) {
            ranges.push(`<=${max}`);
          } else {
            ranges.push(`${min} - ${max}`);
          }
        }
        const simplified = ranges.join(" || ");
        const original = typeof range.raw === "string" ? range.raw : String(range);
        return simplified.length < original.length ? simplified : range;
      };
    }
  });

  // node_modules/semver/ranges/subset.js
  var require_subset = __commonJS({
    "node_modules/semver/ranges/subset.js"(exports, module) {
      var Range2 = require_range();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var satisfies = require_satisfies();
      var compare = require_compare();
      var subset = /* @__PURE__ */ __name((sub, dom, options = {}) => {
        if (sub === dom) {
          return true;
        }
        sub = new Range2(sub, options);
        dom = new Range2(dom, options);
        let sawNonNull = false;
        OUTER:
          for (const simpleSub of sub.set) {
            for (const simpleDom of dom.set) {
              const isSub = simpleSubset(simpleSub, simpleDom, options);
              sawNonNull = sawNonNull || isSub !== null;
              if (isSub) {
                continue OUTER;
              }
            }
            if (sawNonNull) {
              return false;
            }
          }
        return true;
      }, "subset");
      var simpleSubset = /* @__PURE__ */ __name((sub, dom, options) => {
        if (sub === dom) {
          return true;
        }
        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY) {
            return true;
          } else if (options.includePrerelease) {
            sub = [new Comparator(">=0.0.0-0")];
          } else {
            sub = [new Comparator(">=0.0.0")];
          }
        }
        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease) {
            return true;
          } else {
            dom = [new Comparator(">=0.0.0")];
          }
        }
        const eqSet = /* @__PURE__ */ new Set();
        let gt3, lt2;
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=") {
            gt3 = higherGT(gt3, c, options);
          } else if (c.operator === "<" || c.operator === "<=") {
            lt2 = lowerLT(lt2, c, options);
          } else {
            eqSet.add(c.semver);
          }
        }
        if (eqSet.size > 1) {
          return null;
        }
        let gtltComp;
        if (gt3 && lt2) {
          gtltComp = compare(gt3.semver, lt2.semver, options);
          if (gtltComp > 0) {
            return null;
          } else if (gtltComp === 0 && (gt3.operator !== ">=" || lt2.operator !== "<=")) {
            return null;
          }
        }
        for (const eq2 of eqSet) {
          if (gt3 && !satisfies(eq2, String(gt3), options)) {
            return null;
          }
          if (lt2 && !satisfies(eq2, String(lt2), options)) {
            return null;
          }
          for (const c of dom) {
            if (!satisfies(eq2, String(c), options)) {
              return false;
            }
          }
          return true;
        }
        let higher, lower;
        let hasDomLT, hasDomGT;
        let needDomLTPre = lt2 && !options.includePrerelease && lt2.semver.prerelease.length ? lt2.semver : false;
        let needDomGTPre = gt3 && !options.includePrerelease && gt3.semver.prerelease.length ? gt3.semver : false;
        if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt2.operator === "<" && needDomLTPre.prerelease[0] === 0) {
          needDomLTPre = false;
        }
        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
          if (gt3) {
            if (needDomGTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
                needDomGTPre = false;
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt3, c, options);
              if (higher === c && higher !== gt3) {
                return false;
              }
            } else if (gt3.operator === ">=" && !satisfies(gt3.semver, String(c), options)) {
              return false;
            }
          }
          if (lt2) {
            if (needDomLTPre) {
              if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
                needDomLTPre = false;
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt2, c, options);
              if (lower === c && lower !== lt2) {
                return false;
              }
            } else if (lt2.operator === "<=" && !satisfies(lt2.semver, String(c), options)) {
              return false;
            }
          }
          if (!c.operator && (lt2 || gt3) && gtltComp !== 0) {
            return false;
          }
        }
        if (gt3 && hasDomLT && !lt2 && gtltComp !== 0) {
          return false;
        }
        if (lt2 && hasDomGT && !gt3 && gtltComp !== 0) {
          return false;
        }
        if (needDomGTPre || needDomLTPre) {
          return false;
        }
        return true;
      }, "simpleSubset");
      var higherGT = /* @__PURE__ */ __name((a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
      }, "higherGT");
      var lowerLT = /* @__PURE__ */ __name((a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
      }, "lowerLT");
      module.exports = subset;
    }
  });

  // node_modules/semver/index.js
  var require_semver2 = __commonJS({
    "node_modules/semver/index.js"(exports, module) {
      var internalRe = require_re();
      module.exports = {
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: require_constants2().SEMVER_SPEC_VERSION,
        SemVer: require_semver(),
        compareIdentifiers: require_identifiers().compareIdentifiers,
        rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
        parse: require_parse2(),
        valid: require_valid(),
        clean: require_clean(),
        inc: require_inc(),
        diff: require_diff(),
        major: require_major(),
        minor: require_minor(),
        patch: require_patch(),
        prerelease: require_prerelease(),
        compare: require_compare(),
        rcompare: require_rcompare(),
        compareLoose: require_compare_loose(),
        compareBuild: require_compare_build(),
        sort: require_sort(),
        rsort: require_rsort(),
        gt: require_gt(),
        lt: require_lt(),
        eq: require_eq(),
        neq: require_neq(),
        gte: require_gte(),
        lte: require_lte(),
        cmp: require_cmp(),
        coerce: require_coerce(),
        Comparator: require_comparator(),
        Range: require_range(),
        satisfies: require_satisfies(),
        toComparators: require_to_comparators(),
        maxSatisfying: require_max_satisfying(),
        minSatisfying: require_min_satisfying(),
        minVersion: require_min_version(),
        validRange: require_valid2(),
        outside: require_outside(),
        gtr: require_gtr(),
        ltr: require_ltr(),
        intersects: require_intersects(),
        simplifyRange: require_simplify(),
        subset: require_subset()
      };
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/createApiProvider.js
  var require_createApiProvider = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/createApiProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createApiProvider = void 0;
      var semver = require_semver2();
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var getPackageInfo_1 = require_getPackageInfo();
      var localize_1 = require_localize();
      function isAzureExtensionApiFactory(maybeAzureExtensionApiFactory) {
        return maybeAzureExtensionApiFactory.createApi !== void 0;
      }
      __name(isAzureExtensionApiFactory, "isAzureExtensionApiFactory");
      function createApiProvider2(azExts) {
        for (const azExt of azExts) {
          if (!semver.valid(azExt.apiVersion)) {
            throw new Error((0, localize_1.localize)("invalidVersion", 'Invalid semver "{0}".', azExt.apiVersion));
          }
        }
        const extensionId = (0, getPackageInfo_1.getPackageInfo)().extensionId;
        const apiFactories = azExts.map((azExt) => {
          if (isAzureExtensionApiFactory(azExt)) {
            return azExt;
          } else {
            return {
              apiVersion: azExt.apiVersion,
              createApi: () => azExt
            };
          }
        });
        return {
          getApi: (apiVersionRange, options) => getApiInternal(apiFactories, extensionId, apiVersionRange, options)
        };
      }
      __name(createApiProvider2, "createApiProvider");
      exports.createApiProvider = createApiProvider2;
      var ApiVersionError = class extends Error {
        constructor(message, code) {
          super(message);
          this.code = code;
        }
      };
      __name(ApiVersionError, "ApiVersionError");
      function getApiInternal(azExts, extensionId, apiVersionRange, options) {
        return (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandlingSync)("getApi", (context) => {
          context.errorHandling.rethrow = true;
          context.errorHandling.suppressDisplay = true;
          context.telemetry.properties.isActivationEvent = "true";
          context.telemetry.properties.apiVersionRange = apiVersionRange;
          context.telemetry.properties.callingExtensionId = options === null || options === void 0 ? void 0 : options.extensionId;
          const apiVersions = azExts.map((a) => a.apiVersion);
          context.telemetry.properties.apiVersions = apiVersions.join(", ");
          const matchedApiVersion = semver.maxSatisfying(apiVersions, apiVersionRange);
          if (matchedApiVersion) {
            const apiFactory = azExts.find((a) => a.apiVersion === matchedApiVersion);
            return apiFactory ? apiFactory.createApi(options) : void 0;
          } else {
            const minApiVersion = semver.minSatisfying(apiVersions, "");
            let message;
            let code;
            if (minApiVersion && semver.gtr(minApiVersion, apiVersionRange)) {
              message = (0, localize_1.localize)("notSupported", 'API version "{0}" for extension id "{1}" is no longer supported. Minimum version is "{2}".', apiVersionRange, extensionId, minApiVersion);
              code = "NoLongerSupported";
            } else {
              message = (0, localize_1.localize)("updateExtension", 'Extension dependency with id "{0}" must be updated.', extensionId);
              code = "NotYetSupported";
            }
            throw new ApiVersionError(message, code);
          }
        });
      }
      __name(getApiInternal, "getApiInternal");
    }
  });

  // node_modules/vscode-tas-client/vscode-tas-client/VSCodeFilterProvider.js
  var require_VSCodeFilterProvider = __commonJS({
    "node_modules/vscode-tas-client/vscode-tas-client/VSCodeFilterProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var vscode23 = __require("vscode");
      var VSCodeFilterProvider = class {
        constructor(extensionName, extensionVersion, targetPopulation) {
          this.extensionName = extensionName;
          this.extensionVersion = extensionVersion;
          this.targetPopulation = targetPopulation;
        }
        /**
         * Returns a version string that can be parsed into a .NET Build object
         * by removing the tag suffix (for example -dev).
         *
         * @param version Version string to be trimmed.
         */
        static trimVersionSuffix(version2) {
          const regex = /\-[a-zA-Z0-9]+$/;
          const result = version2.split(regex);
          return result[0];
        }
        getFilterValue(filter4) {
          switch (filter4) {
            case Filters.ApplicationVersion:
              return VSCodeFilterProvider.trimVersionSuffix(vscode23.version);
            case Filters.Build:
              return vscode23.env.appName;
            case Filters.ClientId:
              return vscode23.env.machineId;
            case Filters.ExtensionName:
              return this.extensionName;
            case Filters.ExtensionVersion:
              return VSCodeFilterProvider.trimVersionSuffix(this.extensionVersion);
            case Filters.Language:
              return vscode23.env.language;
            case Filters.TargetPopulation:
              return this.targetPopulation;
            default:
              return "";
          }
        }
        getFilters() {
          let filters = /* @__PURE__ */ new Map();
          let filterValues = Object.values(Filters);
          for (let value of filterValues) {
            filters.set(value, this.getFilterValue(value));
          }
          return filters;
        }
      };
      __name(VSCodeFilterProvider, "VSCodeFilterProvider");
      exports.VSCodeFilterProvider = VSCodeFilterProvider;
      var Filters;
      (function(Filters2) {
        Filters2["Market"] = "X-MSEdge-Market";
        Filters2["CorpNet"] = "X-FD-Corpnet";
        Filters2["ApplicationVersion"] = "X-VSCode-AppVersion";
        Filters2["Build"] = "X-VSCode-Build";
        Filters2["ClientId"] = "X-MSEdge-ClientId";
        Filters2["ExtensionName"] = "X-VSCode-ExtensionName";
        Filters2["ExtensionVersion"] = "X-VSCode-ExtensionVersion";
        Filters2["Language"] = "X-VSCode-Language";
        Filters2["TargetPopulation"] = "X-VSCode-TargetPopulation";
      })(Filters = exports.Filters || (exports.Filters = {}));
      var TargetPopulation;
      (function(TargetPopulation2) {
        TargetPopulation2["Team"] = "team";
        TargetPopulation2["Internal"] = "internal";
        TargetPopulation2["Insiders"] = "insider";
        TargetPopulation2["Public"] = "public";
      })(TargetPopulation = exports.TargetPopulation || (exports.TargetPopulation = {}));
    }
  });

  // node_modules/tas-client/tas-client/FeatureProvider/BaseFeatureProvider.js
  var require_BaseFeatureProvider = __commonJS({
    "node_modules/tas-client/tas-client/FeatureProvider/BaseFeatureProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var BaseFeatureProvider = class {
        /**
         * @param telemetry The telemetry implementation.
         */
        constructor(telemetry) {
          this.telemetry = telemetry;
          this.isFetching = false;
        }
        /**
         * Method that wraps the fetch method in order to re-use the fetch promise if needed.
         * @param headers The headers to be used on the fetch method.
         */
        async getFeatures() {
          if (this.isFetching && this.fetchPromise) {
            return this.fetchPromise;
          }
          this.fetchPromise = this.fetch();
          let features = await this.fetchPromise;
          this.isFetching = false;
          this.fetchPromise = void 0;
          return features;
        }
      };
      __name(BaseFeatureProvider, "BaseFeatureProvider");
      exports.BaseFeatureProvider = BaseFeatureProvider;
    }
  });

  // node_modules/tas-client/tas-client/FeatureProvider/FilteredFeatureProvider.js
  var require_FilteredFeatureProvider = __commonJS({
    "node_modules/tas-client/tas-client/FeatureProvider/FilteredFeatureProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var BaseFeatureProvider_1 = require_BaseFeatureProvider();
      var FilteredFeatureProvider = class extends BaseFeatureProvider_1.BaseFeatureProvider {
        constructor(telemetry, filterProviders) {
          super(telemetry);
          this.telemetry = telemetry;
          this.filterProviders = filterProviders;
          this.cachedTelemetryEvents = [];
        }
        getFilters() {
          let filters = /* @__PURE__ */ new Map();
          for (let filter4 of this.filterProviders) {
            let filterHeaders = filter4.getFilters();
            for (let key of filterHeaders.keys()) {
              let filterValue = filterHeaders.get(key);
              filters.set(key, filterValue);
            }
          }
          return filters;
        }
        PostEventToTelemetry(headers) {
          if (this.cachedTelemetryEvents.includes(headers)) {
            return;
          }
          const jsonHeaders = JSON.stringify(headers);
          this.telemetry.postEvent("report-headers", /* @__PURE__ */ new Map([["ABExp.headers", jsonHeaders]]));
          this.cachedTelemetryEvents.push(headers);
        }
      };
      __name(FilteredFeatureProvider, "FilteredFeatureProvider");
      exports.FilteredFeatureProvider = FilteredFeatureProvider;
    }
  });

  // node_modules/tas-client/tas-client/FeatureProvider/TasApiFeatureProvider.js
  var require_TasApiFeatureProvider = __commonJS({
    "node_modules/tas-client/tas-client/FeatureProvider/TasApiFeatureProvider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var FilteredFeatureProvider_1 = require_FilteredFeatureProvider();
      exports.TASAPI_FETCHERROR_EVENTNAME = "call-tas-error";
      var ErrorType = "ErrorType";
      var TasApiFeatureProvider = class extends FilteredFeatureProvider_1.FilteredFeatureProvider {
        constructor(httpClient, telemetry, filterProviders) {
          super(telemetry, filterProviders);
          this.httpClient = httpClient;
          this.telemetry = telemetry;
          this.filterProviders = filterProviders;
        }
        /**
         * Method that handles fetching of latest data (in this case, flights) from the provider.
         */
        async fetch() {
          let filters = this.getFilters();
          let headers = {};
          for (let key of filters.keys()) {
            const filterValue = filters.get(key);
            headers[key] = filterValue;
          }
          let response;
          try {
            response = await this.httpClient.get({ headers });
          } catch (error) {
            const axiosError = error;
            const properties6 = /* @__PURE__ */ new Map();
            if (axiosError.response) {
              properties6.set(ErrorType, "ServerError");
            } else if (axiosError.request) {
              properties6.set(ErrorType, "NoResponse");
            } else {
              properties6.set(ErrorType, "GenericError");
            }
            this.telemetry.postEvent(exports.TASAPI_FETCHERROR_EVENTNAME, properties6);
          }
          if (!response) {
            throw Error(exports.TASAPI_FETCHERROR_EVENTNAME);
          }
          if (filters.keys.length > 0) {
            this.PostEventToTelemetry(headers);
          }
          let responseData = response.data;
          let configs = responseData.Configs;
          let features = [];
          for (let c of configs) {
            if (!c.Parameters) {
              continue;
            }
            for (let key of Object.keys(c.Parameters)) {
              const featureName = key + (c.Parameters[key] ? "" : "cf");
              if (!features.includes(featureName)) {
                features.push(featureName);
              }
            }
          }
          return {
            features,
            assignmentContext: responseData.AssignmentContext,
            configs
          };
        }
      };
      __name(TasApiFeatureProvider, "TasApiFeatureProvider");
      exports.TasApiFeatureProvider = TasApiFeatureProvider;
    }
  });

  // node_modules/axios/lib/helpers/bind.js
  var require_bind = __commonJS({
    "node_modules/axios/lib/helpers/bind.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function bind(fn2, thisArg) {
        return /* @__PURE__ */ __name(function wrap() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          return fn2.apply(thisArg, args);
        }, "wrap");
      }, "bind");
    }
  });

  // node_modules/axios/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/axios/lib/utils.js"(exports, module) {
      "use strict";
      var bind = require_bind();
      var toString = Object.prototype.toString;
      function isArray3(val) {
        return Array.isArray(val);
      }
      __name(isArray3, "isArray");
      function isUndefined2(val) {
        return typeof val === "undefined";
      }
      __name(isUndefined2, "isUndefined");
      function isBuffer(val) {
        return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
      }
      __name(isBuffer, "isBuffer");
      function isArrayBuffer(val) {
        return toString.call(val) === "[object ArrayBuffer]";
      }
      __name(isArrayBuffer, "isArrayBuffer");
      function isFormData(val) {
        return toString.call(val) === "[object FormData]";
      }
      __name(isFormData, "isFormData");
      function isArrayBufferView(val) {
        var result;
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          result = ArrayBuffer.isView(val);
        } else {
          result = val && val.buffer && isArrayBuffer(val.buffer);
        }
        return result;
      }
      __name(isArrayBufferView, "isArrayBufferView");
      function isString2(val) {
        return typeof val === "string";
      }
      __name(isString2, "isString");
      function isNumber2(val) {
        return typeof val === "number";
      }
      __name(isNumber2, "isNumber");
      function isObject3(val) {
        return val !== null && typeof val === "object";
      }
      __name(isObject3, "isObject");
      function isPlainObject2(val) {
        if (toString.call(val) !== "[object Object]") {
          return false;
        }
        var prototype = Object.getPrototypeOf(val);
        return prototype === null || prototype === Object.prototype;
      }
      __name(isPlainObject2, "isPlainObject");
      function isDate2(val) {
        return toString.call(val) === "[object Date]";
      }
      __name(isDate2, "isDate");
      function isFile(val) {
        return toString.call(val) === "[object File]";
      }
      __name(isFile, "isFile");
      function isBlob2(val) {
        return toString.call(val) === "[object Blob]";
      }
      __name(isBlob2, "isBlob");
      function isFunction2(val) {
        return toString.call(val) === "[object Function]";
      }
      __name(isFunction2, "isFunction");
      function isStream(val) {
        return isObject3(val) && isFunction2(val.pipe);
      }
      __name(isStream, "isStream");
      function isURLSearchParams(val) {
        return toString.call(val) === "[object URLSearchParams]";
      }
      __name(isURLSearchParams, "isURLSearchParams");
      function trim(str) {
        return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
      }
      __name(trim, "trim");
      function isStandardBrowserEnv() {
        if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
          return false;
        }
        return typeof window !== "undefined" && typeof document !== "undefined";
      }
      __name(isStandardBrowserEnv, "isStandardBrowserEnv");
      function forEach(obj, fn2) {
        if (obj === null || typeof obj === "undefined") {
          return;
        }
        if (typeof obj !== "object") {
          obj = [obj];
        }
        if (isArray3(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            fn2.call(null, obj[i], i, obj);
          }
        } else {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              fn2.call(null, obj[key], key, obj);
            }
          }
        }
      }
      __name(forEach, "forEach");
      function merge() {
        var result = {};
        function assignValue(val, key) {
          if (isPlainObject2(result[key]) && isPlainObject2(val)) {
            result[key] = merge(result[key], val);
          } else if (isPlainObject2(val)) {
            result[key] = merge({}, val);
          } else if (isArray3(val)) {
            result[key] = val.slice();
          } else {
            result[key] = val;
          }
        }
        __name(assignValue, "assignValue");
        for (var i = 0, l = arguments.length; i < l; i++) {
          forEach(arguments[i], assignValue);
        }
        return result;
      }
      __name(merge, "merge");
      function extend3(a, b, thisArg) {
        forEach(b, /* @__PURE__ */ __name(function assignValue(val, key) {
          if (thisArg && typeof val === "function") {
            a[key] = bind(val, thisArg);
          } else {
            a[key] = val;
          }
        }, "assignValue"));
        return a;
      }
      __name(extend3, "extend");
      function stripBOM(content) {
        if (content.charCodeAt(0) === 65279) {
          content = content.slice(1);
        }
        return content;
      }
      __name(stripBOM, "stripBOM");
      module.exports = {
        isArray: isArray3,
        isArrayBuffer,
        isBuffer,
        isFormData,
        isArrayBufferView,
        isString: isString2,
        isNumber: isNumber2,
        isObject: isObject3,
        isPlainObject: isPlainObject2,
        isUndefined: isUndefined2,
        isDate: isDate2,
        isFile,
        isBlob: isBlob2,
        isFunction: isFunction2,
        isStream,
        isURLSearchParams,
        isStandardBrowserEnv,
        forEach,
        merge,
        extend: extend3,
        trim,
        stripBOM
      };
    }
  });

  // node_modules/axios/lib/helpers/buildURL.js
  var require_buildURL = __commonJS({
    "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function encode(val) {
        return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      __name(encode, "encode");
      module.exports = /* @__PURE__ */ __name(function buildURL(url, params, paramsSerializer) {
        if (!params) {
          return url;
        }
        var serializedParams;
        if (paramsSerializer) {
          serializedParams = paramsSerializer(params);
        } else if (utils.isURLSearchParams(params)) {
          serializedParams = params.toString();
        } else {
          var parts = [];
          utils.forEach(params, /* @__PURE__ */ __name(function serialize(val, key) {
            if (val === null || typeof val === "undefined") {
              return;
            }
            if (utils.isArray(val)) {
              key = key + "[]";
            } else {
              val = [val];
            }
            utils.forEach(val, /* @__PURE__ */ __name(function parseValue(v) {
              if (utils.isDate(v)) {
                v = v.toISOString();
              } else if (utils.isObject(v)) {
                v = JSON.stringify(v);
              }
              parts.push(encode(key) + "=" + encode(v));
            }, "parseValue"));
          }, "serialize"));
          serializedParams = parts.join("&");
        }
        if (serializedParams) {
          var hashmarkIndex = url.indexOf("#");
          if (hashmarkIndex !== -1) {
            url = url.slice(0, hashmarkIndex);
          }
          url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
        }
        return url;
      }, "buildURL");
    }
  });

  // node_modules/axios/lib/core/InterceptorManager.js
  var require_InterceptorManager = __commonJS({
    "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      function InterceptorManager() {
        this.handlers = [];
      }
      __name(InterceptorManager, "InterceptorManager");
      InterceptorManager.prototype.use = /* @__PURE__ */ __name(function use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }, "use");
      InterceptorManager.prototype.eject = /* @__PURE__ */ __name(function eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }, "eject");
      InterceptorManager.prototype.forEach = /* @__PURE__ */ __name(function forEach(fn2) {
        utils.forEach(this.handlers, /* @__PURE__ */ __name(function forEachHandler(h2) {
          if (h2 !== null) {
            fn2(h2);
          }
        }, "forEachHandler"));
      }, "forEach");
      module.exports = InterceptorManager;
    }
  });

  // node_modules/axios/lib/helpers/normalizeHeaderName.js
  var require_normalizeHeaderName = __commonJS({
    "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = /* @__PURE__ */ __name(function normalizeHeaderName(headers, normalizedName) {
        utils.forEach(headers, /* @__PURE__ */ __name(function processHeader(value, name) {
          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
          }
        }, "processHeader"));
      }, "normalizeHeaderName");
    }
  });

  // node_modules/axios/lib/core/enhanceError.js
  var require_enhanceError = __commonJS({
    "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function enhanceError(error, config, code, request, response) {
        error.config = config;
        if (code) {
          error.code = code;
        }
        error.request = request;
        error.response = response;
        error.isAxiosError = true;
        error.toJSON = /* @__PURE__ */ __name(function toJSON() {
          return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
          };
        }, "toJSON");
        return error;
      }, "enhanceError");
    }
  });

  // node_modules/axios/lib/defaults/transitional.js
  var require_transitional = __commonJS({
    "node_modules/axios/lib/defaults/transitional.js"(exports, module) {
      "use strict";
      module.exports = {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      };
    }
  });

  // node_modules/axios/lib/core/createError.js
  var require_createError = __commonJS({
    "node_modules/axios/lib/core/createError.js"(exports, module) {
      "use strict";
      var enhanceError = require_enhanceError();
      module.exports = /* @__PURE__ */ __name(function createError(message, config, code, request, response) {
        var error = new Error(message);
        return enhanceError(error, config, code, request, response);
      }, "createError");
    }
  });

  // node_modules/axios/lib/core/settle.js
  var require_settle = __commonJS({
    "node_modules/axios/lib/core/settle.js"(exports, module) {
      "use strict";
      var createError = require_createError();
      module.exports = /* @__PURE__ */ __name(function settle(resolve, reject, response) {
        var validateStatus = response.config.validateStatus;
        if (!response.status || !validateStatus || validateStatus(response.status)) {
          resolve(response);
        } else {
          reject(createError(
            "Request failed with status code " + response.status,
            response.config,
            null,
            response.request,
            response
          ));
        }
      }, "settle");
    }
  });

  // node_modules/axios/lib/helpers/cookies.js
  var require_cookies = __commonJS({
    "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? (
        // Standard browser envs support document.cookie
        (/* @__PURE__ */ __name(function standardBrowserEnv() {
          return {
            write: /* @__PURE__ */ __name(function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + "=" + encodeURIComponent(value));
              if (utils.isNumber(expires)) {
                cookie.push("expires=" + new Date(expires).toGMTString());
              }
              if (utils.isString(path)) {
                cookie.push("path=" + path);
              }
              if (utils.isString(domain)) {
                cookie.push("domain=" + domain);
              }
              if (secure === true) {
                cookie.push("secure");
              }
              document.cookie = cookie.join("; ");
            }, "write"),
            read: /* @__PURE__ */ __name(function read(name) {
              var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
              return match ? decodeURIComponent(match[3]) : null;
            }, "read"),
            remove: /* @__PURE__ */ __name(function remove(name) {
              this.write(name, "", Date.now() - 864e5);
            }, "remove")
          };
        }, "standardBrowserEnv"))()
      ) : (
        // Non standard browser env (web workers, react-native) lack needed support.
        (/* @__PURE__ */ __name(function nonStandardBrowserEnv() {
          return {
            write: /* @__PURE__ */ __name(function write() {
            }, "write"),
            read: /* @__PURE__ */ __name(function read() {
              return null;
            }, "read"),
            remove: /* @__PURE__ */ __name(function remove() {
            }, "remove")
          };
        }, "nonStandardBrowserEnv"))()
      );
    }
  });

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  var require_isAbsoluteURL = __commonJS({
    "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function isAbsoluteURL(url) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
      }, "isAbsoluteURL");
    }
  });

  // node_modules/axios/lib/helpers/combineURLs.js
  var require_combineURLs = __commonJS({
    "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function combineURLs(baseURL, relativeURL) {
        return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
      }, "combineURLs");
    }
  });

  // node_modules/axios/lib/core/buildFullPath.js
  var require_buildFullPath = __commonJS({
    "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
      "use strict";
      var isAbsoluteURL = require_isAbsoluteURL();
      var combineURLs = require_combineURLs();
      module.exports = /* @__PURE__ */ __name(function buildFullPath(baseURL, requestedURL) {
        if (baseURL && !isAbsoluteURL(requestedURL)) {
          return combineURLs(baseURL, requestedURL);
        }
        return requestedURL;
      }, "buildFullPath");
    }
  });

  // node_modules/axios/lib/helpers/parseHeaders.js
  var require_parseHeaders = __commonJS({
    "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var ignoreDuplicateOf = [
        "age",
        "authorization",
        "content-length",
        "content-type",
        "etag",
        "expires",
        "from",
        "host",
        "if-modified-since",
        "if-unmodified-since",
        "last-modified",
        "location",
        "max-forwards",
        "proxy-authorization",
        "referer",
        "retry-after",
        "user-agent"
      ];
      module.exports = /* @__PURE__ */ __name(function parseHeaders(headers) {
        var parsed = {};
        var key;
        var val;
        var i;
        if (!headers) {
          return parsed;
        }
        utils.forEach(headers.split("\n"), /* @__PURE__ */ __name(function parser(line) {
          i = line.indexOf(":");
          key = utils.trim(line.substr(0, i)).toLowerCase();
          val = utils.trim(line.substr(i + 1));
          if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
              return;
            }
            if (key === "set-cookie") {
              parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
            } else {
              parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
          }
        }, "parser"));
        return parsed;
      }, "parseHeaders");
    }
  });

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var require_isURLSameOrigin = __commonJS({
    "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = utils.isStandardBrowserEnv() ? (
        // Standard browser envs have full support of the APIs needed to test
        // whether the request URL is of the same origin as current location.
        (/* @__PURE__ */ __name(function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement("a");
          var originURL;
          function resolveURL(url) {
            var href = url;
            if (msie) {
              urlParsingNode.setAttribute("href", href);
              href = urlParsingNode.href;
            }
            urlParsingNode.setAttribute("href", href);
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
            };
          }
          __name(resolveURL, "resolveURL");
          originURL = resolveURL(window.location.href);
          return /* @__PURE__ */ __name(function isURLSameOrigin(requestURL) {
            var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
            return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
          }, "isURLSameOrigin");
        }, "standardBrowserEnv"))()
      ) : (
        // Non standard browser envs (web workers, react-native) lack needed support.
        (/* @__PURE__ */ __name(function nonStandardBrowserEnv() {
          return /* @__PURE__ */ __name(function isURLSameOrigin() {
            return true;
          }, "isURLSameOrigin");
        }, "nonStandardBrowserEnv"))()
      );
    }
  });

  // node_modules/axios/lib/cancel/Cancel.js
  var require_Cancel = __commonJS({
    "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
      "use strict";
      function Cancel(message) {
        this.message = message;
      }
      __name(Cancel, "Cancel");
      Cancel.prototype.toString = /* @__PURE__ */ __name(function toString() {
        return "Cancel" + (this.message ? ": " + this.message : "");
      }, "toString");
      Cancel.prototype.__CANCEL__ = true;
      module.exports = Cancel;
    }
  });

  // node_modules/axios/lib/adapters/xhr.js
  var require_xhr = __commonJS({
    "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var settle = require_settle();
      var cookies = require_cookies();
      var buildURL = require_buildURL();
      var buildFullPath = require_buildFullPath();
      var parseHeaders = require_parseHeaders();
      var isURLSameOrigin = require_isURLSameOrigin();
      var createError = require_createError();
      var transitionalDefaults = require_transitional();
      var Cancel = require_Cancel();
      module.exports = /* @__PURE__ */ __name(function xhrAdapter(config) {
        return new Promise(/* @__PURE__ */ __name(function dispatchXhrRequest(resolve, reject) {
          var requestData = config.data;
          var requestHeaders = config.headers;
          var responseType = config.responseType;
          var onCanceled;
          function done() {
            if (config.cancelToken) {
              config.cancelToken.unsubscribe(onCanceled);
            }
            if (config.signal) {
              config.signal.removeEventListener("abort", onCanceled);
            }
          }
          __name(done, "done");
          if (utils.isFormData(requestData)) {
            delete requestHeaders["Content-Type"];
          }
          var request = new XMLHttpRequest();
          if (config.auth) {
            var username2 = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username2 + ":" + password);
          }
          var fullPath = buildFullPath(config.baseURL, config.url);
          request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
          request.timeout = config.timeout;
          function onloadend() {
            if (!request) {
              return;
            }
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
              data: responseData,
              status: request.status,
              statusText: request.statusText,
              headers: responseHeaders,
              config,
              request
            };
            settle(/* @__PURE__ */ __name(function _resolve(value) {
              resolve(value);
              done();
            }, "_resolve"), /* @__PURE__ */ __name(function _reject(err) {
              reject(err);
              done();
            }, "_reject"), response);
            request = null;
          }
          __name(onloadend, "onloadend");
          if ("onloadend" in request) {
            request.onloadend = onloadend;
          } else {
            request.onreadystatechange = /* @__PURE__ */ __name(function handleLoad() {
              if (!request || request.readyState !== 4) {
                return;
              }
              if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                return;
              }
              setTimeout(onloadend);
            }, "handleLoad");
          }
          request.onabort = /* @__PURE__ */ __name(function handleAbort() {
            if (!request) {
              return;
            }
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            request = null;
          }, "handleAbort");
          request.onerror = /* @__PURE__ */ __name(function handleError2() {
            reject(createError("Network Error", config, null, request));
            request = null;
          }, "handleError");
          request.ontimeout = /* @__PURE__ */ __name(function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || transitionalDefaults;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(createError(
              timeoutErrorMessage,
              config,
              transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
              request
            ));
            request = null;
          }, "handleTimeout");
          if (utils.isStandardBrowserEnv()) {
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
            if (xsrfValue) {
              requestHeaders[config.xsrfHeaderName] = xsrfValue;
            }
          }
          if ("setRequestHeader" in request) {
            utils.forEach(requestHeaders, /* @__PURE__ */ __name(function setRequestHeader(val, key) {
              if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
                delete requestHeaders[key];
              } else {
                request.setRequestHeader(key, val);
              }
            }, "setRequestHeader"));
          }
          if (!utils.isUndefined(config.withCredentials)) {
            request.withCredentials = !!config.withCredentials;
          }
          if (responseType && responseType !== "json") {
            request.responseType = config.responseType;
          }
          if (typeof config.onDownloadProgress === "function") {
            request.addEventListener("progress", config.onDownloadProgress);
          }
          if (typeof config.onUploadProgress === "function" && request.upload) {
            request.upload.addEventListener("progress", config.onUploadProgress);
          }
          if (config.cancelToken || config.signal) {
            onCanceled = /* @__PURE__ */ __name(function(cancel) {
              if (!request) {
                return;
              }
              reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
              request.abort();
              request = null;
            }, "onCanceled");
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) {
              config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
            }
          }
          if (!requestData) {
            requestData = null;
          }
          request.send(requestData);
        }, "dispatchXhrRequest"));
      }, "xhrAdapter");
    }
  });

  // node_modules/axios/lib/defaults/index.js
  var require_defaults = __commonJS({
    "node_modules/axios/lib/defaults/index.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var normalizeHeaderName = require_normalizeHeaderName();
      var enhanceError = require_enhanceError();
      var transitionalDefaults = require_transitional();
      var DEFAULT_CONTENT_TYPE2 = {
        "Content-Type": "application/x-www-form-urlencoded"
      };
      function setContentTypeIfUnset(headers, value) {
        if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
          headers["Content-Type"] = value;
        }
      }
      __name(setContentTypeIfUnset, "setContentTypeIfUnset");
      function getDefaultAdapter() {
        var adapter;
        if (typeof XMLHttpRequest !== "undefined") {
          adapter = require_xhr();
        } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
          adapter = require_xhr();
        }
        return adapter;
      }
      __name(getDefaultAdapter, "getDefaultAdapter");
      function stringifySafely(rawValue, parser, encoder) {
        if (utils.isString(rawValue)) {
          try {
            (parser || JSON.parse)(rawValue);
            return utils.trim(rawValue);
          } catch (e) {
            if (e.name !== "SyntaxError") {
              throw e;
            }
          }
        }
        return (encoder || JSON.stringify)(rawValue);
      }
      __name(stringifySafely, "stringifySafely");
      var defaults = {
        transitional: transitionalDefaults,
        adapter: getDefaultAdapter(),
        transformRequest: [/* @__PURE__ */ __name(function transformRequest(data, headers) {
          normalizeHeaderName(headers, "Accept");
          normalizeHeaderName(headers, "Content-Type");
          if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
            return data;
          }
          if (utils.isArrayBufferView(data)) {
            return data.buffer;
          }
          if (utils.isURLSearchParams(data)) {
            setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
            return data.toString();
          }
          if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
            setContentTypeIfUnset(headers, "application/json");
            return stringifySafely(data);
          }
          return data;
        }, "transformRequest")],
        transformResponse: [/* @__PURE__ */ __name(function transformResponse(data) {
          var transitional = this.transitional || defaults.transitional;
          var silentJSONParsing = transitional && transitional.silentJSONParsing;
          var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
          var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
          if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
            try {
              return JSON.parse(data);
            } catch (e) {
              if (strictJSONParsing) {
                if (e.name === "SyntaxError") {
                  throw enhanceError(e, this, "E_JSON_PARSE");
                }
                throw e;
              }
            }
          }
          return data;
        }, "transformResponse")],
        /**
         * A timeout in milliseconds to abort a request. If set to 0 (default) a
         * timeout is not created.
         */
        timeout: 0,
        xsrfCookieName: "XSRF-TOKEN",
        xsrfHeaderName: "X-XSRF-TOKEN",
        maxContentLength: -1,
        maxBodyLength: -1,
        validateStatus: /* @__PURE__ */ __name(function validateStatus(status) {
          return status >= 200 && status < 300;
        }, "validateStatus"),
        headers: {
          common: {
            "Accept": "application/json, text/plain, */*"
          }
        }
      };
      utils.forEach(["delete", "get", "head"], /* @__PURE__ */ __name(function forEachMethodNoData(method) {
        defaults.headers[method] = {};
      }, "forEachMethodNoData"));
      utils.forEach(["post", "put", "patch"], /* @__PURE__ */ __name(function forEachMethodWithData(method) {
        defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE2);
      }, "forEachMethodWithData"));
      module.exports = defaults;
    }
  });

  // node_modules/axios/lib/core/transformData.js
  var require_transformData = __commonJS({
    "node_modules/axios/lib/core/transformData.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var defaults = require_defaults();
      module.exports = /* @__PURE__ */ __name(function transformData(data, headers, fns) {
        var context = this || defaults;
        utils.forEach(fns, /* @__PURE__ */ __name(function transform(fn2) {
          data = fn2.call(context, data, headers);
        }, "transform"));
        return data;
      }, "transformData");
    }
  });

  // node_modules/axios/lib/cancel/isCancel.js
  var require_isCancel = __commonJS({
    "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function isCancel(value) {
        return !!(value && value.__CANCEL__);
      }, "isCancel");
    }
  });

  // node_modules/axios/lib/core/dispatchRequest.js
  var require_dispatchRequest = __commonJS({
    "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var transformData = require_transformData();
      var isCancel = require_isCancel();
      var defaults = require_defaults();
      var Cancel = require_Cancel();
      function throwIfCancellationRequested(config) {
        if (config.cancelToken) {
          config.cancelToken.throwIfRequested();
        }
        if (config.signal && config.signal.aborted) {
          throw new Cancel("canceled");
        }
      }
      __name(throwIfCancellationRequested, "throwIfCancellationRequested");
      module.exports = /* @__PURE__ */ __name(function dispatchRequest(config) {
        throwIfCancellationRequested(config);
        config.headers = config.headers || {};
        config.data = transformData.call(
          config,
          config.data,
          config.headers,
          config.transformRequest
        );
        config.headers = utils.merge(
          config.headers.common || {},
          config.headers[config.method] || {},
          config.headers
        );
        utils.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          /* @__PURE__ */ __name(function cleanHeaderConfig(method) {
            delete config.headers[method];
          }, "cleanHeaderConfig")
        );
        var adapter = config.adapter || defaults.adapter;
        return adapter(config).then(/* @__PURE__ */ __name(function onAdapterResolution(response) {
          throwIfCancellationRequested(config);
          response.data = transformData.call(
            config,
            response.data,
            response.headers,
            config.transformResponse
          );
          return response;
        }, "onAdapterResolution"), /* @__PURE__ */ __name(function onAdapterRejection(reason) {
          if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            if (reason && reason.response) {
              reason.response.data = transformData.call(
                config,
                reason.response.data,
                reason.response.headers,
                config.transformResponse
              );
            }
          }
          return Promise.reject(reason);
        }, "onAdapterRejection"));
      }, "dispatchRequest");
    }
  });

  // node_modules/axios/lib/core/mergeConfig.js
  var require_mergeConfig = __commonJS({
    "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = /* @__PURE__ */ __name(function mergeConfig(config1, config2) {
        config2 = config2 || {};
        var config = {};
        function getMergedValue(target, source) {
          if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
            return utils.merge(target, source);
          } else if (utils.isPlainObject(source)) {
            return utils.merge({}, source);
          } else if (utils.isArray(source)) {
            return source.slice();
          }
          return source;
        }
        __name(getMergedValue, "getMergedValue");
        function mergeDeepProperties(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        __name(mergeDeepProperties, "mergeDeepProperties");
        function valueFromConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          }
        }
        __name(valueFromConfig2, "valueFromConfig2");
        function defaultToConfig2(prop) {
          if (!utils.isUndefined(config2[prop])) {
            return getMergedValue(void 0, config2[prop]);
          } else if (!utils.isUndefined(config1[prop])) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        __name(defaultToConfig2, "defaultToConfig2");
        function mergeDirectKeys(prop) {
          if (prop in config2) {
            return getMergedValue(config1[prop], config2[prop]);
          } else if (prop in config1) {
            return getMergedValue(void 0, config1[prop]);
          }
        }
        __name(mergeDirectKeys, "mergeDirectKeys");
        var mergeMap = {
          "url": valueFromConfig2,
          "method": valueFromConfig2,
          "data": valueFromConfig2,
          "baseURL": defaultToConfig2,
          "transformRequest": defaultToConfig2,
          "transformResponse": defaultToConfig2,
          "paramsSerializer": defaultToConfig2,
          "timeout": defaultToConfig2,
          "timeoutMessage": defaultToConfig2,
          "withCredentials": defaultToConfig2,
          "adapter": defaultToConfig2,
          "responseType": defaultToConfig2,
          "xsrfCookieName": defaultToConfig2,
          "xsrfHeaderName": defaultToConfig2,
          "onUploadProgress": defaultToConfig2,
          "onDownloadProgress": defaultToConfig2,
          "decompress": defaultToConfig2,
          "maxContentLength": defaultToConfig2,
          "maxBodyLength": defaultToConfig2,
          "transport": defaultToConfig2,
          "httpAgent": defaultToConfig2,
          "httpsAgent": defaultToConfig2,
          "cancelToken": defaultToConfig2,
          "socketPath": defaultToConfig2,
          "responseEncoding": defaultToConfig2,
          "validateStatus": mergeDirectKeys
        };
        utils.forEach(Object.keys(config1).concat(Object.keys(config2)), /* @__PURE__ */ __name(function computeConfigValue(prop) {
          var merge = mergeMap[prop] || mergeDeepProperties;
          var configValue = merge(prop);
          utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
        }, "computeConfigValue"));
        return config;
      }, "mergeConfig");
    }
  });

  // node_modules/axios/lib/env/data.js
  var require_data = __commonJS({
    "node_modules/axios/lib/env/data.js"(exports, module) {
      module.exports = {
        "version": "0.26.1"
      };
    }
  });

  // node_modules/axios/lib/helpers/validator.js
  var require_validator = __commonJS({
    "node_modules/axios/lib/helpers/validator.js"(exports, module) {
      "use strict";
      var VERSION = require_data().version;
      var validators = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
        validators[type] = /* @__PURE__ */ __name(function validator(thing) {
          return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
        }, "validator");
      });
      var deprecatedWarnings = {};
      validators.transitional = /* @__PURE__ */ __name(function transitional(validator, version2, message) {
        function formatMessage(opt, desc) {
          return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
        }
        __name(formatMessage, "formatMessage");
        return function(value, opt, opts) {
          if (validator === false) {
            throw new Error(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")));
          }
          if (version2 && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            console.warn(
              formatMessage(
                opt,
                " has been deprecated since v" + version2 + " and will be removed in the near future"
              )
            );
          }
          return validator ? validator(value, opt, opts) : true;
        };
      }, "transitional");
      function assertOptions(options, schema, allowUnknown) {
        if (typeof options !== "object") {
          throw new TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var i = keys.length;
        while (i-- > 0) {
          var opt = keys[i];
          var validator = schema[opt];
          if (validator) {
            var value = options[opt];
            var result = value === void 0 || validator(value, opt, options);
            if (result !== true) {
              throw new TypeError("option " + opt + " must be " + result);
            }
            continue;
          }
          if (allowUnknown !== true) {
            throw Error("Unknown option " + opt);
          }
        }
      }
      __name(assertOptions, "assertOptions");
      module.exports = {
        assertOptions,
        validators
      };
    }
  });

  // node_modules/axios/lib/core/Axios.js
  var require_Axios = __commonJS({
    "node_modules/axios/lib/core/Axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var buildURL = require_buildURL();
      var InterceptorManager = require_InterceptorManager();
      var dispatchRequest = require_dispatchRequest();
      var mergeConfig = require_mergeConfig();
      var validator = require_validator();
      var validators = validator.validators;
      function Axios(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      __name(Axios, "Axios");
      Axios.prototype.request = /* @__PURE__ */ __name(function request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        if (config.method) {
          config.method = config.method.toLowerCase();
        } else if (this.defaults.method) {
          config.method = this.defaults.method.toLowerCase();
        } else {
          config.method = "get";
        }
        var transitional = config.transitional;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        var requestInterceptorChain = [];
        var synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(/* @__PURE__ */ __name(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        }, "unshiftRequestInterceptors"));
        var responseInterceptorChain = [];
        this.interceptors.response.forEach(/* @__PURE__ */ __name(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        }, "pushResponseInterceptors"));
        var promise;
        if (!synchronousRequestInterceptors) {
          var chain = [dispatchRequest, void 0];
          Array.prototype.unshift.apply(chain, requestInterceptorChain);
          chain = chain.concat(responseInterceptorChain);
          promise = Promise.resolve(config);
          while (chain.length) {
            promise = promise.then(chain.shift(), chain.shift());
          }
          return promise;
        }
        var newConfig = config;
        while (requestInterceptorChain.length) {
          var onFulfilled = requestInterceptorChain.shift();
          var onRejected = requestInterceptorChain.shift();
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected(error);
            break;
          }
        }
        try {
          promise = dispatchRequest(newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        while (responseInterceptorChain.length) {
          promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
        }
        return promise;
      }, "request");
      Axios.prototype.getUri = /* @__PURE__ */ __name(function getUri(config) {
        config = mergeConfig(this.defaults, config);
        return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
      }, "getUri");
      utils.forEach(["delete", "get", "head", "options"], /* @__PURE__ */ __name(function forEachMethodNoData(method) {
        Axios.prototype[method] = function(url, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data: (config || {}).data
          }));
        };
      }, "forEachMethodNoData"));
      utils.forEach(["post", "put", "patch"], /* @__PURE__ */ __name(function forEachMethodWithData(method) {
        Axios.prototype[method] = function(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            url,
            data
          }));
        };
      }, "forEachMethodWithData"));
      module.exports = Axios;
    }
  });

  // node_modules/axios/lib/cancel/CancelToken.js
  var require_CancelToken = __commonJS({
    "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
      "use strict";
      var Cancel = require_Cancel();
      function CancelToken(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        var resolvePromise;
        this.promise = new Promise(/* @__PURE__ */ __name(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        }, "promiseExecutor"));
        var token = this;
        this.promise.then(function(cancel) {
          if (!token._listeners)
            return;
          var i;
          var l = token._listeners.length;
          for (i = 0; i < l; i++) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = function(onfulfilled) {
          var _resolve;
          var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = /* @__PURE__ */ __name(function reject() {
            token.unsubscribe(_resolve);
          }, "reject");
          return promise;
        };
        executor(/* @__PURE__ */ __name(function cancel(message) {
          if (token.reason) {
            return;
          }
          token.reason = new Cancel(message);
          resolvePromise(token.reason);
        }, "cancel"));
      }
      __name(CancelToken, "CancelToken");
      CancelToken.prototype.throwIfRequested = /* @__PURE__ */ __name(function throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }, "throwIfRequested");
      CancelToken.prototype.subscribe = /* @__PURE__ */ __name(function subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }, "subscribe");
      CancelToken.prototype.unsubscribe = /* @__PURE__ */ __name(function unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        var index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }, "unsubscribe");
      CancelToken.source = /* @__PURE__ */ __name(function source() {
        var cancel;
        var token = new CancelToken(/* @__PURE__ */ __name(function executor(c) {
          cancel = c;
        }, "executor"));
        return {
          token,
          cancel
        };
      }, "source");
      module.exports = CancelToken;
    }
  });

  // node_modules/axios/lib/helpers/spread.js
  var require_spread = __commonJS({
    "node_modules/axios/lib/helpers/spread.js"(exports, module) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function spread(callback) {
        return /* @__PURE__ */ __name(function wrap(arr) {
          return callback.apply(null, arr);
        }, "wrap");
      }, "spread");
    }
  });

  // node_modules/axios/lib/helpers/isAxiosError.js
  var require_isAxiosError = __commonJS({
    "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      module.exports = /* @__PURE__ */ __name(function isAxiosError(payload) {
        return utils.isObject(payload) && payload.isAxiosError === true;
      }, "isAxiosError");
    }
  });

  // node_modules/axios/lib/axios.js
  var require_axios = __commonJS({
    "node_modules/axios/lib/axios.js"(exports, module) {
      "use strict";
      var utils = require_utils();
      var bind = require_bind();
      var Axios = require_Axios();
      var mergeConfig = require_mergeConfig();
      var defaults = require_defaults();
      function createInstance(defaultConfig) {
        var context = new Axios(defaultConfig);
        var instance = bind(Axios.prototype.request, context);
        utils.extend(instance, Axios.prototype, context);
        utils.extend(instance, context);
        instance.create = /* @__PURE__ */ __name(function create(instanceConfig) {
          return createInstance(mergeConfig(defaultConfig, instanceConfig));
        }, "create");
        return instance;
      }
      __name(createInstance, "createInstance");
      var axios = createInstance(defaults);
      axios.Axios = Axios;
      axios.Cancel = require_Cancel();
      axios.CancelToken = require_CancelToken();
      axios.isCancel = require_isCancel();
      axios.VERSION = require_data().version;
      axios.all = /* @__PURE__ */ __name(function all(promises) {
        return Promise.all(promises);
      }, "all");
      axios.spread = require_spread();
      axios.isAxiosError = require_isAxiosError();
      module.exports = axios;
      module.exports.default = axios;
    }
  });

  // node_modules/axios/index.js
  var require_axios2 = __commonJS({
    "node_modules/axios/index.js"(exports, module) {
      module.exports = require_axios();
    }
  });

  // node_modules/tas-client/tas-client/Util/AxiosHttpClient.js
  var require_AxiosHttpClient = __commonJS({
    "node_modules/tas-client/tas-client/Util/AxiosHttpClient.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var axios_1 = require_axios2();
      var AxiosHttpClient = class {
        constructor(endpoint) {
          this.endpoint = endpoint;
        }
        get(config) {
          return axios_1.default.get(this.endpoint, Object.assign(Object.assign({}, config), { proxy: false }));
        }
      };
      __name(AxiosHttpClient, "AxiosHttpClient");
      exports.AxiosHttpClient = AxiosHttpClient;
    }
  });

  // node_modules/tas-client/tas-client/Util/MemoryKeyValueStorage.js
  var require_MemoryKeyValueStorage = __commonJS({
    "node_modules/tas-client/tas-client/Util/MemoryKeyValueStorage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var MemoryKeyValueStorage = class {
        constructor() {
          this.storage = /* @__PURE__ */ new Map();
        }
        async getValue(key, defaultValue) {
          if (this.storage.has(key)) {
            return await Promise.resolve(this.storage.get(key));
          }
          return await Promise.resolve(defaultValue || void 0);
        }
        setValue(key, value) {
          this.storage.set(key, value);
        }
      };
      __name(MemoryKeyValueStorage, "MemoryKeyValueStorage");
      exports.MemoryKeyValueStorage = MemoryKeyValueStorage;
    }
  });

  // node_modules/tas-client/tas-client/ExperimentationServiceBase.js
  var require_ExperimentationServiceBase = __commonJS({
    "node_modules/tas-client/tas-client/ExperimentationServiceBase.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var MemoryKeyValueStorage_1 = require_MemoryKeyValueStorage();
      var ExperimentationServiceBase = class {
        constructor(telemetry, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
          this.telemetry = telemetry;
          this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
          this.telemetryEventName = telemetryEventName;
          this.storageKey = storageKey;
          this.storage = storage;
          this.featuresConsumed = false;
          this.cachedTelemetryEvents = [];
          this._features = {
            features: [],
            assignmentContext: "",
            configs: []
          };
          if (!this.storageKey) {
            this.storageKey = "ABExp.Features";
          }
          if (!this.storage) {
            storage = new MemoryKeyValueStorage_1.MemoryKeyValueStorage();
          }
          this.loadCachePromise = this.loadCachedFeatureData();
          this.initializePromise = this.loadCachePromise;
          this.initialFetch = new Promise((resolve, reject) => {
            this.resolveInitialFetchPromise = resolve;
          });
        }
        get features() {
          return this._features;
        }
        set features(value) {
          this._features = value;
          if (this.telemetry) {
            this.telemetry.setSharedProperty(this.assignmentContextTelemetryPropertyName, this.features.assignmentContext);
          }
        }
        /**
         * Gets all the features from the provider sources (not cache).
         * It returns these features and will also update the providers to have the latest features cached.
         */
        async getFeaturesAsync(overrideInMemoryFeatures = false) {
          if (this.fetchPromise != null) {
            try {
              await this.fetchPromise;
            } catch (_a7) {
            }
            return this.features;
          }
          if (!this.featureProviders || this.featureProviders.length === 0) {
            return Promise.resolve({
              features: [],
              assignmentContext: "",
              configs: []
            });
          }
          try {
            this.fetchPromise = Promise.all(this.featureProviders.map(async (provider) => {
              return await provider.getFeatures();
            }));
            const featureResults = await this.fetchPromise;
            this.updateFeatures(featureResults, overrideInMemoryFeatures);
          } catch (_b2) {
          }
          this.fetchPromise = void 0;
          if (this.resolveInitialFetchPromise) {
            this.resolveInitialFetchPromise();
            this.resolveInitialFetchPromise = void 0;
          }
          return this.features;
        }
        /**
         *
         * @param featureResults The feature results obtained from all the feature providers.
         */
        updateFeatures(featureResults, overrideInMemoryFeatures = false) {
          let features = {
            features: [],
            assignmentContext: "",
            configs: []
          };
          for (let result of featureResults) {
            for (let feature of result.features) {
              if (!features.features.includes(feature)) {
                features.features.push(feature);
              }
            }
            for (let config of result.configs) {
              const existingConfig = features.configs.find((c) => c.Id === config.Id);
              if (existingConfig) {
                existingConfig.Parameters = Object.assign(Object.assign({}, existingConfig.Parameters), config.Parameters);
              } else {
                features.configs.push(config);
              }
            }
            features.assignmentContext += result.assignmentContext;
          }
          if (overrideInMemoryFeatures || !this.featuresConsumed) {
            this.features = features;
          }
          if (this.storage) {
            this.storage.setValue(this.storageKey, features);
          }
        }
        async loadCachedFeatureData() {
          let cachedFeatureData;
          if (this.storage) {
            cachedFeatureData = await this.storage.getValue(this.storageKey);
            if (cachedFeatureData !== void 0 && cachedFeatureData.configs === void 0) {
              cachedFeatureData.configs = [];
            }
          }
          if (this.features.features.length === 0) {
            this.features = cachedFeatureData || { features: [], assignmentContext: "", configs: [] };
          }
        }
        /**
         * Returns a value indicating whether the given flight is enabled.
         * It uses the in-memory cache.
         * @param flight The flight to check.
         */
        isFlightEnabled(flight) {
          this.featuresConsumed = true;
          this.PostEventToTelemetry(flight);
          return this.features.features.includes(flight);
        }
        /**
         * Returns a value indicating whether the given flight is enabled.
         * It uses the values currently on cache.
         * @param flight The flight to check.
         */
        async isCachedFlightEnabled(flight) {
          await this.loadCachePromise;
          this.featuresConsumed = true;
          this.PostEventToTelemetry(flight);
          return this.features.features.includes(flight);
        }
        /**
         * Returns a value indicating whether the given flight is enabled.
         * It re-fetches values from the server.
         * @param flight the flight to check.
         */
        async isFlightEnabledAsync(flight) {
          const features = await this.getFeaturesAsync(true);
          this.featuresConsumed = true;
          this.PostEventToTelemetry(flight);
          return features.features.includes(flight);
        }
        /**
         * Returns the value of the treatment variable, or undefined if not found.
         * It uses the values currently in memory, so the experimentation service
         * must be initialized before calling.
         * @param config name of the config to check.
         * @param name name of the treatment variable.
         */
        getTreatmentVariable(configId, name) {
          var _a7;
          this.featuresConsumed = true;
          this.PostEventToTelemetry(`${configId}.${name}`);
          const config = this.features.configs.find((c) => c.Id === configId);
          return (_a7 = config) === null || _a7 === void 0 ? void 0 : _a7.Parameters[name];
        }
        /**
         * Returns the value of the treatment variable, or undefined if not found.
         * It re-fetches values from the server. If checkCache is set to true and the value exists
         * in the cache, the Treatment Assignment Service is not called.
         * @param config name of the config to check.
         * @param name name of the treatment variable.
         * @param checkCache check the cache for the variable before calling the TAS.
         */
        async getTreatmentVariableAsync(configId, name, checkCache) {
          if (checkCache) {
            const _featuresConsumed = this.featuresConsumed;
            const cachedValue = this.getTreatmentVariable(configId, name);
            if (cachedValue === void 0) {
              this.featuresConsumed = _featuresConsumed;
            } else {
              return cachedValue;
            }
          }
          await this.getFeaturesAsync(true);
          return this.getTreatmentVariable(configId, name);
        }
        PostEventToTelemetry(flight) {
          if (this.cachedTelemetryEvents.includes(flight)) {
            return;
          }
          this.telemetry.postEvent(this.telemetryEventName, /* @__PURE__ */ new Map([["ABExp.queriedFeature", flight]]));
          this.cachedTelemetryEvents.push(flight);
        }
        invokeInit() {
          this.init();
        }
        addFeatureProvider(...providers) {
          if (providers == null || this.featureProviders == null) {
            return;
          }
          for (let provider of providers) {
            this.featureProviders.push(provider);
          }
        }
      };
      __name(ExperimentationServiceBase, "ExperimentationServiceBase");
      exports.ExperimentationServiceBase = ExperimentationServiceBase;
    }
  });

  // node_modules/tas-client/tas-client/Util/PollingService.js
  var require_PollingService = __commonJS({
    "node_modules/tas-client/tas-client/Util/PollingService.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var PollingService = class {
        constructor(fetchInterval) {
          this.fetchInterval = fetchInterval;
        }
        StopPolling() {
          clearInterval(this.intervalHandle);
          this.intervalHandle = void 0;
        }
        OnPollTick(callback) {
          this.onTick = callback;
        }
        StartPolling(pollImmediately = false) {
          if (this.intervalHandle) {
            this.StopPolling();
          }
          if (this.onTick == null) {
            return;
          }
          if (pollImmediately) {
            this.onTick().then(() => {
              return;
            }).catch(() => {
              return;
            });
          }
          this.intervalHandle = setInterval(async () => {
            await this.onTick();
          }, this.fetchInterval);
          if (this.intervalHandle.unref) {
            this.intervalHandle.unref();
          }
        }
      };
      __name(PollingService, "PollingService");
      exports.PollingService = PollingService;
    }
  });

  // node_modules/tas-client/tas-client/ExperimentationServiceAutoPolling.js
  var require_ExperimentationServiceAutoPolling = __commonJS({
    "node_modules/tas-client/tas-client/ExperimentationServiceAutoPolling.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var ExperimentationServiceBase_1 = require_ExperimentationServiceBase();
      var PollingService_1 = require_PollingService();
      var ExperimentationServiceAutoPolling = class extends ExperimentationServiceBase_1.ExperimentationServiceBase {
        constructor(telemetry, filterProviders, refreshRateMs, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage) {
          super(telemetry, assignmentContextTelemetryPropertyName, telemetryEventName, storageKey, storage);
          this.telemetry = telemetry;
          this.filterProviders = filterProviders;
          this.refreshRateMs = refreshRateMs;
          this.assignmentContextTelemetryPropertyName = assignmentContextTelemetryPropertyName;
          this.telemetryEventName = telemetryEventName;
          this.storageKey = storageKey;
          this.storage = storage;
          if (refreshRateMs < 1e3 && refreshRateMs !== 0) {
            throw new Error("The minimum refresh rate for polling is 1000 ms (1 second). If you wish to deactivate this auto-polling use value of 0.");
          }
          if (refreshRateMs > 0) {
            this.pollingService = new PollingService_1.PollingService(refreshRateMs);
            this.pollingService.OnPollTick(async () => {
              await super.getFeaturesAsync();
            });
          }
        }
        init() {
          if (this.pollingService) {
            this.pollingService.StartPolling(true);
          } else {
            super.getFeaturesAsync();
          }
        }
        /**
         * Wrapper that will reset the polling intervals whenever the feature data is fetched manually.
         */
        async getFeaturesAsync(overrideInMemoryFeatures = false) {
          if (!this.pollingService) {
            return await super.getFeaturesAsync(overrideInMemoryFeatures);
          } else {
            this.pollingService.StopPolling();
            let result = await super.getFeaturesAsync(overrideInMemoryFeatures);
            this.pollingService.StartPolling();
            return result;
          }
        }
      };
      __name(ExperimentationServiceAutoPolling, "ExperimentationServiceAutoPolling");
      exports.ExperimentationServiceAutoPolling = ExperimentationServiceAutoPolling;
    }
  });

  // node_modules/tas-client/tas-client/ExperimentationService.js
  var require_ExperimentationService = __commonJS({
    "node_modules/tas-client/tas-client/ExperimentationService.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var TasApiFeatureProvider_1 = require_TasApiFeatureProvider();
      var AxiosHttpClient_1 = require_AxiosHttpClient();
      var ExperimentationServiceAutoPolling_1 = require_ExperimentationServiceAutoPolling();
      var ExperimentationService = class extends ExperimentationServiceAutoPolling_1.ExperimentationServiceAutoPolling {
        constructor(options) {
          super(
            options.telemetry,
            options.filterProviders || [],
            // Defaulted to empty array.
            options.refetchInterval != null ? options.refetchInterval : (
              // If no fetch interval is provided, refetch functionality is turned off.
              0
            ),
            options.assignmentContextTelemetryPropertyName,
            options.telemetryEventName,
            options.storageKey,
            options.keyValueStorage
          );
          this.options = options;
          this.invokeInit();
        }
        init() {
          this.featureProviders = [];
          this.addFeatureProvider(new TasApiFeatureProvider_1.TasApiFeatureProvider(new AxiosHttpClient_1.AxiosHttpClient(this.options.endpoint), this.telemetry, this.filterProviders));
          super.init();
        }
      };
      __name(ExperimentationService, "ExperimentationService");
      exports.ExperimentationService = ExperimentationService;
      ExperimentationService.REFRESH_RATE_IN_MINUTES = 30;
    }
  });

  // node_modules/tas-client/index.js
  var require_tas_client = __commonJS({
    "node_modules/tas-client/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var ExperimentationService_1 = require_ExperimentationService();
      exports.ExperimentationService = ExperimentationService_1.ExperimentationService;
    }
  });

  // node_modules/vscode-tas-client/vscode-tas-client/MementoKeyValueStorage.js
  var require_MementoKeyValueStorage = __commonJS({
    "node_modules/vscode-tas-client/vscode-tas-client/MementoKeyValueStorage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var MementoKeyValueStorage = class {
        constructor(mementoGlobalStorage) {
          this.mementoGlobalStorage = mementoGlobalStorage;
        }
        async getValue(key, defaultValue) {
          const value = await this.mementoGlobalStorage.get(key);
          return value || defaultValue;
        }
        setValue(key, value) {
          this.mementoGlobalStorage.update(key, value);
        }
      };
      __name(MementoKeyValueStorage, "MementoKeyValueStorage");
      exports.MementoKeyValueStorage = MementoKeyValueStorage;
    }
  });

  // node_modules/vscode-tas-client/vscode-tas-client/TelemetryDisabledExperimentationService.js
  var require_TelemetryDisabledExperimentationService = __commonJS({
    "node_modules/vscode-tas-client/vscode-tas-client/TelemetryDisabledExperimentationService.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var TelemetryDisabledExperimentationService = class {
        constructor() {
          this.initializePromise = Promise.resolve();
          this.initialFetch = Promise.resolve();
        }
        isFlightEnabled(flight) {
          return false;
        }
        isCachedFlightEnabled(flight) {
          return Promise.resolve(false);
        }
        isFlightEnabledAsync(flight) {
          return Promise.resolve(false);
        }
        getTreatmentVariable(configId, name) {
          return void 0;
        }
        getTreatmentVariableAsync(configId, name) {
          return Promise.resolve(void 0);
        }
      };
      __name(TelemetryDisabledExperimentationService, "TelemetryDisabledExperimentationService");
      exports.default = TelemetryDisabledExperimentationService;
    }
  });

  // node_modules/vscode-tas-client/vscode-tas-client/VSCodeTasClient.js
  var require_VSCodeTasClient = __commonJS({
    "node_modules/vscode-tas-client/vscode-tas-client/VSCodeTasClient.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var VSCodeFilterProvider_1 = require_VSCodeFilterProvider();
      var tas_client_1 = require_tas_client();
      var vscode23 = __require("vscode");
      var MementoKeyValueStorage_1 = require_MementoKeyValueStorage();
      var TelemetryDisabledExperimentationService_1 = require_TelemetryDisabledExperimentationService();
      var endpoint = "https://default.exp-tas.com/vscode/ab";
      var telemetryEventName = "query-expfeature";
      var assignmentContextTelemetryPropertyName = "abexp.assignmentcontext";
      var storageKey = "VSCode.ABExp.FeatureData";
      var refetchInterval = 1e3 * 60 * 30;
      function getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
        if (!memento) {
          throw new Error("Memento storage was not provided.");
        }
        const config = vscode23.workspace.getConfiguration("telemetry");
        const telemetryEnabled = vscode23.env.isTelemetryEnabled === void 0 ? config.get("enableTelemetry", true) : vscode23.env.isTelemetryEnabled;
        if (!telemetryEnabled) {
          return new TelemetryDisabledExperimentationService_1.default();
        }
        const extensionFilterProvider = new VSCodeFilterProvider_1.VSCodeFilterProvider(extensionName, extensionVersion, targetPopulation);
        const providerList = [extensionFilterProvider, ...filterProviders];
        const keyValueStorage = new MementoKeyValueStorage_1.MementoKeyValueStorage(memento);
        return new tas_client_1.ExperimentationService({
          filterProviders: providerList,
          telemetry,
          storageKey,
          keyValueStorage,
          featuresTelemetryPropertyName: "",
          assignmentContextTelemetryPropertyName,
          telemetryEventName,
          endpoint,
          refetchInterval
        });
      }
      __name(getExperimentationService, "getExperimentationService");
      exports.getExperimentationService = getExperimentationService;
      async function getExperimentationServiceAsync(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders) {
        const experimentationService = getExperimentationService(extensionName, extensionVersion, targetPopulation, telemetry, memento, ...filterProviders);
        await experimentationService.initializePromise;
        return experimentationService;
      }
      __name(getExperimentationServiceAsync, "getExperimentationServiceAsync");
      exports.getExperimentationServiceAsync = getExperimentationServiceAsync;
    }
  });

  // node_modules/vscode-tas-client/index.js
  var require_vscode_tas_client = __commonJS({
    "node_modules/vscode-tas-client/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var VSCodeTasClient_1 = require_VSCodeTasClient();
      exports.getExperimentationService = VSCodeTasClient_1.getExperimentationService;
      exports.getExperimentationServiceAsync = VSCodeTasClient_1.getExperimentationServiceAsync;
      var VSCodeFilterProvider_1 = require_VSCodeFilterProvider();
      exports.TargetPopulation = VSCodeFilterProvider_1.TargetPopulation;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/createExperimentationService.js
  var require_createExperimentationService = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/createExperimentationService.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createExperimentationService = void 0;
      var vscode23 = __require("vscode");
      var tas = require_vscode_tas_client();
      var extensionVariables_1 = require_extensionVariables();
      var getPackageInfo_1 = require_getPackageInfo();
      var index_1 = require_src3();
      function createExperimentationService(ctx, targetPopulation) {
        return __awaiter6(this, void 0, void 0, function* () {
          const result = new ExperimentationServiceAdapter();
          const { extensionId, extensionVersion } = (0, getPackageInfo_1.getPackageInfo)(ctx);
          if (targetPopulation === void 0) {
            if (ctx.extensionMode !== vscode23.ExtensionMode.Production) {
              targetPopulation = tas.TargetPopulation.Team;
            } else if (/alpha/ig.test(extensionVersion)) {
              targetPopulation = tas.TargetPopulation.Insiders;
            } else if (/Insiders/ig.test(vscode23.env.appName)) {
              targetPopulation = tas.TargetPopulation.Insiders;
            } else {
              targetPopulation = tas.TargetPopulation.Public;
            }
          }
          try {
            result.wrappedExperimentationService = yield tas.getExperimentationServiceAsync(extensionId, extensionVersion, targetPopulation, new ExperimentationTelemetry(extensionVariables_1.ext._internalReporter, ctx), ctx.globalState);
          } catch (_a7) {
          }
          return result;
        });
      }
      __name(createExperimentationService, "createExperimentationService");
      exports.createExperimentationService = createExperimentationService;
      var ExperimentationServiceAdapter = class {
        /**
         * @deprecated Use `getCachedTreatmentVariable<boolean>('flight-name') instead
         */
        isCachedFlightEnabled(flight) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!this.wrappedExperimentationService) {
              return false;
            }
            return !!(yield this.getCachedTreatmentVariable(flight));
          });
        }
        /**
         * @deprecated Use `getLiveTreatmentVariable<boolean>('flight-name') instead
         */
        isLiveFlightEnabled(flight) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!this.wrappedExperimentationService) {
              return false;
            }
            return !!(yield this.getLiveTreatmentVariable(flight));
          });
        }
        getCachedTreatmentVariable(name) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!this.wrappedExperimentationService) {
              return Promise.resolve(void 0);
            }
            return Promise.resolve(this.wrappedExperimentationService.getTreatmentVariable("vscode", name));
          });
        }
        getLiveTreatmentVariable(name) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!this.wrappedExperimentationService) {
              return void 0;
            }
            return this.wrappedExperimentationService.getTreatmentVariableAsync("vscode", name);
          });
        }
      };
      __name(ExperimentationServiceAdapter, "ExperimentationServiceAdapter");
      var ExperimentationTelemetry = class {
        constructor(telemetryReporter, context) {
          this.telemetryReporter = telemetryReporter;
          this.sharedProperties = {};
          context.subscriptions.push((0, index_1.registerTelemetryHandler)((actionContext) => this.handleTelemetry(actionContext)));
        }
        /**
         * Implements `postEvent` for `IExperimentationTelemetry`.
         * @param eventName The name of the event
         * @param props The properties to attach to the event
         */
        postEvent(eventName, props) {
          const properties6 = {};
          for (const key of props.keys()) {
            properties6[key] = props.get(key);
          }
          Object.assign(properties6, this.sharedProperties);
          if (/query-expfeature/i.test(eventName)) {
            properties6.isActivationEvent = "true";
          }
          this.telemetryReporter.sendTelemetryErrorEvent(eventName, properties6);
        }
        /**
         * Implements `setSharedProperty` for `IExperimentationTelemetry`
         * @param name The name of the property
         * @param value The value of the property
         */
        setSharedProperty(name, value) {
          this.sharedProperties[name] = value;
        }
        /**
         * Implements a telemetry handler that adds the shared properties to the event
         * @param actionContext The action context
         */
        handleTelemetry(actionContext) {
          Object.assign(actionContext.telemetry.properties, this.sharedProperties);
        }
      };
      __name(ExperimentationTelemetry, "ExperimentationTelemetry");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/extensionUserAgent.js
  var require_extensionUserAgent = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/extensionUserAgent.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.appendExtensionUserAgent = exports.addExtensionUserAgent = void 0;
      var getPackageInfo_1 = require_getPackageInfo();
      function addExtensionUserAgent(client) {
        client.addUserAgentInfo(getExtensionUserAgent());
      }
      __name(addExtensionUserAgent, "addExtensionUserAgent");
      exports.addExtensionUserAgent = addExtensionUserAgent;
      function getExtensionUserAgent() {
        const { extensionName, extensionVersion } = (0, getPackageInfo_1.getPackageInfo)();
        return `${extensionName}/${extensionVersion}`;
      }
      __name(getExtensionUserAgent, "getExtensionUserAgent");
      function appendExtensionUserAgent(existingUserAgent) {
        const extensionUserAgent = getExtensionUserAgent();
        existingUserAgent || (existingUserAgent = extensionUserAgent);
        if (existingUserAgent.includes(extensionUserAgent)) {
          return existingUserAgent;
        } else {
          return `${existingUserAgent} ${extensionUserAgent}`;
        }
      }
      __name(appendExtensionUserAgent, "appendExtensionUserAgent");
      exports.appendExtensionUserAgent = appendExtensionUserAgent;
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/AzExtResourceType.js
  var require_AzExtResourceType = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/AzExtResourceType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtResourceType = void 0;
      var AzExtResourceType2;
      (function(AzExtResourceType3) {
        AzExtResourceType3["AppServices"] = "AppServices";
        AzExtResourceType3["AzureCosmosDb"] = "AzureCosmosDb";
        AzExtResourceType3["ContainerApps"] = "ContainerApps";
        AzExtResourceType3["ContainerAppsEnvironment"] = "ContainerAppsEnvironment";
        AzExtResourceType3["FunctionApp"] = "FunctionApp";
        AzExtResourceType3["PostgresqlServersFlexible"] = "PostgresqlServersFlexible";
        AzExtResourceType3["PostgresqlServersStandard"] = "PostgresqlServersStandard";
        AzExtResourceType3["StaticWebApps"] = "StaticWebApps";
        AzExtResourceType3["StorageAccounts"] = "StorageAccounts";
        AzExtResourceType3["VirtualMachines"] = "VirtualMachines";
        AzExtResourceType3["ResourceGroup"] = "ResourceGroup";
        AzExtResourceType3["ApiManagementService"] = "ApiManagementService";
        AzExtResourceType3["ApplicationInsights"] = "ApplicationInsights";
        AzExtResourceType3["AppServiceKubernetesEnvironment"] = "AppServiceKubernetesEnvironment";
        AzExtResourceType3["AppServicePlans"] = "AppServicePlans";
        AzExtResourceType3["AvailabilitySets"] = "AvailabilitySets";
        AzExtResourceType3["BatchAccounts"] = "BatchAccounts";
        AzExtResourceType3["CacheRedis"] = "CacheRedis";
        AzExtResourceType3["ContainerRegistry"] = "ContainerRegistry";
        AzExtResourceType3["ContainerServiceManagedClusters"] = "ContainerServiceManagedClusters";
        AzExtResourceType3["CustomLocations"] = "CustomLocations";
        AzExtResourceType3["DeviceIotHubs"] = "DeviceIotHubs";
        AzExtResourceType3["DevTestLabs"] = "DevTestLabs";
        AzExtResourceType3["Disks"] = "Disks";
        AzExtResourceType3["EventGridDomains"] = "EventGridDomains";
        AzExtResourceType3["EventGridEventSubscriptions"] = "EventGridEventSubscriptions";
        AzExtResourceType3["EventGridTopics"] = "EventGridTopics";
        AzExtResourceType3["EventHubNamespaces"] = "EventHubNamespaces";
        AzExtResourceType3["FrontDoorAndCdnProfiles"] = "FrontDoorAndCdnProfiles";
        AzExtResourceType3["Images"] = "Images";
        AzExtResourceType3["KeyVaults"] = "KeyVaults";
        AzExtResourceType3["KubernetesConnectedClusters"] = "KubernetesConnectedClusters";
        AzExtResourceType3["LoadBalancers"] = "LoadBalancers";
        AzExtResourceType3["LogicApp"] = "LogicApp";
        AzExtResourceType3["LogicWorkflows"] = "LogicWorkflows";
        AzExtResourceType3["ManagedIdentityUserAssignedIdentities"] = "ManagedIdentityUserAssignedIdentities";
        AzExtResourceType3["MysqlServers"] = "MysqlServers";
        AzExtResourceType3["NetworkApplicationGateways"] = "NetworkApplicationGateways";
        AzExtResourceType3["NetworkApplicationSecurityGroups"] = "NetworkApplicationSecurityGroups";
        AzExtResourceType3["NetworkInterfaces"] = "NetworkInterfaces";
        AzExtResourceType3["NetworkLocalNetworkGateways"] = "NetworkLocalNetworkGateways";
        AzExtResourceType3["NetworkPublicIpPrefixes"] = "NetworkPublicIpPrefixes";
        AzExtResourceType3["NetworkRouteTables"] = "NetworkRouteTables";
        AzExtResourceType3["NetworkSecurityGroups"] = "NetworkSecurityGroups";
        AzExtResourceType3["NetworkVirtualNetworkGateways"] = "NetworkVirtualNetworkGateways";
        AzExtResourceType3["NetworkWatchers"] = "NetworkWatchers";
        AzExtResourceType3["NotificationHubNamespaces"] = "NotificationHubNamespaces";
        AzExtResourceType3["OperationalInsightsWorkspaces"] = "OperationalInsightsWorkspaces";
        AzExtResourceType3["OperationsManagementSolutions"] = "OperationsManagementSolutions";
        AzExtResourceType3["PublicIpAddresses"] = "PublicIpAddresses";
        AzExtResourceType3["ServiceBusNamespaces"] = "ServiceBusNamespaces";
        AzExtResourceType3["ServiceFabricClusters"] = "ServiceFabricClusters";
        AzExtResourceType3["ServiceFabricMeshApplications"] = "ServiceFabricMeshApplications";
        AzExtResourceType3["SignalRService"] = "SignalRService";
        AzExtResourceType3["SpringApps"] = "SpringApps";
        AzExtResourceType3["SqlDatabases"] = "SqlDatabases";
        AzExtResourceType3["SqlServers"] = "SqlServers";
        AzExtResourceType3["VirtualMachineScaleSets"] = "VirtualMachineScaleSets";
        AzExtResourceType3["VirtualNetworks"] = "VirtualNetworks";
        AzExtResourceType3["WebHostingEnvironments"] = "WebHostingEnvironments";
      })(AzExtResourceType2 = exports.AzExtResourceType || (exports.AzExtResourceType = {}));
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/extensionApi.js
  var require_extensionApi = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/extensionApi.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/resources/azure.js
  var require_azure = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/resources/azure.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/resources/base.js
  var require_base = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/resources/base.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/resources/resourcesApi.js
  var require_resourcesApi = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/resources/resourcesApi.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/resources/workspace.js
  var require_workspace = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/resources/workspace.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/utils/apiUtils.js
  var require_apiUtils = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/utils/apiUtils.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.apiUtils = void 0;
      var vscode23 = __require("vscode");
      var apiUtils2;
      (function(apiUtils3) {
        class ExtensionNotFoundError extends Error {
          constructor(extensionId) {
            super(`Extension with id ${extensionId} not found.`);
          }
        }
        __name(ExtensionNotFoundError, "ExtensionNotFoundError");
        apiUtils3.ExtensionNotFoundError = ExtensionNotFoundError;
        function getAzureExtensionApi(context, extensionId, apiVersionRange, options) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const apiProvider = yield getExtensionExports(extensionId);
            if (apiProvider) {
              return apiProvider.getApi(apiVersionRange, Object.assign(Object.assign({}, options), { extensionId: (_a7 = options === null || options === void 0 ? void 0 : options.extensionId) !== null && _a7 !== void 0 ? _a7 : context.extension.id }));
            }
            throw new ExtensionNotFoundError(extensionId);
          });
        }
        __name(getAzureExtensionApi, "getAzureExtensionApi");
        apiUtils3.getAzureExtensionApi = getAzureExtensionApi;
        function getExtensionExports(extensionId) {
          return __awaiter6(this, void 0, void 0, function* () {
            const extension = vscode23.extensions.getExtension(extensionId);
            if (extension) {
              if (!extension.isActive) {
                yield extension.activate();
              }
              return extension.exports;
            }
            return void 0;
          });
        }
        __name(getExtensionExports, "getExtensionExports");
        apiUtils3.getExtensionExports = getExtensionExports;
      })(apiUtils2 = exports.apiUtils || (exports.apiUtils = {}));
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/utils/getApi.js
  var require_getApi = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/utils/getApi.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getAzureResourcesExtensionApi = void 0;
      var apiUtils_1 = require_apiUtils();
      function getAzureResourcesExtensionApi(extensionContext, apiVersionRange, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          return apiUtils_1.apiUtils.getAzureExtensionApi(extensionContext, "ms-azuretools.vscode-azureresourcegroups", apiVersionRange, options);
        });
      }
      __name(getAzureResourcesExtensionApi, "getAzureResourcesExtensionApi");
      exports.getAzureResourcesExtensionApi = getAzureResourcesExtensionApi;
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/utils/wrapper.js
  var require_wrapper = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/utils/wrapper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unwrapArgs = exports.isWrapper = void 0;
      function isWrapper2(maybeWrapper) {
        if (maybeWrapper && typeof maybeWrapper === "object" && maybeWrapper.unwrap && typeof maybeWrapper.unwrap === "function") {
          return true;
        }
        return false;
      }
      __name(isWrapper2, "isWrapper");
      exports.isWrapper = isWrapper2;
      function unwrapArgs(args) {
        var _a7;
        const maybeNodeWrapper = args === null || args === void 0 ? void 0 : args[0];
        const maybeNodeWrapperArray = args === null || args === void 0 ? void 0 : args[1];
        const remainingArgs = (_a7 = args === null || args === void 0 ? void 0 : args.slice(2)) !== null && _a7 !== void 0 ? _a7 : [];
        let node;
        if (maybeNodeWrapper && isWrapper2(maybeNodeWrapper)) {
          node = maybeNodeWrapper.unwrap();
        } else if (maybeNodeWrapper) {
          node = maybeNodeWrapper;
        }
        let nodes;
        if (maybeNodeWrapperArray && Array.isArray(maybeNodeWrapperArray) && maybeNodeWrapperArray.every((n) => isWrapper2(n))) {
          const wrappedNodes = maybeNodeWrapperArray;
          nodes = [];
          for (const n of wrappedNodes) {
            nodes.push(n.unwrap());
          }
        } else if (maybeNodeWrapperArray && Array.isArray(maybeNodeWrapperArray)) {
          nodes = maybeNodeWrapperArray;
        }
        return [node, nodes, ...remainingArgs];
      }
      __name(unwrapArgs, "unwrapArgs");
      exports.unwrapArgs = unwrapArgs;
    }
  });

  // node_modules/@microsoft/vscode-azureresources-api/out/src/index.js
  var require_src2 = __commonJS({
    "node_modules/@microsoft/vscode-azureresources-api/out/src/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_AzExtResourceType(), exports);
      __exportStar(require_extensionApi(), exports);
      __exportStar(require_azure(), exports);
      __exportStar(require_base(), exports);
      __exportStar(require_resourcesApi(), exports);
      __exportStar(require_workspace(), exports);
      __exportStar(require_apiUtils(), exports);
      __exportStar(require_getApi(), exports);
      __exportStar(require_wrapper(), exports);
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/getAzExtResourceType.js
  var require_getAzExtResourceType = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/getAzExtResourceType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getAzExtResourceType = void 0;
      var vscode_azureresources_api_1 = require_src2();
      var FunctionAppKind = "functionapp";
      var LogicAppKind = "workflowapp";
      function getAzExtResourceType3(resource) {
        var _a7;
        const type = resource.type.toLowerCase();
        const kind = ((_a7 = resource.kind) === null || _a7 === void 0 ? void 0 : _a7.toLowerCase()) || "";
        switch (type) {
          case "microsoft.web/sites":
            if (kind.includes(FunctionAppKind) && kind.includes(LogicAppKind)) {
              return vscode_azureresources_api_1.AzExtResourceType.LogicApp;
            } else if (kind.includes(FunctionAppKind)) {
              return vscode_azureresources_api_1.AzExtResourceType.FunctionApp;
            } else {
              return vscode_azureresources_api_1.AzExtResourceType.AppServices;
            }
          default:
            return azureTypeToAzExtResourceTypeMap[type];
        }
      }
      __name(getAzExtResourceType3, "getAzExtResourceType");
      exports.getAzExtResourceType = getAzExtResourceType3;
      var azureTypeToAzExtResourceTypeMap = {
        "microsoft.resources/resourcegroups": vscode_azureresources_api_1.AzExtResourceType.ResourceGroup,
        "microsoft.app/containerapps": vscode_azureresources_api_1.AzExtResourceType.ContainerApps,
        "microsoft.app/managedenvironments": vscode_azureresources_api_1.AzExtResourceType.ContainerAppsEnvironment,
        "microsoft.compute/virtualmachines": vscode_azureresources_api_1.AzExtResourceType.VirtualMachines,
        "microsoft.dbforpostgresql/flexibleservers": vscode_azureresources_api_1.AzExtResourceType.PostgresqlServersFlexible,
        "microsoft.dbforpostgresql/servers": vscode_azureresources_api_1.AzExtResourceType.PostgresqlServersStandard,
        "microsoft.documentdb/databaseaccounts": vscode_azureresources_api_1.AzExtResourceType.AzureCosmosDb,
        "microsoft.storage/storageaccounts": vscode_azureresources_api_1.AzExtResourceType.StorageAccounts,
        "microsoft.web/staticsites": vscode_azureresources_api_1.AzExtResourceType.StaticWebApps,
        // The below are not supported by the Azure extensions but have icons in the Resources extension
        "microsoft.apimanagement/service": vscode_azureresources_api_1.AzExtResourceType.ApiManagementService,
        "microsoft.batch/batchaccounts": vscode_azureresources_api_1.AzExtResourceType.BatchAccounts,
        "microsoft.cache/redis": vscode_azureresources_api_1.AzExtResourceType.CacheRedis,
        "microsoft.cdn/profiles": vscode_azureresources_api_1.AzExtResourceType.FrontDoorAndCdnProfiles,
        "microsoft.compute/availabilitysets": vscode_azureresources_api_1.AzExtResourceType.AvailabilitySets,
        "microsoft.compute/disks": vscode_azureresources_api_1.AzExtResourceType.Disks,
        "microsoft.compute/images": vscode_azureresources_api_1.AzExtResourceType.Images,
        "microsoft.compute/virtualmachinescalesets": vscode_azureresources_api_1.AzExtResourceType.VirtualMachineScaleSets,
        "microsoft.containerregistry/registries": vscode_azureresources_api_1.AzExtResourceType.ContainerRegistry,
        "microsoft.containerservice/managedclusters": vscode_azureresources_api_1.AzExtResourceType.ContainerServiceManagedClusters,
        "microsoft.dbformysql/servers": vscode_azureresources_api_1.AzExtResourceType.MysqlServers,
        "microsoft.devices/iothubs": vscode_azureresources_api_1.AzExtResourceType.DeviceIotHubs,
        "microsoft.devtestlab/labs": vscode_azureresources_api_1.AzExtResourceType.DevTestLabs,
        "microsoft.eventgrid/domains": vscode_azureresources_api_1.AzExtResourceType.EventGridDomains,
        "microsoft.eventgrid/eventsubscriptions": vscode_azureresources_api_1.AzExtResourceType.EventGridEventSubscriptions,
        "microsoft.eventgrid/topics": vscode_azureresources_api_1.AzExtResourceType.EventGridTopics,
        "microsoft.eventhub/namespaces": vscode_azureresources_api_1.AzExtResourceType.EventHubNamespaces,
        "microsoft.extendedlocation/customlocations": vscode_azureresources_api_1.AzExtResourceType.CustomLocations,
        "microsoft.insights/components": vscode_azureresources_api_1.AzExtResourceType.ApplicationInsights,
        "microsoft.keyvault/vaults": vscode_azureresources_api_1.AzExtResourceType.KeyVaults,
        "microsoft.kubernetes/connectedclusters": vscode_azureresources_api_1.AzExtResourceType.KubernetesConnectedClusters,
        "microsoft.logic/workflows": vscode_azureresources_api_1.AzExtResourceType.LogicWorkflows,
        "microsoft.managedidentity/userassignedidentities": vscode_azureresources_api_1.AzExtResourceType.ManagedIdentityUserAssignedIdentities,
        "microsoft.network/applicationgateways": vscode_azureresources_api_1.AzExtResourceType.NetworkApplicationGateways,
        "microsoft.network/applicationsecuritygroups": vscode_azureresources_api_1.AzExtResourceType.NetworkApplicationSecurityGroups,
        "microsoft.network/loadbalancers": vscode_azureresources_api_1.AzExtResourceType.LoadBalancers,
        "microsoft.network/localnetworkgateways": vscode_azureresources_api_1.AzExtResourceType.NetworkLocalNetworkGateways,
        "microsoft.network/networkinterfaces": vscode_azureresources_api_1.AzExtResourceType.NetworkInterfaces,
        "microsoft.network/networksecuritygroups": vscode_azureresources_api_1.AzExtResourceType.NetworkSecurityGroups,
        "microsoft.network/networkwatchers": vscode_azureresources_api_1.AzExtResourceType.NetworkWatchers,
        "microsoft.network/publicipaddresses": vscode_azureresources_api_1.AzExtResourceType.PublicIpAddresses,
        "microsoft.network/publicipprefixes": vscode_azureresources_api_1.AzExtResourceType.NetworkPublicIpPrefixes,
        "microsoft.network/routetables": vscode_azureresources_api_1.AzExtResourceType.NetworkRouteTables,
        "microsoft.network/virtualnetworkgateways": vscode_azureresources_api_1.AzExtResourceType.NetworkVirtualNetworkGateways,
        "microsoft.network/virtualnetworks": vscode_azureresources_api_1.AzExtResourceType.VirtualNetworks,
        "microsoft.notificationhubs/namespaces": vscode_azureresources_api_1.AzExtResourceType.NotificationHubNamespaces,
        "microsoft.operationalinsights/workspaces": vscode_azureresources_api_1.AzExtResourceType.OperationalInsightsWorkspaces,
        "microsoft.operationsmanagement/solutions": vscode_azureresources_api_1.AzExtResourceType.OperationsManagementSolutions,
        "microsoft.servicebus/namespaces": vscode_azureresources_api_1.AzExtResourceType.ServiceBusNamespaces,
        "microsoft.servicefabric/clusters": vscode_azureresources_api_1.AzExtResourceType.ServiceFabricClusters,
        "microsoft.servicefabricmesh/applications": vscode_azureresources_api_1.AzExtResourceType.ServiceFabricMeshApplications,
        "microsoft.signalrservice/signalr": vscode_azureresources_api_1.AzExtResourceType.SignalRService,
        "microsoft.appplatform/spring": vscode_azureresources_api_1.AzExtResourceType.SpringApps,
        "microsoft.sql/servers": vscode_azureresources_api_1.AzExtResourceType.SqlServers,
        "microsoft.sql/servers/databases": vscode_azureresources_api_1.AzExtResourceType.SqlDatabases,
        "microsoft.web/hostingenvironments": vscode_azureresources_api_1.AzExtResourceType.WebHostingEnvironments,
        "microsoft.web/kubeenvironments": vscode_azureresources_api_1.AzExtResourceType.AppServiceKubernetesEnvironment,
        "microsoft.web/serverfarms": vscode_azureresources_api_1.AzExtResourceType.AppServicePlans
      };
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/openReadOnlyContent.js
  var require_openReadOnlyContent = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/openReadOnlyContent.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ReadOnlyContent = exports.openReadOnlyContent = exports.openReadOnlyJson = void 0;
      var util_1 = require_util();
      var vscode_1 = __require("vscode");
      var extensionVariables_1 = require_extensionVariables();
      var nonNull_1 = require_nonNull();
      var randomUtils_1 = require_randomUtils();
      var _cachedScheme;
      function getScheme() {
        if (!_cachedScheme) {
          _cachedScheme = `azuretools${randomUtils_1.randomUtils.getRandomHexString(6)}`;
        }
        return _cachedScheme;
      }
      __name(getScheme, "getScheme");
      var _cachedContentProvider;
      function getContentProvider() {
        if (!_cachedContentProvider) {
          _cachedContentProvider = new ReadOnlyContentProvider();
          extensionVariables_1.ext.context.subscriptions.push(vscode_1.workspace.registerTextDocumentContentProvider(getScheme(), _cachedContentProvider));
        }
        return _cachedContentProvider;
      }
      __name(getContentProvider, "getContentProvider");
      function openReadOnlyJson2(node, data) {
        return __awaiter6(this, void 0, void 0, function* () {
          let tab = "	";
          const config = vscode_1.workspace.getConfiguration("editor");
          const insertSpaces = !!config.get("insertSpaces");
          if (insertSpaces) {
            let tabSize = config.get("tabSize");
            if (!(0, util_1.isNumber)(tabSize) || tabSize < 0) {
              tabSize = 4;
            }
            tab = " ".repeat(tabSize);
          }
          const content = JSON.stringify(data, void 0, tab);
          yield openReadOnlyContent(node, content, ".json");
        });
      }
      __name(openReadOnlyJson2, "openReadOnlyJson");
      exports.openReadOnlyJson = openReadOnlyJson2;
      function openReadOnlyContent(node, content, fileExtension, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          const contentProvider = getContentProvider();
          return yield contentProvider.openReadOnlyContent(node, content, fileExtension, options);
        });
      }
      __name(openReadOnlyContent, "openReadOnlyContent");
      exports.openReadOnlyContent = openReadOnlyContent;
      var ReadOnlyContent = class {
        constructor(uri, emitter, content) {
          this._uri = uri;
          this._emitter = emitter;
          this._content = content;
        }
        get content() {
          return this._content;
        }
        append(content) {
          return __awaiter6(this, void 0, void 0, function* () {
            this._content += content;
            this._emitter.fire(this._uri);
          });
        }
        clear() {
          this._content = "";
          this._emitter.fire(this._uri);
        }
      };
      __name(ReadOnlyContent, "ReadOnlyContent");
      exports.ReadOnlyContent = ReadOnlyContent;
      var ReadOnlyContentProvider = class {
        constructor() {
          this._onDidChangeEmitter = new vscode_1.EventEmitter();
          this._contentMap = /* @__PURE__ */ new Map();
        }
        get onDidChange() {
          return this._onDidChangeEmitter.event;
        }
        openReadOnlyContent(node, content, fileExtension, options) {
          return __awaiter6(this, void 0, void 0, function* () {
            const scheme = getScheme();
            const idHash = randomUtils_1.randomUtils.getPseudononymousStringHash(node.fullId, "hex");
            const fileName = node.label.replace(/[^a-z0-9\-\_\.\!\~\*\'\(\)]/gi, "_");
            const uri = vscode_1.Uri.parse(`${scheme}:///${idHash}/${fileName}${fileExtension}`);
            const readOnlyContent = new ReadOnlyContent(uri, this._onDidChangeEmitter, content);
            this._contentMap.set(uri.toString(), readOnlyContent);
            yield vscode_1.window.showTextDocument(uri, options);
            this._onDidChangeEmitter.fire(uri);
            return readOnlyContent;
          });
        }
        provideTextDocumentContent(uri, _token) {
          return __awaiter6(this, void 0, void 0, function* () {
            const readOnlyContent = (0, nonNull_1.nonNullValue)(this._contentMap.get(uri.toString()), "ReadOnlyContentProvider._contentMap.get");
            return readOnlyContent.content;
          });
        }
      };
      __name(ReadOnlyContentProvider, "ReadOnlyContentProvider");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/getLastNode.js
  var require_getLastNode = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/getLastNode.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getLastNode = void 0;
      function getLastNode(context) {
        return context.pickedNodes.at(-1);
      }
      __name(getLastNode, "getLastNode");
      exports.getLastNode = getLastNode;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizardPromptStep.js
  var require_AzureWizardPromptStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizardPromptStep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzureWizardPromptStep = void 0;
      var AzureWizardPromptStep3 = class {
        constructor() {
          this.hideStepCount = false;
          this.supportsDuplicateSteps = false;
        }
        reset() {
          this.hasSubWizard = false;
          this.numSubPromptSteps = 0;
          this.numSubExecuteSteps = 0;
          this.prompted = false;
        }
      };
      __name(AzureWizardPromptStep3, "AzureWizardPromptStep");
      exports.AzureWizardPromptStep = AzureWizardPromptStep3;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/GenericQuickPickStep.js
  var require_GenericQuickPickStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/GenericQuickPickStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GenericQuickPickStep = void 0;
      var getLastNode_1 = require_getLastNode();
      var AzureWizardPromptStep_1 = require_AzureWizardPromptStep();
      var localize_1 = require_localize();
      var GenericQuickPickStep = class extends AzureWizardPromptStep_1.AzureWizardPromptStep {
        constructor(treeDataProvider, pickOptions, promptOptions) {
          super();
          this.treeDataProvider = treeDataProvider;
          this.pickOptions = pickOptions;
          this.supportsDuplicateSteps = true;
          this.promptOptions = Object.assign({ noPicksMessage: (0, localize_1.localize)("noMatchingResources", "No matching resources found.") }, promptOptions);
        }
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const pick = yield this.promptInternal(wizardContext);
            wizardContext.pickedNodes.push(pick);
          });
        }
        undo(wizardContext) {
          wizardContext.pickedNodes.pop();
        }
        shouldPrompt(_wizardContext) {
          return true;
        }
        promptInternal(wizardContext) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const picks = yield this.getPicks(wizardContext);
            if (picks.length === 1 && this.pickOptions.skipIfOne) {
              const ti2 = yield this.treeDataProvider.getTreeItem(picks[0].data);
              if (!ti2.command) {
                return picks[0].data;
              }
            }
            const selected = yield wizardContext.ui.showQuickPick(picks, Object.assign({}, (_a7 = this.promptOptions) !== null && _a7 !== void 0 ? _a7 : {}));
            return selected.data;
          });
        }
        getPicks(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            const childElements = (yield this.treeDataProvider.getChildren(lastPickedItem)) || [];
            const childItems = yield Promise.all(childElements.map((childElement) => __awaiter6(this, void 0, void 0, function* () {
              return yield this.treeDataProvider.getTreeItem(childElement);
            })));
            const childPairs = childElements.map((childElement, i) => [childElement, childItems[i]]);
            const finalChoices = childPairs.filter(([el2, ti2]) => this.pickFilter.isFinalPick(ti2, el2));
            const ancestorChoices = childPairs.filter(([el2, ti2]) => this.pickFilter.isAncestorPick(ti2, el2));
            let promptChoices = [];
            if (finalChoices.length === 0) {
              if (ancestorChoices.length === 0) {
              } else {
                promptChoices = ancestorChoices;
              }
            } else {
              promptChoices = finalChoices;
            }
            const picks = [];
            for (const choice of promptChoices) {
              picks.push(yield this.getQuickPickItem(...choice));
            }
            return picks;
          });
        }
        getQuickPickItem(element, item) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            return {
              label: ((_a7 = item.label) === null || _a7 === void 0 ? void 0 : _a7.label) || item.label,
              description: item.description,
              data: element
            };
          });
        }
      };
      __name(GenericQuickPickStep, "GenericQuickPickStep");
      exports.GenericQuickPickStep = GenericQuickPickStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/GenericQuickPickStepWithCommands.js
  var require_GenericQuickPickStepWithCommands = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/GenericQuickPickStepWithCommands.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GenericQuickPickStepWithCommands = void 0;
      var vscode23 = __require("vscode");
      var getLastNode_1 = require_getLastNode();
      var GenericQuickPickStep_1 = require_GenericQuickPickStep();
      var GenericQuickPickStepWithCommands = class extends GenericQuickPickStep_1.GenericQuickPickStep {
        // provide support for picking command tree items, and running the command within the wizard
        getSubWizard(wizardContext) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPick = (0, getLastNode_1.getLastNode)(wizardContext);
            const treeItem = yield this.treeDataProvider.getTreeItem(lastPick);
            if (treeItem.command) {
              yield vscode23.commands.executeCommand(treeItem.command.command, ...(_a7 = treeItem.command.arguments) !== null && _a7 !== void 0 ? _a7 : []);
              wizardContext.pickedNodes.pop();
              return {
                // rerun current step after command is executed
                promptSteps: [this]
              };
            }
            return void 0;
          });
        }
      };
      __name(GenericQuickPickStepWithCommands, "GenericQuickPickStepWithCommands");
      exports.GenericQuickPickStepWithCommands = GenericQuickPickStepWithCommands;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickAzureSubscriptionStep.js
  var require_QuickPickAzureSubscriptionStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickAzureSubscriptionStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QuickPickAzureSubscriptionStep = void 0;
      var localize_1 = require_localize();
      var GenericQuickPickStepWithCommands_1 = require_GenericQuickPickStepWithCommands();
      var QuickPickAzureSubscriptionStep = class extends GenericQuickPickStepWithCommands_1.GenericQuickPickStepWithCommands {
        constructor(tdp, options) {
          super(tdp, Object.assign(Object.assign({}, options), { skipIfOne: true }), {
            placeHolder: (0, localize_1.localize)("selectSubscription", "Select subscription"),
            noPicksMessage: (0, localize_1.localize)("noSubscriptions", "No subscriptions found")
          });
          this.pickFilter = new AzureSubscriptionPickFilter();
        }
        promptInternal(wizardContext) {
          const _super = Object.create(null, {
            promptInternal: { get: () => super.promptInternal }
          });
          return __awaiter6(this, void 0, void 0, function* () {
            const pickedSubscription = yield _super.promptInternal.call(this, wizardContext);
            wizardContext.subscription = pickedSubscription.subscription;
            return pickedSubscription;
          });
        }
      };
      __name(QuickPickAzureSubscriptionStep, "QuickPickAzureSubscriptionStep");
      exports.QuickPickAzureSubscriptionStep = QuickPickAzureSubscriptionStep;
      var AzureSubscriptionPickFilter = class {
        isFinalPick(_node) {
          return false;
        }
        isAncestorPick(_node) {
          return true;
        }
      };
      __name(AzureSubscriptionPickFilter, "AzureSubscriptionPickFilter");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/contextUtils.js
  var require_contextUtils = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/contextUtils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseContextValue = exports.createContextValue = void 0;
      function createContextValue4(values) {
        return Array.from(new Set(values)).sort().join(";");
      }
      __name(createContextValue4, "createContextValue");
      exports.createContextValue = createContextValue4;
      function parseContextValue(contextValue) {
        var _a7;
        return (_a7 = contextValue === null || contextValue === void 0 ? void 0 : contextValue.split(";")) !== null && _a7 !== void 0 ? _a7 : [];
      }
      __name(parseContextValue, "parseContextValue");
      exports.parseContextValue = parseContextValue;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickGroupStep.js
  var require_QuickPickGroupStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickGroupStep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QuickPickGroupStep = void 0;
      var GenericQuickPickStep_1 = require_GenericQuickPickStep();
      var contextUtils_1 = require_contextUtils();
      var QuickPickGroupStep = class extends GenericQuickPickStep_1.GenericQuickPickStep {
        constructor(tdp, options) {
          var _a7, _b2;
          super(tdp, Object.assign(Object.assign({}, options), { skipIfOne: true }), {
            // Define id so that recently used picks are tracked separately for each group type
            id: `QuickPickGroupStep/${(_b2 = (_a7 = options.groupType) === null || _a7 === void 0 ? void 0 : _a7.sort().join(",")) !== null && _b2 !== void 0 ? _b2 : ""}`
          });
          this.pickFilter = new GroupPickFilter(this.pickOptions);
        }
      };
      __name(QuickPickGroupStep, "QuickPickGroupStep");
      exports.QuickPickGroupStep = QuickPickGroupStep;
      var GroupPickFilter = class {
        constructor(pickOptions) {
          this.pickOptions = pickOptions;
        }
        isFinalPick(_node) {
          return false;
        }
        isAncestorPick(node) {
          const contextValues = (0, contextUtils_1.parseContextValue)(node.contextValue);
          return !this.pickOptions.groupType || !contextValues.includes("azureResourceTypeGroup") || this.pickOptions.groupType.some((groupType) => contextValues.includes(groupType));
        }
      };
      __name(GroupPickFilter, "GroupPickFilter");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickAzureResourceStep.js
  var require_QuickPickAzureResourceStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/quickPickAzureResource/QuickPickAzureResourceStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QuickPickAzureResourceStep = void 0;
      var contextUtils_1 = require_contextUtils();
      var GenericQuickPickStep_1 = require_GenericQuickPickStep();
      var localize_1 = require_localize();
      var QuickPickAzureResourceStep = class extends GenericQuickPickStep_1.GenericQuickPickStep {
        constructor(tdp, options, promptOptions) {
          super(tdp, options !== null && options !== void 0 ? options : {}, Object.assign({ placeHolder: (0, localize_1.localize)("selectResource", "Select resource") }, promptOptions));
          this.pickFilter = new AzureResourcePickFilter(this.pickOptions);
        }
        promptInternal(wizardContext) {
          const _super = Object.create(null, {
            promptInternal: { get: () => super.promptInternal }
          });
          return __awaiter6(this, void 0, void 0, function* () {
            const pickedAzureResource = yield _super.promptInternal.call(this, wizardContext);
            wizardContext.resource = pickedAzureResource.resource;
            wizardContext.resourceGroup = pickedAzureResource.resource.resourceGroup;
            return pickedAzureResource;
          });
        }
        getQuickPickItem(element, item) {
          const _super = Object.create(null, {
            getQuickPickItem: { get: () => super.getQuickPickItem }
          });
          return __awaiter6(this, void 0, void 0, function* () {
            return Object.assign(Object.assign({}, yield _super.getQuickPickItem.call(this, element, item)), { description: element.resource.resourceGroup });
          });
        }
      };
      __name(QuickPickAzureResourceStep, "QuickPickAzureResourceStep");
      exports.QuickPickAzureResourceStep = QuickPickAzureResourceStep;
      var AzureResourcePickFilter = class {
        constructor(pickOptions) {
          this.pickOptions = pickOptions;
        }
        isFinalPick(node) {
          if (this.pickOptions.childItemFilter) {
            return false;
          }
          return this.matchesResourceType((0, contextUtils_1.parseContextValue)(node.contextValue));
        }
        isAncestorPick(node) {
          if (!this.pickOptions.childItemFilter) {
            return false;
          }
          return this.matchesResourceType((0, contextUtils_1.parseContextValue)(node.contextValue));
        }
        matchesResourceType(contextValues) {
          if (!contextValues.includes("azureResource")) {
            return false;
          }
          return !this.pickOptions.resourceTypes || this.pickOptions.resourceTypes.some((type) => contextValues.includes(type));
        }
      };
      __name(AzureResourcePickFilter, "AzureResourcePickFilter");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/ContextValueQuickPickStep.js
  var require_ContextValueQuickPickStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/ContextValueQuickPickStep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ContextValuePickFilter = exports.ContextValueQuickPickStep = void 0;
      var contextUtils_1 = require_contextUtils();
      var GenericQuickPickStep_1 = require_GenericQuickPickStep();
      var ContextValueQuickPickStep = class extends GenericQuickPickStep_1.GenericQuickPickStep {
        constructor() {
          super(...arguments);
          this.pickFilter = new ContextValuePickFilter(this.pickOptions);
        }
      };
      __name(ContextValueQuickPickStep, "ContextValueQuickPickStep");
      exports.ContextValueQuickPickStep = ContextValueQuickPickStep;
      var ContextValuePickFilter = class {
        constructor(pickOptions) {
          this.pickOptions = pickOptions;
        }
        isFinalPick(node) {
          const includeOption = this.pickOptions.contextValueFilter.include;
          const excludeOption = this.pickOptions.contextValueFilter.exclude;
          const includeArray = Array.isArray(includeOption) ? includeOption : [includeOption];
          const excludeArray = excludeOption ? Array.isArray(excludeOption) ? excludeOption : [excludeOption] : [];
          const nodeContextValues = (0, contextUtils_1.parseContextValue)(node.contextValue);
          return includeArray.some((i) => this.matchesSingleFilter(i, nodeContextValues)) && !excludeArray.some((e) => this.matchesSingleFilter(e, nodeContextValues));
        }
        isAncestorPick(treeItem, _element) {
          return !!treeItem.collapsibleState;
        }
        matchesSingleFilter(matcher, nodeContextValues) {
          return nodeContextValues.some((c) => {
            if (matcher instanceof RegExp) {
              return matcher.test(c);
            }
            return c === matcher;
          });
        }
      };
      __name(ContextValuePickFilter, "ContextValuePickFilter");
      exports.ContextValuePickFilter = ContextValuePickFilter;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/RecursiveQuickPickStep.js
  var require_RecursiveQuickPickStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/RecursiveQuickPickStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RecursiveQuickPickStep = void 0;
      var ContextValueQuickPickStep_1 = require_ContextValueQuickPickStep();
      var getLastNode_1 = require_getLastNode();
      var RecursiveQuickPickStep = class extends ContextValueQuickPickStep_1.ContextValueQuickPickStep {
        constructor() {
          super(...arguments);
          this.hideStepCount = true;
        }
        getSubWizard(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            if (!lastPickedItem) {
              throw new Error("No node was set after prompt step.");
            }
            if (this.pickFilter.isFinalPick(yield this.treeDataProvider.getTreeItem(lastPickedItem), lastPickedItem)) {
              return void 0;
            } else {
              return {
                promptSteps: [
                  new RecursiveQuickPickStep(this.treeDataProvider, this.pickOptions)
                ]
              };
            }
          });
        }
      };
      __name(RecursiveQuickPickStep, "RecursiveQuickPickStep");
      exports.RecursiveQuickPickStep = RecursiveQuickPickStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/compatibility/CompatibilityContextValueQuickPickStep.js
  var require_CompatibilityContextValueQuickPickStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/compatibility/CompatibilityContextValueQuickPickStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CompatibilityContextValueQuickPickStep = void 0;
      var ContextValueQuickPickStep_1 = require_ContextValueQuickPickStep();
      var getLastNode_1 = require_getLastNode();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var vscode_azureresources_api_1 = require_src2();
      var localize_1 = require_localize();
      var CompatibilityContextValueQuickPickStep = class extends ContextValueQuickPickStep_1.ContextValueQuickPickStep {
        constructor() {
          super(...arguments);
          this.pickFilter = new CompatibleContextValuePickFilter(this.pickOptions);
        }
        prompt(wizardContext) {
          const _super = Object.create(null, {
            prompt: { get: () => super.prompt }
          });
          return __awaiter6(this, void 0, void 0, function* () {
            this.setCustomPlaceholder(wizardContext);
            (yield this.provideCompatabilityWithPickTreeItemImpl(wizardContext)) || (yield _super.prompt.call(this, wizardContext));
          });
        }
        /**
        * If the last picked item is an `AzExtParentTreeItem`
        * and has a `childTypeLabel` set, use that as the placeholder.
        */
        setCustomPlaceholder(context) {
          const lastPickedItem = (0, getLastNode_1.getLastNode)(context);
          const lastPickedItemUnwrapped = (0, vscode_azureresources_api_1.isWrapper)(lastPickedItem) ? lastPickedItem.unwrap() : lastPickedItem;
          if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(lastPickedItemUnwrapped) && lastPickedItemUnwrapped.childTypeLabel) {
            this.promptOptions.placeHolder = (0, localize_1.localize)("selectTreeItem", "Select {0}", lastPickedItemUnwrapped.childTypeLabel);
          }
        }
        /**
         * Mimics how the legacy {@link AzExtParentTreeItem.pickChildTreeItem}
         * uses {@link AzExtParentTreeItem.pickTreeItemImpl} to customize the tree item picker.
         *
         * An example customization is skipping having to pick a UI-only node (ex: App Settings parent node)
         */
        provideCompatabilityWithPickTreeItemImpl(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            const lastPickedItemUnwrapped = (0, vscode_azureresources_api_1.isWrapper)(lastPickedItem) ? lastPickedItem.unwrap() : lastPickedItem;
            if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(lastPickedItemUnwrapped)) {
              const children = yield this.treeDataProvider.getChildren(lastPickedItem);
              if (children && children.length) {
                this.pickOptions.skipIfOne = lastPickedItemUnwrapped.autoSelectInTreeItemPicker;
                const customChild = yield this.getCustomChildren(wizardContext, lastPickedItemUnwrapped);
                const customPick = children.find((child) => {
                  const ti2 = (0, vscode_azureresources_api_1.isWrapper)(child) ? child.unwrap() : child;
                  return ti2.fullId === (customChild === null || customChild === void 0 ? void 0 : customChild.fullId);
                });
                if (customPick) {
                  wizardContext.pickedNodes.push(customPick);
                  return true;
                }
              }
            }
            return false;
          });
        }
        getCustomChildren(context, node) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            return yield (_a7 = node.pickTreeItemImpl) === null || _a7 === void 0 ? void 0 : _a7.call(node, Array.isArray(this.pickOptions.contextValueFilter.include) ? this.pickOptions.contextValueFilter.include : [this.pickOptions.contextValueFilter.include], context);
          });
        }
      };
      __name(CompatibilityContextValueQuickPickStep, "CompatibilityContextValueQuickPickStep");
      exports.CompatibilityContextValueQuickPickStep = CompatibilityContextValueQuickPickStep;
      var CompatibleContextValuePickFilter = class extends ContextValueQuickPickStep_1.ContextValuePickFilter {
        // For compatiblity, if the include option is a RegExp test the entire contextValue against it.
        isFinalPick(node) {
          const includeOption = this.pickOptions.contextValueFilter.include;
          if (includeOption instanceof RegExp && node.contextValue) {
            return includeOption.test(node.contextValue);
          }
          return super.isFinalPick(node);
        }
        /**
         * Mimics logic in `AzExtTreeItem.includeInTreePicker`, which supports the `AzExtTreeItem.isAncestorOfImpl` method
         */
        isAncestorPick(_node, elementWrapper) {
          const element = (0, vscode_azureresources_api_1.isWrapper)(elementWrapper) ? elementWrapper.unwrap() : elementWrapper;
          const include3 = Array.isArray(this.pickOptions.contextValueFilter.include) ? this.pickOptions.contextValueFilter.include : [this.pickOptions.contextValueFilter.include];
          return include3.some((val) => {
            if ((0, isAzExtTreeItem_1.isAzExtTreeItem)(element) && element.isAncestorOfImpl) {
              return element.isAncestorOfImpl(val);
            } else {
              return (0, isAzExtTreeItem_1.isAzExtParentTreeItem)(element);
            }
          });
        }
      };
      __name(CompatibleContextValuePickFilter, "CompatibleContextValuePickFilter");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/compatibility/CompatibilityRecursiveQuickPickStep.js
  var require_CompatibilityRecursiveQuickPickStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/contextValue/compatibility/CompatibilityRecursiveQuickPickStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CompatibilityRecursiveQuickPickStep = void 0;
      var getLastNode_1 = require_getLastNode();
      var CompatibilityContextValueQuickPickStep_1 = require_CompatibilityContextValueQuickPickStep();
      var localize_1 = require_localize();
      var errors_1 = require_errors();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var vscode_azureresources_api_1 = require_src2();
      var CompatibilityRecursiveQuickPickStep = class extends CompatibilityContextValueQuickPickStep_1.CompatibilityContextValueQuickPickStep {
        promptInternal(wizardContext) {
          var _a7, _b2, _c2;
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            const lastPickedItemTi = (0, vscode_azureresources_api_1.isWrapper)(lastPickedItem) ? lastPickedItem.unwrap() : lastPickedItem;
            if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(lastPickedItemTi)) {
              this.promptOptions.placeHolder = (0, localize_1.localize)("selectTreeItem", "Select {0}", lastPickedItemTi.childTypeLabel);
              this.promptOptions.stepName = `treeItemPicker|${lastPickedItemTi.contextValue}`;
              this.promptOptions.noPicksMessage = (_a7 = wizardContext.noItemFoundErrorMessage) !== null && _a7 !== void 0 ? _a7 : this.promptOptions.noPicksMessage;
              this.promptOptions.ignoreFocusOut = wizardContext.ignoreFocusOut;
            }
            const shouldAddCreatePick = (0, isAzExtTreeItem_1.isAzExtParentTreeItem)(lastPickedItemTi) && !!lastPickedItemTi.createChildImpl && !!lastPickedItemTi.childTypeLabel && !wizardContext.suppressCreatePick;
            this.pickOptions.create = shouldAddCreatePick ? {
              callback: lastPickedItemTi.createChild.bind(lastPickedItemTi),
              label: (_b2 = lastPickedItemTi.createNewLabel) !== null && _b2 !== void 0 ? _b2 : (0, localize_1.localize)("createNewItem", "$(plus) Create new {0}...", lastPickedItemTi.childTypeLabel)
            } : void 0;
            const picks = yield this.getPicks(wizardContext);
            if (picks.length === 1 && this.pickOptions.skipIfOne && typeof picks[0].data !== "function") {
              return picks[0].data;
            } else {
              const selected = yield wizardContext.ui.showQuickPick(picks, Object.assign({}, (_c2 = this.promptOptions) !== null && _c2 !== void 0 ? _c2 : {}));
              if (typeof selected.data === "function") {
                const callback = selected.data;
                const createdTreeItem = yield callback === null || callback === void 0 ? void 0 : callback(wizardContext);
                const picks2 = yield this.getPicks(wizardContext);
                const createdPick = picks2.find((pick) => {
                  return pick.data.unwrap().fullId === createdTreeItem.fullId;
                });
                if (createdPick) {
                  return createdPick.data;
                }
                throw new errors_1.UserCancelledError();
              }
              return selected.data;
            }
          });
        }
        getSubWizard(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            if (!lastPickedItem) {
              throw new Error("No node was set after prompt step.");
            }
            const ti2 = (0, isAzExtTreeItem_1.isAzExtTreeItem)(lastPickedItem) ? lastPickedItem : yield this.treeDataProvider.getTreeItem(lastPickedItem);
            if (this.pickFilter.isFinalPick(ti2, lastPickedItem)) {
              return void 0;
            } else {
              return {
                hideStepCount: true,
                promptSteps: [
                  new CompatibilityRecursiveQuickPickStep(this.treeDataProvider, this.pickOptions)
                ]
              };
            }
          });
        }
        getPicks(wizardContext) {
          const _super = Object.create(null, {
            getPicks: { get: () => super.getPicks }
          });
          return __awaiter6(this, void 0, void 0, function* () {
            const picks = [];
            try {
              picks.push(...yield _super.getPicks.call(this, wizardContext));
            } catch (error) {
              if (error instanceof errors_1.NoResourceFoundError && !!this.pickOptions.create) {
              } else {
                throw error;
              }
            }
            if (this.pickOptions.create) {
              picks.push(this.getCreatePick(this.pickOptions.create));
            }
            return picks;
          });
        }
        getCreatePick(options) {
          return {
            label: options.label || (0, localize_1.localize)("createQuickPickLabel", "$(add) Create..."),
            data: options.callback
          };
        }
      };
      __name(CompatibilityRecursiveQuickPickStep, "CompatibilityRecursiveQuickPickStep");
      exports.CompatibilityRecursiveQuickPickStep = CompatibilityRecursiveQuickPickStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizard.js
  var require_AzureWizard = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizard.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzureWizard = void 0;
      var util_1 = require_util();
      var vscode23 = __require("vscode");
      var vscode_1 = __require("vscode");
      var ExecuteActivity_1 = require_ExecuteActivity();
      var errors_1 = require_errors();
      var localize_1 = require_localize();
      var parseError_1 = require_parseError();
      var showQuickPick_1 = require_showQuickPick();
      var AzureWizard3 = class {
        constructor(context, options) {
          this._finishedPromptSteps = [];
          this._cachedInputBoxValues = {};
          this._promptSteps = (options.promptSteps || []).reverse();
          this._promptSteps.forEach((s) => {
            s.effectiveTitle = options.title;
          });
          this._executeSteps = options.executeSteps || [];
          this._context = context;
          this._wizardHideStepCount = options.hideStepCount;
          this._showLoadingPrompt = options.showLoadingPrompt;
          this._cancellationTokenSource = new vscode23.CancellationTokenSource();
        }
        getCachedInputBoxValue() {
          return this.currentStepId ? this._cachedInputBoxValues[this.currentStepId] : void 0;
        }
        get hideStepCount() {
          return !!(this._wizardHideStepCount || this._stepHideStepCount);
        }
        get currentStep() {
          return this._finishedPromptSteps.filter((s) => s.prompted).length + 1;
        }
        get totalSteps() {
          return this._finishedPromptSteps.filter((s) => s.prompted).length + this._promptSteps.filter((s) => s.shouldPrompt(this._context)).length + 1;
        }
        get showBackButton() {
          return this.currentStep > 1;
        }
        get showTitle() {
          return this.totalSteps > 1;
        }
        get cancellationToken() {
          return this._cancellationTokenSource.token;
        }
        prompt() {
          var _a7, _b2;
          return __awaiter6(this, void 0, void 0, function* () {
            this._context.ui.wizard = this;
            try {
              let step = this._promptSteps.pop();
              while (step) {
                if ((_a7 = this._context.ui.wizard) === null || _a7 === void 0 ? void 0 : _a7.cancellationToken.isCancellationRequested) {
                  throw new errors_1.UserCancelledError();
                }
                step.reset();
                this._context.telemetry.properties.lastStep = `prompt-${getEffectiveStepId(step)}`;
                this.title = step.effectiveTitle;
                this._stepHideStepCount = step.hideStepCount;
                step.propertiesBeforePrompt = Object.keys(this._context).filter((k) => !(0, util_1.isNullOrUndefined)(this._context[k]));
                if (step.configureBeforePrompt) {
                  yield step.configureBeforePrompt(this._context);
                }
                if (step.shouldPrompt(this._context)) {
                  const loadingQuickPick = this._showLoadingPrompt ? (0, showQuickPick_1.createQuickPick)(this._context, {
                    loadingPlaceHolder: (0, localize_1.localize)("loading", "Loading...")
                  }) : void 0;
                  const disposables = [];
                  if (loadingQuickPick) {
                    disposables.push(loadingQuickPick === null || loadingQuickPick === void 0 ? void 0 : loadingQuickPick.onDidHide(() => {
                      if (!this._context.ui.isPrompting) {
                        this._cancellationTokenSource.cancel();
                      }
                    }));
                  }
                  disposables.push(this._context.ui.onDidFinishPrompt((result) => {
                    step.prompted = true;
                    loadingQuickPick === null || loadingQuickPick === void 0 ? void 0 : loadingQuickPick.show();
                    if (typeof result.value === "string" && !result.matchesDefault && this.currentStepId && !(step === null || step === void 0 ? void 0 : step.supportsDuplicateSteps)) {
                      this._cachedInputBoxValues[this.currentStepId] = result.value;
                    }
                  }));
                  try {
                    this.currentStepId = getEffectiveStepId(step);
                    loadingQuickPick === null || loadingQuickPick === void 0 ? void 0 : loadingQuickPick.show();
                    yield step.prompt(this._context);
                  } catch (err) {
                    const pe2 = (0, parseError_1.parseError)(err);
                    if (pe2.errorType === "GoBackError") {
                      step = this.goBack(step);
                      continue;
                    } else {
                      throw err;
                    }
                  } finally {
                    this.currentStepId = void 0;
                    vscode23.Disposable.from(...disposables).dispose();
                    loadingQuickPick === null || loadingQuickPick === void 0 ? void 0 : loadingQuickPick.hide();
                  }
                }
                if (step.getSubWizard) {
                  if ((_b2 = this._context.ui.wizard) === null || _b2 === void 0 ? void 0 : _b2.cancellationToken.isCancellationRequested) {
                    throw new errors_1.UserCancelledError();
                  }
                  const subWizard = yield step.getSubWizard(this._context);
                  if (subWizard) {
                    this.addSubWizard(step, subWizard);
                  }
                }
                this._finishedPromptSteps.push(step);
                step = this._promptSteps.pop();
              }
            } finally {
              this._context.ui.wizard = void 0;
              this._cancellationTokenSource.dispose();
            }
          });
        }
        execute() {
          return __awaiter6(this, void 0, void 0, function* () {
            yield this.withProgress({ location: vscode_1.ProgressLocation.Notification }, (progress) => __awaiter6(this, void 0, void 0, function* () {
              let currentStep = 1;
              const steps = this._executeSteps.sort((a, b) => b.priority - a.priority);
              const internalProgress = {
                report: (value) => {
                  if (value.message) {
                    const totalSteps = currentStep + steps.filter((s) => s.shouldExecute(this._context)).length;
                    if (totalSteps > 1) {
                      value.message += ` (${currentStep}/${totalSteps})`;
                    }
                  }
                  progress.report(value);
                }
              };
              let step = steps.pop();
              while (step) {
                if (step.shouldExecute(this._context)) {
                  this._context.telemetry.properties.lastStep = `execute-${getEffectiveStepId(step)}`;
                  yield step.execute(this._context, internalProgress);
                  currentStep += 1;
                }
                step = steps.pop();
              }
            }));
          });
        }
        withProgress(options, task) {
          var _a7, _b2;
          var _c2;
          return __awaiter6(this, void 0, void 0, function* () {
            if (this._context.registerActivity) {
              (_a7 = (_c2 = this._context).activityTitle) !== null && _a7 !== void 0 ? _a7 : _c2.activityTitle = this.title;
              const WizardActivity = (_b2 = this._context.wizardActivity) !== null && _b2 !== void 0 ? _b2 : ExecuteActivity_1.ExecuteActivity;
              const activity = new WizardActivity(this._context, (activityProgress) => __awaiter6(this, void 0, void 0, function* () {
                if (this._context.suppressNotification) {
                  yield task(activityProgress, activity.cancellationTokenSource.token);
                } else {
                  yield vscode23.window.withProgress(options, (progress, token) => __awaiter6(this, void 0, void 0, function* () {
                    token.onCancellationRequested(() => {
                      activity.cancellationTokenSource.cancel();
                    });
                    const internalProgress = {
                      report: (value) => {
                        progress.report(value);
                        activityProgress.report(value);
                      }
                    };
                    yield task(internalProgress, token);
                  }));
                }
              }));
              yield this._context.registerActivity(activity);
              yield activity.run();
            } else {
              yield vscode23.window.withProgress(options, task);
            }
          });
        }
        goBack(currentStep) {
          var _a7;
          let step = currentStep;
          do {
            this._promptSteps.push(step);
            step = this._finishedPromptSteps.pop();
            (_a7 = step === null || step === void 0 ? void 0 : step.undo) === null || _a7 === void 0 ? void 0 : _a7.call(step, this._context);
            if (!step) {
              throw new errors_1.GoBackError();
            }
            if (step.hasSubWizard) {
              removeFromEnd(this._promptSteps, step.numSubPromptSteps);
              removeFromEnd(this._executeSteps, step.numSubExecuteSteps);
            }
          } while (!step.prompted);
          for (const key of Object.keys(this._context)) {
            if (!step.propertiesBeforePrompt.find((p) => p === key)) {
              this._context[key] = void 0;
            }
          }
          return step;
        }
        addSubWizard(step, subWizard) {
          step.hasSubWizard = true;
          if (subWizard.promptSteps) {
            subWizard.promptSteps = subWizard.promptSteps.filter((s1) => {
              return s1.supportsDuplicateSteps || !this._finishedPromptSteps.concat(this._promptSteps).some((s2) => getEffectiveStepId(s1) === getEffectiveStepId(s2));
            });
            this._promptSteps.push(...subWizard.promptSteps.reverse());
            step.numSubPromptSteps = subWizard.promptSteps.length;
            subWizard.promptSteps.forEach((s) => {
              s.effectiveTitle = subWizard.title || step.effectiveTitle;
            });
          }
          if (subWizard.executeSteps) {
            this._executeSteps.push(...subWizard.executeSteps);
            step.numSubExecuteSteps = subWizard.executeSteps.length;
          }
        }
      };
      __name(AzureWizard3, "AzureWizard");
      exports.AzureWizard = AzureWizard3;
      function getEffectiveStepId(step) {
        return step.id || step.constructor.name;
      }
      __name(getEffectiveStepId, "getEffectiveStepId");
      function removeFromEnd(array, n) {
        array.splice(n * -1, n);
      }
      __name(removeFromEnd, "removeFromEnd");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/runQuickPickWizard.js
  var require_runQuickPickWizard = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/runQuickPickWizard.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.runQuickPickWizard = void 0;
      var vscode_azureresources_api_1 = require_src2();
      var errors_1 = require_errors();
      var AzureWizard_1 = require_AzureWizard();
      var getLastNode_1 = require_getLastNode();
      function runQuickPickWizard(context, wizardOptions, startingNode) {
        return __awaiter6(this, void 0, void 0, function* () {
          const wizardContext = Object.assign({}, context);
          wizardContext.pickedNodes = startingNode ? [startingNode] : [];
          const wizard = new AzureWizard_1.AzureWizard(wizardContext, Object.assign({ hideStepCount: true, showLoadingPrompt: true }, wizardOptions));
          yield wizard.prompt();
          const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
          if (!lastPickedItem) {
            throw new errors_1.NoResourceFoundError(wizardContext);
          } else {
            return !context.dontUnwrap && (0, vscode_azureresources_api_1.isWrapper)(lastPickedItem) ? lastPickedItem.unwrap() : lastPickedItem;
          }
        });
      }
      __name(runQuickPickWizard, "runQuickPickWizard");
      exports.runQuickPickWizard = runQuickPickWizard;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/azureResourceExperience.js
  var require_azureResourceExperience = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/azureResourceExperience.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.azureResourceExperience = void 0;
      var QuickPickAzureSubscriptionStep_1 = require_QuickPickAzureSubscriptionStep();
      var QuickPickGroupStep_1 = require_QuickPickGroupStep();
      var QuickPickAzureResourceStep_1 = require_QuickPickAzureResourceStep();
      var RecursiveQuickPickStep_1 = require_RecursiveQuickPickStep();
      var CompatibilityRecursiveQuickPickStep_1 = require_CompatibilityRecursiveQuickPickStep();
      var runQuickPickWizard_1 = require_runQuickPickWizard();
      function azureResourceExperience4(context, tdp, resourceTypes, childItemFilter) {
        return __awaiter6(this, void 0, void 0, function* () {
          const promptSteps = [
            new QuickPickAzureSubscriptionStep_1.QuickPickAzureSubscriptionStep(tdp),
            new QuickPickGroupStep_1.QuickPickGroupStep(tdp, {
              groupType: resourceTypes ? Array.isArray(resourceTypes) ? resourceTypes : [resourceTypes] : void 0
            }),
            new QuickPickAzureResourceStep_1.QuickPickAzureResourceStep(tdp, {
              resourceTypes: resourceTypes ? Array.isArray(resourceTypes) ? resourceTypes : [resourceTypes] : void 0,
              skipIfOne: false
            })
          ];
          if (childItemFilter) {
            promptSteps.push(context.v1Compatibility ? new CompatibilityRecursiveQuickPickStep_1.CompatibilityRecursiveQuickPickStep(tdp, {
              contextValueFilter: childItemFilter,
              skipIfOne: true
            }) : new RecursiveQuickPickStep_1.RecursiveQuickPickStep(tdp, {
              contextValueFilter: childItemFilter,
              skipIfOne: false
            }));
          }
          return yield (0, runQuickPickWizard_1.runQuickPickWizard)(context, {
            hideStepCount: true,
            promptSteps,
            showLoadingPrompt: true
          });
        });
      }
      __name(azureResourceExperience4, "azureResourceExperience");
      exports.azureResourceExperience = azureResourceExperience4;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/subscriptionExperience.js
  var require_subscriptionExperience = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/subscriptionExperience.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.subscriptionExperience = void 0;
      var AzureWizard_1 = require_AzureWizard();
      var QuickPickAzureSubscriptionStep_1 = require_QuickPickAzureSubscriptionStep();
      var errors_1 = require_errors();
      function subscriptionExperience4(context, tdp) {
        return __awaiter6(this, void 0, void 0, function* () {
          const wizardContext = Object.assign({}, context);
          wizardContext.pickedNodes = [];
          const wizard = new AzureWizard_1.AzureWizard(wizardContext, {
            hideStepCount: true,
            promptSteps: [new QuickPickAzureSubscriptionStep_1.QuickPickAzureSubscriptionStep(tdp)],
            showLoadingPrompt: true
          });
          yield wizard.prompt();
          if (!wizardContext.subscription) {
            throw new errors_1.NoResourceFoundError(wizardContext);
          } else {
            return wizardContext.subscription;
          }
        });
      }
      __name(subscriptionExperience4, "subscriptionExperience");
      exports.subscriptionExperience = subscriptionExperience4;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/credentialUtils.js
  var require_credentialUtils = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/credentialUtils.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createSubscriptionContext = exports.createCredential = void 0;
      var localize_1 = require_localize();
      function createCredential2(getSession) {
        return {
          getToken: (scopes) => __awaiter6(this, void 0, void 0, function* () {
            if (typeof scopes === "string") {
              scopes = [scopes];
            }
            const session = yield getSession(scopes);
            if (session) {
              return {
                token: session.accessToken
              };
            } else {
              return null;
            }
          }),
          signRequest: () => __awaiter6(this, void 0, void 0, function* () {
            throw new Error((0, localize_1.localize)("signRequestError", "Track 1 credentials are not (currently) supported."));
          })
        };
      }
      __name(createCredential2, "createCredential");
      exports.createCredential = createCredential2;
      function createSubscriptionContext9(subscription) {
        return Object.assign(Object.assign({ subscriptionDisplayName: subscription.name, userId: "", subscriptionPath: subscription.subscriptionId }, subscription), { credentials: createCredential2(subscription.authentication.getSession) });
      }
      __name(createSubscriptionContext9, "createSubscriptionContext");
      exports.createSubscriptionContext = createSubscriptionContext9;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/compatibility/PickTreeItemWithCompatibility.js
  var require_PickTreeItemWithCompatibility = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/compatibility/PickTreeItemWithCompatibility.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PickTreeItemWithCompatibility = void 0;
      var azureResourceExperience_1 = require_azureResourceExperience();
      var subscriptionExperience_1 = require_subscriptionExperience();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var credentialUtils_1 = require_credentialUtils();
      var CompatibilityRecursiveQuickPickStep_1 = require_CompatibilityRecursiveQuickPickStep();
      var AzureWizard_1 = require_AzureWizard();
      var getLastNode_1 = require_getLastNode();
      var errors_1 = require_errors();
      var vscode_azureresources_api_1 = require_src2();
      var PickTreeItemWithCompatibility4;
      (function(PickTreeItemWithCompatibility5) {
        function resource(context, tdp, options) {
          return __awaiter6(this, void 0, void 0, function* () {
            const { resourceTypes, childItemFilter } = options;
            return (0, azureResourceExperience_1.azureResourceExperience)(Object.assign(Object.assign({}, context), { v1Compatibility: true }), tdp, resourceTypes ? Array.isArray(resourceTypes) ? resourceTypes : [resourceTypes] : void 0, childItemFilter);
          });
        }
        __name(resource, "resource");
        PickTreeItemWithCompatibility5.resource = resource;
        function subscription(context, tdp) {
          return __awaiter6(this, void 0, void 0, function* () {
            const applicationSubscription = yield (0, subscriptionExperience_1.subscriptionExperience)(context, tdp);
            if ((0, isAzExtTreeItem_1.isAzExtTreeItem)(applicationSubscription)) {
              return applicationSubscription.subscription;
            }
            return (0, credentialUtils_1.createSubscriptionContext)(applicationSubscription);
          });
        }
        __name(subscription, "subscription");
        PickTreeItemWithCompatibility5.subscription = subscription;
        function showTreeItemPicker(context, tdp, expectedContextValues, startingTreeItem) {
          return __awaiter6(this, void 0, void 0, function* () {
            const promptSteps = [
              new CompatibilityRecursiveQuickPickStep_1.CompatibilityRecursiveQuickPickStep(tdp, {
                contextValueFilter: {
                  include: expectedContextValues
                },
                skipIfOne: false
              })
            ];
            const wizardContext = Object.assign(Object.assign({}, context), { pickedNodes: startingTreeItem ? [startingTreeItem] : [] });
            const wizard = new AzureWizard_1.AzureWizard(wizardContext, {
              hideStepCount: true,
              promptSteps
            });
            yield wizard.prompt();
            const lastPickedItem = (0, getLastNode_1.getLastNode)(wizardContext);
            if (!lastPickedItem) {
              throw new errors_1.NoResourceFoundError(wizardContext);
            } else {
              return (0, vscode_azureresources_api_1.isWrapper)(lastPickedItem) ? lastPickedItem.unwrap() : lastPickedItem;
            }
          });
        }
        __name(showTreeItemPicker, "showTreeItemPicker");
        PickTreeItemWithCompatibility5.showTreeItemPicker = showTreeItemPicker;
      })(PickTreeItemWithCompatibility4 = exports.PickTreeItemWithCompatibility || (exports.PickTreeItemWithCompatibility = {}));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/contextValueExperience.js
  var require_contextValueExperience = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/pickTreeItem/experiences/contextValueExperience.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.contextValueExperience = void 0;
      var RecursiveQuickPickStep_1 = require_RecursiveQuickPickStep();
      var runQuickPickWizard_1 = require_runQuickPickWizard();
      function contextValueExperience(context, tdp, contextValueFilter) {
        return __awaiter6(this, void 0, void 0, function* () {
          const promptSteps = [
            new RecursiveQuickPickStep_1.RecursiveQuickPickStep(tdp, {
              contextValueFilter,
              skipIfOne: false
            })
          ];
          return yield (0, runQuickPickWizard_1.runQuickPickWizard)(context, {
            hideStepCount: true,
            promptSteps
          });
        });
      }
      __name(contextValueExperience, "contextValueExperience");
      exports.contextValueExperience = contextValueExperience;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/registerCommandWithTreeNodeUnwrapping.js
  var require_registerCommandWithTreeNodeUnwrapping = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/registerCommandWithTreeNodeUnwrapping.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unwrapTreeNodeCommandCallback = exports.registerCommandWithTreeNodeUnwrapping = void 0;
      var vscode_azureresources_api_1 = require_src2();
      var registerCommand_1 = require_registerCommand();
      function registerCommandWithTreeNodeUnwrapping(commandId, treeNodeCallback, debounce, telemetryId) {
        (0, registerCommand_1.registerCommand)(commandId, unwrapTreeNodeCommandCallback(treeNodeCallback), debounce, telemetryId);
      }
      __name(registerCommandWithTreeNodeUnwrapping, "registerCommandWithTreeNodeUnwrapping");
      exports.registerCommandWithTreeNodeUnwrapping = registerCommandWithTreeNodeUnwrapping;
      function unwrapTreeNodeCommandCallback(treeNodeCallback) {
        return (context, ...args) => __awaiter6(this, void 0, void 0, function* () {
          return treeNodeCallback(context, ...(0, vscode_azureresources_api_1.unwrapArgs)(args));
        });
      }
      __name(unwrapTreeNodeCommandCallback, "unwrapTreeNodeCommandCallback");
      exports.unwrapTreeNodeCommandCallback = unwrapTreeNodeCommandCallback;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/registerEvent.js
  var require_registerEvent = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/registerEvent.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerEvent = void 0;
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var extensionVariables_1 = require_extensionVariables();
      function registerEvent3(eventId, event, callback) {
        extensionVariables_1.ext.context.subscriptions.push(event((...args) => __awaiter6(this, void 0, void 0, function* () {
          return yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)(eventId, (context) => {
            return callback(context, ...args);
          });
        })));
      }
      __name(registerEvent3, "registerEvent");
      exports.registerEvent = registerEvent3;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/runWithLoadingNotification.js
  var require_runWithLoadingNotification = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/runWithLoadingNotification.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.runWithLoadingNotification = void 0;
      var vscode_1 = __require("vscode");
      var localize_1 = require_localize();
      function runWithLoadingNotification(context, callback) {
        return __awaiter6(this, void 0, void 0, function* () {
          return yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, cancellable: true }, (progress, cancellationToken) => __awaiter6(this, void 0, void 0, function* () {
            const message = context.loadingMessage || (0, localize_1.localize)("loadingAll", "Loading resources...");
            const messageDelay = context.loadingMessageDelay !== void 0 ? context.loadingMessageDelay : 2;
            const timer = setTimeout(() => progress.report({ message }), messageDelay * 1e3);
            try {
              return yield callback(cancellationToken);
            } finally {
              clearTimeout(timer);
            }
          }));
        });
      }
      __name(runWithLoadingNotification, "runWithLoadingNotification");
      exports.runWithLoadingNotification = runWithLoadingNotification;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/treeConstants.js
  var require_treeConstants = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/treeConstants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.loadMoreLabel = void 0;
      var localize_1 = require_localize();
      exports.loadMoreLabel = (0, localize_1.localize)("LoadMore", "Load More...");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtParentTreeItem.js
  var require_AzExtParentTreeItem = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtParentTreeItem.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InvalidTreeItem = exports.AzExtParentTreeItem = void 0;
      var util_1 = require_util();
      var vscode_1 = __require("vscode");
      var errors_1 = require_errors();
      var localize_1 = require_localize();
      var randomUtils_1 = require_randomUtils();
      var AzExtTreeItem_1 = require_AzExtTreeItem();
      var GenericTreeItem_1 = require_GenericTreeItem();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var runWithLoadingNotification_1 = require_runWithLoadingNotification();
      var treeConstants_1 = require_treeConstants();
      var AzExtParentTreeItem7 = class extends AzExtTreeItem_1.AzExtTreeItem {
        constructor() {
          super(...arguments);
          this.initialCollapsibleState = vscode_1.TreeItemCollapsibleState.Collapsed;
          this._isAzExtParentTreeItem = true;
          this._cachedChildren = [];
          this._creatingTreeItems = [];
          this._clearCache = true;
        }
        getCachedChildren(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (this._clearCache) {
              this._initChildrenTask = this.loadMoreChildren(context);
            }
            if (this._initChildrenTask) {
              yield this._initChildrenTask;
            }
            return [...this._cachedChildren];
          });
        }
        get creatingTreeItems() {
          return this._creatingTreeItems;
        }
        //#endregion
        clearCache() {
          this._clearCache = true;
        }
        createChild(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (this.createChildImpl) {
              context.telemetry.properties.advancedCreation = String(!!context.advancedCreation);
              let creatingTreeItem;
              try {
                const newTreeItem = yield this.createChildImpl(Object.assign(context, {
                  showCreatingTreeItem: (label) => {
                    creatingTreeItem = new GenericTreeItem_1.GenericTreeItem(this, {
                      label: (0, localize_1.localize)("creatingLabel", "Creating {0}...", label),
                      contextValue: `azureextensionui.creating${label}`,
                      iconPath: new vscode_1.ThemeIcon("loading~spin")
                    });
                    this._creatingTreeItems.push(creatingTreeItem);
                    this.treeDataProvider.refreshUIOnly(this);
                  }
                }));
                this.addChildToCache(newTreeItem);
                this.treeDataProvider._onTreeItemCreateEmitter.fire(newTreeItem);
                return newTreeItem;
              } finally {
                if (creatingTreeItem) {
                  this._creatingTreeItems.splice(this._creatingTreeItems.indexOf(creatingTreeItem), 1);
                  this.treeDataProvider.refreshUIOnly(this);
                }
              }
            } else {
              throw new errors_1.NotImplementedError("createChildImpl", this);
            }
          });
        }
        compareChildrenImpl(item1, item2) {
          return item1.label.localeCompare(item2.label);
        }
        pickChildTreeItem(expectedContextValues, context) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (this.pickTreeItemImpl) {
              const children = yield this.getCachedChildren(context);
              const pickedItem = yield this.pickTreeItemImpl(expectedContextValues, context);
              if (pickedItem) {
                const child = children.find((ti2) => ti2.fullId === pickedItem.fullId);
                if (child) {
                  return child;
                }
              }
            }
            const placeHolder = (0, localize_1.localize)("selectTreeItem", "Select {0}", this.childTypeLabel);
            const stepName = `treeItemPicker|${this.contextValue}`;
            let getTreeItem;
            try {
              getTreeItem = (yield context.ui.showQuickPick(this.getQuickPicks(expectedContextValues, context), { placeHolder, stepName, ignoreFocusOut: context.ignoreFocusOut })).data;
            } catch (error) {
              if (error instanceof AutoSelectError) {
                getTreeItem = error.data;
              } else if (error instanceof CanPickManyError) {
                const result = yield context.ui.showQuickPick(error.picks, { placeHolder, stepName, canPickMany: true });
                return yield Promise.all(result.map((pick) => __awaiter6(this, void 0, void 0, function* () {
                  return yield pick.data();
                })));
              } else {
                throw error;
              }
            }
            return yield getTreeItem();
          });
        }
        addChildToCache(childToAdd) {
          if (!this._cachedChildren.find((ti2) => ti2.fullId === childToAdd.fullId)) {
            let index = this._cachedChildren.length;
            for (let i = 0; i < this._cachedChildren.length; i++) {
              if (childToAdd.label.localeCompare(this._cachedChildren[i].label) < 1) {
                index = i;
                break;
              }
            }
            this._cachedChildren.splice(index, 0, childToAdd);
            this.treeDataProvider.refreshUIOnly(this);
          }
        }
        removeChildFromCache(childToRemove) {
          const index = this._cachedChildren.indexOf(childToRemove);
          if (index !== -1) {
            this._cachedChildren.splice(index, 1);
            this.treeDataProvider.refreshUIOnly(this);
          }
        }
        loadMoreChildren(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (this._loadMoreChildrenTask) {
              yield this._loadMoreChildrenTask;
            } else {
              this._loadMoreChildrenTask = this.loadMoreChildrenInternal(context);
              try {
                yield this._loadMoreChildrenTask;
              } finally {
                this._loadMoreChildrenTask = void 0;
              }
            }
          });
        }
        loadAllChildren(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            context.loadingMessage || (context.loadingMessage = (0, localize_1.localize)("loadingTreeItem", 'Loading "{0}"...', this.label));
            yield (0, runWithLoadingNotification_1.runWithLoadingNotification)(context, (cancellationToken) => __awaiter6(this, void 0, void 0, function* () {
              do {
                if (cancellationToken.isCancellationRequested) {
                  throw new errors_1.UserCancelledError("loadAllChildren");
                }
                yield this.loadMoreChildren(context);
              } while (this.hasMoreChildrenImpl());
            }));
            return [...this._cachedChildren];
          });
        }
        createTreeItemsWithErrorHandling(sourceArray, invalidContextValue, createTreeItem, getLabelOnError) {
          return __awaiter6(this, void 0, void 0, function* () {
            const treeItems = [];
            let lastUnknownItemError;
            sourceArray || (sourceArray = []);
            yield Promise.all(sourceArray.map((source) => __awaiter6(this, void 0, void 0, function* () {
              try {
                const item = yield createTreeItem(source);
                if (item) {
                  item.contextValue;
                  item.description;
                  item.label;
                  item.iconPath;
                  item.id;
                  treeItems.push(item);
                }
              } catch (error) {
                let name;
                try {
                  name = yield getLabelOnError(source);
                } catch (_a7) {
                }
                if (name) {
                  treeItems.push(new InvalidTreeItem(this, error, {
                    label: name,
                    contextValue: invalidContextValue,
                    data: source
                  }));
                } else if (!(0, util_1.isNullOrUndefined)(error)) {
                  lastUnknownItemError = error;
                }
              }
            })));
            if (!(0, util_1.isNullOrUndefined)(lastUnknownItemError)) {
              const label = (0, localize_1.localize)("cantShowItems", "Some items could not be displayed");
              treeItems.push(new InvalidTreeItem(this, lastUnknownItemError, {
                label,
                description: "",
                contextValue: invalidContextValue
              }));
            }
            return treeItems;
          });
        }
        loadMoreChildrenInternal(context) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            try {
              if (this._clearCache) {
                for (const child of this._cachedChildren) {
                  if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(child)) {
                    child.clearCache();
                  }
                }
                this._cachedChildren = [];
              } else if (!this.hasMoreChildrenImpl()) {
                return;
              }
              if (this.collapsibleState === vscode_1.TreeItemCollapsibleState.Expanded) {
                (_a7 = this.treeDataProvider.collapsibleStateTracker) === null || _a7 === void 0 ? void 0 : _a7.onDidExpandOrRefreshExpandedEmitter.fire(this);
              }
              const newTreeItems = yield this.loadMoreChildrenImpl(this._clearCache, context);
              this._cachedChildren = this._cachedChildren.concat(newTreeItems).sort((ti1, ti2) => this.compareChildrenImpl(ti1, ti2));
            } finally {
              this._clearCache = false;
            }
          });
        }
        getQuickPicks(expectedContextValues, context) {
          return __awaiter6(this, void 0, void 0, function* () {
            let children = yield this.getCachedChildren(context);
            children = children.filter((ti2) => ti2.includeInTreePicker(expectedContextValues));
            let autoSelectInTreeItemPicker = this.autoSelectInTreeItemPicker;
            const picks = children.map((ti2) => {
              if (ti2 instanceof GenericTreeItem_1.GenericTreeItem) {
                autoSelectInTreeItemPicker = false;
                return {
                  label: ti2.label,
                  description: ti2.description,
                  id: ti2.fullId,
                  data: () => __awaiter6(this, void 0, void 0, function* () {
                    if (!ti2.commandId) {
                      throw new Error((0, localize_1.localize)("noCommand", "Failed to find commandId on generic tree item."));
                    } else {
                      const commandArgs = ti2.commandArgs || [ti2];
                      yield vscode_1.commands.executeCommand(ti2.commandId, ...commandArgs);
                      yield this.refresh(context);
                      return this;
                    }
                  })
                };
              } else {
                return {
                  label: ti2.label,
                  description: ti2.description,
                  id: ti2.fullId,
                  data: () => __awaiter6(this, void 0, void 0, function* () {
                    return yield Promise.resolve(ti2);
                  })
                };
              }
            });
            if (this.createChildImpl && this.childTypeLabel && !context.suppressCreatePick) {
              const createNewLabel = this.createNewLabel || (0, localize_1.localize)("treePickerCreateNew", "Create new {0}...", this.childTypeLabel);
              if (this.supportsAdvancedCreation) {
                picks.unshift({
                  label: `$(plus) ${createNewLabel}`,
                  description: (0, localize_1.localize)("advanced", "Advanced"),
                  data: () => __awaiter6(this, void 0, void 0, function* () {
                    return yield this.createChild(Object.assign(context, { advancedCreation: true }));
                  })
                });
              }
              picks.unshift({
                label: `$(plus) ${createNewLabel}`,
                data: () => __awaiter6(this, void 0, void 0, function* () {
                  return yield this.createChild(context);
                })
              });
            }
            if (this.hasMoreChildrenImpl()) {
              picks.push({
                label: `$(sync) ${treeConstants_1.loadMoreLabel}`,
                description: "",
                data: () => __awaiter6(this, void 0, void 0, function* () {
                  yield this.treeDataProvider.loadMore(this, context);
                  return this;
                })
              });
            }
            if (picks.length === 0) {
              throw new errors_1.NoResourceFoundError(context);
            } else if (picks.length === 1 && autoSelectInTreeItemPicker) {
              throw new AutoSelectError(picks[0].data);
            } else if (context.canPickMany && children.some((c) => c.matchesContextValue(expectedContextValues))) {
              throw new CanPickManyError(picks);
            }
            return picks;
          });
        }
      };
      __name(AzExtParentTreeItem7, "AzExtParentTreeItem");
      exports.AzExtParentTreeItem = AzExtParentTreeItem7;
      var InvalidTreeItem = class extends AzExtParentTreeItem7 {
        constructor(parent, error, options) {
          super(parent);
          this.label = options.label;
          this._error = error;
          this.contextValue = options.contextValue;
          this.data = options.data;
          this.description = options.description !== void 0 ? options.description : (0, localize_1.localize)("invalid", "Invalid");
        }
        get id() {
          return randomUtils_1.randomUtils.getRandomHexString(16);
        }
        get iconPath() {
          return new vscode_1.ThemeIcon("warning");
        }
        loadMoreChildrenImpl() {
          return __awaiter6(this, void 0, void 0, function* () {
            throw this._error;
          });
        }
        hasMoreChildrenImpl() {
          return false;
        }
        isAncestorOfImpl() {
          return false;
        }
      };
      __name(InvalidTreeItem, "InvalidTreeItem");
      exports.InvalidTreeItem = InvalidTreeItem;
      var AutoSelectError = class extends Error {
        constructor(data) {
          super();
          this.data = data;
        }
      };
      __name(AutoSelectError, "AutoSelectError");
      var CanPickManyError = class extends Error {
        constructor(picks) {
          super();
          this.picks = picks;
        }
      };
      __name(CanPickManyError, "CanPickManyError");
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/CollapsibleStateTracker.js
  var require_CollapsibleStateTracker = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/CollapsibleStateTracker.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CollapsibleStateTracker = void 0;
      var vscode_1 = __require("vscode");
      var CollapsibleStateTracker = class {
        constructor(treeView) {
          this.treeView = treeView;
          this.disposables = [];
          this.collapsibleStateCache = /* @__PURE__ */ new Map();
          this.onDidExpandOrRefreshExpandedEmitter = new vscode_1.EventEmitter();
          this.disposables.push(this.treeView.onDidCollapseElement((evt) => {
            this.collapsibleStateCache.set(evt.element.effectiveId, vscode_1.TreeItemCollapsibleState.Collapsed);
          }));
          this.disposables.push(this.treeView.onDidExpandElement((evt) => {
            this.collapsibleStateCache.set(evt.element.effectiveId, vscode_1.TreeItemCollapsibleState.Expanded);
            this.onDidExpandOrRefreshExpandedEmitter.fire(evt.element);
          }));
        }
        dispose() {
          this.disposables.forEach((disposable) => void disposable.dispose());
        }
        getCollapsibleState(treeItem) {
          if (!this.collapsibleStateCache.has(treeItem.effectiveId)) {
            const result = treeItem.parent === void 0 ? vscode_1.TreeItemCollapsibleState.Expanded : (
              // The root node is always expanded
              treeItem.initialCollapsibleState
            );
            this.collapsibleStateCache.set(treeItem.effectiveId, result);
          }
          return this.collapsibleStateCache.get(treeItem.effectiveId);
        }
      };
      __name(CollapsibleStateTracker, "CollapsibleStateTracker");
      exports.CollapsibleStateTracker = CollapsibleStateTracker;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtTreeDataProvider.js
  var require_AzExtTreeDataProvider = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/tree/AzExtTreeDataProvider.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtTreeDataProvider = void 0;
      var vscode_1 = __require("vscode");
      var callWithTelemetryAndErrorHandling_1 = require_callWithTelemetryAndErrorHandling();
      var errors_1 = require_errors();
      var localize_1 = require_localize();
      var parseError_1 = require_parseError();
      var addTreeItemValuesToMask_1 = require_addTreeItemValuesToMask();
      var AzExtParentTreeItem_1 = require_AzExtParentTreeItem();
      var CollapsibleStateTracker_1 = require_CollapsibleStateTracker();
      var GenericTreeItem_1 = require_GenericTreeItem();
      var isAzExtTreeItem_1 = require_isAzExtTreeItem();
      var runWithLoadingNotification_1 = require_runWithLoadingNotification();
      var treeConstants_1 = require_treeConstants();
      var AzExtTreeDataProvider5 = class {
        constructor(rootTreeItem, loadMoreCommandId) {
          this._onTreeItemCreateEmitter = new vscode_1.EventEmitter();
          this._onDidChangeTreeDataEmitter = new vscode_1.EventEmitter();
          this._findTreeItemTasks = /* @__PURE__ */ new Map();
          this._loadMoreCommandId = loadMoreCommandId;
          this._rootTreeItem = rootTreeItem;
          rootTreeItem.treeDataProvider = this;
        }
        get onDidChangeTreeData() {
          return this._onDidChangeTreeDataEmitter.event;
        }
        get onTreeItemCreate() {
          return this._onTreeItemCreateEmitter.event;
        }
        get onDidExpandOrRefreshExpandedTreeItem() {
          if (!this.collapsibleStateTracker) {
            throw new Error("To use the `onDidExpandOrRefreshExpandedTreeItem`, first call `trackTreeItemCollapsibleState`.");
          }
          return this.collapsibleStateTracker.onDidExpandOrRefreshExpandedEmitter.event;
        }
        get collapsibleStateTracker() {
          return this._collapsibleStateTracker;
        }
        trackTreeItemCollapsibleState(treeView) {
          return this._collapsibleStateTracker = new CollapsibleStateTracker_1.CollapsibleStateTracker(treeView);
        }
        getTreeItem(treeItem) {
          return {
            label: treeItem.label,
            description: treeItem.effectiveDescription,
            id: treeItem.effectiveId,
            collapsibleState: treeItem.collapsibleState,
            contextValue: treeItem.contextValue,
            iconPath: treeItem.effectiveIconPath,
            command: treeItem.commandId ? {
              command: treeItem.commandId,
              title: "",
              arguments: treeItem.commandArgs || [treeItem]
            } : void 0,
            tooltip: treeItem.resolveTooltip ? void 0 : treeItem.tooltip
            // If `resolveTooltip` is defined, return undefined here, so that `resolveTreeItem` and `resolveTooltip` get used
          };
        }
        resolveTreeItem(ti2, treeItem) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (treeItem.resolveTooltip) {
              ti2.tooltip = yield treeItem.resolveTooltip();
            }
            return ti2;
          });
        }
        getChildren(arg) {
          return __awaiter6(this, void 0, void 0, function* () {
            try {
              return yield (0, callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling)("AzureTreeDataProvider.getChildren", (context) => __awaiter6(this, void 0, void 0, function* () {
                context.errorHandling.suppressDisplay = true;
                context.errorHandling.rethrow = true;
                context.errorHandling.forceIncludeInReportIssueCommand = true;
                let treeItem;
                if (arg) {
                  treeItem = arg;
                } else {
                  context.telemetry.properties.isActivationEvent = "true";
                  treeItem = this._rootTreeItem;
                }
                (0, addTreeItemValuesToMask_1.addTreeItemValuesToMask)(context, treeItem, "getChildren");
                context.telemetry.properties.contextValue = treeItem.contextValue;
                const children = [...treeItem.creatingTreeItems, ...yield treeItem.getCachedChildren(context)];
                const hasMoreChildren = treeItem.hasMoreChildrenImpl();
                context.telemetry.properties.hasMoreChildren = String(hasMoreChildren);
                const resultMap = /* @__PURE__ */ new Map();
                const duplicateChildren = [];
                for (const child of children) {
                  this.isDuplicateChild(child, resultMap) ? duplicateChildren.push(child) : resultMap.set(child.fullIdWithContext || child.fullId, child);
                }
                const result = Array.from(resultMap.values());
                result.push(...duplicateChildren.map((c) => {
                  const message = (0, localize_1.localize)("elementWithId", "An element with the following id already exists: {0}", c.fullId);
                  return new AzExtParentTreeItem_1.InvalidTreeItem(treeItem, new Error(message), { contextValue: "azureextensionui.duplicate", label: c.label });
                }));
                if (hasMoreChildren && !treeItem.isLoadingMore) {
                  const loadMoreTI = new GenericTreeItem_1.GenericTreeItem(treeItem, {
                    label: treeConstants_1.loadMoreLabel,
                    iconPath: new vscode_1.ThemeIcon("refresh"),
                    contextValue: "azureextensionui.loadMore",
                    commandId: this._loadMoreCommandId
                  });
                  loadMoreTI.commandArgs = [treeItem];
                  result.push(loadMoreTI);
                }
                context.telemetry.measurements.childCount = result.length;
                return result;
              }));
            } catch (error) {
              return [new GenericTreeItem_1.GenericTreeItem(arg, {
                label: (0, localize_1.localize)("errorTreeItem", "Error: {0}", (0, parseError_1.parseError)(error).message),
                contextValue: "azureextensionui.error"
              })];
            }
          });
        }
        refresh(context, treeItem) {
          return __awaiter6(this, void 0, void 0, function* () {
            treeItem || (treeItem = this._rootTreeItem);
            if (treeItem.refreshImpl && !treeItem.hasBeenDeleted) {
              yield treeItem.refreshImpl(context);
            }
            if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(treeItem)) {
              treeItem.clearCache();
            }
            this.refreshUIOnly(treeItem);
          });
        }
        refreshUIOnly(_treeItem) {
          this._onDidChangeTreeDataEmitter.fire(void 0);
        }
        loadMore(treeItem, context) {
          return __awaiter6(this, void 0, void 0, function* () {
            treeItem.isLoadingMore = true;
            try {
              this.refreshUIOnly(treeItem);
              yield treeItem.loadMoreChildren(context);
            } finally {
              treeItem.isLoadingMore = false;
              this.refreshUIOnly(treeItem);
            }
          });
        }
        showTreeItemPicker(expectedContextValues, context, startingTreeItem) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!Array.isArray(expectedContextValues)) {
              expectedContextValues = [expectedContextValues];
            }
            let treeItem = startingTreeItem || this._rootTreeItem;
            while (!treeItem.matchesContextValue(expectedContextValues)) {
              if ((0, isAzExtTreeItem_1.isAzExtParentTreeItem)(treeItem)) {
                const pickedItems = yield treeItem.pickChildTreeItem(expectedContextValues, context);
                if (Array.isArray(pickedItems)) {
                  return pickedItems;
                } else {
                  treeItem = pickedItems;
                }
              } else {
                throw new errors_1.NoResourceFoundError(context);
              }
            }
            (0, addTreeItemValuesToMask_1.addTreeItemValuesToMask)(context, treeItem, "treeItemPicker");
            return treeItem;
          });
        }
        getParent(treeItem) {
          return __awaiter6(this, void 0, void 0, function* () {
            return treeItem.parent === this._rootTreeItem ? void 0 : treeItem.parent;
          });
        }
        findTreeItem(fullId, context) {
          return __awaiter6(this, void 0, void 0, function* () {
            let result;
            const existingTask = this._findTreeItemTasks.get(fullId);
            if (existingTask) {
              result = yield existingTask;
            } else {
              const newTask = context.loadAll ? (0, runWithLoadingNotification_1.runWithLoadingNotification)(context, (cancellationToken) => this.findTreeItemInternal(fullId, context, cancellationToken)) : this.findTreeItemInternal(fullId, context);
              this._findTreeItemTasks.set(fullId, newTask);
              try {
                result = yield newTask;
              } finally {
                this._findTreeItemTasks.delete(fullId);
              }
            }
            if (result) {
              (0, addTreeItemValuesToMask_1.addTreeItemValuesToMask)(context, result, "findTreeItem");
            }
            return result;
          });
        }
        dispose() {
          var _a7;
          (_a7 = this._collapsibleStateTracker) === null || _a7 === void 0 ? void 0 : _a7.dispose();
          this._onDidChangeTreeDataEmitter.dispose();
          this._onTreeItemCreateEmitter.dispose();
        }
        /**
         * Wrapped by `findTreeItem` to ensure only one find is happening per `fullId` at a time
         */
        findTreeItemInternal(fullId, context, cancellationToken) {
          return __awaiter6(this, void 0, void 0, function* () {
            let treeItem = this._rootTreeItem;
            outerLoop:
              while (true) {
                if (cancellationToken === null || cancellationToken === void 0 ? void 0 : cancellationToken.isCancellationRequested) {
                  throw new errors_1.UserCancelledError("findTreeItem");
                }
                const children = yield treeItem.getCachedChildren(context);
                for (const child of children) {
                  if (child.fullId === fullId) {
                    return child;
                  } else if (isAncestor(child, fullId)) {
                    treeItem = child;
                    continue outerLoop;
                  }
                }
                if (context.loadAll && treeItem.hasMoreChildrenImpl()) {
                  yield treeItem.loadMoreChildren(context);
                } else {
                  return void 0;
                }
              }
          });
        }
        isDuplicateChild(child, children) {
          const existingChild = children.get(child.fullId);
          if (existingChild) {
            if (existingChild.contextValue === child.contextValue) {
              return true;
            } else {
              const fullIdWithContext = `${child.fullId}-${child.contextValue}`;
              if (children.has(fullIdWithContext)) {
                return true;
              }
              child.fullIdWithContext = fullIdWithContext;
            }
          }
          return false;
        }
      };
      __name(AzExtTreeDataProvider5, "AzExtTreeDataProvider");
      exports.AzExtTreeDataProvider = AzExtTreeDataProvider5;
      function isAncestor(treeItem, fullId) {
        return fullId.startsWith(`${treeItem.fullId}/`) && (0, isAzExtTreeItem_1.isAzExtParentTreeItem)(treeItem);
      }
      __name(isAncestor, "isAncestor");
    }
  });

  // node_modules/path-browserify/index.js
  var require_path_browserify = __commonJS({
    "node_modules/path-browserify/index.js"(exports, module) {
      "use strict";
      function assertPath(path) {
        if (typeof path !== "string") {
          throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
        }
      }
      __name(assertPath, "assertPath");
      function normalizeStringPosix(path, allowAboveRoot) {
        var res = "";
        var lastSegmentLength = 0;
        var lastSlash = -1;
        var dots = 0;
        var code;
        for (var i = 0; i <= path.length; ++i) {
          if (i < path.length)
            code = path.charCodeAt(i);
          else if (code === 47)
            break;
          else
            code = 47;
          if (code === 47) {
            if (lastSlash === i - 1 || dots === 1) {
            } else if (lastSlash !== i - 1 && dots === 2) {
              if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                if (res.length > 2) {
                  var lastSlashIndex = res.lastIndexOf("/");
                  if (lastSlashIndex !== res.length - 1) {
                    if (lastSlashIndex === -1) {
                      res = "";
                      lastSegmentLength = 0;
                    } else {
                      res = res.slice(0, lastSlashIndex);
                      lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                    }
                    lastSlash = i;
                    dots = 0;
                    continue;
                  }
                } else if (res.length === 2 || res.length === 1) {
                  res = "";
                  lastSegmentLength = 0;
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              }
              if (allowAboveRoot) {
                if (res.length > 0)
                  res += "/..";
                else
                  res = "..";
                lastSegmentLength = 2;
              }
            } else {
              if (res.length > 0)
                res += "/" + path.slice(lastSlash + 1, i);
              else
                res = path.slice(lastSlash + 1, i);
              lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
          } else if (code === 46 && dots !== -1) {
            ++dots;
          } else {
            dots = -1;
          }
        }
        return res;
      }
      __name(normalizeStringPosix, "normalizeStringPosix");
      function _format(sep, pathObject) {
        var dir = pathObject.dir || pathObject.root;
        var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
        if (!dir) {
          return base;
        }
        if (dir === pathObject.root) {
          return dir + base;
        }
        return dir + sep + base;
      }
      __name(_format, "_format");
      var posix = {
        // path.resolve([from ...], to)
        resolve: /* @__PURE__ */ __name(function resolve() {
          var resolvedPath = "";
          var resolvedAbsolute = false;
          var cwd;
          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path;
            if (i >= 0)
              path = arguments[i];
            else {
              if (cwd === void 0)
                cwd = process.cwd();
              path = cwd;
            }
            assertPath(path);
            if (path.length === 0) {
              continue;
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47;
          }
          resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
          if (resolvedAbsolute) {
            if (resolvedPath.length > 0)
              return "/" + resolvedPath;
            else
              return "/";
          } else if (resolvedPath.length > 0) {
            return resolvedPath;
          } else {
            return ".";
          }
        }, "resolve"),
        normalize: /* @__PURE__ */ __name(function normalize(path) {
          assertPath(path);
          if (path.length === 0)
            return ".";
          var isAbsolute = path.charCodeAt(0) === 47;
          var trailingSeparator = path.charCodeAt(path.length - 1) === 47;
          path = normalizeStringPosix(path, !isAbsolute);
          if (path.length === 0 && !isAbsolute)
            path = ".";
          if (path.length > 0 && trailingSeparator)
            path += "/";
          if (isAbsolute)
            return "/" + path;
          return path;
        }, "normalize"),
        isAbsolute: /* @__PURE__ */ __name(function isAbsolute(path) {
          assertPath(path);
          return path.length > 0 && path.charCodeAt(0) === 47;
        }, "isAbsolute"),
        join: /* @__PURE__ */ __name(function join() {
          if (arguments.length === 0)
            return ".";
          var joined;
          for (var i = 0; i < arguments.length; ++i) {
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
              if (joined === void 0)
                joined = arg;
              else
                joined += "/" + arg;
            }
          }
          if (joined === void 0)
            return ".";
          return posix.normalize(joined);
        }, "join"),
        relative: /* @__PURE__ */ __name(function relative(from, to2) {
          assertPath(from);
          assertPath(to2);
          if (from === to2)
            return "";
          from = posix.resolve(from);
          to2 = posix.resolve(to2);
          if (from === to2)
            return "";
          var fromStart = 1;
          for (; fromStart < from.length; ++fromStart) {
            if (from.charCodeAt(fromStart) !== 47)
              break;
          }
          var fromEnd = from.length;
          var fromLen = fromEnd - fromStart;
          var toStart = 1;
          for (; toStart < to2.length; ++toStart) {
            if (to2.charCodeAt(toStart) !== 47)
              break;
          }
          var toEnd = to2.length;
          var toLen = toEnd - toStart;
          var length = fromLen < toLen ? fromLen : toLen;
          var lastCommonSep = -1;
          var i = 0;
          for (; i <= length; ++i) {
            if (i === length) {
              if (toLen > length) {
                if (to2.charCodeAt(toStart + i) === 47) {
                  return to2.slice(toStart + i + 1);
                } else if (i === 0) {
                  return to2.slice(toStart + i);
                }
              } else if (fromLen > length) {
                if (from.charCodeAt(fromStart + i) === 47) {
                  lastCommonSep = i;
                } else if (i === 0) {
                  lastCommonSep = 0;
                }
              }
              break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to2.charCodeAt(toStart + i);
            if (fromCode !== toCode)
              break;
            else if (fromCode === 47)
              lastCommonSep = i;
          }
          var out = "";
          for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
            if (i === fromEnd || from.charCodeAt(i) === 47) {
              if (out.length === 0)
                out += "..";
              else
                out += "/..";
            }
          }
          if (out.length > 0)
            return out + to2.slice(toStart + lastCommonSep);
          else {
            toStart += lastCommonSep;
            if (to2.charCodeAt(toStart) === 47)
              ++toStart;
            return to2.slice(toStart);
          }
        }, "relative"),
        _makeLong: /* @__PURE__ */ __name(function _makeLong(path) {
          return path;
        }, "_makeLong"),
        dirname: /* @__PURE__ */ __name(function dirname(path) {
          assertPath(path);
          if (path.length === 0)
            return ".";
          var code = path.charCodeAt(0);
          var hasRoot = code === 47;
          var end = -1;
          var matchedSlash = true;
          for (var i = path.length - 1; i >= 1; --i) {
            code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                end = i;
                break;
              }
            } else {
              matchedSlash = false;
            }
          }
          if (end === -1)
            return hasRoot ? "/" : ".";
          if (hasRoot && end === 1)
            return "//";
          return path.slice(0, end);
        }, "dirname"),
        basename: /* @__PURE__ */ __name(function basename(path, ext2) {
          if (ext2 !== void 0 && typeof ext2 !== "string")
            throw new TypeError('"ext" argument must be a string');
          assertPath(path);
          var start = 0;
          var end = -1;
          var matchedSlash = true;
          var i;
          if (ext2 !== void 0 && ext2.length > 0 && ext2.length <= path.length) {
            if (ext2.length === path.length && ext2 === path)
              return "";
            var extIdx = ext2.length - 1;
            var firstNonSlashEnd = -1;
            for (i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else {
                if (firstNonSlashEnd === -1) {
                  matchedSlash = false;
                  firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                  if (code === ext2.charCodeAt(extIdx)) {
                    if (--extIdx === -1) {
                      end = i;
                    }
                  } else {
                    extIdx = -1;
                    end = firstNonSlashEnd;
                  }
                }
              }
            }
            if (start === end)
              end = firstNonSlashEnd;
            else if (end === -1)
              end = path.length;
            return path.slice(start, end);
          } else {
            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1)
              return "";
            return path.slice(start, end);
          }
        }, "basename"),
        extname: /* @__PURE__ */ __name(function extname(path) {
          assertPath(path);
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          var preDotState = 0;
          for (var i = path.length - 1; i >= 0; --i) {
            var code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46) {
              if (startDot === -1)
                startDot = i;
              else if (preDotState !== 1)
                preDotState = 1;
            } else if (startDot !== -1) {
              preDotState = -1;
            }
          }
          if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
          preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
          preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            return "";
          }
          return path.slice(startDot, end);
        }, "extname"),
        format: /* @__PURE__ */ __name(function format2(pathObject) {
          if (pathObject === null || typeof pathObject !== "object") {
            throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
          }
          return _format("/", pathObject);
        }, "format"),
        parse: /* @__PURE__ */ __name(function parse4(path) {
          assertPath(path);
          var ret = { root: "", dir: "", base: "", ext: "", name: "" };
          if (path.length === 0)
            return ret;
          var code = path.charCodeAt(0);
          var isAbsolute = code === 47;
          var start;
          if (isAbsolute) {
            ret.root = "/";
            start = 1;
          } else {
            start = 0;
          }
          var startDot = -1;
          var startPart = 0;
          var end = -1;
          var matchedSlash = true;
          var i = path.length - 1;
          var preDotState = 0;
          for (; i >= start; --i) {
            code = path.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                startPart = i + 1;
                break;
              }
              continue;
            }
            if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
            if (code === 46) {
              if (startDot === -1)
                startDot = i;
              else if (preDotState !== 1)
                preDotState = 1;
            } else if (startDot !== -1) {
              preDotState = -1;
            }
          }
          if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
          preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
          preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
              if (startPart === 0 && isAbsolute)
                ret.base = ret.name = path.slice(1, end);
              else
                ret.base = ret.name = path.slice(startPart, end);
            }
          } else {
            if (startPart === 0 && isAbsolute) {
              ret.name = path.slice(1, startDot);
              ret.base = path.slice(1, end);
            } else {
              ret.name = path.slice(startPart, startDot);
              ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
          }
          if (startPart > 0)
            ret.dir = path.slice(0, startPart - 1);
          else if (isAbsolute)
            ret.dir = "/";
          return ret;
        }, "parse"),
        sep: "/",
        delimiter: ":",
        win32: null,
        posix: null
      };
      posix.posix = posix;
      module.exports = posix;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/AzExtFsExtra.js
  var require_AzExtFsExtra = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/AzExtFsExtra.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzExtFsExtra = void 0;
      var path = require_path_browserify();
      var vscode_1 = __require("vscode");
      var parseError_1 = require_parseError();
      var AzExtFsExtra;
      (function(AzExtFsExtra2) {
        function isDirectory(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            const stats = yield vscode_1.workspace.fs.stat(uri);
            return stats.type === vscode_1.FileType.Directory;
          });
        }
        __name(isDirectory, "isDirectory");
        AzExtFsExtra2.isDirectory = isDirectory;
        function isFile(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            const stats = yield vscode_1.workspace.fs.stat(uri);
            return stats.type === vscode_1.FileType.File;
          });
        }
        __name(isFile, "isFile");
        AzExtFsExtra2.isFile = isFile;
        function ensureDir(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            try {
              if (yield isDirectory(uri))
                return;
            } catch (err) {
              const pError = (0, parseError_1.parseError)(err);
              if (pError && pError.errorType === "FileNotFound") {
              } else {
                throw err;
              }
            }
            yield vscode_1.workspace.fs.createDirectory(uri);
          });
        }
        __name(ensureDir, "ensureDir");
        AzExtFsExtra2.ensureDir = ensureDir;
        function ensureFile(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            try {
              if (yield isFile(uri))
                return;
            } catch (err) {
              const pError = (0, parseError_1.parseError)(err);
              if (pError && pError.errorType === "FileNotFound") {
                const dir = path.dirname(uri.fsPath);
                yield ensureDir(dir);
              } else {
                throw err;
              }
            }
            yield vscode_1.workspace.fs.writeFile(uri, Buffer.from(""));
          });
        }
        __name(ensureFile, "ensureFile");
        AzExtFsExtra2.ensureFile = ensureFile;
        function readFile(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            return (yield vscode_1.workspace.fs.readFile(uri)).toString();
          });
        }
        __name(readFile, "readFile");
        AzExtFsExtra2.readFile = readFile;
        function writeFile(resource, contents) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            yield vscode_1.workspace.fs.writeFile(uri, Buffer.from(contents));
          });
        }
        __name(writeFile, "writeFile");
        AzExtFsExtra2.writeFile = writeFile;
        function pathExists(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            let stats;
            const uri = convertToUri(resource);
            try {
              stats = yield vscode_1.workspace.fs.stat(uri);
            } catch (_a7) {
            }
            return !!stats;
          });
        }
        __name(pathExists, "pathExists");
        AzExtFsExtra2.pathExists = pathExists;
        function readJSON(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const file = yield readFile(resource);
            try {
              return JSON.parse(file);
            } catch (err) {
              const pError = (0, parseError_1.parseError)(err);
              if (pError.errorType === "SyntaxError") {
                throw new Error(`Error parsing JSON file: ${resource}. ${pError.message}`);
              } else {
                throw err;
              }
            }
          });
        }
        __name(readJSON, "readJSON");
        AzExtFsExtra2.readJSON = readJSON;
        function writeJSON(resource, contents, space = 2) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (typeof contents === "string") {
              contents = JSON.parse(contents);
            }
            const stringified = JSON.stringify(contents, void 0, space);
            yield writeFile(resource, stringified);
          });
        }
        __name(writeJSON, "writeJSON");
        AzExtFsExtra2.writeJSON = writeJSON;
        function readDirectory(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            const fileTuples = yield vscode_1.workspace.fs.readDirectory(uri);
            return fileTuples.map((f2) => {
              return { fsPath: path.join(uri.fsPath, f2[0]), name: f2[0], type: f2[1] };
            });
          });
        }
        __name(readDirectory, "readDirectory");
        AzExtFsExtra2.readDirectory = readDirectory;
        function emptyDir(resource) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            const files = yield vscode_1.workspace.fs.readDirectory(uri);
            yield Promise.all(files.map((file) => __awaiter6(this, void 0, void 0, function* () {
              yield vscode_1.workspace.fs.delete(vscode_1.Uri.file(path.join(uri.fsPath, file[0])), { recursive: true });
            })));
          });
        }
        __name(emptyDir, "emptyDir");
        AzExtFsExtra2.emptyDir = emptyDir;
        function copy(src, dest, options) {
          return __awaiter6(this, void 0, void 0, function* () {
            const sUri = convertToUri(src);
            const dUri = convertToUri(dest);
            yield vscode_1.workspace.fs.copy(sUri, dUri, options);
          });
        }
        __name(copy, "copy");
        AzExtFsExtra2.copy = copy;
        function deleteResource(resource, options) {
          return __awaiter6(this, void 0, void 0, function* () {
            const uri = convertToUri(resource);
            yield vscode_1.workspace.fs.delete(uri, options);
          });
        }
        __name(deleteResource, "deleteResource");
        AzExtFsExtra2.deleteResource = deleteResource;
        function convertToUri(resource) {
          return typeof resource === "string" ? vscode_1.Uri.file(resource) : resource;
        }
        __name(convertToUri, "convertToUri");
      })(AzExtFsExtra = exports.AzExtFsExtra || (exports.AzExtFsExtra = {}));
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/utils/findFreePort.js
  var require_findFreePort = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/utils/findFreePort.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.findFreePort = void 0;
      var net = (init_empty(), __toCommonJS(empty_exports));
      var randomUtils_1 = require_randomUtils();
      var DefaultTimeout = 500;
      var DefaultMaxAttempts = 25;
      var MinRandomPort = 1e4;
      var MaxRandomPort = 64e3;
      function findFreePort(startPort = 0, maxAttempts = DefaultMaxAttempts, timeout = DefaultTimeout) {
        return __awaiter6(this, void 0, void 0, function* () {
          startPort || (startPort = randomUtils_1.randomUtils.getRandomInteger(MinRandomPort, MaxRandomPort));
          let resolved = false;
          let timeoutHandle = void 0;
          let countTried = 1;
          const server = net.createServer({ pauseOnConnect: true });
          function doResolve(port, resolve) {
            if (!resolved) {
              resolved = true;
              server.removeAllListeners();
              server.close();
              if (timeoutHandle) {
                clearTimeout(timeoutHandle);
              }
              resolve(port);
            }
          }
          __name(doResolve, "doResolve");
          return new Promise((resolve) => {
            timeoutHandle = setTimeout(() => {
              doResolve(0, resolve);
            }, timeout);
            server.on("listening", () => {
              doResolve(startPort, resolve);
            });
            server.on("error", (err) => {
              if (err && (err.code === "EADDRINUSE" || err.code === "EACCES") && countTried < maxAttempts) {
                startPort += countTried;
                countTried++;
                server.listen(startPort, "127.0.0.1");
              } else {
                doResolve(0, resolve);
              }
            });
            server.on("close", () => {
              doResolve(0, resolve);
            });
            server.listen(startPort, "127.0.0.1");
          });
        });
      }
      __name(findFreePort, "findFreePort");
      exports.findFreePort = findFreePort;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureNameStep.js
  var require_AzureNameStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureNameStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzureNameStep = void 0;
      var util_1 = require_util();
      var AzureWizardPromptStep_1 = require_AzureWizardPromptStep();
      var AzureNameStep = class extends AzureWizardPromptStep_1.AzureWizardPromptStep {
        generateRelatedName(wizardContext, name, namingRules) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!(0, util_1.isArray)(namingRules)) {
              namingRules = [namingRules];
            }
            let preferredName = namingRules.some((n) => !!n.lowercaseOnly) ? name.toLowerCase() : name;
            for (let invalidCharsRegExp of namingRules.map((n) => n.invalidCharsRegExp)) {
              invalidCharsRegExp = new RegExp(invalidCharsRegExp, "g");
              preferredName = preferredName.replace(invalidCharsRegExp, "");
            }
            const minLength = Math.max(...namingRules.map((n) => n.minLength));
            const maxLength = Math.min(...namingRules.map((n) => n.maxLength));
            const maxTries = 100;
            let count = 1;
            let newName;
            while (count < maxTries) {
              newName = this.generateSuffixedName(preferredName, count, minLength, maxLength);
              if (yield this.isRelatedNameAvailable(wizardContext, newName)) {
                return newName;
              }
              count += 1;
            }
            return void 0;
          });
        }
        generateSuffixedName(preferredName, i, minLength, maxLength) {
          const suffix = i === 1 ? "" : i.toString();
          const minUnsuffixedLength = minLength - suffix.length;
          const maxUnsuffixedLength = maxLength - suffix.length;
          let unsuffixedName = preferredName;
          if (unsuffixedName.length > maxUnsuffixedLength) {
            unsuffixedName = preferredName.slice(0, maxUnsuffixedLength);
          } else {
            while (unsuffixedName.length < minUnsuffixedLength) {
              unsuffixedName += preferredName;
            }
          }
          return unsuffixedName + suffix;
        }
      };
      __name(AzureNameStep, "AzureNameStep");
      exports.AzureNameStep = AzureNameStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizardExecuteStep.js
  var require_AzureWizardExecuteStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/AzureWizardExecuteStep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzureWizardExecuteStep = void 0;
      var AzureWizardExecuteStep3 = class {
      };
      __name(AzureWizardExecuteStep3, "AzureWizardExecuteStep");
      exports.AzureWizardExecuteStep = AzureWizardExecuteStep3;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/ConfirmPreviousInputStep.js
  var require_ConfirmPreviousInputStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/ConfirmPreviousInputStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConfirmPreviousInputStep = void 0;
      var localize_1 = require_localize();
      var AzureWizardPromptStep_1 = require_AzureWizardPromptStep();
      var ConfirmPreviousInputStep = class extends AzureWizardPromptStep_1.AzureWizardPromptStep {
        constructor(key, options) {
          super();
          this.key = key;
          this.options = options;
        }
        prompt(context) {
          var _a7, _b2, _c2;
          return __awaiter6(this, void 0, void 0, function* () {
            yield context.ui.showInputBox({
              prompt: (_b2 = (_a7 = this.options) === null || _a7 === void 0 ? void 0 : _a7.prompt) !== null && _b2 !== void 0 ? _b2 : (0, localize_1.localize)("verifyPreviousInput", "Please confirm by re-entering the previous value."),
              password: (_c2 = this.options) === null || _c2 === void 0 ? void 0 : _c2.isPassword,
              validateInput: (value) => this.validateInput(context, value)
            });
          });
        }
        shouldPrompt() {
          return true;
        }
        validateInput(context, value) {
          const valueMismatch = (0, localize_1.localize)("valueMismatch", "The entered value does not match the original.");
          return context[this.key] === (value === null || value === void 0 ? void 0 : value.trim()) ? void 0 : valueMismatch;
        }
      };
      __name(ConfirmPreviousInputStep, "ConfirmPreviousInputStep");
      exports.ConfirmPreviousInputStep = ConfirmPreviousInputStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/wizard/DeleteConfirmationStep.js
  var require_DeleteConfirmationStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/wizard/DeleteConfirmationStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DeleteConfirmationStep = void 0;
      var DialogResponses_1 = require_DialogResponses();
      var AzureWizardPromptStep_1 = require_AzureWizardPromptStep();
      var DeleteConfirmationStep = class extends AzureWizardPromptStep_1.AzureWizardPromptStep {
        constructor(message) {
          super();
          this.message = message;
        }
        prompt(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            yield context.ui.showWarningMessage(this.message, { modal: true, stepName: "deleteConfirmation" }, DialogResponses_1.DialogResponses.deleteResponse);
          });
        }
        shouldPrompt() {
          return true;
        }
      };
      __name(DeleteConfirmationStep, "DeleteConfirmationStep");
      exports.DeleteConfirmationStep = DeleteConfirmationStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-utils/out/src/index.js
  var require_src3 = __commonJS({
    "node_modules/@microsoft/vscode-azext-utils/out/src/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.apiUtils = exports.registerReportIssueCommand = exports.maskValue = exports.callWithMaskHandling = exports.addExtensionValueToMask = exports.registerUIExtensionVariables = exports.createExperimentationService = exports.createAzExtLogOutputChannel = exports.createAzExtOutputChannel = void 0;
      __exportStar(require_ExecuteActivity(), exports);
      __exportStar(require_Activity(), exports);
      var AzExtOutputChannel_1 = require_AzExtOutputChannel();
      Object.defineProperty(exports, "createAzExtOutputChannel", { enumerable: true, get: function() {
        return AzExtOutputChannel_1.createAzExtOutputChannel;
      } });
      Object.defineProperty(exports, "createAzExtLogOutputChannel", { enumerable: true, get: function() {
        return AzExtOutputChannel_1.createAzExtLogOutputChannel;
      } });
      __exportStar(require_AzExtTreeFileSystem(), exports);
      __exportStar(require_callWithTelemetryAndErrorHandling(), exports);
      __exportStar(require_createApiProvider(), exports);
      var createExperimentationService_1 = require_createExperimentationService();
      Object.defineProperty(exports, "createExperimentationService", { enumerable: true, get: function() {
        return createExperimentationService_1.createExperimentationService;
      } });
      __exportStar(require_DialogResponses(), exports);
      __exportStar(require_errors(), exports);
      __exportStar(require_extensionUserAgent(), exports);
      var extensionVariables_1 = require_extensionVariables();
      Object.defineProperty(exports, "registerUIExtensionVariables", { enumerable: true, get: function() {
        return extensionVariables_1.registerUIExtensionVariables;
      } });
      __exportStar(require_getAzExtResourceType(), exports);
      var masking_1 = require_masking();
      Object.defineProperty(exports, "addExtensionValueToMask", { enumerable: true, get: function() {
        return masking_1.addExtensionValueToMask;
      } });
      Object.defineProperty(exports, "callWithMaskHandling", { enumerable: true, get: function() {
        return masking_1.callWithMaskHandling;
      } });
      Object.defineProperty(exports, "maskValue", { enumerable: true, get: function() {
        return masking_1.maskValue;
      } });
      __exportStar(require_openReadOnlyContent(), exports);
      __exportStar(require_parseError(), exports);
      __exportStar(require_azureResourceExperience(), exports);
      __exportStar(require_PickTreeItemWithCompatibility(), exports);
      __exportStar(require_contextValueExperience(), exports);
      __exportStar(require_subscriptionExperience(), exports);
      __exportStar(require_GenericQuickPickStep(), exports);
      __exportStar(require_ContextValueQuickPickStep(), exports);
      __exportStar(require_RecursiveQuickPickStep(), exports);
      __exportStar(require_QuickPickAzureSubscriptionStep(), exports);
      __exportStar(require_QuickPickGroupStep(), exports);
      __exportStar(require_QuickPickAzureResourceStep(), exports);
      __exportStar(require_runQuickPickWizard(), exports);
      __exportStar(require_registerCommand(), exports);
      __exportStar(require_registerCommandWithTreeNodeUnwrapping(), exports);
      __exportStar(require_registerEvent(), exports);
      var registerReportIssueCommand_1 = require_registerReportIssueCommand();
      Object.defineProperty(exports, "registerReportIssueCommand", { enumerable: true, get: function() {
        return registerReportIssueCommand_1.registerReportIssueCommand;
      } });
      __exportStar(require_AzExtParentTreeItem(), exports);
      __exportStar(require_AzExtTreeDataProvider(), exports);
      __exportStar(require_AzExtTreeItem(), exports);
      __exportStar(require_GenericTreeItem(), exports);
      __exportStar(require_isAzExtTreeItem(), exports);
      __exportStar(require_AzExtFsExtra(), exports);
      __exportStar(require_contextUtils(), exports);
      __exportStar(require_credentialUtils(), exports);
      __exportStar(require_findFreePort(), exports);
      __exportStar(require_nonNull(), exports);
      __exportStar(require_openUrl(), exports);
      __exportStar(require_AzureNameStep(), exports);
      __exportStar(require_AzureWizard(), exports);
      __exportStar(require_AzureWizardExecuteStep(), exports);
      __exportStar(require_AzureWizardPromptStep(), exports);
      __exportStar(require_ConfirmPreviousInputStep(), exports);
      __exportStar(require_DeleteConfirmationStep(), exports);
      var vscode_azureresources_api_1 = require_src2();
      Object.defineProperty(exports, "apiUtils", { enumerable: true, get: function() {
        return vscode_azureresources_api_1.apiUtils;
      } });
    }
  });

  // node_modules/stream-http/lib/capability.js
  var require_capability = __commonJS({
    "node_modules/stream-http/lib/capability.js"(exports) {
      exports.fetch = isFunction2(global.fetch) && isFunction2(global.ReadableStream);
      exports.writableStream = isFunction2(global.WritableStream);
      exports.abortController = isFunction2(global.AbortController);
      var xhr;
      function getXHR() {
        if (xhr !== void 0)
          return xhr;
        if (global.XMLHttpRequest) {
          xhr = new global.XMLHttpRequest();
          try {
            xhr.open("GET", global.XDomainRequest ? "/" : "https://example.com");
          } catch (e) {
            xhr = null;
          }
        } else {
          xhr = null;
        }
        return xhr;
      }
      __name(getXHR, "getXHR");
      function checkTypeSupport(type) {
        var xhr2 = getXHR();
        if (!xhr2)
          return false;
        try {
          xhr2.responseType = type;
          return xhr2.responseType === type;
        } catch (e) {
        }
        return false;
      }
      __name(checkTypeSupport, "checkTypeSupport");
      exports.arraybuffer = exports.fetch || checkTypeSupport("arraybuffer");
      exports.msstream = !exports.fetch && checkTypeSupport("ms-stream");
      exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport("moz-chunked-arraybuffer");
      exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction2(getXHR().overrideMimeType) : false);
      function isFunction2(value) {
        return typeof value === "function";
      }
      __name(isFunction2, "isFunction");
      xhr = null;
    }
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports, module) {
      "use strict";
      var R2 = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply = R2 && typeof R2.apply === "function" ? R2.apply : /* @__PURE__ */ __name(function ReflectApply2(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      }, "ReflectApply");
      var ReflectOwnKeys;
      if (R2 && typeof R2.ownKeys === "function") {
        ReflectOwnKeys = R2.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = /* @__PURE__ */ __name(function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        }, "ReflectOwnKeys");
      } else {
        ReflectOwnKeys = /* @__PURE__ */ __name(function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        }, "ReflectOwnKeys");
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn)
          console.warn(warning);
      }
      __name(ProcessEmitWarning, "ProcessEmitWarning");
      var NumberIsNaN = Number.isNaN || /* @__PURE__ */ __name(function NumberIsNaN2(value) {
        return value !== value;
      }, "NumberIsNaN");
      function EventEmitter11() {
        EventEmitter11.init.call(this);
      }
      __name(EventEmitter11, "EventEmitter");
      module.exports = EventEmitter11;
      module.exports.once = once;
      EventEmitter11.EventEmitter = EventEmitter11;
      EventEmitter11.prototype._events = void 0;
      EventEmitter11.prototype._eventsCount = 0;
      EventEmitter11.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
      }
      __name(checkListener, "checkListener");
      Object.defineProperty(EventEmitter11, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
          }
          defaultMaxListeners = arg;
        }
      });
      EventEmitter11.init = function() {
        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter11.prototype.setMaxListeners = /* @__PURE__ */ __name(function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
        }
        this._maxListeners = n;
        return this;
      }, "setMaxListeners");
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter11.defaultMaxListeners;
        return that._maxListeners;
      }
      __name(_getMaxListeners, "_getMaxListeners");
      EventEmitter11.prototype.getMaxListeners = /* @__PURE__ */ __name(function getMaxListeners() {
        return _getMaxListeners(this);
      }, "getMaxListeners");
      EventEmitter11.prototype.emit = /* @__PURE__ */ __name(function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
          args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0)
          doError = doError && events.error === void 0;
        else if (!doError)
          return false;
        if (doError) {
          var er2;
          if (args.length > 0)
            er2 = args[0];
          if (er2 instanceof Error) {
            throw er2;
          }
          var err = new Error("Unhandled error." + (er2 ? " (" + er2.message + ")" : ""));
          err.context = er2;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0)
          return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i)
            ReflectApply(listeners[i], this, args);
        }
        return true;
      }, "emit");
      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }
        return target;
      }
      __name(_addListener, "_addListener");
      EventEmitter11.prototype.addListener = /* @__PURE__ */ __name(function addListener(type, listener) {
        return _addListener(this, type, listener, false);
      }, "addListener");
      EventEmitter11.prototype.on = EventEmitter11.prototype.addListener;
      EventEmitter11.prototype.prependListener = /* @__PURE__ */ __name(function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      }, "prependListener");
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0)
            return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      __name(onceWrapper, "onceWrapper");
      function _onceWrap(target, type, listener) {
        var state = { fired: false, wrapFn: void 0, target, type, listener };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }
      __name(_onceWrap, "_onceWrap");
      EventEmitter11.prototype.once = /* @__PURE__ */ __name(function once2(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      }, "once");
      EventEmitter11.prototype.prependOnceListener = /* @__PURE__ */ __name(function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      }, "prependOnceListener");
      EventEmitter11.prototype.removeListener = /* @__PURE__ */ __name(function removeListener(type, listener) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === void 0)
          return this;
        list = events[type];
        if (list === void 0)
          return this;
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1)
            events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener);
        }
        return this;
      }, "removeListener");
      EventEmitter11.prototype.off = EventEmitter11.prototype.removeListener;
      EventEmitter11.prototype.removeAllListeners = /* @__PURE__ */ __name(function removeAllListeners(type) {
        var listeners, events, i;
        events = this._events;
        if (events === void 0)
          return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener")
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
        return this;
      }, "removeAllListeners");
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0)
          return [];
        var evlistener = events[type];
        if (evlistener === void 0)
          return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      __name(_listeners, "_listeners");
      EventEmitter11.prototype.listeners = /* @__PURE__ */ __name(function listeners(type) {
        return _listeners(this, type, true);
      }, "listeners");
      EventEmitter11.prototype.rawListeners = /* @__PURE__ */ __name(function rawListeners(type) {
        return _listeners(this, type, false);
      }, "rawListeners");
      EventEmitter11.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter11.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      __name(listenerCount, "listenerCount");
      EventEmitter11.prototype.eventNames = /* @__PURE__ */ __name(function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      }, "eventNames");
      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i)
          copy[i] = arr[i];
        return copy;
      }
      __name(arrayClone, "arrayClone");
      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++)
          list[index] = list[index + 1];
        list.pop();
      }
      __name(spliceOne, "spliceOne");
      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }
      __name(unwrapListeners, "unwrapListeners");
      function once(emitter, name) {
        return new Promise(function(resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }
          __name(errorListener, "errorListener");
          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }
          __name(resolver, "resolver");
          ;
          eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
          }
        });
      }
      __name(once, "once");
      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }
      __name(addErrorHandlerIfEventEmitter, "addErrorHandlerIfEventEmitter");
      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          emitter.addEventListener(name, /* @__PURE__ */ __name(function wrapListener(arg) {
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          }, "wrapListener"));
        } else {
          throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
        }
      }
      __name(eventTargetAgnosticAddListener, "eventTargetAgnosticAddListener");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js
  var require_stream_browser = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
      module.exports = require_events().EventEmitter;
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      __name(getLens, "getLens");
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      __name(byteLength, "byteLength");
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      __name(_byteLength, "_byteLength");
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      __name(toByteArray, "toByteArray");
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      __name(tripletToBase64, "tripletToBase64");
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      __name(encodeChunk, "encodeChunk");
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
      __name(fromByteArray, "fromByteArray");
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt2 / c;
          } else {
            value += rt2 * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      __name(typedArraySupport, "typedArraySupport");
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      __name(createBuffer, "createBuffer");
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      __name(Buffer2, "Buffer");
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      __name(from, "from");
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      __name(assertSize, "assertSize");
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      __name(alloc, "alloc");
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      __name(allocUnsafe, "allocUnsafe");
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      __name(fromString, "fromString");
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      __name(fromArrayLike, "fromArrayLike");
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      __name(fromArrayView, "fromArrayView");
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      __name(fromArrayBuffer, "fromArrayBuffer");
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      __name(fromObject, "fromObject");
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      __name(checked, "checked");
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      __name(SlowBuffer, "SlowBuffer");
      Buffer2.isBuffer = /* @__PURE__ */ __name(function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      }, "isBuffer");
      Buffer2.compare = /* @__PURE__ */ __name(function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x2 = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x2, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x2 = a[i];
            y = b[i];
            break;
          }
        }
        if (x2 < y)
          return -1;
        if (y < x2)
          return 1;
        return 0;
      }, "compare");
      Buffer2.isEncoding = /* @__PURE__ */ __name(function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      }, "isEncoding");
      Buffer2.concat = /* @__PURE__ */ __name(function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      }, "concat");
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      __name(byteLength, "byteLength");
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      __name(slowToString, "slowToString");
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      __name(swap, "swap");
      Buffer2.prototype.swap16 = /* @__PURE__ */ __name(function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      }, "swap16");
      Buffer2.prototype.swap32 = /* @__PURE__ */ __name(function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      }, "swap32");
      Buffer2.prototype.swap64 = /* @__PURE__ */ __name(function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      }, "swap64");
      Buffer2.prototype.toString = /* @__PURE__ */ __name(function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      }, "toString");
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = /* @__PURE__ */ __name(function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      }, "equals");
      Buffer2.prototype.inspect = /* @__PURE__ */ __name(function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      }, "inspect");
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = /* @__PURE__ */ __name(function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x2 = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x2, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x2 = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x2 < y)
          return -1;
        if (y < x2)
          return 1;
        return 0;
      }, "compare");
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      __name(bidirectionalIndexOf, "bidirectionalIndexOf");
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        __name(read, "read");
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      __name(arrayIndexOf, "arrayIndexOf");
      Buffer2.prototype.includes = /* @__PURE__ */ __name(function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      }, "includes");
      Buffer2.prototype.indexOf = /* @__PURE__ */ __name(function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      }, "indexOf");
      Buffer2.prototype.lastIndexOf = /* @__PURE__ */ __name(function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      }, "lastIndexOf");
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      __name(hexWrite, "hexWrite");
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      __name(utf8Write, "utf8Write");
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      __name(asciiWrite, "asciiWrite");
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      __name(base64Write, "base64Write");
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      __name(ucs2Write, "ucs2Write");
      Buffer2.prototype.write = /* @__PURE__ */ __name(function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }, "write");
      Buffer2.prototype.toJSON = /* @__PURE__ */ __name(function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      }, "toJSON");
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      __name(base64Slice, "base64Slice");
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      __name(utf8Slice, "utf8Slice");
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      __name(decodeCodePointsArray, "decodeCodePointsArray");
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      __name(asciiSlice, "asciiSlice");
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      __name(latin1Slice, "latin1Slice");
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      __name(hexSlice, "hexSlice");
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      __name(utf16leSlice, "utf16leSlice");
      Buffer2.prototype.slice = /* @__PURE__ */ __name(function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      }, "slice");
      function checkOffset(offset, ext2, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext2 > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      __name(checkOffset, "checkOffset");
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = /* @__PURE__ */ __name(function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      }, "readUIntLE");
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = /* @__PURE__ */ __name(function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      }, "readUIntBE");
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = /* @__PURE__ */ __name(function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      }, "readUInt8");
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = /* @__PURE__ */ __name(function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      }, "readUInt16LE");
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = /* @__PURE__ */ __name(function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      }, "readUInt16BE");
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = /* @__PURE__ */ __name(function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      }, "readUInt32LE");
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = /* @__PURE__ */ __name(function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      }, "readUInt32BE");
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(/* @__PURE__ */ __name(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo2 = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi2 = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo2) + (BigInt(hi2) << BigInt(32));
      }, "readBigUInt64LE"));
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(/* @__PURE__ */ __name(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi2 = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo2 = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi2) << BigInt(32)) + BigInt(lo2);
      }, "readBigUInt64BE"));
      Buffer2.prototype.readIntLE = /* @__PURE__ */ __name(function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      }, "readIntLE");
      Buffer2.prototype.readIntBE = /* @__PURE__ */ __name(function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      }, "readIntBE");
      Buffer2.prototype.readInt8 = /* @__PURE__ */ __name(function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      }, "readInt8");
      Buffer2.prototype.readInt16LE = /* @__PURE__ */ __name(function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      }, "readInt16LE");
      Buffer2.prototype.readInt16BE = /* @__PURE__ */ __name(function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      }, "readInt16BE");
      Buffer2.prototype.readInt32LE = /* @__PURE__ */ __name(function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      }, "readInt32LE");
      Buffer2.prototype.readInt32BE = /* @__PURE__ */ __name(function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      }, "readInt32BE");
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(/* @__PURE__ */ __name(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      }, "readBigInt64LE"));
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(/* @__PURE__ */ __name(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      }, "readBigInt64BE"));
      Buffer2.prototype.readFloatLE = /* @__PURE__ */ __name(function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      }, "readFloatLE");
      Buffer2.prototype.readFloatBE = /* @__PURE__ */ __name(function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      }, "readFloatBE");
      Buffer2.prototype.readDoubleLE = /* @__PURE__ */ __name(function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      }, "readDoubleLE");
      Buffer2.prototype.readDoubleBE = /* @__PURE__ */ __name(function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      }, "readDoubleBE");
      function checkInt(buf, value, offset, ext2, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext2 > buf.length)
          throw new RangeError("Index out of range");
      }
      __name(checkInt, "checkInt");
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = /* @__PURE__ */ __name(function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      }, "writeUIntLE");
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = /* @__PURE__ */ __name(function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      }, "writeUIntBE");
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = /* @__PURE__ */ __name(function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      }, "writeUInt8");
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = /* @__PURE__ */ __name(function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      }, "writeUInt16LE");
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = /* @__PURE__ */ __name(function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      }, "writeUInt16BE");
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = /* @__PURE__ */ __name(function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      }, "writeUInt32LE");
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = /* @__PURE__ */ __name(function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      }, "writeUInt32BE");
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo2 = Number(value & BigInt(4294967295));
        buf[offset++] = lo2;
        lo2 = lo2 >> 8;
        buf[offset++] = lo2;
        lo2 = lo2 >> 8;
        buf[offset++] = lo2;
        lo2 = lo2 >> 8;
        buf[offset++] = lo2;
        let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi2;
        hi2 = hi2 >> 8;
        buf[offset++] = hi2;
        hi2 = hi2 >> 8;
        buf[offset++] = hi2;
        hi2 = hi2 >> 8;
        buf[offset++] = hi2;
        return offset;
      }
      __name(wrtBigUInt64LE, "wrtBigUInt64LE");
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo2 = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo2;
        lo2 = lo2 >> 8;
        buf[offset + 6] = lo2;
        lo2 = lo2 >> 8;
        buf[offset + 5] = lo2;
        lo2 = lo2 >> 8;
        buf[offset + 4] = lo2;
        let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi2;
        hi2 = hi2 >> 8;
        buf[offset + 2] = hi2;
        hi2 = hi2 >> 8;
        buf[offset + 1] = hi2;
        hi2 = hi2 >> 8;
        buf[offset] = hi2;
        return offset + 8;
      }
      __name(wrtBigUInt64BE, "wrtBigUInt64BE");
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(/* @__PURE__ */ __name(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      }, "writeBigUInt64LE"));
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(/* @__PURE__ */ __name(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      }, "writeBigUInt64BE"));
      Buffer2.prototype.writeIntLE = /* @__PURE__ */ __name(function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      }, "writeIntLE");
      Buffer2.prototype.writeIntBE = /* @__PURE__ */ __name(function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      }, "writeIntBE");
      Buffer2.prototype.writeInt8 = /* @__PURE__ */ __name(function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      }, "writeInt8");
      Buffer2.prototype.writeInt16LE = /* @__PURE__ */ __name(function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      }, "writeInt16LE");
      Buffer2.prototype.writeInt16BE = /* @__PURE__ */ __name(function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      }, "writeInt16BE");
      Buffer2.prototype.writeInt32LE = /* @__PURE__ */ __name(function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      }, "writeInt32LE");
      Buffer2.prototype.writeInt32BE = /* @__PURE__ */ __name(function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      }, "writeInt32BE");
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(/* @__PURE__ */ __name(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      }, "writeBigInt64LE"));
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(/* @__PURE__ */ __name(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      }, "writeBigInt64BE"));
      function checkIEEE754(buf, value, offset, ext2, max, min) {
        if (offset + ext2 > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      __name(checkIEEE754, "checkIEEE754");
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      __name(writeFloat, "writeFloat");
      Buffer2.prototype.writeFloatLE = /* @__PURE__ */ __name(function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      }, "writeFloatLE");
      Buffer2.prototype.writeFloatBE = /* @__PURE__ */ __name(function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      }, "writeFloatBE");
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      __name(writeDouble, "writeDouble");
      Buffer2.prototype.writeDoubleLE = /* @__PURE__ */ __name(function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      }, "writeDoubleLE");
      Buffer2.prototype.writeDoubleBE = /* @__PURE__ */ __name(function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      }, "writeDoubleBE");
      Buffer2.prototype.copy = /* @__PURE__ */ __name(function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      }, "copy");
      Buffer2.prototype.fill = /* @__PURE__ */ __name(function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      }, "fill");
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = /* @__PURE__ */ __name(class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        }, "NodeError");
      }
      __name(E, "E");
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      __name(addNumericalSeparator, "addNumericalSeparator");
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      __name(checkBounds, "checkBounds");
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      __name(checkIntBI, "checkIntBI");
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      __name(validateNumber, "validateNumber");
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      __name(boundsError, "boundsError");
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      __name(base64clean, "base64clean");
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      __name(utf8ToBytes, "utf8ToBytes");
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      __name(asciiToBytes, "asciiToBytes");
      function utf16leToBytes(str, units) {
        let c, hi2, lo2;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi2 = c >> 8;
          lo2 = c % 256;
          byteArray.push(lo2);
          byteArray.push(hi2);
        }
        return byteArray;
      }
      __name(utf16leToBytes, "utf16leToBytes");
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      __name(base64ToBytes, "base64ToBytes");
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      __name(blitBuffer, "blitBuffer");
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      __name(isInstance, "isInstance");
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      __name(numberIsNaN, "numberIsNaN");
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn2) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn2;
      }
      __name(defineBigIntMethod, "defineBigIntMethod");
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
      __name(BufferBigIntNotDefined, "BufferBigIntNotDefined");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/buffer_list.js
  var require_buffer_list = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
      "use strict";
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      __name(ownKeys, "ownKeys");
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      __name(_objectSpread, "_objectSpread");
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      __name(_defineProperty, "_defineProperty");
      function _classCallCheck(instance, Constructor2) {
        if (!(instance instanceof Constructor2)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      __name(_classCallCheck, "_classCallCheck");
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      __name(_defineProperties, "_defineProperties");
      function _createClass(Constructor2, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor2.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor2, staticProps);
        Object.defineProperty(Constructor2, "prototype", { writable: false });
        return Constructor2;
      }
      __name(_createClass, "_createClass");
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      __name(_toPropertyKey, "_toPropertyKey");
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      __name(_toPrimitive, "_toPrimitive");
      var _require = require_buffer();
      var Buffer2 = _require.Buffer;
      var _require2 = require_util();
      var inspect = _require2.inspect;
      var custom2 = inspect && inspect.custom || "inspect";
      function copyBuffer(src, target, offset) {
        Buffer2.prototype.copy.call(src, target, offset);
      }
      __name(copyBuffer, "copyBuffer");
      module.exports = /* @__PURE__ */ function() {
        function BufferList() {
          _classCallCheck(this, BufferList);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        __name(BufferList, "BufferList");
        _createClass(BufferList, [{
          key: "push",
          value: /* @__PURE__ */ __name(function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0)
              this.tail.next = entry;
            else
              this.head = entry;
            this.tail = entry;
            ++this.length;
          }, "push")
        }, {
          key: "unshift",
          value: /* @__PURE__ */ __name(function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0)
              this.tail = entry;
            this.head = entry;
            ++this.length;
          }, "unshift")
        }, {
          key: "shift",
          value: /* @__PURE__ */ __name(function shift() {
            if (this.length === 0)
              return;
            var ret = this.head.data;
            if (this.length === 1)
              this.head = this.tail = null;
            else
              this.head = this.head.next;
            --this.length;
            return ret;
          }, "shift")
        }, {
          key: "clear",
          value: /* @__PURE__ */ __name(function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }, "clear")
        }, {
          key: "join",
          value: /* @__PURE__ */ __name(function join(s) {
            if (this.length === 0)
              return "";
            var p = this.head;
            var ret = "" + p.data;
            while (p = p.next)
              ret += s + p.data;
            return ret;
          }, "join")
        }, {
          key: "concat",
          value: /* @__PURE__ */ __name(function concat(n) {
            if (this.length === 0)
              return Buffer2.alloc(0);
            var ret = Buffer2.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;
            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }
            return ret;
          }, "concat")
          // Consumes a specified amount of bytes or characters from the buffered data.
        }, {
          key: "consume",
          value: /* @__PURE__ */ __name(function consume(n, hasStrings) {
            var ret;
            if (n < this.head.data.length) {
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              ret = this.shift();
            } else {
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }
            return ret;
          }, "consume")
        }, {
          key: "first",
          value: /* @__PURE__ */ __name(function first() {
            return this.head.data;
          }, "first")
          // Consumes a specified amount of characters from the buffered data.
        }, {
          key: "_getString",
          value: /* @__PURE__ */ __name(function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;
            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length)
                ret += str;
              else
                ret += str.slice(0, n);
              n -= nb;
              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }, "_getString")
          // Consumes a specified amount of bytes from the buffered data.
        }, {
          key: "_getBuffer",
          value: /* @__PURE__ */ __name(function _getBuffer(n) {
            var ret = Buffer2.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;
            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;
              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next)
                    this.head = p.next;
                  else
                    this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }
                break;
              }
              ++c;
            }
            this.length -= c;
            return ret;
          }, "_getBuffer")
          // Make sure the linked list only shows the minimal necessary information.
        }, {
          key: custom2,
          value: /* @__PURE__ */ __name(function value(_, options) {
            return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }, "value")
        }]);
        return BufferList;
      }();
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js
  var require_destroy = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
      "use strict";
      function destroy2(err, cb) {
        var _this = this;
        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;
        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }
          return this;
        }
        if (this._readableState) {
          this._readableState.destroyed = true;
        }
        if (this._writableState) {
          this._writableState.destroyed = true;
        }
        this._destroy(err || null, function(err2) {
          if (!cb && err2) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err2);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });
        return this;
      }
      __name(destroy2, "destroy");
      function emitErrorAndCloseNT(self2, err) {
        emitErrorNT(self2, err);
        emitCloseNT(self2);
      }
      __name(emitErrorAndCloseNT, "emitErrorAndCloseNT");
      function emitCloseNT(self2) {
        if (self2._writableState && !self2._writableState.emitClose)
          return;
        if (self2._readableState && !self2._readableState.emitClose)
          return;
        self2.emit("close");
      }
      __name(emitCloseNT, "emitCloseNT");
      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }
        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }
      __name(undestroy, "undestroy");
      function emitErrorNT(self2, err) {
        self2.emit("error", err);
      }
      __name(emitErrorNT, "emitErrorNT");
      function errorOrDestroy(stream, err) {
        var rState = stream._readableState;
        var wState = stream._writableState;
        if (rState && rState.autoDestroy || wState && wState.autoDestroy)
          stream.destroy(err);
        else
          stream.emit("error", err);
      }
      __name(errorOrDestroy, "errorOrDestroy");
      module.exports = {
        destroy: destroy2,
        undestroy,
        errorOrDestroy
      };
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/errors-browser.js
  var require_errors_browser = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/errors-browser.js"(exports, module) {
      "use strict";
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      __name(_inheritsLoose, "_inheritsLoose");
      var codes = {};
      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }
        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }
        __name(getMessage, "getMessage");
        var NodeError = /* @__PURE__ */ function(_Base) {
          _inheritsLoose(NodeError2, _Base);
          function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
          }
          __name(NodeError2, "NodeError");
          return NodeError2;
        }(Base);
        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      }
      __name(createErrorType, "createErrorType");
      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function(i) {
            return String(i);
          });
          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      }
      __name(oneOf, "oneOf");
      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      }
      __name(startsWith, "startsWith");
      function endsWith(str, search, this_len) {
        if (this_len === void 0 || this_len > str.length) {
          this_len = str.length;
        }
        return str.substring(this_len - search.length, this_len) === search;
      }
      __name(endsWith, "endsWith");
      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }
        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }
      __name(includes, "includes");
      createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
        return 'The value "' + value + '" is invalid for option "' + name + '"';
      }, TypeError);
      createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
        var determiner;
        if (typeof expected === "string" && startsWith(expected, "not ")) {
          determiner = "must not be";
          expected = expected.replace(/^not /, "");
        } else {
          determiner = "must be";
        }
        var msg;
        if (endsWith(name, " argument")) {
          msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        } else {
          var type = includes(name, ".") ? "property" : "argument";
          msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
        }
        msg += ". Received type ".concat(typeof actual);
        return msg;
      }, TypeError);
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
        return "The " + name + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function(name) {
        return "Cannot call " + name + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
        return "Unknown encoding: " + arg;
      }, TypeError);
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.codes = codes;
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/state.js
  var require_state = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
      "use strict";
      var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }
      __name(highWaterMarkFrom, "highWaterMarkFrom");
      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
          }
          return Math.floor(hwm);
        }
        return state.objectMode ? 16 : 16 * 1024;
      }
      __name(getHighWaterMark, "getHighWaterMark");
      module.exports = {
        getHighWaterMark
      };
    }
  });

  // node_modules/util-deprecate/browser.js
  var require_browser3 = __commonJS({
    "node_modules/util-deprecate/browser.js"(exports, module) {
      module.exports = deprecate;
      function deprecate(fn2, msg) {
        if (config("noDeprecation")) {
          return fn2;
        }
        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config("throwDeprecation")) {
              throw new Error(msg);
            } else if (config("traceDeprecation")) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
          return fn2.apply(this, arguments);
        }
        __name(deprecated, "deprecated");
        return deprecated;
      }
      __name(deprecate, "deprecate");
      function config(name) {
        try {
          if (!global.localStorage)
            return false;
        } catch (_) {
          return false;
        }
        var val = global.localStorage[name];
        if (null == val)
          return false;
        return String(val).toLowerCase() === "true";
      }
      __name(config, "config");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js
  var require_stream_writable = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
      "use strict";
      module.exports = Writable;
      function CorkedRequest(state) {
        var _this = this;
        this.next = null;
        this.entry = null;
        this.finish = function() {
          onCorkedFinish(_this, state);
        };
      }
      __name(CorkedRequest, "CorkedRequest");
      var Duplex;
      Writable.WritableState = WritableState;
      var internalUtil = {
        deprecate: require_browser3()
      };
      var Stream = require_stream_browser();
      var Buffer2 = require_buffer().Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      __name(_uint8ArrayToBuffer, "_uint8ArrayToBuffer");
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      __name(_isUint8Array, "_isUint8Array");
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
      var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
      var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      require_inherits_browser()(Writable, Stream);
      function nop() {
      }
      __name(nop, "nop");
      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
        this.finalCalled = false;
        this.needDrain = false;
        this.ending = false;
        this.ended = false;
        this.finished = false;
        this.destroyed = false;
        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.length = 0;
        this.writing = false;
        this.corked = 0;
        this.sync = true;
        this.bufferProcessing = false;
        this.onwrite = function(er2) {
          onwrite(stream, er2);
        };
        this.writecb = null;
        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null;
        this.pendingcb = 0;
        this.prefinished = false;
        this.errorEmitted = false;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.bufferedRequestCount = 0;
        this.corkedRequestsFree = new CorkedRequest(this);
      }
      __name(WritableState, "WritableState");
      WritableState.prototype.getBuffer = /* @__PURE__ */ __name(function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];
        while (current) {
          out.push(current);
          current = current.next;
        }
        return out;
      }, "getBuffer");
      (function() {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(/* @__PURE__ */ __name(function writableStateBufferGetter() {
              return this.getBuffer();
            }, "writableStateBufferGetter"), "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (_) {
        }
      })();
      var realHasInstance;
      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: /* @__PURE__ */ __name(function value(object) {
            if (realHasInstance.call(this, object))
              return true;
            if (this !== Writable)
              return false;
            return object && object._writableState instanceof WritableState;
          }, "value")
        });
      } else {
        realHasInstance = /* @__PURE__ */ __name(function realHasInstance2(object) {
          return object instanceof this;
        }, "realHasInstance");
      }
      function Writable(options) {
        Duplex = Duplex || require_stream_duplex();
        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable, this))
          return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex);
        this.writable = true;
        if (options) {
          if (typeof options.write === "function")
            this._write = options.write;
          if (typeof options.writev === "function")
            this._writev = options.writev;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
          if (typeof options.final === "function")
            this._final = options.final;
        }
        Stream.call(this);
      }
      __name(Writable, "Writable");
      Writable.prototype.pipe = function() {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };
      function writeAfterEnd(stream, cb) {
        var er2 = new ERR_STREAM_WRITE_AFTER_END();
        errorOrDestroy(stream, er2);
        process.nextTick(cb, er2);
      }
      __name(writeAfterEnd, "writeAfterEnd");
      function validChunk(stream, state, chunk, cb) {
        var er2;
        if (chunk === null) {
          er2 = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }
        if (er2) {
          errorOrDestroy(stream, er2);
          process.nextTick(cb, er2);
          return false;
        }
        return true;
      }
      __name(validChunk, "validChunk");
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;
        var isBuf = !state.objectMode && _isUint8Array(chunk);
        if (isBuf && !Buffer2.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (isBuf)
          encoding = "buffer";
        else if (!encoding)
          encoding = state.defaultEncoding;
        if (typeof cb !== "function")
          cb = nop;
        if (state.ending)
          writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };
      Writable.prototype.cork = function() {
        this._writableState.corked++;
      };
      Writable.prototype.uncork = function() {
        var state = this._writableState;
        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
            clearBuffer(this, state);
        }
      };
      Writable.prototype.setDefaultEncoding = /* @__PURE__ */ __name(function setDefaultEncoding(encoding) {
        if (typeof encoding === "string")
          encoding = encoding.toLowerCase();
        if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      }, "setDefaultEncoding");
      Object.defineProperty(Writable.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState && this._writableState.getBuffer();
        }, "get")
      });
      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer2.from(chunk, encoding);
        }
        return chunk;
      }
      __name(decodeChunk, "decodeChunk");
      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState.highWaterMark;
        }, "get")
      });
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);
          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }
        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark;
        if (!ret)
          state.needDrain = true;
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk,
            encoding,
            isBuf,
            callback: cb,
            next: null
          };
          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }
          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }
        return ret;
      }
      __name(writeOrBuffer, "writeOrBuffer");
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed)
          state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev)
          stream._writev(chunk, state.onwrite);
        else
          stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      __name(doWrite, "doWrite");
      function onwriteError(stream, state, sync, er2, cb) {
        --state.pendingcb;
        if (sync) {
          process.nextTick(cb, er2);
          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er2);
        } else {
          cb(er2);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er2);
          finishMaybe(stream, state);
        }
      }
      __name(onwriteError, "onwriteError");
      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }
      __name(onwriteStateUpdate, "onwriteStateUpdate");
      function onwrite(stream, er2) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function")
          throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate(state);
        if (er2)
          onwriteError(stream, state, sync, er2, cb);
        else {
          var finished = needFinish(state) || stream.destroyed;
          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }
          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }
      __name(onwrite, "onwrite");
      function afterWrite(stream, state, finished, cb) {
        if (!finished)
          onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      }
      __name(afterWrite, "afterWrite");
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      }
      __name(onwriteDrain, "onwriteDrain");
      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;
          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf)
              allBuffers = false;
            entry = entry.next;
            count += 1;
          }
          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish);
          state.pendingcb++;
          state.lastBufferedRequest = null;
          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }
          state.bufferedRequestCount = 0;
        } else {
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            if (state.writing) {
              break;
            }
          }
          if (entry === null)
            state.lastBufferedRequest = null;
        }
        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }
      __name(clearBuffer, "clearBuffer");
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };
      Writable.prototype._writev = null;
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState;
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }
        if (chunk !== null && chunk !== void 0)
          this.write(chunk, encoding);
        if (state.corked) {
          state.corked = 1;
          this.uncork();
        }
        if (!state.ending)
          endWritable(this, state, cb);
        return this;
      };
      Object.defineProperty(Writable.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState.length;
        }, "get")
      });
      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }
      __name(needFinish, "needFinish");
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--;
          if (err) {
            errorOrDestroy(stream, err);
          }
          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }
      __name(callFinal, "callFinal");
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }
      __name(prefinish, "prefinish");
      function finishMaybe(stream, state) {
        var need = needFinish(state);
        if (need) {
          prefinish(stream, state);
          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
              var rState = stream._readableState;
              if (!rState || rState.autoDestroy && rState.endEmitted) {
                stream.destroy();
              }
            }
          }
        }
        return need;
      }
      __name(finishMaybe, "finishMaybe");
      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);
        if (cb) {
          if (state.finished)
            process.nextTick(cb);
          else
            stream.once("finish", cb);
        }
        state.ended = true;
        stream.writable = false;
      }
      __name(endWritable, "endWritable");
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        state.corkedRequestsFree.next = corkReq;
      }
      __name(onCorkedFinish, "onCorkedFinish");
      Object.defineProperty(Writable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          if (this._writableState === void 0) {
            return false;
          }
          return this._writableState.destroyed;
        }, "get"),
        set: /* @__PURE__ */ __name(function set(value) {
          if (!this._writableState) {
            return;
          }
          this._writableState.destroyed = value;
        }, "set")
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;
      Writable.prototype._destroy = function(err, cb) {
        cb(err);
      };
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js
  var require_stream_duplex = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
      "use strict";
      var objectKeys = Object.keys || function(obj) {
        var keys2 = [];
        for (var key in obj)
          keys2.push(key);
        return keys2;
      };
      module.exports = Duplex;
      var Readable = require_stream_readable();
      var Writable = require_stream_writable();
      require_inherits_browser()(Duplex, Readable);
      {
        keys = objectKeys(Writable.prototype);
        for (v = 0; v < keys.length; v++) {
          method = keys[v];
          if (!Duplex.prototype[method])
            Duplex.prototype[method] = Writable.prototype[method];
        }
      }
      var keys;
      var method;
      var v;
      function Duplex(options) {
        if (!(this instanceof Duplex))
          return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        this.allowHalfOpen = true;
        if (options) {
          if (options.readable === false)
            this.readable = false;
          if (options.writable === false)
            this.writable = false;
          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }
      __name(Duplex, "Duplex");
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState.highWaterMark;
        }, "get")
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState && this._writableState.getBuffer();
        }, "get")
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._writableState.length;
        }, "get")
      });
      function onend() {
        if (this._writableState.ended)
          return;
        process.nextTick(onEndNT, this);
      }
      __name(onend, "onend");
      function onEndNT(self2) {
        self2.end();
      }
      __name(onEndNT, "onEndNT");
      Object.defineProperty(Duplex.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        }, "get"),
        set: /* @__PURE__ */ __name(function set(value) {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return;
          }
          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        }, "set")
      });
    }
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      __name(copyProps, "copyProps");
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      __name(SafeBuffer, "SafeBuffer");
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/string_decoder/lib/string_decoder.js
  var require_string_decoder = __commonJS({
    "node_modules/string_decoder/lib/string_decoder.js"(exports) {
      "use strict";
      var Buffer2 = require_safe_buffer().Buffer;
      var isEncoding = Buffer2.isEncoding || function(encoding) {
        encoding = "" + encoding;
        switch (encoding && encoding.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      function _normalizeEncoding(enc) {
        if (!enc)
          return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default:
              if (retried)
                return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }
      __name(_normalizeEncoding, "_normalizeEncoding");
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
          throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }
      __name(normalizeEncoding, "normalizeEncoding");
      exports.StringDecoder = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer2.allocUnsafe(nb);
      }
      __name(StringDecoder, "StringDecoder");
      StringDecoder.prototype.write = function(buf) {
        if (buf.length === 0)
          return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === void 0)
            return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length)
          return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };
      StringDecoder.prototype.end = utf8End;
      StringDecoder.prototype.text = utf8Text;
      StringDecoder.prototype.fillLast = function(buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
      function utf8CheckByte(byte) {
        if (byte <= 127)
          return 0;
        else if (byte >> 5 === 6)
          return 2;
        else if (byte >> 4 === 14)
          return 3;
        else if (byte >> 3 === 30)
          return 4;
        return byte >> 6 === 2 ? -1 : -2;
      }
      __name(utf8CheckByte, "utf8CheckByte");
      function utf8CheckIncomplete(self2, buf, i) {
        var j = buf.length - 1;
        if (j < i)
          return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0)
            self2.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2)
          return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2)
              nb = 0;
            else
              self2.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }
      __name(utf8CheckIncomplete, "utf8CheckIncomplete");
      function utf8CheckExtraBytes(self2, buf, p) {
        if ((buf[0] & 192) !== 128) {
          self2.lastNeed = 0;
          return "\uFFFD";
        }
        if (self2.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 192) !== 128) {
            self2.lastNeed = 1;
            return "\uFFFD";
          }
          if (self2.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
              self2.lastNeed = 2;
              return "\uFFFD";
            }
          }
        }
      }
      __name(utf8CheckExtraBytes, "utf8CheckExtraBytes");
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== void 0)
          return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }
      __name(utf8FillLast, "utf8FillLast");
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed)
          return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }
      __name(utf8Text, "utf8Text");
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + "\uFFFD";
        return r;
      }
      __name(utf8End, "utf8End");
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }
      __name(utf16Text, "utf16Text");
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      __name(utf16End, "utf16End");
      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0)
          return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }
      __name(base64Text, "base64Text");
      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed)
          return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }
      __name(base64End, "base64End");
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }
      __name(simpleWrite, "simpleWrite");
      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
      __name(simpleEnd, "simpleEnd");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
  var require_end_of_stream = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
      "use strict";
      var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          callback.apply(this, args);
        };
      }
      __name(once, "once");
      function noop() {
      }
      __name(noop, "noop");
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      __name(isRequest, "isRequest");
      function eos(stream, opts, callback) {
        if (typeof opts === "function")
          return eos(stream, null, opts);
        if (!opts)
          opts = {};
        callback = once(callback || noop);
        var readable = opts.readable || opts.readable !== false && stream.readable;
        var writable = opts.writable || opts.writable !== false && stream.writable;
        var onlegacyfinish = /* @__PURE__ */ __name(function onlegacyfinish2() {
          if (!stream.writable)
            onfinish();
        }, "onlegacyfinish");
        var writableEnded = stream._writableState && stream._writableState.finished;
        var onfinish = /* @__PURE__ */ __name(function onfinish2() {
          writable = false;
          writableEnded = true;
          if (!readable)
            callback.call(stream);
        }, "onfinish");
        var readableEnded = stream._readableState && stream._readableState.endEmitted;
        var onend = /* @__PURE__ */ __name(function onend2() {
          readable = false;
          readableEnded = true;
          if (!writable)
            callback.call(stream);
        }, "onend");
        var onerror = /* @__PURE__ */ __name(function onerror2(err) {
          callback.call(stream, err);
        }, "onerror");
        var onclose = /* @__PURE__ */ __name(function onclose2() {
          var err;
          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended)
              err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
        }, "onclose");
        var onrequest = /* @__PURE__ */ __name(function onrequest2() {
          stream.req.on("finish", onfinish);
        }, "onrequest");
        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req)
            onrequest();
          else
            stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }
        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false)
          stream.on("error", onerror);
        stream.on("close", onclose);
        return function() {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req)
            stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }
      __name(eos, "eos");
      module.exports = eos;
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/async_iterator.js
  var require_async_iterator = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
      "use strict";
      var _Object$setPrototypeO;
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      __name(_defineProperty, "_defineProperty");
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return typeof key === "symbol" ? key : String(key);
      }
      __name(_toPropertyKey, "_toPropertyKey");
      function _toPrimitive(input, hint) {
        if (typeof input !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (typeof res !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      __name(_toPrimitive, "_toPrimitive");
      var finished = require_end_of_stream();
      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");
      function createIterResult(value, done) {
        return {
          value,
          done
        };
      }
      __name(createIterResult, "createIterResult");
      function readAndResolve(iter) {
        var resolve = iter[kLastResolve];
        if (resolve !== null) {
          var data = iter[kStream].read();
          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
          }
        }
      }
      __name(readAndResolve, "readAndResolve");
      function onReadable(iter) {
        process.nextTick(readAndResolve, iter);
      }
      __name(onReadable, "onReadable");
      function wrapForNext(lastPromise, iter) {
        return function(resolve, reject) {
          lastPromise.then(function() {
            if (iter[kEnded]) {
              resolve(createIterResult(void 0, true));
              return;
            }
            iter[kHandlePromise](resolve, reject);
          }, reject);
        };
      }
      __name(wrapForNext, "wrapForNext");
      var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
      });
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
        get stream() {
          return this[kStream];
        },
        next: /* @__PURE__ */ __name(function next() {
          var _this = this;
          var error = this[kError];
          if (error !== null) {
            return Promise.reject(error);
          }
          if (this[kEnded]) {
            return Promise.resolve(createIterResult(void 0, true));
          }
          if (this[kStream].destroyed) {
            return new Promise(function(resolve, reject) {
              process.nextTick(function() {
                if (_this[kError]) {
                  reject(_this[kError]);
                } else {
                  resolve(createIterResult(void 0, true));
                }
              });
            });
          }
          var lastPromise = this[kLastPromise];
          var promise;
          if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
          } else {
            var data = this[kStream].read();
            if (data !== null) {
              return Promise.resolve(createIterResult(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
          }
          this[kLastPromise] = promise;
          return promise;
        }, "next")
      }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
        return this;
      }), _defineProperty(_Object$setPrototypeO, "return", /* @__PURE__ */ __name(function _return() {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
          _this2[kStream].destroy(null, function(err) {
            if (err) {
              reject(err);
              return;
            }
            resolve(createIterResult(void 0, true));
          });
        });
      }, "_return")), _Object$setPrototypeO), AsyncIteratorPrototype);
      var createReadableStreamAsyncIterator = /* @__PURE__ */ __name(function createReadableStreamAsyncIterator2(stream) {
        var _Object$create;
        var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
          value: stream,
          writable: true
        }), _defineProperty(_Object$create, kLastResolve, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kLastReject, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kError, {
          value: null,
          writable: true
        }), _defineProperty(_Object$create, kEnded, {
          value: stream._readableState.endEmitted,
          writable: true
        }), _defineProperty(_Object$create, kHandlePromise, {
          value: /* @__PURE__ */ __name(function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(data, false));
            } else {
              iterator[kLastResolve] = resolve;
              iterator[kLastReject] = reject;
            }
          }, "value"),
          writable: true
        }), _Object$create));
        iterator[kLastPromise] = null;
        finished(stream, function(err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err);
            }
            iterator[kError] = err;
            return;
          }
          var resolve = iterator[kLastResolve];
          if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(void 0, true));
          }
          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      }, "createReadableStreamAsyncIterator");
      module.exports = createReadableStreamAsyncIterator;
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/from-browser.js
  var require_from_browser = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
      module.exports = function() {
        throw new Error("Readable.from is not available in the browser");
      };
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js
  var require_stream_readable = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
      "use strict";
      module.exports = Readable;
      var Duplex;
      Readable.ReadableState = ReadableState;
      var EE = require_events().EventEmitter;
      var EElistenerCount = /* @__PURE__ */ __name(function EElistenerCount2(emitter, type) {
        return emitter.listeners(type).length;
      }, "EElistenerCount");
      var Stream = require_stream_browser();
      var Buffer2 = require_buffer().Buffer;
      var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
      };
      function _uint8ArrayToBuffer(chunk) {
        return Buffer2.from(chunk);
      }
      __name(_uint8ArrayToBuffer, "_uint8ArrayToBuffer");
      function _isUint8Array(obj) {
        return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      __name(_isUint8Array, "_isUint8Array");
      var debugUtil = require_util();
      var debug;
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream");
      } else {
        debug = /* @__PURE__ */ __name(function debug2() {
        }, "debug");
      }
      var BufferList = require_buffer_list();
      var destroyImpl = require_destroy();
      var _require = require_state();
      var getHighWaterMark = _require.getHighWaterMark;
      var _require$codes = require_errors_browser().codes;
      var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
      var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
      var StringDecoder;
      var createReadableStreamAsyncIterator;
      var from;
      require_inherits_browser()(Readable, Stream);
      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
      function prependListener(emitter, event, fn2) {
        if (typeof emitter.prependListener === "function")
          return emitter.prependListener(event, fn2);
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn2);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn2);
        else
          emitter._events[event] = [fn2, emitter._events[event]];
      }
      __name(prependListener, "prependListener");
      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || require_stream_duplex();
        options = options || {};
        if (typeof isDuplex !== "boolean")
          isDuplex = stream instanceof Duplex;
        this.objectMode = !!options.objectMode;
        if (isDuplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode;
        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false;
        this.sync = true;
        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true;
        this.emitClose = options.emitClose !== false;
        this.autoDestroy = !!options.autoDestroy;
        this.destroyed = false;
        this.defaultEncoding = options.defaultEncoding || "utf8";
        this.awaitDrain = 0;
        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = require_string_decoder().StringDecoder;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }
      __name(ReadableState, "ReadableState");
      function Readable(options) {
        Duplex = Duplex || require_stream_duplex();
        if (!(this instanceof Readable))
          return new Readable(options);
        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex);
        this.readable = true;
        if (options) {
          if (typeof options.read === "function")
            this._read = options.read;
          if (typeof options.destroy === "function")
            this._destroy = options.destroy;
        }
        Stream.call(this);
      }
      __name(Readable, "Readable");
      Object.defineProperty(Readable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          if (this._readableState === void 0) {
            return false;
          }
          return this._readableState.destroyed;
        }, "get"),
        set: /* @__PURE__ */ __name(function set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }, "set")
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;
      Readable.prototype._destroy = function(err, cb) {
        cb(err);
      };
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;
        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
              chunk = Buffer2.from(chunk, encoding);
              encoding = "";
            }
            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      };
      Readable.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };
      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug("readableAddChunk", chunk);
        var state = stream._readableState;
        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er2;
          if (!skipChunkCheck)
            er2 = chunkInvalid(state, chunk);
          if (er2) {
            errorOrDestroy(stream, er2);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }
            if (addToFront) {
              if (state.endEmitted)
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else
                addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false);
                else
                  maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        }
        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }
      __name(readableAddChunk, "readableAddChunk");
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront)
            state.buffer.unshift(chunk);
          else
            state.buffer.push(chunk);
          if (state.needReadable)
            emitReadable(stream);
        }
        maybeReadMore(stream, state);
      }
      __name(addChunk, "addChunk");
      function chunkInvalid(state, chunk) {
        var er2;
        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
          er2 = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
        return er2;
      }
      __name(chunkInvalid, "chunkInvalid");
      Readable.prototype.isPaused = function() {
        return this._readableState.flowing === false;
      };
      Readable.prototype.setEncoding = function(enc) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        var decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        var p = this._readableState.buffer.head;
        var content = "";
        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }
        this._readableState.buffer.clear();
        if (content !== "")
          this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      };
      var MAX_HWM = 1073741824;
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM;
        } else {
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }
        return n;
      }
      __name(computeNewHighWaterMark, "computeNewHighWaterMark");
      function howMuchToRead(n, state) {
        if (n <= 0 || state.length === 0 && state.ended)
          return 0;
        if (state.objectMode)
          return 1;
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length;
          else
            return state.length;
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length)
          return n;
        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }
        return state.length;
      }
      __name(howMuchToRead, "howMuchToRead");
      Readable.prototype.read = function(n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0)
          state.emittedReadable = false;
        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended)
            endReadable(this);
          else
            emitReadable(this);
          return null;
        }
        n = howMuchToRead(n, state);
        if (n === 0 && state.ended) {
          if (state.length === 0)
            endReadable(this);
          return null;
        }
        var doRead = state.needReadable;
        debug("need readable", doRead);
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        }
        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true;
          if (state.length === 0)
            state.needReadable = true;
          this._read(state.highWaterMark);
          state.sync = false;
          if (!state.reading)
            n = howMuchToRead(nOrig, state);
        }
        var ret;
        if (n > 0)
          ret = fromList(n, state);
        else
          ret = null;
        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }
        if (state.length === 0) {
          if (!state.ended)
            state.needReadable = true;
          if (nOrig !== n && state.ended)
            endReadable(this);
        }
        if (ret !== null)
          this.emit("data", ret);
        return ret;
      };
      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended)
          return;
        if (state.decoder) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }
        state.ended = true;
        if (state.sync) {
          emitReadable(stream);
        } else {
          state.needReadable = false;
          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      }
      __name(onEofChunk, "onEofChunk");
      function emitReadable(stream) {
        var state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;
        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }
      __name(emitReadable, "emitReadable");
      function emitReadable_(stream) {
        var state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);
        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        }
        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      }
      __name(emitReadable_, "emitReadable_");
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }
      __name(maybeReadMore, "maybeReadMore");
      function maybeReadMore_(stream, state) {
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
          var len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            break;
        }
        state.readingMore = false;
      }
      __name(maybeReadMore_, "maybeReadMore_");
      Readable.prototype._read = function(n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this;
        var state = this._readableState;
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;
          case 1:
            state.pipes = [state.pipes, dest];
            break;
          default:
            state.pipes.push(dest);
            break;
        }
        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted)
          process.nextTick(endFn);
        else
          src.once("end", endFn);
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }
        __name(onunpipe, "onunpipe");
        function onend() {
          debug("onend");
          dest.end();
        }
        __name(onend, "onend");
        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;
        function cleanup() {
          debug("cleanup");
          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true;
          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
            ondrain();
        }
        __name(cleanup, "cleanup");
        src.on("data", ondata);
        function ondata(chunk) {
          debug("ondata");
          var ret = dest.write(chunk);
          debug("dest.write", ret);
          if (ret === false) {
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
              debug("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }
            src.pause();
          }
        }
        __name(ondata, "ondata");
        function onerror(er2) {
          debug("onerror", er2);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0)
            errorOrDestroy(dest, er2);
        }
        __name(onerror, "onerror");
        prependListener(dest, "error", onerror);
        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }
        __name(onclose, "onclose");
        dest.once("close", onclose);
        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }
        __name(onfinish, "onfinish");
        dest.once("finish", onfinish);
        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        }
        __name(unpipe, "unpipe");
        dest.emit("pipe", src);
        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }
        return dest;
      };
      function pipeOnDrain(src) {
        return /* @__PURE__ */ __name(function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain)
            state.awaitDrain--;
          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        }, "pipeOnDrainFunctionResult");
      }
      __name(pipeOnDrain, "pipeOnDrain");
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false
        };
        if (state.pipesCount === 0)
          return this;
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes)
            return this;
          if (!dest)
            dest = state.pipes;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest)
            dest.emit("unpipe", this, unpipeInfo);
          return this;
        }
        if (!dest) {
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          for (var i = 0; i < len; i++)
            dests[i].emit("unpipe", this, {
              hasUnpiped: false
            });
          return this;
        }
        var index = indexOf(state.pipes, dest);
        if (index === -1)
          return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1)
          state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      };
      Readable.prototype.on = function(ev, fn2) {
        var res = Stream.prototype.on.call(this, ev, fn2);
        var state = this._readableState;
        if (ev === "data") {
          state.readableListening = this.listenerCount("readable") > 0;
          if (state.flowing !== false)
            this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }
        return res;
      };
      Readable.prototype.addListener = Readable.prototype.on;
      Readable.prototype.removeListener = function(ev, fn2) {
        var res = Stream.prototype.removeListener.call(this, ev, fn2);
        if (ev === "readable") {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      Readable.prototype.removeAllListeners = function(ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);
        if (ev === "readable" || ev === void 0) {
          process.nextTick(updateReadableListening, this);
        }
        return res;
      };
      function updateReadableListening(self2) {
        var state = self2._readableState;
        state.readableListening = self2.listenerCount("readable") > 0;
        if (state.resumeScheduled && !state.paused) {
          state.flowing = true;
        } else if (self2.listenerCount("data") > 0) {
          self2.resume();
        }
      }
      __name(updateReadableListening, "updateReadableListening");
      function nReadingNextTick(self2) {
        debug("readable nexttick read 0");
        self2.read(0);
      }
      __name(nReadingNextTick, "nReadingNextTick");
      Readable.prototype.resume = function() {
        var state = this._readableState;
        if (!state.flowing) {
          debug("resume");
          state.flowing = !state.readableListening;
          resume(this, state);
        }
        state.paused = false;
        return this;
      };
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }
      __name(resume, "resume");
      function resume_(stream, state) {
        debug("resume", state.reading);
        if (!state.reading) {
          stream.read(0);
        }
        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading)
          stream.read(0);
      }
      __name(resume_, "resume_");
      Readable.prototype.pause = function() {
        debug("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }
        this._readableState.paused = true;
        return this;
      };
      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);
        while (state.flowing && stream.read() !== null)
          ;
      }
      __name(flow, "flow");
      Readable.prototype.wrap = function(stream) {
        var _this = this;
        var state = this._readableState;
        var paused = false;
        stream.on("end", function() {
          debug("wrapped end");
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length)
              _this.push(chunk);
          }
          _this.push(null);
        });
        stream.on("data", function(chunk) {
          debug("wrapped data");
          if (state.decoder)
            chunk = state.decoder.write(chunk);
          if (state.objectMode && (chunk === null || chunk === void 0))
            return;
          else if (!state.objectMode && (!chunk || !chunk.length))
            return;
          var ret = _this.push(chunk);
          if (!ret) {
            paused = true;
            stream.pause();
          }
        });
        for (var i in stream) {
          if (this[i] === void 0 && typeof stream[i] === "function") {
            this[i] = (/* @__PURE__ */ __name(function methodWrap(method) {
              return /* @__PURE__ */ __name(function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              }, "methodWrapReturnFunction");
            }, "methodWrap"))(i);
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        }
        this._read = function(n2) {
          debug("wrapped _read", n2);
          if (paused) {
            paused = false;
            stream.resume();
          }
        };
        return this;
      };
      if (typeof Symbol === "function") {
        Readable.prototype[Symbol.asyncIterator] = function() {
          if (createReadableStreamAsyncIterator === void 0) {
            createReadableStreamAsyncIterator = require_async_iterator();
          }
          return createReadableStreamAsyncIterator(this);
        };
      }
      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._readableState.highWaterMark;
        }, "get")
      });
      Object.defineProperty(Readable.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._readableState && this._readableState.buffer;
        }, "get")
      });
      Object.defineProperty(Readable.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._readableState.flowing;
        }, "get"),
        set: /* @__PURE__ */ __name(function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }, "set")
      });
      Readable._fromList = fromList;
      Object.defineProperty(Readable.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: /* @__PURE__ */ __name(function get() {
          return this._readableState.length;
        }, "get")
      });
      function fromList(n, state) {
        if (state.length === 0)
          return null;
        var ret;
        if (state.objectMode)
          ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          if (state.decoder)
            ret = state.buffer.join("");
          else if (state.buffer.length === 1)
            ret = state.buffer.first();
          else
            ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }
      __name(fromList, "fromList");
      function endReadable(stream) {
        var state = stream._readableState;
        debug("endReadable", state.endEmitted);
        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }
      __name(endReadable, "endReadable");
      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length);
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");
          if (state.autoDestroy) {
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) {
              stream.destroy();
            }
          }
        }
      }
      __name(endReadableNT, "endReadableNT");
      if (typeof Symbol === "function") {
        Readable.from = function(iterable, opts) {
          if (from === void 0) {
            from = require_from_browser();
          }
          return from(Readable, iterable, opts);
        };
      }
      function indexOf(xs2, x2) {
        for (var i = 0, l = xs2.length; i < l; i++) {
          if (xs2[i] === x2)
            return i;
        }
        return -1;
      }
      __name(indexOf, "indexOf");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js
  var require_stream_transform = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
      "use strict";
      module.exports = Transform;
      var _require$codes = require_errors_browser().codes;
      var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
      var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
      var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
      var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
      var Duplex = require_stream_duplex();
      require_inherits_browser()(Transform, Duplex);
      function afterTransform(er2, data) {
        var ts2 = this._transformState;
        ts2.transforming = false;
        var cb = ts2.writecb;
        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }
        ts2.writechunk = null;
        ts2.writecb = null;
        if (data != null)
          this.push(data);
        cb(er2);
        var rs2 = this._readableState;
        rs2.reading = false;
        if (rs2.needReadable || rs2.length < rs2.highWaterMark) {
          this._read(rs2.highWaterMark);
        }
      }
      __name(afterTransform, "afterTransform");
      function Transform(options) {
        if (!(this instanceof Transform))
          return new Transform(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (options) {
          if (typeof options.transform === "function")
            this._transform = options.transform;
          if (typeof options.flush === "function")
            this._flush = options.flush;
        }
        this.on("prefinish", prefinish);
      }
      __name(Transform, "Transform");
      function prefinish() {
        var _this = this;
        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function(er2, data) {
            done(_this, er2, data);
          });
        } else {
          done(this, null, null);
        }
      }
      __name(prefinish, "prefinish");
      Transform.prototype.push = function(chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      };
      Transform.prototype._transform = function(chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };
      Transform.prototype._write = function(chunk, encoding, cb) {
        var ts2 = this._transformState;
        ts2.writecb = cb;
        ts2.writechunk = chunk;
        ts2.writeencoding = encoding;
        if (!ts2.transforming) {
          var rs2 = this._readableState;
          if (ts2.needTransform || rs2.needReadable || rs2.length < rs2.highWaterMark)
            this._read(rs2.highWaterMark);
        }
      };
      Transform.prototype._read = function(n) {
        var ts2 = this._transformState;
        if (ts2.writechunk !== null && !ts2.transforming) {
          ts2.transforming = true;
          this._transform(ts2.writechunk, ts2.writeencoding, ts2.afterTransform);
        } else {
          ts2.needTransform = true;
        }
      };
      Transform.prototype._destroy = function(err, cb) {
        Duplex.prototype._destroy.call(this, err, function(err2) {
          cb(err2);
        });
      };
      function done(stream, er2, data) {
        if (er2)
          return stream.emit("error", er2);
        if (data != null)
          stream.push(data);
        if (stream._writableState.length)
          throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming)
          throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }
      __name(done, "done");
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js
  var require_stream_passthrough = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
      "use strict";
      module.exports = PassThrough;
      var Transform = require_stream_transform();
      require_inherits_browser()(PassThrough, Transform);
      function PassThrough(options) {
        if (!(this instanceof PassThrough))
          return new PassThrough(options);
        Transform.call(this, options);
      }
      __name(PassThrough, "PassThrough");
      PassThrough.prototype._transform = function(chunk, encoding, cb) {
        cb(null, chunk);
      };
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/pipeline.js
  var require_pipeline = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
      "use strict";
      var eos;
      function once(callback) {
        var called = false;
        return function() {
          if (called)
            return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }
      __name(once, "once");
      var _require$codes = require_errors_browser().codes;
      var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
      var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
      function noop(err) {
        if (err)
          throw err;
      }
      __name(noop, "noop");
      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }
      __name(isRequest, "isRequest");
      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function() {
          closed = true;
        });
        if (eos === void 0)
          eos = require_end_of_stream();
        eos(stream, {
          readable: reading,
          writable: writing
        }, function(err) {
          if (err)
            return callback(err);
          closed = true;
          callback();
        });
        var destroyed = false;
        return function(err) {
          if (closed)
            return;
          if (destroyed)
            return;
          destroyed = true;
          if (isRequest(stream))
            return stream.abort();
          if (typeof stream.destroy === "function")
            return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }
      __name(destroyer, "destroyer");
      function call(fn2) {
        fn2();
      }
      __name(call, "call");
      function pipe(from, to2) {
        return from.pipe(to2);
      }
      __name(pipe, "pipe");
      function popCallback(streams) {
        if (!streams.length)
          return noop;
        if (typeof streams[streams.length - 1] !== "function")
          return noop;
        return streams.pop();
      }
      __name(popCallback, "popCallback");
      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }
        var callback = popCallback(streams);
        if (Array.isArray(streams[0]))
          streams = streams[0];
        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }
        var error;
        var destroys = streams.map(function(stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function(err) {
            if (!error)
              error = err;
            if (err)
              destroys.forEach(call);
            if (reading)
              return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }
      __name(pipeline, "pipeline");
      module.exports = pipeline;
    }
  });

  // node_modules/stream-http/node_modules/readable-stream/readable-browser.js
  var require_readable_browser = __commonJS({
    "node_modules/stream-http/node_modules/readable-stream/readable-browser.js"(exports, module) {
      exports = module.exports = require_stream_readable();
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = require_stream_writable();
      exports.Duplex = require_stream_duplex();
      exports.Transform = require_stream_transform();
      exports.PassThrough = require_stream_passthrough();
      exports.finished = require_end_of_stream();
      exports.pipeline = require_pipeline();
    }
  });

  // node_modules/stream-http/lib/response.js
  var require_response = __commonJS({
    "node_modules/stream-http/lib/response.js"(exports) {
      var capability = require_capability();
      var inherits = require_inherits_browser();
      var stream = require_readable_browser();
      var rStates = exports.readyStates = {
        UNSENT: 0,
        OPENED: 1,
        HEADERS_RECEIVED: 2,
        LOADING: 3,
        DONE: 4
      };
      var IncomingMessage = exports.IncomingMessage = function(xhr, response, mode, resetTimers) {
        var self2 = this;
        stream.Readable.call(self2);
        self2._mode = mode;
        self2.headers = {};
        self2.rawHeaders = [];
        self2.trailers = {};
        self2.rawTrailers = [];
        self2.on("end", function() {
          process.nextTick(function() {
            self2.emit("close");
          });
        });
        if (mode === "fetch") {
          let read2 = function() {
            reader.read().then(function(result) {
              if (self2._destroyed)
                return;
              resetTimers(result.done);
              if (result.done) {
                self2.push(null);
                return;
              }
              self2.push(Buffer.from(result.value));
              read2();
            }).catch(function(err) {
              resetTimers(true);
              if (!self2._destroyed)
                self2.emit("error", err);
            });
          };
          var read = read2;
          __name(read2, "read");
          self2._fetchResponse = response;
          self2.url = response.url;
          self2.statusCode = response.status;
          self2.statusMessage = response.statusText;
          response.headers.forEach(function(header, key) {
            self2.headers[key.toLowerCase()] = header;
            self2.rawHeaders.push(key, header);
          });
          if (capability.writableStream) {
            var writable = new WritableStream({
              write: function(chunk) {
                resetTimers(false);
                return new Promise(function(resolve, reject) {
                  if (self2._destroyed) {
                    reject();
                  } else if (self2.push(Buffer.from(chunk))) {
                    resolve();
                  } else {
                    self2._resumeFetch = resolve;
                  }
                });
              },
              close: function() {
                resetTimers(true);
                if (!self2._destroyed)
                  self2.push(null);
              },
              abort: function(err) {
                resetTimers(true);
                if (!self2._destroyed)
                  self2.emit("error", err);
              }
            });
            try {
              response.body.pipeTo(writable).catch(function(err) {
                resetTimers(true);
                if (!self2._destroyed)
                  self2.emit("error", err);
              });
              return;
            } catch (e) {
            }
          }
          var reader = response.body.getReader();
          read2();
        } else {
          self2._xhr = xhr;
          self2._pos = 0;
          self2.url = xhr.responseURL;
          self2.statusCode = xhr.status;
          self2.statusMessage = xhr.statusText;
          var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
          headers.forEach(function(header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
              var key = matches[1].toLowerCase();
              if (key === "set-cookie") {
                if (self2.headers[key] === void 0) {
                  self2.headers[key] = [];
                }
                self2.headers[key].push(matches[2]);
              } else if (self2.headers[key] !== void 0) {
                self2.headers[key] += ", " + matches[2];
              } else {
                self2.headers[key] = matches[2];
              }
              self2.rawHeaders.push(matches[1], matches[2]);
            }
          });
          self2._charset = "x-user-defined";
          if (!capability.overrideMimeType) {
            var mimeType = self2.rawHeaders["mime-type"];
            if (mimeType) {
              var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
              if (charsetMatch) {
                self2._charset = charsetMatch[1].toLowerCase();
              }
            }
            if (!self2._charset)
              self2._charset = "utf-8";
          }
        }
      };
      inherits(IncomingMessage, stream.Readable);
      IncomingMessage.prototype._read = function() {
        var self2 = this;
        var resolve = self2._resumeFetch;
        if (resolve) {
          self2._resumeFetch = null;
          resolve();
        }
      };
      IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
        var self2 = this;
        var xhr = self2._xhr;
        var response = null;
        switch (self2._mode) {
          case "text":
            response = xhr.responseText;
            if (response.length > self2._pos) {
              var newData = response.substr(self2._pos);
              if (self2._charset === "x-user-defined") {
                var buffer = Buffer.alloc(newData.length);
                for (var i = 0; i < newData.length; i++)
                  buffer[i] = newData.charCodeAt(i) & 255;
                self2.push(buffer);
              } else {
                self2.push(newData, self2._charset);
              }
              self2._pos = response.length;
            }
            break;
          case "arraybuffer":
            if (xhr.readyState !== rStates.DONE || !xhr.response)
              break;
            response = xhr.response;
            self2.push(Buffer.from(new Uint8Array(response)));
            break;
          case "moz-chunked-arraybuffer":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING || !response)
              break;
            self2.push(Buffer.from(new Uint8Array(response)));
            break;
          case "ms-stream":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING)
              break;
            var reader = new global.MSStreamReader();
            reader.onprogress = function() {
              if (reader.result.byteLength > self2._pos) {
                self2.push(Buffer.from(new Uint8Array(reader.result.slice(self2._pos))));
                self2._pos = reader.result.byteLength;
              }
            };
            reader.onload = function() {
              resetTimers(true);
              self2.push(null);
            };
            reader.readAsArrayBuffer(response);
            break;
        }
        if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
          resetTimers(true);
          self2.push(null);
        }
      };
    }
  });

  // node_modules/stream-http/lib/request.js
  var require_request = __commonJS({
    "node_modules/stream-http/lib/request.js"(exports, module) {
      var capability = require_capability();
      var inherits = require_inherits_browser();
      var response = require_response();
      var stream = require_readable_browser();
      var IncomingMessage = response.IncomingMessage;
      var rStates = response.readyStates;
      function decideMode(preferBinary, useFetch) {
        if (capability.fetch && useFetch) {
          return "fetch";
        } else if (capability.mozchunkedarraybuffer) {
          return "moz-chunked-arraybuffer";
        } else if (capability.msstream) {
          return "ms-stream";
        } else if (capability.arraybuffer && preferBinary) {
          return "arraybuffer";
        } else {
          return "text";
        }
      }
      __name(decideMode, "decideMode");
      var ClientRequest = module.exports = function(opts) {
        var self2 = this;
        stream.Writable.call(self2);
        self2._opts = opts;
        self2._body = [];
        self2._headers = {};
        if (opts.auth)
          self2.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
        Object.keys(opts.headers).forEach(function(name) {
          self2.setHeader(name, opts.headers[name]);
        });
        var preferBinary;
        var useFetch = true;
        if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
          useFetch = false;
          preferBinary = true;
        } else if (opts.mode === "prefer-streaming") {
          preferBinary = false;
        } else if (opts.mode === "allow-wrong-content-type") {
          preferBinary = !capability.overrideMimeType;
        } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
          preferBinary = true;
        } else {
          throw new Error("Invalid value for opts.mode");
        }
        self2._mode = decideMode(preferBinary, useFetch);
        self2._fetchTimer = null;
        self2._socketTimeout = null;
        self2._socketTimer = null;
        self2.on("finish", function() {
          self2._onFinish();
        });
      };
      inherits(ClientRequest, stream.Writable);
      ClientRequest.prototype.setHeader = function(name, value) {
        var self2 = this;
        var lowerName = name.toLowerCase();
        if (unsafeHeaders.indexOf(lowerName) !== -1)
          return;
        self2._headers[lowerName] = {
          name,
          value
        };
      };
      ClientRequest.prototype.getHeader = function(name) {
        var header = this._headers[name.toLowerCase()];
        if (header)
          return header.value;
        return null;
      };
      ClientRequest.prototype.removeHeader = function(name) {
        var self2 = this;
        delete self2._headers[name.toLowerCase()];
      };
      ClientRequest.prototype._onFinish = function() {
        var self2 = this;
        if (self2._destroyed)
          return;
        var opts = self2._opts;
        if ("timeout" in opts && opts.timeout !== 0) {
          self2.setTimeout(opts.timeout);
        }
        var headersObj = self2._headers;
        var body4 = null;
        if (opts.method !== "GET" && opts.method !== "HEAD") {
          body4 = new Blob(self2._body, {
            type: (headersObj["content-type"] || {}).value || ""
          });
        }
        var headersList = [];
        Object.keys(headersObj).forEach(function(keyName) {
          var name = headersObj[keyName].name;
          var value = headersObj[keyName].value;
          if (Array.isArray(value)) {
            value.forEach(function(v) {
              headersList.push([name, v]);
            });
          } else {
            headersList.push([name, value]);
          }
        });
        if (self2._mode === "fetch") {
          var signal = null;
          if (capability.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self2._fetchAbortController = controller;
            if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
              self2._fetchTimer = global.setTimeout(function() {
                self2.emit("requestTimeout");
                if (self2._fetchAbortController)
                  self2._fetchAbortController.abort();
              }, opts.requestTimeout);
            }
          }
          global.fetch(self2._opts.url, {
            method: self2._opts.method,
            headers: headersList,
            body: body4 || void 0,
            mode: "cors",
            credentials: opts.withCredentials ? "include" : "same-origin",
            signal
          }).then(function(response2) {
            self2._fetchResponse = response2;
            self2._resetTimers(false);
            self2._connect();
          }, function(reason) {
            self2._resetTimers(true);
            if (!self2._destroyed)
              self2.emit("error", reason);
          });
        } else {
          var xhr = self2._xhr = new global.XMLHttpRequest();
          try {
            xhr.open(self2._opts.method, self2._opts.url, true);
          } catch (err) {
            process.nextTick(function() {
              self2.emit("error", err);
            });
            return;
          }
          if ("responseType" in xhr)
            xhr.responseType = self2._mode;
          if ("withCredentials" in xhr)
            xhr.withCredentials = !!opts.withCredentials;
          if (self2._mode === "text" && "overrideMimeType" in xhr)
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
          if ("requestTimeout" in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function() {
              self2.emit("requestTimeout");
            };
          }
          headersList.forEach(function(header) {
            xhr.setRequestHeader(header[0], header[1]);
          });
          self2._response = null;
          xhr.onreadystatechange = function() {
            switch (xhr.readyState) {
              case rStates.LOADING:
              case rStates.DONE:
                self2._onXHRProgress();
                break;
            }
          };
          if (self2._mode === "moz-chunked-arraybuffer") {
            xhr.onprogress = function() {
              self2._onXHRProgress();
            };
          }
          xhr.onerror = function() {
            if (self2._destroyed)
              return;
            self2._resetTimers(true);
            self2.emit("error", new Error("XHR error"));
          };
          try {
            xhr.send(body4);
          } catch (err) {
            process.nextTick(function() {
              self2.emit("error", err);
            });
            return;
          }
        }
      };
      function statusValid(xhr) {
        try {
          var status = xhr.status;
          return status !== null && status !== 0;
        } catch (e) {
          return false;
        }
      }
      __name(statusValid, "statusValid");
      ClientRequest.prototype._onXHRProgress = function() {
        var self2 = this;
        self2._resetTimers(false);
        if (!statusValid(self2._xhr) || self2._destroyed)
          return;
        if (!self2._response)
          self2._connect();
        self2._response._onXHRProgress(self2._resetTimers.bind(self2));
      };
      ClientRequest.prototype._connect = function() {
        var self2 = this;
        if (self2._destroyed)
          return;
        self2._response = new IncomingMessage(self2._xhr, self2._fetchResponse, self2._mode, self2._resetTimers.bind(self2));
        self2._response.on("error", function(err) {
          self2.emit("error", err);
        });
        self2.emit("response", self2._response);
      };
      ClientRequest.prototype._write = function(chunk, encoding, cb) {
        var self2 = this;
        self2._body.push(chunk);
        cb();
      };
      ClientRequest.prototype._resetTimers = function(done) {
        var self2 = this;
        global.clearTimeout(self2._socketTimer);
        self2._socketTimer = null;
        if (done) {
          global.clearTimeout(self2._fetchTimer);
          self2._fetchTimer = null;
        } else if (self2._socketTimeout) {
          self2._socketTimer = global.setTimeout(function() {
            self2.emit("timeout");
          }, self2._socketTimeout);
        }
      };
      ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function(err) {
        var self2 = this;
        self2._destroyed = true;
        self2._resetTimers(true);
        if (self2._response)
          self2._response._destroyed = true;
        if (self2._xhr)
          self2._xhr.abort();
        else if (self2._fetchAbortController)
          self2._fetchAbortController.abort();
        if (err)
          self2.emit("error", err);
      };
      ClientRequest.prototype.end = function(data, encoding, cb) {
        var self2 = this;
        if (typeof data === "function") {
          cb = data;
          data = void 0;
        }
        stream.Writable.prototype.end.call(self2, data, encoding, cb);
      };
      ClientRequest.prototype.setTimeout = function(timeout, cb) {
        var self2 = this;
        if (cb)
          self2.once("timeout", cb);
        self2._socketTimeout = timeout;
        self2._resetTimers(false);
      };
      ClientRequest.prototype.flushHeaders = function() {
      };
      ClientRequest.prototype.setNoDelay = function() {
      };
      ClientRequest.prototype.setSocketKeepAlive = function() {
      };
      var unsafeHeaders = [
        "accept-charset",
        "accept-encoding",
        "access-control-request-headers",
        "access-control-request-method",
        "connection",
        "content-length",
        "cookie",
        "cookie2",
        "date",
        "dnt",
        "expect",
        "host",
        "keep-alive",
        "origin",
        "referer",
        "te",
        "trailer",
        "transfer-encoding",
        "upgrade",
        "via"
      ];
    }
  });

  // node_modules/xtend/immutable.js
  var require_immutable = __commonJS({
    "node_modules/xtend/immutable.js"(exports, module) {
      module.exports = extend3;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function extend3() {
        var target = {};
        for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }
      __name(extend3, "extend");
    }
  });

  // node_modules/builtin-status-codes/browser.js
  var require_browser4 = __commonJS({
    "node_modules/builtin-status-codes/browser.js"(exports, module) {
      module.exports = {
        "100": "Continue",
        "101": "Switching Protocols",
        "102": "Processing",
        "200": "OK",
        "201": "Created",
        "202": "Accepted",
        "203": "Non-Authoritative Information",
        "204": "No Content",
        "205": "Reset Content",
        "206": "Partial Content",
        "207": "Multi-Status",
        "208": "Already Reported",
        "226": "IM Used",
        "300": "Multiple Choices",
        "301": "Moved Permanently",
        "302": "Found",
        "303": "See Other",
        "304": "Not Modified",
        "305": "Use Proxy",
        "307": "Temporary Redirect",
        "308": "Permanent Redirect",
        "400": "Bad Request",
        "401": "Unauthorized",
        "402": "Payment Required",
        "403": "Forbidden",
        "404": "Not Found",
        "405": "Method Not Allowed",
        "406": "Not Acceptable",
        "407": "Proxy Authentication Required",
        "408": "Request Timeout",
        "409": "Conflict",
        "410": "Gone",
        "411": "Length Required",
        "412": "Precondition Failed",
        "413": "Payload Too Large",
        "414": "URI Too Long",
        "415": "Unsupported Media Type",
        "416": "Range Not Satisfiable",
        "417": "Expectation Failed",
        "418": "I'm a teapot",
        "421": "Misdirected Request",
        "422": "Unprocessable Entity",
        "423": "Locked",
        "424": "Failed Dependency",
        "425": "Unordered Collection",
        "426": "Upgrade Required",
        "428": "Precondition Required",
        "429": "Too Many Requests",
        "431": "Request Header Fields Too Large",
        "451": "Unavailable For Legal Reasons",
        "500": "Internal Server Error",
        "501": "Not Implemented",
        "502": "Bad Gateway",
        "503": "Service Unavailable",
        "504": "Gateway Timeout",
        "505": "HTTP Version Not Supported",
        "506": "Variant Also Negotiates",
        "507": "Insufficient Storage",
        "508": "Loop Detected",
        "509": "Bandwidth Limit Exceeded",
        "510": "Not Extended",
        "511": "Network Authentication Required"
      };
    }
  });

  // node_modules/url/node_modules/punycode/punycode.js
  var require_punycode = __commonJS({
    "node_modules/url/node_modules/punycode/punycode.js"(exports, module) {
      (function(root) {
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = typeof module == "object" && module && !module.nodeType && module;
        var freeGlobal = typeof global == "object" && global;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }
        var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
        function error(type) {
          throw RangeError(errors[type]);
        }
        __name(error, "error");
        function map(array, fn2) {
          var length = array.length;
          var result = [];
          while (length--) {
            result[length] = fn2(array[length]);
          }
          return result;
        }
        __name(map, "map");
        function mapDomain(string, fn2) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn2).join(".");
          return result + encoded;
        }
        __name(mapDomain, "mapDomain");
        function ucs2decode(string) {
          var output = [], counter = 0, length = string.length, value, extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        __name(ucs2decode, "ucs2decode");
        function ucs2encode(array) {
          return map(array, function(value) {
            var output = "";
            if (value > 65535) {
              value -= 65536;
              output += stringFromCharCode(value >>> 10 & 1023 | 55296);
              value = 56320 | value & 1023;
            }
            output += stringFromCharCode(value);
            return output;
          }).join("");
        }
        __name(ucs2encode, "ucs2encode");
        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        }
        __name(basicToDigit, "basicToDigit");
        function digitToBasic(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }
        __name(digitToBasic, "digitToBasic");
        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        }
        __name(adapt, "adapt");
        function decode(input) {
          var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
          basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
            for (oldi = i, w = 1, k = base; ; k += base) {
              if (index >= inputLength) {
                error("invalid-input");
              }
              digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error("overflow");
              }
              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error("overflow");
              }
              w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return ucs2encode(output);
        }
        __name(decode, "decode");
        function encode(input) {
          var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
          input = ucs2decode(input);
          inputLength = input.length;
          n = initialN;
          delta = 0;
          bias = initialBias;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 128) {
              output.push(stringFromCharCode(currentValue));
            }
          }
          handledCPCount = basicLength = output.length;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue < n && ++delta > maxInt) {
                error("overflow");
              }
              if (currentValue == n) {
                for (q = delta, k = base; ; k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(
                    stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                  );
                  q = floor(qMinusT / baseMinusT);
                }
                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        }
        __name(encode, "encode");
        function toUnicode(input) {
          return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        }
        __name(toUnicode, "toUnicode");
        function toASCII(input) {
          return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        }
        __name(toASCII, "toASCII");
        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          "version": "1.3.2",
          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          define("punycode", function() {
            return punycode;
          });
        } else if (freeExports && freeModule) {
          if (module.exports == freeExports) {
            freeModule.exports = punycode;
          } else {
            for (key in punycode) {
              punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
          }
        } else {
          root.punycode = punycode;
        }
      })(exports);
    }
  });

  // node_modules/url/util.js
  var require_util2 = __commonJS({
    "node_modules/url/util.js"(exports, module) {
      "use strict";
      module.exports = {
        isString: function(arg) {
          return typeof arg === "string";
        },
        isObject: function(arg) {
          return typeof arg === "object" && arg !== null;
        },
        isNull: function(arg) {
          return arg === null;
        },
        isNullOrUndefined: function(arg) {
          return arg == null;
        }
      };
    }
  });

  // node_modules/url/url.js
  var require_url = __commonJS({
    "node_modules/url/url.js"(exports) {
      "use strict";
      var punycode = require_punycode();
      var util = require_util2();
      exports.parse = urlParse;
      exports.resolve = urlResolve;
      exports.resolveObject = urlResolveObject;
      exports.format = urlFormat;
      exports.Url = Url;
      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      }
      __name(Url, "Url");
      var protocolPattern = /^([a-z0-9.+-]+:)/i;
      var portPattern = /:[0-9]*$/;
      var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
      var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
      var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
      var autoEscape = ["'"].concat(unwise);
      var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
      var hostEndingChars = ["/", "?", "#"];
      var hostnameMaxLen = 255;
      var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
      var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
      var unsafeProtocol = {
        "javascript": true,
        "javascript:": true
      };
      var hostlessProtocol = {
        "javascript": true,
        "javascript:": true
      };
      var slashedProtocol = {
        "http": true,
        "https": true,
        "ftp": true,
        "gopher": true,
        "file": true,
        "http:": true,
        "https:": true,
        "ftp:": true,
        "gopher:": true,
        "file:": true
      };
      var querystring = require_querystring_es3();
      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url)
          return url;
        var u = new Url();
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }
      __name(urlParse, "urlParse");
      Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
        if (!util.isString(url)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        }
        var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, "/");
        url = uSplit.join(splitter);
        var rest = url;
        rest = rest.trim();
        if (!slashesDenoteHost && url.split("#").length === 1) {
          var simplePath = simplePathPattern.exec(rest);
          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
              this.search = simplePath[2];
              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = "";
              this.query = {};
            }
            return this;
          }
        }
        var proto = protocolPattern.exec(rest);
        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        }
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var slashes = rest.substr(0, 2) === "//";
          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }
        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
          var hostEnd = -1;
          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
              hostEnd = hec;
          }
          var auth, atSign;
          if (hostEnd === -1) {
            atSign = rest.lastIndexOf("@");
          } else {
            atSign = rest.lastIndexOf("@", hostEnd);
          }
          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          }
          hostEnd = -1;
          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
              hostEnd = hec;
          }
          if (hostEnd === -1)
            hostEnd = rest.length;
          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);
          this.parseHost();
          this.hostname = this.hostname || "";
          var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part)
                continue;
              if (!part.match(hostnamePartPattern)) {
                var newpart = "";
                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    newpart += "x";
                  } else {
                    newpart += part[j];
                  }
                }
                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);
                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }
                  if (notHost.length) {
                    rest = "/" + notHost.join(".") + rest;
                  }
                  this.hostname = validParts.join(".");
                  break;
                }
              }
            }
          }
          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = "";
          } else {
            this.hostname = this.hostname.toLowerCase();
          }
          if (!ipv6Hostname) {
            this.hostname = punycode.toASCII(this.hostname);
          }
          var p = this.port ? ":" + this.port : "";
          var h2 = this.hostname || "";
          this.host = h2 + p;
          this.href += this.host;
          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") {
              rest = "/" + rest;
            }
          }
        }
        if (!unsafeProtocol[lowerProto]) {
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae2 = autoEscape[i];
            if (rest.indexOf(ae2) === -1)
              continue;
            var esc = encodeURIComponent(ae2);
            if (esc === ae2) {
              esc = escape(ae2);
            }
            rest = rest.split(ae2).join(esc);
          }
        }
        var hash = rest.indexOf("#");
        if (hash !== -1) {
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf("?");
        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);
          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }
          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          this.search = "";
          this.query = {};
        }
        if (rest)
          this.pathname = rest;
        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = "/";
        }
        if (this.pathname || this.search) {
          var p = this.pathname || "";
          var s = this.search || "";
          this.path = p + s;
        }
        this.href = this.format();
        return this;
      };
      function urlFormat(obj) {
        if (util.isString(obj))
          obj = urlParse(obj);
        if (!(obj instanceof Url))
          return Url.prototype.format.call(obj);
        return obj.format();
      }
      __name(urlFormat, "urlFormat");
      Url.prototype.format = function() {
        var auth = this.auth || "";
        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ":");
          auth += "@";
        }
        var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
          if (this.port) {
            host += ":" + this.port;
          }
        }
        if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }
        var search = this.search || query && "?" + query || "";
        if (protocol && protocol.substr(-1) !== ":")
          protocol += ":";
        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
          host = "//" + (host || "");
          if (pathname && pathname.charAt(0) !== "/")
            pathname = "/" + pathname;
        } else if (!host) {
          host = "";
        }
        if (hash && hash.charAt(0) !== "#")
          hash = "#" + hash;
        if (search && search.charAt(0) !== "?")
          search = "?" + search;
        pathname = pathname.replace(/[?#]/g, function(match) {
          return encodeURIComponent(match);
        });
        search = search.replace("#", "%23");
        return protocol + host + pathname + search + hash;
      };
      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }
      __name(urlResolve, "urlResolve");
      Url.prototype.resolve = function(relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };
      function urlResolveObject(source, relative) {
        if (!source)
          return relative;
        return urlParse(source, false, true).resolveObject(relative);
      }
      __name(urlResolveObject, "urlResolveObject");
      Url.prototype.resolveObject = function(relative) {
        if (util.isString(relative)) {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }
        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        }
        result.hash = relative.hash;
        if (relative.href === "") {
          result.href = result.format();
          return result;
        }
        if (relative.slashes && !relative.protocol) {
          var rkeys = Object.keys(relative);
          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== "protocol")
              result[rkey] = relative[rkey];
          }
          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.path = result.pathname = "/";
          }
          result.href = result.format();
          return result;
        }
        if (relative.protocol && relative.protocol !== result.protocol) {
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }
            result.href = result.format();
            return result;
          }
          result.protocol = relative.protocol;
          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while (relPath.length && !(relative.host = relPath.shift()))
              ;
            if (!relative.host)
              relative.host = "";
            if (!relative.hostname)
              relative.hostname = "";
            if (relPath[0] !== "")
              relPath.unshift("");
            if (relPath.length < 2)
              relPath.unshift("");
            result.pathname = relPath.join("/");
          } else {
            result.pathname = relative.pathname;
          }
          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || "";
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port;
          if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
          }
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }
        var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
        if (psychotic) {
          result.hostname = "";
          result.port = null;
          if (result.host) {
            if (srcPath[0] === "")
              srcPath[0] = result.host;
            else
              srcPath.unshift(result.host);
          }
          result.host = "";
          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
              if (relPath[0] === "")
                relPath[0] = relative.host;
              else
                relPath.unshift(relative.host);
            }
            relative.host = null;
          }
          mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
        }
        if (isRelAbs) {
          result.host = relative.host || relative.host === "" ? relative.host : result.host;
          result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath;
        } else if (relPath.length) {
          if (!srcPath)
            srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (!util.isNullOrUndefined(relative.search)) {
          if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }
          result.search = relative.search;
          result.query = relative.query;
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
          }
          result.href = result.format();
          return result;
        }
        if (!srcPath.length) {
          result.pathname = null;
          if (result.search) {
            result.path = "/" + result.search;
          } else {
            result.path = null;
          }
          result.href = result.format();
          return result;
        }
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];
          if (last === ".") {
            srcPath.splice(i, 1);
          } else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        }
        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift("..");
          }
        }
        if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
          srcPath.unshift("");
        }
        if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
          srcPath.push("");
        }
        var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
        if (psychotic) {
          result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        mustEndAbs = mustEndAbs || result.host && srcPath.length;
        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift("");
        }
        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join("/");
        }
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };
      Url.prototype.parseHost = function() {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
          port = port[0];
          if (port !== ":") {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host)
          this.hostname = host;
      };
    }
  });

  // node_modules/stream-http/index.js
  var require_stream_http = __commonJS({
    "node_modules/stream-http/index.js"(exports) {
      var ClientRequest = require_request();
      var response = require_response();
      var extend3 = require_immutable();
      var statusCodes = require_browser4();
      var url = require_url();
      var http = exports;
      http.request = function(opts, cb) {
        if (typeof opts === "string")
          opts = url.parse(opts);
        else
          opts = extend3(opts);
        var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
        var protocol = opts.protocol || defaultProtocol;
        var host = opts.hostname || opts.host;
        var port = opts.port;
        var path = opts.path || "/";
        if (host && host.indexOf(":") !== -1)
          host = "[" + host + "]";
        opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
        opts.method = (opts.method || "GET").toUpperCase();
        opts.headers = opts.headers || {};
        var req = new ClientRequest(opts);
        if (cb)
          req.on("response", cb);
        return req;
      };
      http.get = /* @__PURE__ */ __name(function get(opts, cb) {
        var req = http.request(opts, cb);
        req.end();
        return req;
      }, "get");
      http.ClientRequest = ClientRequest;
      http.IncomingMessage = response.IncomingMessage;
      http.Agent = function() {
      };
      http.Agent.defaultMaxSockets = 4;
      http.globalAgent = new http.Agent();
      http.STATUS_CODES = statusCodes;
      http.METHODS = [
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REPORT",
        "SEARCH",
        "SUBSCRIBE",
        "TRACE",
        "UNLOCK",
        "UNSUBSCRIBE"
      ];
    }
  });

  // node_modules/https-browserify/index.js
  var require_https_browserify = __commonJS({
    "node_modules/https-browserify/index.js"(exports, module) {
      var http = require_stream_http();
      var url = require_url();
      var https = module.exports;
      for (key in http) {
        if (http.hasOwnProperty(key))
          https[key] = http[key];
      }
      var key;
      https.request = function(params, cb) {
        params = validateParams(params);
        return http.request.call(this, params, cb);
      };
      https.get = function(params, cb) {
        params = validateParams(params);
        return http.get.call(this, params, cb);
      };
      function validateParams(params) {
        if (typeof params === "string") {
          params = url.parse(params);
        }
        if (!params.protocol) {
          params.protocol = "https:";
        }
        if (params.protocol !== "https:") {
          throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
        }
        return params;
      }
      __name(validateParams, "validateParams");
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/localize.js
  var require_localize2 = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/localize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.localize = void 0;
      var nls2 = require_main();
      exports.localize = nls2.loadMessageBundle();
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/parseJson.js
  var require_parseJson2 = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/parseJson.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeBom = exports.parseJson = void 0;
      function parseJson(data) {
        return JSON.parse(removeBom(data));
      }
      __name(parseJson, "parseJson");
      exports.parseJson = parseJson;
      function removeBom(data) {
        return data.charCodeAt(0) === 65279 ? data.slice(1) : data;
      }
      __name(removeBom, "removeBom");
      exports.removeBom = removeBom;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/createAzureClient.js
  var require_createAzureClient = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/createAzureClient.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CorrelationIdPolicy = exports.createGenericClient = exports.sendRequestWithTimeout = exports.createAzureSubscriptionClient = exports.createAzureClient = exports.parseClientContext = void 0;
      var core_client_1 = (init_src6(), __toCommonJS(src_exports2));
      var core_rest_pipeline_1 = (init_src5(), __toCommonJS(src_exports));
      var vscode_azext_utils_1 = require_src3();
      var https_1 = require_https_browserify();
      var uuid_1 = require_commonjs_browser();
      var vscode23 = __require("vscode");
      var localize_1 = require_localize2();
      var parseJson_1 = require_parseJson2();
      function parseClientContext2(clientContext) {
        if (Array.isArray(clientContext)) {
          const subscription = clientContext[1] instanceof vscode_azext_utils_1.AzExtTreeItem ? clientContext[1].subscription : clientContext[1];
          return Object.assign(clientContext[0], {
            credentials: subscription.credentials,
            subscriptionDisplayName: subscription.subscriptionDisplayName,
            subscriptionId: subscription.subscriptionId,
            subscriptionPath: subscription.subscriptionPath,
            tenantId: subscription.tenantId,
            userId: subscription.userId,
            environment: subscription.environment,
            isCustomCloud: subscription.isCustomCloud
          });
        } else {
          return clientContext;
        }
      }
      __name(parseClientContext2, "parseClientContext");
      exports.parseClientContext = parseClientContext2;
      function createAzureClient2(clientContext, clientType) {
        const context = parseClientContext2(clientContext);
        const client = new clientType(context.credentials, context.subscriptionId, {
          endpoint: context.environment.resourceManagerEndpointUrl
        });
        addAzExtPipeline(context, client.pipeline);
        return client;
      }
      __name(createAzureClient2, "createAzureClient");
      exports.createAzureClient = createAzureClient2;
      function createAzureSubscriptionClient(clientContext, clientType) {
        const context = parseClientContext2(clientContext);
        const client = new clientType(context.credentials, {
          endpoint: context.environment.resourceManagerEndpointUrl
        });
        addAzExtPipeline(context, client.pipeline);
        return client;
      }
      __name(createAzureSubscriptionClient, "createAzureSubscriptionClient");
      exports.createAzureSubscriptionClient = createAzureSubscriptionClient;
      function sendRequestWithTimeout(context, options, timeout, clientInfo) {
        return __awaiter6(this, void 0, void 0, function* () {
          const request = (0, core_rest_pipeline_1.createPipelineRequest)(Object.assign(Object.assign({}, options), { timeout }));
          if (options.rejectUnauthorized) {
            request.agent = new https_1.Agent({ rejectUnauthorized: options.rejectUnauthorized });
          }
          const client = yield createGenericClient(context, clientInfo, { noRetryPolicy: true });
          return yield client.sendRequest(request);
        });
      }
      __name(sendRequestWithTimeout, "sendRequestWithTimeout");
      exports.sendRequestWithTimeout = sendRequestWithTimeout;
      function createGenericClient(context, clientInfo, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          let credentials;
          let endpoint;
          if (clientInfo && "credentials" in clientInfo) {
            credentials = clientInfo.credentials;
            endpoint = clientInfo.environment.resourceManagerEndpointUrl;
          } else {
            credentials = clientInfo;
          }
          const retryOptions = (options === null || options === void 0 ? void 0 : options.noRetryPolicy) ? { maxRetries: 0 } : void 0;
          const client = new core_client_1.ServiceClient({
            credential: credentials,
            endpoint
          });
          addAzExtPipeline(context, client.pipeline, endpoint, { retryOptions });
          return client;
        });
      }
      __name(createGenericClient, "createGenericClient");
      exports.createGenericClient = createGenericClient;
      function addAzExtPipeline(context, pipeline, endpoint, options) {
        if (options === null || options === void 0 ? void 0 : options.retryOptions) {
          pipeline.removePolicy((0, core_rest_pipeline_1.defaultRetryPolicy)());
          pipeline.addPolicy((0, core_rest_pipeline_1.defaultRetryPolicy)(options === null || options === void 0 ? void 0 : options.retryOptions));
        }
        pipeline.removePolicy((0, core_rest_pipeline_1.userAgentPolicy)());
        pipeline.addPolicy((0, core_rest_pipeline_1.userAgentPolicy)({ userAgentPrefix: (0, vscode_azext_utils_1.appendExtensionUserAgent)() }));
        pipeline.addPolicy(new AcceptLanguagePolicy(), { phase: "Serialize" });
        if (vscode23.env.isTelemetryEnabled) {
          pipeline.addPolicy(new CorrelationIdPolicy(context), { phase: "Serialize" });
        }
        if (endpoint) {
          pipeline.addPolicy(new AddEndpointPolicy(endpoint), { phase: "Serialize" });
        }
        pipeline.addPolicy(new MissingContentTypePolicy(), { phase: "Deserialize" });
        pipeline.addPolicy(new RemoveBOMPolicy(), { phase: "Deserialize", beforePolicies: [MissingContentTypePolicy.Name] });
        pipeline.addPolicy(
          new StatusCodePolicy()
          /*intentionally not in a phase*/
        );
        return pipeline;
      }
      __name(addAzExtPipeline, "addAzExtPipeline");
      var CorrelationIdPolicy = class {
        constructor(context) {
          this.context = context;
          this.name = "CorrelationIdPolicy";
        }
        sendRequest(request, next) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const headerName = "x-ms-correlation-request-id";
            const id = (_a7 = this.context.telemetry.properties)[headerName] || (_a7[headerName] = (0, uuid_1.v4)());
            request.headers.set(headerName, id);
            return yield next(request);
          });
        }
      };
      __name(CorrelationIdPolicy, "CorrelationIdPolicy");
      exports.CorrelationIdPolicy = CorrelationIdPolicy;
      var RemoveBOMPolicy = class {
        constructor() {
          this.name = "RemoveBOMPolicy";
        }
        sendRequest(request, next) {
          return __awaiter6(this, void 0, void 0, function* () {
            const response = yield next(request);
            const contentType7 = response.headers.get(contentTypeName);
            if (contentType7 && /json/i.test(contentType7) && response.bodyAsText) {
              response.bodyAsText = (0, parseJson_1.removeBom)(response.bodyAsText);
            }
            return response;
          });
        }
      };
      __name(RemoveBOMPolicy, "RemoveBOMPolicy");
      var contentTypeName = "Content-Type";
      var MissingContentTypePolicy = class {
        constructor() {
          this.name = MissingContentTypePolicy.Name;
        }
        sendRequest(request, next) {
          return __awaiter6(this, void 0, void 0, function* () {
            const response = yield next(request);
            if (!response.headers.get(contentTypeName) && response.bodyAsText) {
              try {
                (0, parseJson_1.parseJson)(response.bodyAsText);
                response.headers.set(contentTypeName, "application/json");
              } catch (_a7) {
                response.headers.set(contentTypeName, "application/octet-stream");
              }
            }
            return response;
          });
        }
      };
      __name(MissingContentTypePolicy, "MissingContentTypePolicy");
      MissingContentTypePolicy.Name = "MissingContentTypePolicy";
      var AcceptLanguagePolicy = class {
        constructor() {
          this.name = "AcceptLanguagePolicy";
        }
        sendRequest(request, next) {
          return __awaiter6(this, void 0, void 0, function* () {
            request.headers.set("Accept-Language", vscode23.env.language);
            return yield next(request);
          });
        }
      };
      __name(AcceptLanguagePolicy, "AcceptLanguagePolicy");
      var AddEndpointPolicy = class {
        constructor(endpoint) {
          this.endpoint = endpoint;
          this.name = "AddEndpointPolicy";
        }
        sendRequest(request, next) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (this.endpoint && request.url && !request.url.startsWith("http")) {
              if (!request.url.startsWith("/")) {
                request.url = `/${request.url}`;
              }
              request.url = this.endpoint + request.url;
            }
            return yield next(request);
          });
        }
      };
      __name(AddEndpointPolicy, "AddEndpointPolicy");
      var StatusCodePolicy = class {
        constructor() {
          this.name = "StatusCodePolicy";
        }
        sendRequest(request, next) {
          return __awaiter6(this, void 0, void 0, function* () {
            const response = yield next(request);
            if (response.status < 200 || response.status >= 300) {
              const errorMessage = response.bodyAsText ? (0, vscode_azext_utils_1.parseError)(response.parsedBody || response.bodyAsText).message : (0, localize_1.localize)("unexpectedStatusCode", "Unexpected status code: {0}", response.status);
              throw new core_rest_pipeline_1.RestError(errorMessage, {
                code: response.bodyAsText || "",
                statusCode: response.status,
                request,
                response
              });
            } else {
              return response;
            }
          });
        }
      };
      __name(StatusCodePolicy, "StatusCodePolicy");
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/openInPortal.js
  var require_openInPortal = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/openInPortal.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.openInPortal = void 0;
      var vscode_azext_utils_1 = require_src3();
      function openInPortal2(root, id, options) {
        return __awaiter6(this, void 0, void 0, function* () {
          root = (0, vscode_azext_utils_1.isAzExtTreeItem)(root) ? root.subscription : root;
          const queryPrefix = options && options.queryPrefix ? `?${options.queryPrefix}` : "";
          const url = `${root.environment.portalUrl}/${queryPrefix}#@${root.tenantId}/resource${id}`;
          yield (0, vscode_azext_utils_1.openUrl)(url);
        });
      }
      __name(openInPortal2, "openInPortal");
      exports.openInPortal = openInPortal2;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/extensionVariables.js
  var require_extensionVariables2 = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/extensionVariables.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerAzureUtilsExtensionVariables = exports.ext = void 0;
      var vscode_azext_utils_1 = require_src3();
      var localize_1 = require_localize2();
      var UninitializedExtensionVariables = class {
        constructor() {
          this._error = new Error((0, localize_1.localize)("uninitializedError", '"registerAzureUtilsExtensionVariables" must be called before using the vscode-azext-azureutilsa package.'));
        }
        get context() {
          throw this._error;
        }
        get outputChannel() {
          throw this._error;
        }
        get ui() {
          throw this._error;
        }
        get prefix() {
          throw this._error;
        }
      };
      __name(UninitializedExtensionVariables, "UninitializedExtensionVariables");
      exports.ext = new UninitializedExtensionVariables();
      function registerAzureUtilsExtensionVariables2(extVars) {
        if (exports.ext === extVars) {
          return;
        }
        exports.ext = extVars;
        (0, vscode_azext_utils_1.registerUIExtensionVariables)(extVars);
      }
      __name(registerAzureUtilsExtensionVariables2, "registerAzureUtilsExtensionVariables");
      exports.registerAzureUtilsExtensionVariables = registerAzureUtilsExtensionVariables2;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/IconPath.js
  var require_IconPath = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/IconPath.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getIconPath = void 0;
      var path = require_path_browserify();
      var extensionVariables_1 = require_extensionVariables2();
      function getIconPath2(iconName) {
        return path.join(getResourcesPath(), `${iconName}.svg`);
      }
      __name(getIconPath2, "getIconPath");
      exports.getIconPath = getIconPath2;
      function getResourcesPath() {
        return extensionVariables_1.ext.ignoreBundle ? path.join(__dirname, "..", "..", "..", "resources") : path.join(__dirname, "node_modules", "@microsoft", "vscode-azext-azureutils", "resources");
      }
      __name(getResourcesPath, "getResourcesPath");
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/SubscriptionTreeItemBase.js
  var require_SubscriptionTreeItemBase = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/SubscriptionTreeItemBase.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SubscriptionTreeItemBase = void 0;
      var vscode_azext_utils_1 = require_src3();
      var IconPath_1 = require_IconPath();
      var SubscriptionTreeItemBase3 = class extends vscode_azext_utils_1.AzExtParentTreeItem {
        constructor(parent, subscription) {
          super(parent);
          this.contextValue = SubscriptionTreeItemBase3.contextValue;
          this._subscription = subscription;
          this.label = subscription.subscriptionDisplayName;
          this.id = subscription.subscriptionPath;
          this.iconPath = (0, IconPath_1.getIconPath)("azureSubscription");
        }
      };
      __name(SubscriptionTreeItemBase3, "SubscriptionTreeItemBase");
      exports.SubscriptionTreeItemBase = SubscriptionTreeItemBase3;
      SubscriptionTreeItemBase3.contextValue = "azureextensionui.azureSubscription";
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/AzureAccountTreeItemBase.js
  var require_AzureAccountTreeItemBase = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/tree/AzureAccountTreeItemBase.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AzureAccountTreeItemBase = void 0;
      var semver = require_semver2();
      var vscode_1 = __require("vscode");
      var localize_1 = require_localize2();
      var IconPath_1 = require_IconPath();
      var SubscriptionTreeItemBase_1 = require_SubscriptionTreeItemBase();
      var vscode_azext_utils_1 = require_src3();
      var signInLabel = (0, localize_1.localize)("signInLabel", "Sign in to Azure...");
      var createAccountLabel = (0, localize_1.localize)("createAccountLabel", "Create an Azure Account...");
      var createStudentAccountLabel = (0, localize_1.localize)("createStudentAccount", "Create an Azure for Students Account...");
      var selectSubscriptionsLabel = (0, localize_1.localize)("noSubscriptions", "Select Subscriptions...");
      var signInCommandId = "azure-account.login";
      var createAccountCommandId = "azure-account.createAccount";
      var createStudentAccountCommandId = "azure-account.createStudentAccount";
      var selectSubscriptionsCommandId = "azure-account.selectSubscriptions";
      var azureAccountExtensionId = "ms-vscode.azure-account";
      var extensionOpenCommand = "extension.open";
      var minAccountExtensionVersion = "0.9.0";
      var AzureAccountTreeItemBase2 = class extends vscode_azext_utils_1.AzExtParentTreeItem {
        constructor(parent, testAccount) {
          super(parent);
          this.contextValue = AzureAccountTreeItemBase2.contextValue;
          this.label = "Azure";
          this.childTypeLabel = (0, localize_1.localize)("subscription", "subscription");
          this.autoSelectInTreeItemPicker = true;
          this.disposables = [];
          this.suppressMaskLabel = true;
          this._testAccount = testAccount;
          this._azureAccountTask = this.loadAzureAccount(testAccount);
        }
        //#endregion
        get iconPath() {
          return (0, IconPath_1.getIconPath)("azure");
        }
        dispose() {
          vscode_1.Disposable.from(...this.disposables).dispose();
        }
        hasMoreChildrenImpl() {
          return false;
        }
        loadMoreChildrenImpl(_clearCache, context) {
          return __awaiter6(this, void 0, void 0, function* () {
            let azureAccount = yield this._azureAccountTask;
            if (typeof azureAccount === "string") {
              this._azureAccountTask = this.loadAzureAccount(this._testAccount);
              azureAccount = yield this._azureAccountTask;
            }
            if (typeof azureAccount === "string") {
              context.telemetry.properties.accountStatus = azureAccount;
              const label = azureAccount === "notInstalled" ? (0, localize_1.localize)("installAzureAccount", "Install Azure Account Extension...") : (0, localize_1.localize)("updateAzureAccount", 'Update Azure Account Extension to at least version "{0}"...', minAccountExtensionVersion);
              const iconPath = new vscode_1.ThemeIcon("warning");
              const result = new vscode_azext_utils_1.GenericTreeItem(this, { label, commandId: extensionOpenCommand, contextValue: "azureAccount" + azureAccount, includeInTreeItemPicker: true, iconPath });
              result.commandArgs = [azureAccountExtensionId];
              return [result];
            }
            context.telemetry.properties.accountStatus = azureAccount.status;
            const existingSubscriptions = this._subscriptionTreeItems ? this._subscriptionTreeItems : [];
            this._subscriptionTreeItems = [];
            const contextValue = "azureCommand";
            if (azureAccount.status === "Initializing" || azureAccount.status === "LoggingIn") {
              return [new vscode_azext_utils_1.GenericTreeItem(this, {
                label: azureAccount.status === "Initializing" ? (0, localize_1.localize)("loadingTreeItem", "Loading...") : (0, localize_1.localize)("signingIn", "Waiting for Azure sign-in..."),
                commandId: signInCommandId,
                contextValue,
                id: signInCommandId,
                iconPath: new vscode_1.ThemeIcon("loading~spin")
              })];
            } else if (azureAccount.status === "LoggedOut") {
              const studentAccountTreeItem = new vscode_azext_utils_1.GenericTreeItem(this, {
                label: createStudentAccountLabel,
                commandId: "azureResourceGroups.openUrl",
                contextValue,
                id: createStudentAccountCommandId,
                iconPath: new vscode_1.ThemeIcon("mortar-board"),
                includeInTreeItemPicker: true
              });
              studentAccountTreeItem.commandArgs = ["https://aka.ms/student-account"];
              return [
                new vscode_azext_utils_1.GenericTreeItem(this, { label: signInLabel, commandId: signInCommandId, contextValue, id: signInCommandId, iconPath: new vscode_1.ThemeIcon("sign-in"), includeInTreeItemPicker: true }),
                new vscode_azext_utils_1.GenericTreeItem(this, { label: createAccountLabel, commandId: createAccountCommandId, contextValue, id: createAccountCommandId, iconPath: new vscode_1.ThemeIcon("add"), includeInTreeItemPicker: true }),
                studentAccountTreeItem
              ];
            }
            yield azureAccount.waitForFilters();
            if (azureAccount.filters.length === 0) {
              return [
                new vscode_azext_utils_1.GenericTreeItem(this, { label: selectSubscriptionsLabel, commandId: selectSubscriptionsCommandId, contextValue, id: selectSubscriptionsCommandId, includeInTreeItemPicker: true })
              ];
            } else {
              this._subscriptionTreeItems = yield Promise.all(azureAccount.filters.map((filter4) => __awaiter6(this, void 0, void 0, function* () {
                const existingTreeItem = existingSubscriptions.find((ti2) => ti2.id === filter4.subscription.id);
                if (existingTreeItem) {
                  return existingTreeItem;
                } else {
                  (0, vscode_azext_utils_1.addExtensionValueToMask)(filter4.subscription.id, filter4.subscription.subscriptionId, filter4.subscription.displayName, filter4.session.userId, filter4.session.tenantId);
                  (0, vscode_azext_utils_1.addExtensionValueToMask)(filter4.session.credentials2.clientId, filter4.session.credentials2.domain);
                  const subscriptionId7 = (0, vscode_azext_utils_1.nonNullProp)(filter4.subscription, "subscriptionId");
                  return yield this.createSubscriptionTreeItem({
                    credentials: filter4.session.credentials2,
                    subscriptionDisplayName: (0, vscode_azext_utils_1.nonNullProp)(filter4.subscription, "displayName"),
                    subscriptionId: subscriptionId7,
                    subscriptionPath: (0, vscode_azext_utils_1.nonNullProp)(filter4.subscription, "id"),
                    tenantId: filter4.session.tenantId,
                    userId: filter4.session.userId,
                    environment: filter4.session.environment,
                    isCustomCloud: filter4.session.environment.name === "AzureCustomCloud"
                  });
                }
              })));
              return this._subscriptionTreeItems;
            }
          });
        }
        getIsLoggedIn() {
          return __awaiter6(this, void 0, void 0, function* () {
            const azureAccount = yield this._azureAccountTask;
            return typeof azureAccount !== "string" && azureAccount.status === "LoggedIn";
          });
        }
        getSubscriptionPromptStep(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            const subscriptionNodes = yield this.ensureSubscriptionTreeItems(context);
            if (subscriptionNodes.length === 1) {
              Object.assign(context, subscriptionNodes[0].subscription);
              return void 0;
            } else {
              const me2 = this;
              class SubscriptionPromptStep extends vscode_azext_utils_1.AzureWizardPromptStep {
                prompt() {
                  return __awaiter6(this, void 0, void 0, function* () {
                    const ti2 = yield me2.treeDataProvider.showTreeItemPicker(SubscriptionTreeItemBase_1.SubscriptionTreeItemBase.contextValue, context, me2);
                    Object.assign(context, ti2.subscription);
                  });
                }
                shouldPrompt() {
                  return !context.subscriptionId;
                }
              }
              __name(SubscriptionPromptStep, "SubscriptionPromptStep");
              return new SubscriptionPromptStep();
            }
          });
        }
        pickTreeItemImpl(_expectedContextValues) {
          return __awaiter6(this, void 0, void 0, function* () {
            const azureAccount = yield this._azureAccountTask;
            if (typeof azureAccount !== "string" && (azureAccount.status === "LoggingIn" || azureAccount.status === "Initializing")) {
              const title = (0, localize_1.localize)("waitingForAzureSignin", "Waiting for Azure sign-in...");
              yield vscode_1.window.withProgress({ location: vscode_1.ProgressLocation.Notification, title }, () => __awaiter6(this, void 0, void 0, function* () {
                return yield azureAccount.waitForSubscriptions();
              }));
            }
            return void 0;
          });
        }
        compareChildrenImpl(item1, item2) {
          if (item1 instanceof vscode_azext_utils_1.GenericTreeItem && item2 instanceof vscode_azext_utils_1.GenericTreeItem) {
            return 0;
          } else {
            return super.compareChildrenImpl(item1, item2);
          }
        }
        loadAzureAccount(azureAccount) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!azureAccount) {
              const extension = vscode_1.extensions.getExtension(azureAccountExtensionId);
              if (extension) {
                try {
                  if (semver.lt(extension.packageJSON.version, minAccountExtensionVersion)) {
                    return "needsUpdate";
                  }
                } catch (_a7) {
                }
                if (!extension.isActive) {
                  yield extension.activate();
                }
                azureAccount = extension.exports;
              }
            }
            if (azureAccount) {
              (0, vscode_azext_utils_1.registerEvent)("azureAccount.onFiltersChanged", azureAccount.onFiltersChanged, (context) => __awaiter6(this, void 0, void 0, function* () {
                context.errorHandling.suppressDisplay = true;
                context.telemetry.suppressIfSuccessful = true;
                yield this.refresh(context);
              }));
              (0, vscode_azext_utils_1.registerEvent)("azureAccount.onStatusChanged", azureAccount.onStatusChanged, (context, status) => __awaiter6(this, void 0, void 0, function* () {
                context.errorHandling.suppressDisplay = true;
                context.telemetry.suppressIfSuccessful = true;
                if (status !== "LoggedIn") {
                  yield this.refresh(context);
                }
              }));
              yield vscode_1.commands.executeCommand("setContext", "isAzureAccountInstalled", true);
              return azureAccount;
            } else {
              return "notInstalled";
            }
          });
        }
        ensureSubscriptionTreeItems(context) {
          return __awaiter6(this, void 0, void 0, function* () {
            const azureAccount = yield this._azureAccountTask;
            if (typeof azureAccount === "string") {
              let message;
              let stepName;
              if (azureAccount === "notInstalled") {
                stepName = "requiresAzureAccount";
                message = (0, localize_1.localize)("requiresAzureAccount", "This functionality requires installing the Azure Account extension.");
              } else {
                stepName = "requiresUpdateToAzureAccount";
                message = (0, localize_1.localize)("requiresUpdateToAzureAccount", 'This functionality requires updating the Azure Account extension to at least version "{0}".', minAccountExtensionVersion);
              }
              const viewInMarketplace = { title: (0, localize_1.localize)("viewInMarketplace", "View in Marketplace") };
              if ((yield context.ui.showWarningMessage(message, { stepName }, viewInMarketplace)) === viewInMarketplace) {
                yield vscode_1.commands.executeCommand(extensionOpenCommand, azureAccountExtensionId);
              }
              throw new vscode_azext_utils_1.UserCancelledError(`${stepName}|viewInMarketplace`);
            }
            if (!this._subscriptionTreeItems) {
              yield this.getCachedChildren(context);
            }
            return (0, vscode_azext_utils_1.nonNullValue)(this._subscriptionTreeItems, "subscriptionTreeItems");
          });
        }
      };
      __name(AzureAccountTreeItemBase2, "AzureAccountTreeItemBase");
      exports.AzureAccountTreeItemBase = AzureAccountTreeItemBase2;
      AzureAccountTreeItemBase2.contextValue = "azureextensionui.azureAccount";
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/createPortalUri.js
  var require_createPortalUri = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/createPortalUri.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createPortalUri = void 0;
      var vscode23 = __require("vscode");
      function createPortalUri(subscription, id, options) {
        const queryPrefix = options && options.queryPrefix ? `?${options.queryPrefix}` : "";
        const url = `${subscription.environment.portalUrl}/${queryPrefix}#@${subscription.tenantId}/resource${id}`;
        return vscode23.Uri.parse(url);
      }
      __name(createPortalUri, "createPortalUri");
      exports.createPortalUri = createPortalUri;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/parseAzureResourceId.js
  var require_parseAzureResourceId = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/parseAzureResourceId.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getResourceGroupFromId = exports.parseAzureResourceId = void 0;
      var localize_1 = require_localize2();
      function parseAzureResourceId(id) {
        const matches = id.match(/\/subscriptions\/(.*)\/resourceGroups\/(.*)\/providers\/(.*)\/(.*)/i);
        if (matches === null || matches.length < 3) {
          throw new Error((0, localize_1.localize)("InvalidResourceId", "Invalid Azure Resource Id"));
        }
        return {
          rawId: id,
          subscriptionId: matches[1],
          resourceGroup: matches[2],
          provider: matches[3],
          resourceName: matches[4]
        };
      }
      __name(parseAzureResourceId, "parseAzureResourceId");
      exports.parseAzureResourceId = parseAzureResourceId;
      function getResourceGroupFromId3(id) {
        return parseAzureResourceId(id).resourceGroup;
      }
      __name(getResourceGroupFromId3, "getResourceGroupFromId");
      exports.getResourceGroupFromId = getResourceGroupFromId3;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/uiUtils.js
  var require_uiUtils = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/uiUtils.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      var __asyncValues7 = exports && exports.__asyncValues || function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        __name(verb, "verb");
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
        __name(settle, "settle");
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.uiUtils = void 0;
      var uiUtils6;
      (function(uiUtils7) {
        function listAll(client, first) {
          return __awaiter6(this, void 0, void 0, function* () {
            const all = [];
            let list = yield first;
            all.push(...list);
            while (list.nextLink) {
              list = yield client.listNext(list.nextLink);
              all.push(...list);
            }
            return all;
          });
        }
        __name(listAll, "listAll");
        uiUtils7.listAll = listAll;
        function listAllIterator(iterator) {
          var _a7, iterator_1, iterator_1_1;
          var _b2, e_1, _c2, _d;
          return __awaiter6(this, void 0, void 0, function* () {
            const resources = [];
            try {
              for (_a7 = true, iterator_1 = __asyncValues7(iterator); iterator_1_1 = yield iterator_1.next(), _b2 = iterator_1_1.done, !_b2; ) {
                _d = iterator_1_1.value;
                _a7 = false;
                try {
                  const r = _d;
                  resources.push(r);
                } finally {
                  _a7 = true;
                }
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (!_a7 && !_b2 && (_c2 = iterator_1.return))
                  yield _c2.call(iterator_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
            return resources;
          });
        }
        __name(listAllIterator, "listAllIterator");
        uiUtils7.listAllIterator = listAllIterator;
      })(uiUtils6 = exports.uiUtils || (exports.uiUtils = {}));
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/index.js
  var KnownSkuName, KnownKind, KnownReasonCode, KnownKeyType, KnownKeySource, KnownBypass, KnownDirectoryServiceOptions, KnownLargeFileSharesState, KnownRoutingChoice, KnownMinimumTlsVersion, KnownGeoReplicationStatus, KnownPrivateEndpointServiceConnectionStatus, KnownPrivateEndpointConnectionProvisioningState, KnownBlobRestoreProgressStatus, KnownServices, KnownSignedResourceTypes, KnownPermissions, KnownSignedResource, KnownManagementPolicyName, KnownRuleType, KnownBlobInventoryPolicyName, KnownInventoryRuleType, KnownCreatedByType, KnownEncryptionScopeSource, KnownEncryptionScopeState;
  var init_models = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/index.js"() {
      (function(KnownSkuName3) {
        KnownSkuName3["StandardLRS"] = "Standard_LRS";
        KnownSkuName3["StandardGRS"] = "Standard_GRS";
        KnownSkuName3["StandardRagrs"] = "Standard_RAGRS";
        KnownSkuName3["StandardZRS"] = "Standard_ZRS";
        KnownSkuName3["PremiumLRS"] = "Premium_LRS";
        KnownSkuName3["PremiumZRS"] = "Premium_ZRS";
        KnownSkuName3["StandardGzrs"] = "Standard_GZRS";
        KnownSkuName3["StandardRagzrs"] = "Standard_RAGZRS";
      })(KnownSkuName || (KnownSkuName = {}));
      (function(KnownKind3) {
        KnownKind3["Storage"] = "Storage";
        KnownKind3["StorageV2"] = "StorageV2";
        KnownKind3["BlobStorage"] = "BlobStorage";
        KnownKind3["FileStorage"] = "FileStorage";
        KnownKind3["BlockBlobStorage"] = "BlockBlobStorage";
      })(KnownKind || (KnownKind = {}));
      (function(KnownReasonCode3) {
        KnownReasonCode3["QuotaId"] = "QuotaId";
        KnownReasonCode3["NotAvailableForSubscription"] = "NotAvailableForSubscription";
      })(KnownReasonCode || (KnownReasonCode = {}));
      (function(KnownKeyType3) {
        KnownKeyType3["Service"] = "Service";
        KnownKeyType3["Account"] = "Account";
      })(KnownKeyType || (KnownKeyType = {}));
      (function(KnownKeySource3) {
        KnownKeySource3["MicrosoftStorage"] = "Microsoft.Storage";
        KnownKeySource3["MicrosoftKeyvault"] = "Microsoft.Keyvault";
      })(KnownKeySource || (KnownKeySource = {}));
      (function(KnownBypass3) {
        KnownBypass3["None"] = "None";
        KnownBypass3["Logging"] = "Logging";
        KnownBypass3["Metrics"] = "Metrics";
        KnownBypass3["AzureServices"] = "AzureServices";
      })(KnownBypass || (KnownBypass = {}));
      (function(KnownDirectoryServiceOptions3) {
        KnownDirectoryServiceOptions3["None"] = "None";
        KnownDirectoryServiceOptions3["Aadds"] = "AADDS";
        KnownDirectoryServiceOptions3["AD"] = "AD";
      })(KnownDirectoryServiceOptions || (KnownDirectoryServiceOptions = {}));
      (function(KnownLargeFileSharesState3) {
        KnownLargeFileSharesState3["Disabled"] = "Disabled";
        KnownLargeFileSharesState3["Enabled"] = "Enabled";
      })(KnownLargeFileSharesState || (KnownLargeFileSharesState = {}));
      (function(KnownRoutingChoice3) {
        KnownRoutingChoice3["MicrosoftRouting"] = "MicrosoftRouting";
        KnownRoutingChoice3["InternetRouting"] = "InternetRouting";
      })(KnownRoutingChoice || (KnownRoutingChoice = {}));
      (function(KnownMinimumTlsVersion3) {
        KnownMinimumTlsVersion3["TLS10"] = "TLS1_0";
        KnownMinimumTlsVersion3["TLS11"] = "TLS1_1";
        KnownMinimumTlsVersion3["TLS12"] = "TLS1_2";
      })(KnownMinimumTlsVersion || (KnownMinimumTlsVersion = {}));
      (function(KnownGeoReplicationStatus3) {
        KnownGeoReplicationStatus3["Live"] = "Live";
        KnownGeoReplicationStatus3["Bootstrap"] = "Bootstrap";
        KnownGeoReplicationStatus3["Unavailable"] = "Unavailable";
      })(KnownGeoReplicationStatus || (KnownGeoReplicationStatus = {}));
      (function(KnownPrivateEndpointServiceConnectionStatus3) {
        KnownPrivateEndpointServiceConnectionStatus3["Pending"] = "Pending";
        KnownPrivateEndpointServiceConnectionStatus3["Approved"] = "Approved";
        KnownPrivateEndpointServiceConnectionStatus3["Rejected"] = "Rejected";
      })(KnownPrivateEndpointServiceConnectionStatus || (KnownPrivateEndpointServiceConnectionStatus = {}));
      (function(KnownPrivateEndpointConnectionProvisioningState3) {
        KnownPrivateEndpointConnectionProvisioningState3["Succeeded"] = "Succeeded";
        KnownPrivateEndpointConnectionProvisioningState3["Creating"] = "Creating";
        KnownPrivateEndpointConnectionProvisioningState3["Deleting"] = "Deleting";
        KnownPrivateEndpointConnectionProvisioningState3["Failed"] = "Failed";
      })(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
      (function(KnownBlobRestoreProgressStatus3) {
        KnownBlobRestoreProgressStatus3["InProgress"] = "InProgress";
        KnownBlobRestoreProgressStatus3["Complete"] = "Complete";
        KnownBlobRestoreProgressStatus3["Failed"] = "Failed";
      })(KnownBlobRestoreProgressStatus || (KnownBlobRestoreProgressStatus = {}));
      (function(KnownServices3) {
        KnownServices3["B"] = "b";
        KnownServices3["Q"] = "q";
        KnownServices3["T"] = "t";
        KnownServices3["F"] = "f";
      })(KnownServices || (KnownServices = {}));
      (function(KnownSignedResourceTypes3) {
        KnownSignedResourceTypes3["S"] = "s";
        KnownSignedResourceTypes3["C"] = "c";
        KnownSignedResourceTypes3["O"] = "o";
      })(KnownSignedResourceTypes || (KnownSignedResourceTypes = {}));
      (function(KnownPermissions3) {
        KnownPermissions3["R"] = "r";
        KnownPermissions3["D"] = "d";
        KnownPermissions3["W"] = "w";
        KnownPermissions3["L"] = "l";
        KnownPermissions3["A"] = "a";
        KnownPermissions3["C"] = "c";
        KnownPermissions3["U"] = "u";
        KnownPermissions3["P"] = "p";
      })(KnownPermissions || (KnownPermissions = {}));
      (function(KnownSignedResource3) {
        KnownSignedResource3["B"] = "b";
        KnownSignedResource3["C"] = "c";
        KnownSignedResource3["F"] = "f";
        KnownSignedResource3["S"] = "s";
      })(KnownSignedResource || (KnownSignedResource = {}));
      (function(KnownManagementPolicyName3) {
        KnownManagementPolicyName3["Default"] = "default";
      })(KnownManagementPolicyName || (KnownManagementPolicyName = {}));
      (function(KnownRuleType3) {
        KnownRuleType3["Lifecycle"] = "Lifecycle";
      })(KnownRuleType || (KnownRuleType = {}));
      (function(KnownBlobInventoryPolicyName3) {
        KnownBlobInventoryPolicyName3["Default"] = "default";
      })(KnownBlobInventoryPolicyName || (KnownBlobInventoryPolicyName = {}));
      (function(KnownInventoryRuleType3) {
        KnownInventoryRuleType3["Inventory"] = "Inventory";
      })(KnownInventoryRuleType || (KnownInventoryRuleType = {}));
      (function(KnownCreatedByType3) {
        KnownCreatedByType3["User"] = "User";
        KnownCreatedByType3["Application"] = "Application";
        KnownCreatedByType3["ManagedIdentity"] = "ManagedIdentity";
        KnownCreatedByType3["Key"] = "Key";
      })(KnownCreatedByType || (KnownCreatedByType = {}));
      (function(KnownEncryptionScopeSource3) {
        KnownEncryptionScopeSource3["MicrosoftStorage"] = "Microsoft.Storage";
        KnownEncryptionScopeSource3["MicrosoftKeyVault"] = "Microsoft.KeyVault";
      })(KnownEncryptionScopeSource || (KnownEncryptionScopeSource = {}));
      (function(KnownEncryptionScopeState3) {
        KnownEncryptionScopeState3["Enabled"] = "Enabled";
        KnownEncryptionScopeState3["Disabled"] = "Disabled";
      })(KnownEncryptionScopeState || (KnownEncryptionScopeState = {}));
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/node_modules/tslib/tslib.es6.js
  function __rest(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    __name(adopt, "adopt");
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      __name(fulfilled, "fulfilled");
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      __name(rejected, "rejected");
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      __name(step, "step");
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  var init_tslib_es62 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/node_modules/tslib/tslib.es6.js"() {
      __name(__rest, "__rest");
      __name(__awaiter, "__awaiter");
      __name(__values2, "__values");
      __name(__await, "__await");
      __name(__asyncGenerator, "__asyncGenerator");
      __name(__asyncDelegator, "__asyncDelegator");
      __name(__asyncValues, "__asyncValues");
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/mappers.js
  var mappers_exports = {};
  __export(mappers_exports, {
    AccountSasParameters: () => AccountSasParameters,
    ActiveDirectoryProperties: () => ActiveDirectoryProperties,
    AzureFilesIdentityBasedAuthentication: () => AzureFilesIdentityBasedAuthentication,
    BlobInventoryPolicy: () => BlobInventoryPolicy,
    BlobInventoryPolicyDefinition: () => BlobInventoryPolicyDefinition,
    BlobInventoryPolicyFilter: () => BlobInventoryPolicyFilter,
    BlobInventoryPolicyRule: () => BlobInventoryPolicyRule,
    BlobInventoryPolicySchema: () => BlobInventoryPolicySchema,
    BlobRestoreParameters: () => BlobRestoreParameters,
    BlobRestoreRange: () => BlobRestoreRange,
    BlobRestoreStatus: () => BlobRestoreStatus,
    CheckNameAvailabilityResult: () => CheckNameAvailabilityResult,
    CustomDomain: () => CustomDomain,
    DateAfterCreation: () => DateAfterCreation,
    DateAfterModification: () => DateAfterModification,
    Dimension: () => Dimension,
    Encryption: () => Encryption,
    EncryptionScope: () => EncryptionScope,
    EncryptionScopeKeyVaultProperties: () => EncryptionScopeKeyVaultProperties,
    EncryptionScopeListResult: () => EncryptionScopeListResult,
    EncryptionService: () => EncryptionService,
    EncryptionServices: () => EncryptionServices,
    Endpoints: () => Endpoints,
    ErrorResponse: () => ErrorResponse,
    ErrorResponseBody: () => ErrorResponseBody,
    GeoReplicationStats: () => GeoReplicationStats,
    IPRule: () => IPRule,
    Identity: () => Identity,
    KeyVaultProperties: () => KeyVaultProperties,
    ListAccountSasResponse: () => ListAccountSasResponse,
    ListBlobInventoryPolicy: () => ListBlobInventoryPolicy,
    ListServiceSasResponse: () => ListServiceSasResponse,
    ManagementPolicy: () => ManagementPolicy,
    ManagementPolicyAction: () => ManagementPolicyAction,
    ManagementPolicyBaseBlob: () => ManagementPolicyBaseBlob,
    ManagementPolicyDefinition: () => ManagementPolicyDefinition,
    ManagementPolicyFilter: () => ManagementPolicyFilter,
    ManagementPolicyRule: () => ManagementPolicyRule,
    ManagementPolicySchema: () => ManagementPolicySchema,
    ManagementPolicySnapShot: () => ManagementPolicySnapShot,
    ManagementPolicyVersion: () => ManagementPolicyVersion,
    MetricSpecification: () => MetricSpecification,
    NetworkRuleSet: () => NetworkRuleSet,
    ObjectReplicationPolicies: () => ObjectReplicationPolicies,
    ObjectReplicationPolicy: () => ObjectReplicationPolicy,
    ObjectReplicationPolicyFilter: () => ObjectReplicationPolicyFilter,
    ObjectReplicationPolicyRule: () => ObjectReplicationPolicyRule,
    Operation: () => Operation,
    OperationDisplay: () => OperationDisplay,
    OperationListResult: () => OperationListResult,
    PrivateEndpoint: () => PrivateEndpoint,
    PrivateEndpointConnection: () => PrivateEndpointConnection,
    PrivateEndpointConnectionListResult: () => PrivateEndpointConnectionListResult,
    PrivateLinkResource: () => PrivateLinkResource,
    PrivateLinkResourceListResult: () => PrivateLinkResourceListResult,
    PrivateLinkServiceConnectionState: () => PrivateLinkServiceConnectionState,
    Resource: () => Resource,
    Restriction: () => Restriction,
    RoutingPreference: () => RoutingPreference,
    SKUCapability: () => SKUCapability,
    ServiceSasParameters: () => ServiceSasParameters,
    ServiceSpecification: () => ServiceSpecification,
    Sku: () => Sku,
    SkuInformation: () => SkuInformation,
    StorageAccount: () => StorageAccount,
    StorageAccountCheckNameAvailabilityParameters: () => StorageAccountCheckNameAvailabilityParameters,
    StorageAccountCreateParameters: () => StorageAccountCreateParameters,
    StorageAccountInternetEndpoints: () => StorageAccountInternetEndpoints,
    StorageAccountKey: () => StorageAccountKey,
    StorageAccountListKeysResult: () => StorageAccountListKeysResult,
    StorageAccountListResult: () => StorageAccountListResult,
    StorageAccountMicrosoftEndpoints: () => StorageAccountMicrosoftEndpoints,
    StorageAccountRegenerateKeyParameters: () => StorageAccountRegenerateKeyParameters,
    StorageAccountUpdateParameters: () => StorageAccountUpdateParameters,
    StorageSkuListResult: () => StorageSkuListResult,
    SystemData: () => SystemData,
    TagFilter: () => TagFilter,
    TrackedResource: () => TrackedResource,
    Usage: () => Usage,
    UsageListResult: () => UsageListResult,
    UsageName: () => UsageName,
    VirtualNetworkRule: () => VirtualNetworkRule
  });
  var OperationListResult, Operation, OperationDisplay, ServiceSpecification, MetricSpecification, Dimension, StorageSkuListResult, SkuInformation, SKUCapability, Restriction, StorageAccountCheckNameAvailabilityParameters, CheckNameAvailabilityResult, StorageAccountCreateParameters, Sku, Identity, CustomDomain, Encryption, EncryptionServices, EncryptionService, KeyVaultProperties, NetworkRuleSet, VirtualNetworkRule, IPRule, AzureFilesIdentityBasedAuthentication, ActiveDirectoryProperties, RoutingPreference, Endpoints, StorageAccountMicrosoftEndpoints, StorageAccountInternetEndpoints, GeoReplicationStats, PrivateEndpoint, PrivateLinkServiceConnectionState, Resource, BlobRestoreStatus, BlobRestoreParameters, BlobRestoreRange, StorageAccountUpdateParameters, StorageAccountListResult, StorageAccountListKeysResult, StorageAccountKey, StorageAccountRegenerateKeyParameters, UsageListResult, Usage, UsageName, AccountSasParameters, ListAccountSasResponse, ServiceSasParameters, ListServiceSasResponse, ManagementPolicySchema, ManagementPolicyRule, ManagementPolicyDefinition, ManagementPolicyAction, ManagementPolicyBaseBlob, DateAfterModification, ManagementPolicySnapShot, DateAfterCreation, ManagementPolicyVersion, ManagementPolicyFilter, TagFilter, BlobInventoryPolicySchema, BlobInventoryPolicyRule, BlobInventoryPolicyDefinition, BlobInventoryPolicyFilter, SystemData, ErrorResponse, ErrorResponseBody, ListBlobInventoryPolicy, PrivateEndpointConnectionListResult, PrivateLinkResourceListResult, ObjectReplicationPolicies, ObjectReplicationPolicyRule, ObjectReplicationPolicyFilter, EncryptionScopeKeyVaultProperties, EncryptionScopeListResult, PrivateEndpointConnection, TrackedResource, ManagementPolicy, BlobInventoryPolicy, PrivateLinkResource, ObjectReplicationPolicy, EncryptionScope, StorageAccount;
  var init_mappers = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/mappers.js"() {
      OperationListResult = {
        type: {
          name: "Composite",
          className: "OperationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Operation"
                  }
                }
              }
            }
          }
        }
      };
      Operation = {
        type: {
          name: "Composite",
          className: "Operation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            display: {
              serializedName: "display",
              type: {
                name: "Composite",
                className: "OperationDisplay"
              }
            },
            origin: {
              serializedName: "origin",
              type: {
                name: "String"
              }
            },
            serviceSpecification: {
              serializedName: "properties.serviceSpecification",
              type: {
                name: "Composite",
                className: "ServiceSpecification"
              }
            }
          }
        }
      };
      OperationDisplay = {
        type: {
          name: "Composite",
          className: "OperationDisplay",
          modelProperties: {
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ServiceSpecification = {
        type: {
          name: "Composite",
          className: "ServiceSpecification",
          modelProperties: {
            metricSpecifications: {
              serializedName: "metricSpecifications",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "MetricSpecification"
                  }
                }
              }
            }
          }
        }
      };
      MetricSpecification = {
        type: {
          name: "Composite",
          className: "MetricSpecification",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              type: {
                name: "String"
              }
            },
            displayDescription: {
              serializedName: "displayDescription",
              type: {
                name: "String"
              }
            },
            unit: {
              serializedName: "unit",
              type: {
                name: "String"
              }
            },
            dimensions: {
              serializedName: "dimensions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Dimension"
                  }
                }
              }
            },
            aggregationType: {
              serializedName: "aggregationType",
              type: {
                name: "String"
              }
            },
            fillGapWithZero: {
              serializedName: "fillGapWithZero",
              type: {
                name: "Boolean"
              }
            },
            category: {
              serializedName: "category",
              type: {
                name: "String"
              }
            },
            resourceIdDimensionNameOverride: {
              serializedName: "resourceIdDimensionNameOverride",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Dimension = {
        type: {
          name: "Composite",
          className: "Dimension",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageSkuListResult = {
        type: {
          name: "Composite",
          className: "StorageSkuListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "SkuInformation"
                  }
                }
              }
            }
          }
        }
      };
      SkuInformation = {
        type: {
          name: "Composite",
          className: "SkuInformation",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Standard", "Premium"]
              }
            },
            resourceType: {
              serializedName: "resourceType",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            kind: {
              serializedName: "kind",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            locations: {
              serializedName: "locations",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            capabilities: {
              serializedName: "capabilities",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "SKUCapability"
                  }
                }
              }
            },
            restrictions: {
              serializedName: "restrictions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Restriction"
                  }
                }
              }
            }
          }
        }
      };
      SKUCapability = {
        type: {
          name: "Composite",
          className: "SKUCapability",
          modelProperties: {
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Restriction = {
        type: {
          name: "Composite",
          className: "Restriction",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            values: {
              serializedName: "values",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            reasonCode: {
              serializedName: "reasonCode",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountCheckNameAvailabilityParameters = {
        type: {
          name: "Composite",
          className: "StorageAccountCheckNameAvailabilityParameters",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              defaultValue: "Microsoft.Storage/storageAccounts",
              isConstant: true,
              serializedName: "type",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CheckNameAvailabilityResult = {
        type: {
          name: "Composite",
          className: "CheckNameAvailabilityResult",
          modelProperties: {
            nameAvailable: {
              serializedName: "nameAvailable",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            },
            reason: {
              serializedName: "reason",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["AccountNameInvalid", "AlreadyExists"]
              }
            },
            message: {
              serializedName: "message",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountCreateParameters = {
        type: {
          name: "Composite",
          className: "StorageAccountCreateParameters",
          modelProperties: {
            sku: {
              serializedName: "sku",
              type: {
                name: "Composite",
                className: "Sku"
              }
            },
            kind: {
              serializedName: "kind",
              required: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            },
            identity: {
              serializedName: "identity",
              type: {
                name: "Composite",
                className: "Identity"
              }
            },
            customDomain: {
              serializedName: "properties.customDomain",
              type: {
                name: "Composite",
                className: "CustomDomain"
              }
            },
            encryption: {
              serializedName: "properties.encryption",
              type: {
                name: "Composite",
                className: "Encryption"
              }
            },
            networkRuleSet: {
              serializedName: "properties.networkAcls",
              type: {
                name: "Composite",
                className: "NetworkRuleSet"
              }
            },
            accessTier: {
              serializedName: "properties.accessTier",
              type: {
                name: "Enum",
                allowedValues: ["Hot", "Cool"]
              }
            },
            azureFilesIdentityBasedAuthentication: {
              serializedName: "properties.azureFilesIdentityBasedAuthentication",
              type: {
                name: "Composite",
                className: "AzureFilesIdentityBasedAuthentication"
              }
            },
            enableHttpsTrafficOnly: {
              serializedName: "properties.supportsHttpsTrafficOnly",
              type: {
                name: "Boolean"
              }
            },
            isHnsEnabled: {
              serializedName: "properties.isHnsEnabled",
              type: {
                name: "Boolean"
              }
            },
            largeFileSharesState: {
              serializedName: "properties.largeFileSharesState",
              type: {
                name: "String"
              }
            },
            routingPreference: {
              serializedName: "properties.routingPreference",
              type: {
                name: "Composite",
                className: "RoutingPreference"
              }
            },
            allowBlobPublicAccess: {
              serializedName: "properties.allowBlobPublicAccess",
              type: {
                name: "Boolean"
              }
            },
            minimumTlsVersion: {
              serializedName: "properties.minimumTlsVersion",
              type: {
                name: "String"
              }
            },
            allowSharedKeyAccess: {
              serializedName: "properties.allowSharedKeyAccess",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      Sku = {
        type: {
          name: "Composite",
          className: "Sku",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Standard", "Premium"]
              }
            }
          }
        }
      };
      Identity = {
        type: {
          name: "Composite",
          className: "Identity",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              defaultValue: "SystemAssigned",
              isConstant: true,
              serializedName: "type",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CustomDomain = {
        type: {
          name: "Composite",
          className: "CustomDomain",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            useSubDomainName: {
              serializedName: "useSubDomainName",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      Encryption = {
        type: {
          name: "Composite",
          className: "Encryption",
          modelProperties: {
            services: {
              serializedName: "services",
              type: {
                name: "Composite",
                className: "EncryptionServices"
              }
            },
            keySource: {
              defaultValue: "Microsoft.Storage",
              serializedName: "keySource",
              required: true,
              type: {
                name: "String"
              }
            },
            requireInfrastructureEncryption: {
              serializedName: "requireInfrastructureEncryption",
              type: {
                name: "Boolean"
              }
            },
            keyVaultProperties: {
              serializedName: "keyvaultproperties",
              type: {
                name: "Composite",
                className: "KeyVaultProperties"
              }
            }
          }
        }
      };
      EncryptionServices = {
        type: {
          name: "Composite",
          className: "EncryptionServices",
          modelProperties: {
            blob: {
              serializedName: "blob",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            file: {
              serializedName: "file",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            table: {
              serializedName: "table",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            queue: {
              serializedName: "queue",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            }
          }
        }
      };
      EncryptionService = {
        type: {
          name: "Composite",
          className: "EncryptionService",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            lastEnabledTime: {
              serializedName: "lastEnabledTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            keyType: {
              serializedName: "keyType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      KeyVaultProperties = {
        type: {
          name: "Composite",
          className: "KeyVaultProperties",
          modelProperties: {
            keyName: {
              serializedName: "keyname",
              type: {
                name: "String"
              }
            },
            keyVersion: {
              serializedName: "keyversion",
              type: {
                name: "String"
              }
            },
            keyVaultUri: {
              serializedName: "keyvaulturi",
              type: {
                name: "String"
              }
            },
            currentVersionedKeyIdentifier: {
              serializedName: "currentVersionedKeyIdentifier",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            lastKeyRotationTimestamp: {
              serializedName: "lastKeyRotationTimestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      NetworkRuleSet = {
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
          modelProperties: {
            bypass: {
              defaultValue: "AzureServices",
              serializedName: "bypass",
              type: {
                name: "String"
              }
            },
            virtualNetworkRules: {
              serializedName: "virtualNetworkRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "VirtualNetworkRule"
                  }
                }
              }
            },
            ipRules: {
              serializedName: "ipRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "IPRule"
                  }
                }
              }
            },
            defaultAction: {
              defaultValue: "Allow",
              serializedName: "defaultAction",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Allow", "Deny"]
              }
            }
          }
        }
      };
      VirtualNetworkRule = {
        type: {
          name: "Composite",
          className: "VirtualNetworkRule",
          modelProperties: {
            virtualNetworkResourceId: {
              serializedName: "id",
              required: true,
              type: {
                name: "String"
              }
            },
            action: {
              defaultValue: "Allow",
              isConstant: true,
              serializedName: "action",
              type: {
                name: "String"
              }
            },
            state: {
              serializedName: "state",
              type: {
                name: "Enum",
                allowedValues: [
                  "provisioning",
                  "deprovisioning",
                  "succeeded",
                  "failed",
                  "networkSourceDeleted"
                ]
              }
            }
          }
        }
      };
      IPRule = {
        type: {
          name: "Composite",
          className: "IPRule",
          modelProperties: {
            iPAddressOrRange: {
              serializedName: "value",
              required: true,
              type: {
                name: "String"
              }
            },
            action: {
              defaultValue: "Allow",
              isConstant: true,
              serializedName: "action",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      AzureFilesIdentityBasedAuthentication = {
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication",
          modelProperties: {
            directoryServiceOptions: {
              serializedName: "directoryServiceOptions",
              required: true,
              type: {
                name: "String"
              }
            },
            activeDirectoryProperties: {
              serializedName: "activeDirectoryProperties",
              type: {
                name: "Composite",
                className: "ActiveDirectoryProperties"
              }
            }
          }
        }
      };
      ActiveDirectoryProperties = {
        type: {
          name: "Composite",
          className: "ActiveDirectoryProperties",
          modelProperties: {
            domainName: {
              serializedName: "domainName",
              required: true,
              type: {
                name: "String"
              }
            },
            netBiosDomainName: {
              serializedName: "netBiosDomainName",
              required: true,
              type: {
                name: "String"
              }
            },
            forestName: {
              serializedName: "forestName",
              required: true,
              type: {
                name: "String"
              }
            },
            domainGuid: {
              serializedName: "domainGuid",
              required: true,
              type: {
                name: "String"
              }
            },
            domainSid: {
              serializedName: "domainSid",
              required: true,
              type: {
                name: "String"
              }
            },
            azureStorageSid: {
              serializedName: "azureStorageSid",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      RoutingPreference = {
        type: {
          name: "Composite",
          className: "RoutingPreference",
          modelProperties: {
            routingChoice: {
              serializedName: "routingChoice",
              type: {
                name: "String"
              }
            },
            publishMicrosoftEndpoints: {
              serializedName: "publishMicrosoftEndpoints",
              type: {
                name: "Boolean"
              }
            },
            publishInternetEndpoints: {
              serializedName: "publishInternetEndpoints",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      Endpoints = {
        type: {
          name: "Composite",
          className: "Endpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            queue: {
              serializedName: "queue",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            table: {
              serializedName: "table",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            microsoftEndpoints: {
              serializedName: "microsoftEndpoints",
              type: {
                name: "Composite",
                className: "StorageAccountMicrosoftEndpoints"
              }
            },
            internetEndpoints: {
              serializedName: "internetEndpoints",
              type: {
                name: "Composite",
                className: "StorageAccountInternetEndpoints"
              }
            }
          }
        }
      };
      StorageAccountMicrosoftEndpoints = {
        type: {
          name: "Composite",
          className: "StorageAccountMicrosoftEndpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            queue: {
              serializedName: "queue",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            table: {
              serializedName: "table",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountInternetEndpoints = {
        type: {
          name: "Composite",
          className: "StorageAccountInternetEndpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      GeoReplicationStats = {
        type: {
          name: "Composite",
          className: "GeoReplicationStats",
          modelProperties: {
            status: {
              serializedName: "status",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            lastSyncTime: {
              serializedName: "lastSyncTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            canFailover: {
              serializedName: "canFailover",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      PrivateEndpoint = {
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      PrivateLinkServiceConnectionState = {
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
          modelProperties: {
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            },
            actionRequired: {
              serializedName: "actionRequired",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Resource = {
        type: {
          name: "Composite",
          className: "Resource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobRestoreStatus = {
        type: {
          name: "Composite",
          className: "BlobRestoreStatus",
          modelProperties: {
            status: {
              serializedName: "status",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            failureReason: {
              serializedName: "failureReason",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            restoreId: {
              serializedName: "restoreId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            parameters: {
              serializedName: "parameters",
              type: {
                name: "Composite",
                className: "BlobRestoreParameters"
              }
            }
          }
        }
      };
      BlobRestoreParameters = {
        type: {
          name: "Composite",
          className: "BlobRestoreParameters",
          modelProperties: {
            timeToRestore: {
              serializedName: "timeToRestore",
              required: true,
              type: {
                name: "DateTime"
              }
            },
            blobRanges: {
              serializedName: "blobRanges",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobRestoreRange"
                  }
                }
              }
            }
          }
        }
      };
      BlobRestoreRange = {
        type: {
          name: "Composite",
          className: "BlobRestoreRange",
          modelProperties: {
            startRange: {
              serializedName: "startRange",
              required: true,
              type: {
                name: "String"
              }
            },
            endRange: {
              serializedName: "endRange",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountUpdateParameters = {
        type: {
          name: "Composite",
          className: "StorageAccountUpdateParameters",
          modelProperties: {
            sku: {
              serializedName: "sku",
              type: {
                name: "Composite",
                className: "Sku"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            },
            identity: {
              serializedName: "identity",
              type: {
                name: "Composite",
                className: "Identity"
              }
            },
            kind: {
              serializedName: "kind",
              type: {
                name: "String"
              }
            },
            customDomain: {
              serializedName: "properties.customDomain",
              type: {
                name: "Composite",
                className: "CustomDomain"
              }
            },
            encryption: {
              serializedName: "properties.encryption",
              type: {
                name: "Composite",
                className: "Encryption"
              }
            },
            accessTier: {
              serializedName: "properties.accessTier",
              type: {
                name: "Enum",
                allowedValues: ["Hot", "Cool"]
              }
            },
            azureFilesIdentityBasedAuthentication: {
              serializedName: "properties.azureFilesIdentityBasedAuthentication",
              type: {
                name: "Composite",
                className: "AzureFilesIdentityBasedAuthentication"
              }
            },
            enableHttpsTrafficOnly: {
              serializedName: "properties.supportsHttpsTrafficOnly",
              type: {
                name: "Boolean"
              }
            },
            networkRuleSet: {
              serializedName: "properties.networkAcls",
              type: {
                name: "Composite",
                className: "NetworkRuleSet"
              }
            },
            largeFileSharesState: {
              serializedName: "properties.largeFileSharesState",
              type: {
                name: "String"
              }
            },
            routingPreference: {
              serializedName: "properties.routingPreference",
              type: {
                name: "Composite",
                className: "RoutingPreference"
              }
            },
            allowBlobPublicAccess: {
              serializedName: "properties.allowBlobPublicAccess",
              type: {
                name: "Boolean"
              }
            },
            minimumTlsVersion: {
              serializedName: "properties.minimumTlsVersion",
              type: {
                name: "String"
              }
            },
            allowSharedKeyAccess: {
              serializedName: "properties.allowSharedKeyAccess",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      StorageAccountListResult = {
        type: {
          name: "Composite",
          className: "StorageAccountListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "StorageAccount"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountListKeysResult = {
        type: {
          name: "Composite",
          className: "StorageAccountListKeysResult",
          modelProperties: {
            keys: {
              serializedName: "keys",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "StorageAccountKey"
                  }
                }
              }
            }
          }
        }
      };
      StorageAccountKey = {
        type: {
          name: "Composite",
          className: "StorageAccountKey",
          modelProperties: {
            keyName: {
              serializedName: "keyName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "permissions",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Read", "Full"]
              }
            }
          }
        }
      };
      StorageAccountRegenerateKeyParameters = {
        type: {
          name: "Composite",
          className: "StorageAccountRegenerateKeyParameters",
          modelProperties: {
            keyName: {
              serializedName: "keyName",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      UsageListResult = {
        type: {
          name: "Composite",
          className: "UsageListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Usage"
                  }
                }
              }
            }
          }
        }
      };
      Usage = {
        type: {
          name: "Composite",
          className: "Usage",
          modelProperties: {
            unit: {
              serializedName: "unit",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "Count",
                  "Bytes",
                  "Seconds",
                  "Percent",
                  "CountsPerSecond",
                  "BytesPerSecond"
                ]
              }
            },
            currentValue: {
              serializedName: "currentValue",
              readOnly: true,
              type: {
                name: "Number"
              }
            },
            limit: {
              serializedName: "limit",
              readOnly: true,
              type: {
                name: "Number"
              }
            },
            name: {
              serializedName: "name",
              type: {
                name: "Composite",
                className: "UsageName"
              }
            }
          }
        }
      };
      UsageName = {
        type: {
          name: "Composite",
          className: "UsageName",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            localizedValue: {
              serializedName: "localizedValue",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      AccountSasParameters = {
        type: {
          name: "Composite",
          className: "AccountSasParameters",
          modelProperties: {
            services: {
              serializedName: "signedServices",
              required: true,
              type: {
                name: "String"
              }
            },
            resourceTypes: {
              serializedName: "signedResourceTypes",
              required: true,
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "signedPermission",
              required: true,
              type: {
                name: "String"
              }
            },
            iPAddressOrRange: {
              serializedName: "signedIp",
              type: {
                name: "String"
              }
            },
            protocols: {
              serializedName: "signedProtocol",
              type: {
                name: "Enum",
                allowedValues: ["https,http", "https"]
              }
            },
            sharedAccessStartTime: {
              serializedName: "signedStart",
              type: {
                name: "DateTime"
              }
            },
            sharedAccessExpiryTime: {
              serializedName: "signedExpiry",
              required: true,
              type: {
                name: "DateTime"
              }
            },
            keyToSign: {
              serializedName: "keyToSign",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListAccountSasResponse = {
        type: {
          name: "Composite",
          className: "ListAccountSasResponse",
          modelProperties: {
            accountSasToken: {
              serializedName: "accountSasToken",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ServiceSasParameters = {
        type: {
          name: "Composite",
          className: "ServiceSasParameters",
          modelProperties: {
            canonicalizedResource: {
              serializedName: "canonicalizedResource",
              required: true,
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "signedResource",
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "signedPermission",
              type: {
                name: "String"
              }
            },
            iPAddressOrRange: {
              serializedName: "signedIp",
              type: {
                name: "String"
              }
            },
            protocols: {
              serializedName: "signedProtocol",
              type: {
                name: "Enum",
                allowedValues: ["https,http", "https"]
              }
            },
            sharedAccessStartTime: {
              serializedName: "signedStart",
              type: {
                name: "DateTime"
              }
            },
            sharedAccessExpiryTime: {
              serializedName: "signedExpiry",
              type: {
                name: "DateTime"
              }
            },
            identifier: {
              constraints: {
                MaxLength: 64
              },
              serializedName: "signedIdentifier",
              type: {
                name: "String"
              }
            },
            partitionKeyStart: {
              serializedName: "startPk",
              type: {
                name: "String"
              }
            },
            partitionKeyEnd: {
              serializedName: "endPk",
              type: {
                name: "String"
              }
            },
            rowKeyStart: {
              serializedName: "startRk",
              type: {
                name: "String"
              }
            },
            rowKeyEnd: {
              serializedName: "endRk",
              type: {
                name: "String"
              }
            },
            keyToSign: {
              serializedName: "keyToSign",
              type: {
                name: "String"
              }
            },
            cacheControl: {
              serializedName: "rscc",
              type: {
                name: "String"
              }
            },
            contentDisposition: {
              serializedName: "rscd",
              type: {
                name: "String"
              }
            },
            contentEncoding: {
              serializedName: "rsce",
              type: {
                name: "String"
              }
            },
            contentLanguage: {
              serializedName: "rscl",
              type: {
                name: "String"
              }
            },
            contentType: {
              serializedName: "rsct",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListServiceSasResponse = {
        type: {
          name: "Composite",
          className: "ListServiceSasResponse",
          modelProperties: {
            serviceSasToken: {
              serializedName: "serviceSasToken",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ManagementPolicySchema = {
        type: {
          name: "Composite",
          className: "ManagementPolicySchema",
          modelProperties: {
            rules: {
              serializedName: "rules",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ManagementPolicyRule"
                  }
                }
              }
            }
          }
        }
      };
      ManagementPolicyRule = {
        type: {
          name: "Composite",
          className: "ManagementPolicyRule",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            },
            definition: {
              serializedName: "definition",
              type: {
                name: "Composite",
                className: "ManagementPolicyDefinition"
              }
            }
          }
        }
      };
      ManagementPolicyDefinition = {
        type: {
          name: "Composite",
          className: "ManagementPolicyDefinition",
          modelProperties: {
            actions: {
              serializedName: "actions",
              type: {
                name: "Composite",
                className: "ManagementPolicyAction"
              }
            },
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "ManagementPolicyFilter"
              }
            }
          }
        }
      };
      ManagementPolicyAction = {
        type: {
          name: "Composite",
          className: "ManagementPolicyAction",
          modelProperties: {
            baseBlob: {
              serializedName: "baseBlob",
              type: {
                name: "Composite",
                className: "ManagementPolicyBaseBlob"
              }
            },
            snapshot: {
              serializedName: "snapshot",
              type: {
                name: "Composite",
                className: "ManagementPolicySnapShot"
              }
            },
            version: {
              serializedName: "version",
              type: {
                name: "Composite",
                className: "ManagementPolicyVersion"
              }
            }
          }
        }
      };
      ManagementPolicyBaseBlob = {
        type: {
          name: "Composite",
          className: "ManagementPolicyBaseBlob",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            enableAutoTierToHotFromCool: {
              serializedName: "enableAutoTierToHotFromCool",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      DateAfterModification = {
        type: {
          name: "Composite",
          className: "DateAfterModification",
          modelProperties: {
            daysAfterModificationGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterModificationGreaterThan",
              type: {
                name: "Number"
              }
            },
            daysAfterLastAccessTimeGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterLastAccessTimeGreaterThan",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      ManagementPolicySnapShot = {
        type: {
          name: "Composite",
          className: "ManagementPolicySnapShot",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            }
          }
        }
      };
      DateAfterCreation = {
        type: {
          name: "Composite",
          className: "DateAfterCreation",
          modelProperties: {
            daysAfterCreationGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterCreationGreaterThan",
              required: true,
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      ManagementPolicyVersion = {
        type: {
          name: "Composite",
          className: "ManagementPolicyVersion",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            }
          }
        }
      };
      ManagementPolicyFilter = {
        type: {
          name: "Composite",
          className: "ManagementPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobTypes: {
              serializedName: "blobTypes",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobIndexMatch: {
              serializedName: "blobIndexMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagFilter"
                  }
                }
              }
            }
          }
        }
      };
      TagFilter = {
        type: {
          name: "Composite",
          className: "TagFilter",
          modelProperties: {
            name: {
              constraints: {
                MaxLength: 128,
                MinLength: 1
              },
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            op: {
              serializedName: "op",
              required: true,
              type: {
                name: "String"
              }
            },
            value: {
              constraints: {
                MaxLength: 256
              },
              serializedName: "value",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobInventoryPolicySchema = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicySchema",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            destination: {
              serializedName: "destination",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            },
            rules: {
              serializedName: "rules",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobInventoryPolicyRule"
                  }
                }
              }
            }
          }
        }
      };
      BlobInventoryPolicyRule = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyRule",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            definition: {
              serializedName: "definition",
              type: {
                name: "Composite",
                className: "BlobInventoryPolicyDefinition"
              }
            }
          }
        }
      };
      BlobInventoryPolicyDefinition = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyDefinition",
          modelProperties: {
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "BlobInventoryPolicyFilter"
              }
            }
          }
        }
      };
      BlobInventoryPolicyFilter = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobTypes: {
              serializedName: "blobTypes",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            includeBlobVersions: {
              serializedName: "includeBlobVersions",
              type: {
                name: "Boolean"
              }
            },
            includeSnapshots: {
              serializedName: "includeSnapshots",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      SystemData = {
        type: {
          name: "Composite",
          className: "SystemData",
          modelProperties: {
            createdBy: {
              serializedName: "createdBy",
              type: {
                name: "String"
              }
            },
            createdByType: {
              serializedName: "createdByType",
              type: {
                name: "String"
              }
            },
            createdAt: {
              serializedName: "createdAt",
              type: {
                name: "DateTime"
              }
            },
            lastModifiedBy: {
              serializedName: "lastModifiedBy",
              type: {
                name: "String"
              }
            },
            lastModifiedByType: {
              serializedName: "lastModifiedByType",
              type: {
                name: "String"
              }
            },
            lastModifiedAt: {
              serializedName: "lastModifiedAt",
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      ErrorResponse = {
        type: {
          name: "Composite",
          className: "ErrorResponse",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponseBody"
              }
            }
          }
        }
      };
      ErrorResponseBody = {
        type: {
          name: "Composite",
          className: "ErrorResponseBody",
          modelProperties: {
            code: {
              serializedName: "code",
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListBlobInventoryPolicy = {
        type: {
          name: "Composite",
          className: "ListBlobInventoryPolicy",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobInventoryPolicy"
                  }
                }
              }
            }
          }
        }
      };
      PrivateEndpointConnectionListResult = {
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "PrivateEndpointConnection"
                  }
                }
              }
            }
          }
        }
      };
      PrivateLinkResourceListResult = {
        type: {
          name: "Composite",
          className: "PrivateLinkResourceListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "PrivateLinkResource"
                  }
                }
              }
            }
          }
        }
      };
      ObjectReplicationPolicies = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicies",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ObjectReplicationPolicy"
                  }
                }
              }
            }
          }
        }
      };
      ObjectReplicationPolicyRule = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyRule",
          modelProperties: {
            ruleId: {
              serializedName: "ruleId",
              type: {
                name: "String"
              }
            },
            sourceContainer: {
              serializedName: "sourceContainer",
              required: true,
              type: {
                name: "String"
              }
            },
            destinationContainer: {
              serializedName: "destinationContainer",
              required: true,
              type: {
                name: "String"
              }
            },
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "ObjectReplicationPolicyFilter"
              }
            }
          }
        }
      };
      ObjectReplicationPolicyFilter = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            minCreationTime: {
              serializedName: "minCreationTime",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      EncryptionScopeKeyVaultProperties = {
        type: {
          name: "Composite",
          className: "EncryptionScopeKeyVaultProperties",
          modelProperties: {
            keyUri: {
              serializedName: "keyUri",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      EncryptionScopeListResult = {
        type: {
          name: "Composite",
          className: "EncryptionScopeListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "EncryptionScope"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      PrivateEndpointConnection = {
        type: {
          name: "Composite",
          className: "PrivateEndpointConnection",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { privateEndpoint: {
            serializedName: "properties.privateEndpoint",
            type: {
              name: "Composite",
              className: "PrivateEndpoint"
            }
          }, privateLinkServiceConnectionState: {
            serializedName: "properties.privateLinkServiceConnectionState",
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnectionState"
            }
          }, provisioningState: {
            serializedName: "properties.provisioningState",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      TrackedResource = {
        type: {
          name: "Composite",
          className: "TrackedResource",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
            serializedName: "tags",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, location: {
            serializedName: "location",
            required: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      ManagementPolicy = {
        type: {
          name: "Composite",
          className: "ManagementPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, policy: {
            serializedName: "properties.policy",
            type: {
              name: "Composite",
              className: "ManagementPolicySchema"
            }
          } })
        }
      };
      BlobInventoryPolicy = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
            serializedName: "systemData",
            type: {
              name: "Composite",
              className: "SystemData"
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, policy: {
            serializedName: "properties.policy",
            type: {
              name: "Composite",
              className: "BlobInventoryPolicySchema"
            }
          } })
        }
      };
      PrivateLinkResource = {
        type: {
          name: "Composite",
          className: "PrivateLinkResource",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { groupId: {
            serializedName: "properties.groupId",
            readOnly: true,
            type: {
              name: "String"
            }
          }, requiredMembers: {
            serializedName: "properties.requiredMembers",
            readOnly: true,
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }, requiredZoneNames: {
            serializedName: "properties.requiredZoneNames",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          } })
        }
      };
      ObjectReplicationPolicy = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { policyId: {
            serializedName: "properties.policyId",
            readOnly: true,
            type: {
              name: "String"
            }
          }, enabledTime: {
            serializedName: "properties.enabledTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, sourceAccount: {
            serializedName: "properties.sourceAccount",
            type: {
              name: "String"
            }
          }, destinationAccount: {
            serializedName: "properties.destinationAccount",
            type: {
              name: "String"
            }
          }, rules: {
            serializedName: "properties.rules",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ObjectReplicationPolicyRule"
                }
              }
            }
          } })
        }
      };
      EncryptionScope = {
        type: {
          name: "Composite",
          className: "EncryptionScope",
          modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { source: {
            serializedName: "properties.source",
            type: {
              name: "String"
            }
          }, state: {
            serializedName: "properties.state",
            type: {
              name: "String"
            }
          }, creationTime: {
            serializedName: "properties.creationTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, keyVaultProperties: {
            serializedName: "properties.keyVaultProperties",
            type: {
              name: "Composite",
              className: "EncryptionScopeKeyVaultProperties"
            }
          } })
        }
      };
      StorageAccount = {
        type: {
          name: "Composite",
          className: "StorageAccount",
          modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, kind: {
            serializedName: "kind",
            readOnly: true,
            type: {
              name: "String"
            }
          }, identity: {
            serializedName: "identity",
            type: {
              name: "Composite",
              className: "Identity"
            }
          }, provisioningState: {
            serializedName: "properties.provisioningState",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["Creating", "ResolvingDNS", "Succeeded"]
            }
          }, primaryEndpoints: {
            serializedName: "properties.primaryEndpoints",
            type: {
              name: "Composite",
              className: "Endpoints"
            }
          }, primaryLocation: {
            serializedName: "properties.primaryLocation",
            readOnly: true,
            type: {
              name: "String"
            }
          }, statusOfPrimary: {
            serializedName: "properties.statusOfPrimary",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["available", "unavailable"]
            }
          }, lastGeoFailoverTime: {
            serializedName: "properties.lastGeoFailoverTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, secondaryLocation: {
            serializedName: "properties.secondaryLocation",
            readOnly: true,
            type: {
              name: "String"
            }
          }, statusOfSecondary: {
            serializedName: "properties.statusOfSecondary",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["available", "unavailable"]
            }
          }, creationTime: {
            serializedName: "properties.creationTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, customDomain: {
            serializedName: "properties.customDomain",
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }, secondaryEndpoints: {
            serializedName: "properties.secondaryEndpoints",
            type: {
              name: "Composite",
              className: "Endpoints"
            }
          }, encryption: {
            serializedName: "properties.encryption",
            type: {
              name: "Composite",
              className: "Encryption"
            }
          }, accessTier: {
            serializedName: "properties.accessTier",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["Hot", "Cool"]
            }
          }, azureFilesIdentityBasedAuthentication: {
            serializedName: "properties.azureFilesIdentityBasedAuthentication",
            type: {
              name: "Composite",
              className: "AzureFilesIdentityBasedAuthentication"
            }
          }, enableHttpsTrafficOnly: {
            serializedName: "properties.supportsHttpsTrafficOnly",
            type: {
              name: "Boolean"
            }
          }, networkRuleSet: {
            serializedName: "properties.networkAcls",
            type: {
              name: "Composite",
              className: "NetworkRuleSet"
            }
          }, isHnsEnabled: {
            serializedName: "properties.isHnsEnabled",
            type: {
              name: "Boolean"
            }
          }, geoReplicationStats: {
            serializedName: "properties.geoReplicationStats",
            type: {
              name: "Composite",
              className: "GeoReplicationStats"
            }
          }, failoverInProgress: {
            serializedName: "properties.failoverInProgress",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, largeFileSharesState: {
            serializedName: "properties.largeFileSharesState",
            type: {
              name: "String"
            }
          }, privateEndpointConnections: {
            serializedName: "properties.privateEndpointConnections",
            readOnly: true,
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "PrivateEndpointConnection"
                }
              }
            }
          }, routingPreference: {
            serializedName: "properties.routingPreference",
            type: {
              name: "Composite",
              className: "RoutingPreference"
            }
          }, blobRestoreStatus: {
            serializedName: "properties.blobRestoreStatus",
            type: {
              name: "Composite",
              className: "BlobRestoreStatus"
            }
          }, allowBlobPublicAccess: {
            serializedName: "properties.allowBlobPublicAccess",
            type: {
              name: "Boolean"
            }
          }, minimumTlsVersion: {
            serializedName: "properties.minimumTlsVersion",
            type: {
              name: "String"
            }
          }, allowSharedKeyAccess: {
            serializedName: "properties.allowSharedKeyAccess",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/parameters.js
  var accept, $host, apiVersion, subscriptionId, contentType, accountName, parameters, resourceGroupName, accountName1, expand, parameters1, expand1, regenerateKey, parameters2, parameters3, parameters4, nextLink, location2, managementPolicyName, properties, blobInventoryPolicyName, properties1, privateEndpointConnectionName, properties2, objectReplicationPolicyId, properties3, encryptionScope, encryptionScopeName;
  var init_parameters = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/models/parameters.js"() {
      init_mappers();
      accept = {
        parameterPath: "accept",
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Accept",
          type: {
            name: "String"
          }
        }
      };
      $host = {
        parameterPath: "$host",
        mapper: {
          serializedName: "$host",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
          defaultValue: "2019-06-01",
          isConstant: true,
          serializedName: "api-version",
          type: {
            name: "String"
          }
        }
      };
      subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
          constraints: {
            MinLength: 1
          },
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      contentType = {
        parameterPath: ["options", "contentType"],
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Content-Type",
          type: {
            name: "String"
          }
        }
      };
      accountName = {
        parameterPath: "accountName",
        mapper: StorageAccountCheckNameAvailabilityParameters
      };
      parameters = {
        parameterPath: "parameters",
        mapper: StorageAccountCreateParameters
      };
      resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      accountName1 = {
        parameterPath: "accountName",
        mapper: {
          constraints: {
            MaxLength: 24,
            MinLength: 3
          },
          serializedName: "accountName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      expand = {
        parameterPath: ["options", "expand"],
        mapper: {
          serializedName: "$expand",
          type: {
            name: "Enum",
            allowedValues: ["geoReplicationStats", "blobRestoreStatus"]
          }
        }
      };
      parameters1 = {
        parameterPath: "parameters",
        mapper: StorageAccountUpdateParameters
      };
      expand1 = {
        parameterPath: ["options", "expand"],
        mapper: {
          defaultValue: "kerb",
          isConstant: true,
          serializedName: "$expand",
          type: {
            name: "String"
          }
        }
      };
      regenerateKey = {
        parameterPath: "regenerateKey",
        mapper: StorageAccountRegenerateKeyParameters
      };
      parameters2 = {
        parameterPath: "parameters",
        mapper: AccountSasParameters
      };
      parameters3 = {
        parameterPath: "parameters",
        mapper: ServiceSasParameters
      };
      parameters4 = {
        parameterPath: "parameters",
        mapper: BlobRestoreParameters
      };
      nextLink = {
        parameterPath: "nextLink",
        mapper: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      location2 = {
        parameterPath: "location",
        mapper: {
          serializedName: "location",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      managementPolicyName = {
        parameterPath: "managementPolicyName",
        mapper: {
          serializedName: "managementPolicyName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties = {
        parameterPath: "properties",
        mapper: ManagementPolicy
      };
      blobInventoryPolicyName = {
        parameterPath: "blobInventoryPolicyName",
        mapper: {
          serializedName: "blobInventoryPolicyName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties1 = {
        parameterPath: "properties",
        mapper: BlobInventoryPolicy
      };
      privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
          serializedName: "privateEndpointConnectionName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties2 = {
        parameterPath: "properties",
        mapper: PrivateEndpointConnection
      };
      objectReplicationPolicyId = {
        parameterPath: "objectReplicationPolicyId",
        mapper: {
          constraints: {
            MinLength: 1
          },
          serializedName: "objectReplicationPolicyId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties3 = {
        parameterPath: "properties",
        mapper: ObjectReplicationPolicy
      };
      encryptionScope = {
        parameterPath: "encryptionScope",
        mapper: EncryptionScope
      };
      encryptionScopeName = {
        parameterPath: "encryptionScopeName",
        mapper: {
          constraints: {
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "encryptionScopeName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/operations.js
  var OperationsImpl, serializer, listOperationSpec;
  var init_operations = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/operations.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      OperationsImpl = class {
        /**
         * Initialize a new instance of the class Operations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all of the available Storage Rest API operations.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all of the available Storage Rest API operations.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec);
        }
      };
      __name(OperationsImpl, "OperationsImpl");
      serializer = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listOperationSpec = {
        path: "/providers/Microsoft.Storage/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host],
        headerParameters: [accept],
        serializer
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/skus.js
  var SkusImpl, serializer2, listOperationSpec2;
  var init_skus = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/skus.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      SkusImpl = class {
        /**
         * Initialize a new instance of the class Skus class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists the available SKUs supported by Microsoft.Storage for given subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists the available SKUs supported by Microsoft.Storage for given subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec2);
        }
      };
      __name(SkusImpl, "SkusImpl");
      serializer2 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageSkuListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept],
        serializer: serializer2
      };
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/pollOperation.js
  var init_pollOperation = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/pollOperation.js"() {
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/poller.js
  var PollerStoppedError, PollerCancelledError, Poller;
  var init_poller = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/poller.js"() {
      PollerStoppedError = class extends Error {
        constructor(message) {
          super(message);
          this.name = "PollerStoppedError";
          Object.setPrototypeOf(this, PollerStoppedError.prototype);
        }
      };
      __name(PollerStoppedError, "PollerStoppedError");
      PollerCancelledError = class extends Error {
        constructor(message) {
          super(message);
          this.name = "PollerCancelledError";
          Object.setPrototypeOf(this, PollerCancelledError.prototype);
        }
      };
      __name(PollerCancelledError, "PollerCancelledError");
      Poller = class {
        /**
         * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
         *
         * When writing an implementation of a Poller, this implementation needs to deal with the initialization
         * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
         * operation has already been defined, at least its basic properties. The code below shows how to approach
         * the definition of the constructor of a new custom poller.
         *
         * ```ts
         * export class MyPoller extends Poller<MyOperationState, string> {
         *   constructor({
         *     // Anything you might need outside of the basics
         *   }) {
         *     let state: MyOperationState = {
         *       privateProperty: private,
         *       publicProperty: public,
         *     };
         *
         *     const operation = {
         *       state,
         *       update,
         *       cancel,
         *       toString
         *     }
         *
         *     // Sending the operation to the parent's constructor.
         *     super(operation);
         *
         *     // You can assign more local properties here.
         *   }
         * }
         * ```
         *
         * Inside of this constructor, a new promise is created. This will be used to
         * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
         * resolve and reject methods are also used internally to control when to resolve
         * or reject anyone waiting for the poller to finish.
         *
         * The constructor of a custom implementation of a poller is where any serialized version of
         * a previous poller's operation should be deserialized into the operation sent to the
         * base constructor. For example:
         *
         * ```ts
         * export class MyPoller extends Poller<MyOperationState, string> {
         *   constructor(
         *     baseOperation: string | undefined
         *   ) {
         *     let state: MyOperationState = {};
         *     if (baseOperation) {
         *       state = {
         *         ...JSON.parse(baseOperation).state,
         *         ...state
         *       };
         *     }
         *     const operation = {
         *       state,
         *       // ...
         *     }
         *     super(operation);
         *   }
         * }
         * ```
         *
         * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
         */
        constructor(operation) {
          this.stopped = true;
          this.pollProgressCallbacks = [];
          this.operation = operation;
          this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
          });
          this.promise.catch(() => {
          });
        }
        /**
         * @internal
         * Starts a loop that will break only if the poller is done
         * or if the poller is stopped.
         */
        async startPolling() {
          if (this.stopped) {
            this.stopped = false;
          }
          while (!this.isStopped() && !this.isDone()) {
            await this.poll();
            await this.delay();
          }
        }
        /**
         * @internal
         * pollOnce does one polling, by calling to the update method of the underlying
         * poll operation to make any relevant change effective.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        async pollOnce(options = {}) {
          try {
            if (!this.isDone()) {
              this.operation = await this.operation.update({
                abortSignal: options.abortSignal,
                fireProgress: this.fireProgress.bind(this)
              });
              if (this.isDone() && this.resolve) {
                this.resolve(this.operation.state.result);
              }
            }
          } catch (e) {
            this.operation.state.error = e;
            if (this.reject) {
              this.reject(e);
            }
            throw e;
          }
        }
        /**
         * @internal
         * fireProgress calls the functions passed in via onProgress the method of the poller.
         *
         * It loops over all of the callbacks received from onProgress, and executes them, sending them
         * the current operation state.
         *
         * @param state - The current operation state.
         */
        fireProgress(state) {
          for (const callback of this.pollProgressCallbacks) {
            callback(state);
          }
        }
        /**
         * @internal
         * Invokes the underlying operation's cancel method, and rejects the
         * pollUntilDone promise.
         */
        async cancelOnce(options = {}) {
          this.operation = await this.operation.cancel(options);
          if (this.reject) {
            this.reject(new PollerCancelledError("Poller cancelled"));
          }
        }
        /**
         * Returns a promise that will resolve once a single polling request finishes.
         * It does this by calling the update method of the Poller's operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        poll(options = {}) {
          if (!this.pollOncePromise) {
            this.pollOncePromise = this.pollOnce(options);
            const clearPollOncePromise = /* @__PURE__ */ __name(() => {
              this.pollOncePromise = void 0;
            }, "clearPollOncePromise");
            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
          }
          return this.pollOncePromise;
        }
        /**
         * Returns a promise that will resolve once the underlying operation is completed.
         */
        async pollUntilDone() {
          if (this.stopped) {
            this.startPolling().catch(this.reject);
          }
          return this.promise;
        }
        /**
         * Invokes the provided callback after each polling is completed,
         * sending the current state of the poller's operation.
         *
         * It returns a method that can be used to stop receiving updates on the given callback function.
         */
        onProgress(callback) {
          this.pollProgressCallbacks.push(callback);
          return () => {
            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);
          };
        }
        /**
         * Returns true if the poller has finished polling.
         */
        isDone() {
          const state = this.operation.state;
          return Boolean(state.isCompleted || state.isCancelled || state.error);
        }
        /**
         * Stops the poller from continuing to poll.
         */
        stopPolling() {
          if (!this.stopped) {
            this.stopped = true;
            if (this.reject) {
              this.reject(new PollerStoppedError("This poller is already stopped"));
            }
          }
        }
        /**
         * Returns true if the poller is stopped.
         */
        isStopped() {
          return this.stopped;
        }
        /**
         * Attempts to cancel the underlying operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * If it's called again before it finishes, it will throw an error.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        cancelOperation(options = {}) {
          if (!this.stopped) {
            this.stopped = true;
          }
          if (!this.cancelPromise) {
            this.cancelPromise = this.cancelOnce(options);
          } else if (options.abortSignal) {
            throw new Error("A cancel request is currently pending");
          }
          return this.cancelPromise;
        }
        /**
         * Returns the state of the operation.
         *
         * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
         * implementations of the pollers can customize what's shared with the public by writing their own
         * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
         * and a public type representing a safe to share subset of the properties of the internal state.
         * Their definition of getOperationState can then return their public type.
         *
         * Example:
         *
         * ```ts
         * // Let's say we have our poller's operation state defined as:
         * interface MyOperationState extends PollOperationState<ResultType> {
         *   privateProperty?: string;
         *   publicProperty?: string;
         * }
         *
         * // To allow us to have a true separation of public and private state, we have to define another interface:
         * interface PublicState extends PollOperationState<ResultType> {
         *   publicProperty?: string;
         * }
         *
         * // Then, we define our Poller as follows:
         * export class MyPoller extends Poller<MyOperationState, ResultType> {
         *   // ... More content is needed here ...
         *
         *   public getOperationState(): PublicState {
         *     const state: PublicState = this.operation.state;
         *     return {
         *       // Properties from PollOperationState<TResult>
         *       isStarted: state.isStarted,
         *       isCompleted: state.isCompleted,
         *       isCancelled: state.isCancelled,
         *       error: state.error,
         *       result: state.result,
         *
         *       // The only other property needed by PublicState.
         *       publicProperty: state.publicProperty
         *     }
         *   }
         * }
         * ```
         *
         * You can see this in the tests of this repository, go to the file:
         * `../test/utils/testPoller.ts`
         * and look for the getOperationState implementation.
         */
        getOperationState() {
          return this.operation.state;
        }
        /**
         * Returns the result value of the operation,
         * regardless of the state of the poller.
         * It can return undefined or an incomplete form of the final TResult value
         * depending on the implementation.
         */
        getResult() {
          const state = this.operation.state;
          return state.result;
        }
        /**
         * Returns a serialized version of the poller's operation
         * by invoking the operation's toString method.
         */
        toString() {
          return this.operation.toString();
        }
      };
      __name(Poller, "Poller");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js
  function getPollingUrl(rawResponse, defaultPath) {
    var _a7, _b2, _c2;
    return (_c2 = (_b2 = (_a7 = getAzureAsyncOperation(rawResponse)) !== null && _a7 !== void 0 ? _a7 : getLocation2(rawResponse)) !== null && _b2 !== void 0 ? _b2 : getOperationLocation(rawResponse)) !== null && _c2 !== void 0 ? _c2 : defaultPath;
  }
  function getLocation2(rawResponse) {
    return rawResponse.headers["location"];
  }
  function getOperationLocation(rawResponse) {
    return rawResponse.headers["operation-location"];
  }
  function getAzureAsyncOperation(rawResponse) {
    return rawResponse.headers["azure-asyncoperation"];
  }
  function inferLroMode(requestPath, requestMethod, rawResponse) {
    if (getAzureAsyncOperation(rawResponse) !== void 0) {
      return {
        mode: "AzureAsync",
        resourceLocation: requestMethod === "PUT" ? requestPath : requestMethod === "POST" || requestMethod === "PATCH" ? getLocation2(rawResponse) : void 0
      };
    } else if (getLocation2(rawResponse) !== void 0 || getOperationLocation(rawResponse) !== void 0) {
      return {
        mode: "Location"
      };
    } else if (["PUT", "PATCH"].includes(requestMethod)) {
      return {
        mode: "Body"
      };
    }
    return {};
  }
  function isUnexpectedInitialResponse(rawResponse) {
    const code = rawResponse.statusCode;
    if (![203, 204, 202, 201, 200, 500].includes(code)) {
      throw new SimpleRestError(`Received unexpected HTTP status code ${code} in the initial response. This may indicate a server issue.`, code);
    }
    return false;
  }
  function isUnexpectedPollingResponse(rawResponse) {
    const code = rawResponse.statusCode;
    if (![202, 201, 200, 500].includes(code)) {
      throw new SimpleRestError(`Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`, code);
    }
    return false;
  }
  var SimpleRestError;
  var init_requestUtils = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/requestUtils.js"() {
      __name(getPollingUrl, "getPollingUrl");
      __name(getLocation2, "getLocation");
      __name(getOperationLocation, "getOperationLocation");
      __name(getAzureAsyncOperation, "getAzureAsyncOperation");
      __name(inferLroMode, "inferLroMode");
      SimpleRestError = class extends Error {
        constructor(message, statusCode) {
          super(message);
          this.name = "RestError";
          this.statusCode = statusCode;
          Object.setPrototypeOf(this, SimpleRestError.prototype);
        }
      };
      __name(SimpleRestError, "SimpleRestError");
      __name(isUnexpectedInitialResponse, "isUnexpectedInitialResponse");
      __name(isUnexpectedPollingResponse, "isUnexpectedPollingResponse");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/models.js
  var successStates, failureStates, terminalStates;
  var init_models2 = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/models.js"() {
      successStates = ["succeeded"];
      failureStates = ["failed", "canceled", "cancelled"];
      terminalStates = successStates.concat(failureStates);
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/bodyPolling.js
  function getProvisioningState(rawResponse) {
    var _a7, _b2;
    const { properties: properties6, provisioningState } = (_a7 = rawResponse.body) !== null && _a7 !== void 0 ? _a7 : {};
    const state = (_b2 = properties6 === null || properties6 === void 0 ? void 0 : properties6.provisioningState) !== null && _b2 !== void 0 ? _b2 : provisioningState;
    return typeof state === "string" ? state.toLowerCase() : "succeeded";
  }
  function isBodyPollingDone(rawResponse) {
    const state = getProvisioningState(rawResponse);
    if (isUnexpectedPollingResponse(rawResponse) || failureStates.includes(state)) {
      throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);
    }
    return successStates.includes(state);
  }
  function processBodyPollingOperationResult(response) {
    return Object.assign(Object.assign({}, response), { done: isBodyPollingDone(response.rawResponse) });
  }
  var init_bodyPolling = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/bodyPolling.js"() {
      init_models2();
      init_requestUtils();
      __name(getProvisioningState, "getProvisioningState");
      __name(isBodyPollingDone, "isBodyPollingDone");
      __name(processBodyPollingOperationResult, "processBodyPollingOperationResult");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/logger.js
  var logger3;
  var init_logger = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/logger.js"() {
      init_src();
      logger3 = createClientLogger("core-lro");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/azureAsyncPolling.js
  function getResponseStatus(rawResponse) {
    var _a7;
    const { status } = (_a7 = rawResponse.body) !== null && _a7 !== void 0 ? _a7 : {};
    return typeof status === "string" ? status.toLowerCase() : "succeeded";
  }
  function isAzureAsyncPollingDone(rawResponse) {
    const state = getResponseStatus(rawResponse);
    if (isUnexpectedPollingResponse(rawResponse) || failureStates.includes(state)) {
      throw new Error(`The long running operation has failed. The provisioning state: ${state}.`);
    }
    return successStates.includes(state);
  }
  async function sendFinalRequest(lro, resourceLocation, lroResourceLocationConfig) {
    switch (lroResourceLocationConfig) {
      case "original-uri":
        return lro.sendPollRequest(lro.requestPath);
      case "azure-async-operation":
        return void 0;
      case "location":
      default:
        return lro.sendPollRequest(resourceLocation !== null && resourceLocation !== void 0 ? resourceLocation : lro.requestPath);
    }
  }
  function processAzureAsyncOperationResult(lro, resourceLocation, lroResourceLocationConfig) {
    return (response) => {
      if (isAzureAsyncPollingDone(response.rawResponse)) {
        if (resourceLocation === void 0) {
          return Object.assign(Object.assign({}, response), { done: true });
        } else {
          return Object.assign(Object.assign({}, response), { done: false, next: async () => {
            const finalResponse = await sendFinalRequest(lro, resourceLocation, lroResourceLocationConfig);
            return Object.assign(Object.assign({}, finalResponse !== null && finalResponse !== void 0 ? finalResponse : response), { done: true });
          } });
        }
      }
      return Object.assign(Object.assign({}, response), { done: false });
    };
  }
  var init_azureAsyncPolling = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/azureAsyncPolling.js"() {
      init_models2();
      init_requestUtils();
      __name(getResponseStatus, "getResponseStatus");
      __name(isAzureAsyncPollingDone, "isAzureAsyncPollingDone");
      __name(sendFinalRequest, "sendFinalRequest");
      __name(processAzureAsyncOperationResult, "processAzureAsyncOperationResult");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/locationPolling.js
  function isLocationPollingDone(rawResponse) {
    return !isUnexpectedPollingResponse(rawResponse) && rawResponse.statusCode !== 202;
  }
  function processLocationPollingOperationResult(response) {
    return Object.assign(Object.assign({}, response), { done: isLocationPollingDone(response.rawResponse) });
  }
  var init_locationPolling = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/locationPolling.js"() {
      init_requestUtils();
      __name(isLocationPollingDone, "isLocationPollingDone");
      __name(processLocationPollingOperationResult, "processLocationPollingOperationResult");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/passthrough.js
  function processPassthroughOperationResult(response) {
    return Object.assign(Object.assign({}, response), { done: true });
  }
  var init_passthrough = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/passthrough.js"() {
      __name(processPassthroughOperationResult, "processPassthroughOperationResult");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/stateMachine.js
  function createGetLroStatusFromResponse(lroPrimitives, config, lroResourceLocationConfig) {
    switch (config.mode) {
      case "AzureAsync": {
        return processAzureAsyncOperationResult(lroPrimitives, config.resourceLocation, lroResourceLocationConfig);
      }
      case "Location": {
        return processLocationPollingOperationResult;
      }
      case "Body": {
        return processBodyPollingOperationResult;
      }
      default: {
        return processPassthroughOperationResult;
      }
    }
  }
  function createPoll(lroPrimitives) {
    return async (path, pollerConfig, getLroStatusFromResponse) => {
      const response = await lroPrimitives.sendPollRequest(path);
      const retryAfter = response.rawResponse.headers["retry-after"];
      if (retryAfter !== void 0) {
        const retryAfterInSeconds = parseInt(retryAfter);
        pollerConfig.intervalInMs = isNaN(retryAfterInSeconds) ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs) : retryAfterInSeconds * 1e3;
      }
      return getLroStatusFromResponse(response);
    };
  }
  function calculatePollingIntervalFromDate(retryAfterDate, defaultIntervalInMs) {
    const timeNow = Math.floor((/* @__PURE__ */ new Date()).getTime());
    const retryAfterTime = retryAfterDate.getTime();
    if (timeNow < retryAfterTime) {
      return retryAfterTime - timeNow;
    }
    return defaultIntervalInMs;
  }
  function createInitializeState(state, requestPath, requestMethod) {
    return (response) => {
      if (isUnexpectedInitialResponse(response.rawResponse))
        return true;
      state.initialRawResponse = response.rawResponse;
      state.isStarted = true;
      state.pollingURL = getPollingUrl(state.initialRawResponse, requestPath);
      state.config = inferLroMode(requestPath, requestMethod, state.initialRawResponse);
      if (state.config.mode === void 0 || state.config.mode === "Body" && isBodyPollingDone(state.initialRawResponse)) {
        state.result = response.flatResponse;
        state.isCompleted = true;
      }
      logger3.verbose(`LRO: initial state: ${JSON.stringify(state)}`);
      return Boolean(state.isCompleted);
    };
  }
  var init_stateMachine = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/stateMachine.js"() {
      init_requestUtils();
      init_bodyPolling();
      init_logger();
      init_azureAsyncPolling();
      init_locationPolling();
      init_passthrough();
      __name(createGetLroStatusFromResponse, "createGetLroStatusFromResponse");
      __name(createPoll, "createPoll");
      __name(calculatePollingIntervalFromDate, "calculatePollingIntervalFromDate");
      __name(createInitializeState, "createInitializeState");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/operation.js
  var GenericPollOperation;
  var init_operation = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/operation.js"() {
      init_stateMachine();
      init_requestUtils();
      init_logger();
      GenericPollOperation = class {
        constructor(state, lro, lroResourceLocationConfig, processResult, updateState, isDone) {
          this.state = state;
          this.lro = lro;
          this.lroResourceLocationConfig = lroResourceLocationConfig;
          this.processResult = processResult;
          this.updateState = updateState;
          this.isDone = isDone;
        }
        setPollerConfig(pollerConfig) {
          this.pollerConfig = pollerConfig;
        }
        /**
         * General update function for LROPoller, the general process is as follows
         * 1. Check initial operation result to determine the strategy to use
         *  - Strategies: Location, Azure-AsyncOperation, Original Uri
         * 2. Check if the operation result has a terminal state
         *  - Terminal state will be determined by each strategy
         *  2.1 If it is terminal state Check if a final GET request is required, if so
         *      send final GET request and return result from operation. If no final GET
         *      is required, just return the result from operation.
         *      - Determining what to call for final request is responsibility of each strategy
         *  2.2 If it is not terminal state, call the polling operation and go to step 1
         *      - Determining what to call for polling is responsibility of each strategy
         *      - Strategies will always use the latest URI for polling if provided otherwise
         *        the last known one
         */
        async update(options) {
          var _a7, _b2, _c2;
          const state = this.state;
          let lastResponse = void 0;
          if (!state.isStarted) {
            const initializeState = createInitializeState(state, this.lro.requestPath, this.lro.requestMethod);
            lastResponse = await this.lro.sendInitialRequest();
            initializeState(lastResponse);
          }
          if (!state.isCompleted) {
            if (!this.poll || !this.getLroStatusFromResponse) {
              if (!state.config) {
                throw new Error("Bad state: LRO mode is undefined. Please check if the serialized state is well-formed.");
              }
              const isDone = this.isDone;
              this.getLroStatusFromResponse = isDone ? (response) => Object.assign(Object.assign({}, response), { done: isDone(response.flatResponse, this.state) }) : createGetLroStatusFromResponse(this.lro, state.config, this.lroResourceLocationConfig);
              this.poll = createPoll(this.lro);
            }
            if (!state.pollingURL) {
              throw new Error("Bad state: polling URL is undefined. Please check if the serialized state is well-formed.");
            }
            const currentState = await this.poll(state.pollingURL, this.pollerConfig, this.getLroStatusFromResponse);
            logger3.verbose(`LRO: polling response: ${JSON.stringify(currentState.rawResponse)}`);
            if (currentState.done) {
              state.result = this.processResult ? this.processResult(currentState.flatResponse, state) : currentState.flatResponse;
              state.isCompleted = true;
            } else {
              this.poll = (_a7 = currentState.next) !== null && _a7 !== void 0 ? _a7 : this.poll;
              state.pollingURL = getPollingUrl(currentState.rawResponse, state.pollingURL);
            }
            lastResponse = currentState;
          }
          logger3.verbose(`LRO: current state: ${JSON.stringify(state)}`);
          if (lastResponse) {
            (_b2 = this.updateState) === null || _b2 === void 0 ? void 0 : _b2.call(this, state, lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.rawResponse);
          } else {
            logger3.error(`LRO: no response was received`);
          }
          (_c2 = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _c2 === void 0 ? void 0 : _c2.call(options, state);
          return this;
        }
        async cancel() {
          this.state.isCancelled = true;
          return this;
        }
        /**
         * Serializes the Poller operation.
         */
        toString() {
          return JSON.stringify({
            state: this.state
          });
        }
      };
      __name(GenericPollOperation, "GenericPollOperation");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/lroEngine.js
  function deserializeState(serializedState) {
    try {
      return JSON.parse(serializedState).state;
    } catch (e) {
      throw new Error(`LroEngine: Unable to deserialize state: ${serializedState}`);
    }
  }
  var LroEngine;
  var init_lroEngine = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/lroEngine.js"() {
      init_operation();
      init_poller();
      __name(deserializeState, "deserializeState");
      LroEngine = class extends Poller {
        constructor(lro, options) {
          const { intervalInMs = 2e3, resumeFrom } = options || {};
          const state = resumeFrom ? deserializeState(resumeFrom) : {};
          const operation = new GenericPollOperation(state, lro, options === null || options === void 0 ? void 0 : options.lroResourceLocationConfig, options === null || options === void 0 ? void 0 : options.processResult, options === null || options === void 0 ? void 0 : options.updateState, options === null || options === void 0 ? void 0 : options.isDone);
          super(operation);
          this.config = { intervalInMs };
          operation.setPollerConfig(this.config);
        }
        /**
         * The method used by the poller to wait before attempting to update its operation.
         */
        delay() {
          return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));
        }
      };
      __name(LroEngine, "LroEngine");
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/lroEngine/index.js
  var init_lroEngine2 = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/lroEngine/index.js"() {
      init_lroEngine();
    }
  });

  // node_modules/@azure/core-lro/dist-esm/src/index.js
  var init_src7 = __esm({
    "node_modules/@azure/core-lro/dist-esm/src/index.js"() {
      init_pollOperation();
      init_poller();
      init_lroEngine2();
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/lroImpl.js
  var LroImpl;
  var init_lroImpl = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/lroImpl.js"() {
      init_tslib_es62();
      LroImpl = class {
        constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
          this.sendOperationFn = sendOperationFn;
          this.args = args;
          this.spec = spec;
          this.requestPath = requestPath;
          this.requestMethod = requestMethod;
        }
        sendInitialRequest() {
          return __awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
          });
        }
        sendPollRequest(path) {
          return __awaiter(this, void 0, void 0, function* () {
            const _a7 = this.spec, { requestBody } = _a7, restSpec = __rest(_a7, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
          });
        }
      };
      __name(LroImpl, "LroImpl");
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/storageAccounts.js
  var StorageAccountsImpl, serializer3, checkNameAvailabilityOperationSpec, createOperationSpec, deleteOperationSpec, getPropertiesOperationSpec, updateOperationSpec, listOperationSpec3, listByResourceGroupOperationSpec, listKeysOperationSpec, regenerateKeyOperationSpec, listAccountSASOperationSpec, listServiceSASOperationSpec, failoverOperationSpec, restoreBlobRangesOperationSpec, revokeUserDelegationKeysOperationSpec, listNextOperationSpec;
  var init_storageAccounts = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/storageAccounts.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      init_src7();
      init_lroImpl();
      StorageAccountsImpl = class {
        /**
         * Initialize a new instance of the class StorageAccounts class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all the storage accounts available under the subscription. Note that storage keys are not
         * returned; use the ListKeys operation for this.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all the storage accounts available under the given resource group. Note that storage keys are
         * not returned; use the ListKeys operation for this.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByResourceGroupPagingPage(resourceGroupName5, options);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result = yield __await(this._listByResourceGroup(resourceGroupName5, options));
            yield yield __await(result.value || []);
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * Checks that the storage account name is valid and is not already in use.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        checkNameAvailability(accountName3, options) {
          return this.client.sendOperationRequest({ accountName: accountName3, options }, checkNameAvailabilityOperationSpec);
        }
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is already
         * created and a subsequent create request is issued with different properties, the account properties
         * will be updated. If an account is already created and a subsequent create or update request is
         * issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the created account.
         * @param options The options parameters.
         */
        beginCreate(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, createOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is already
         * created and a subsequent create request is issued with different properties, the account properties
         * will be updated. If an account is already created and a subsequent create or update request is
         * issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the created account.
         * @param options The options parameters.
         */
        beginCreateAndWait(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName5, accountName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Deletes a storage account in Microsoft Azure.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, deleteOperationSpec);
        }
        /**
         * Returns the properties for the specified storage account including but not limited to name, SKU
         * name, location, and account status. The ListKeys operation should be used to retrieve storage keys.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getPropertiesOperationSpec);
        }
        /**
         * The update operation can be used to update the SKU, encryption, access tier, or tags for a storage
         * account. It can also be used to map the account to a custom domain. Only one custom domain is
         * supported per storage account; the replacement/change of custom domain is not supported. In order to
         * replace an old custom domain, the old value must be cleared/unregistered before a new value can be
         * set. The update of multiple properties is supported. This call does not change the storage keys for
         * the account. If you want to change the storage account keys, use the regenerate keys operation. The
         * location and name of the storage account cannot be changed after creation.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the updated account.
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, updateOperationSpec);
        }
        /**
         * Lists all the storage accounts available under the subscription. Note that storage keys are not
         * returned; use the ListKeys operation for this.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec3);
        }
        /**
         * Lists all the storage accounts available under the given resource group. Note that storage keys are
         * not returned; use the ListKeys operation for this.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec);
        }
        /**
         * Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage
         * account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        listKeys(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listKeysOperationSpec);
        }
        /**
         * Regenerates one of the access keys or Kerberos keys for the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param regenerateKey Specifies name of the key which should be regenerated -- key1, key2, kerb1,
         *                      kerb2.
         * @param options The options parameters.
         */
        regenerateKey(resourceGroupName5, accountName3, regenerateKey3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, regenerateKey: regenerateKey3, options }, regenerateKeyOperationSpec);
        }
        /**
         * List SAS credentials of a storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide to list SAS credentials for the storage account.
         * @param options The options parameters.
         */
        listAccountSAS(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, listAccountSASOperationSpec);
        }
        /**
         * List service SAS credentials of a specific resource.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide to list service SAS credentials.
         * @param options The options parameters.
         */
        listServiceSAS(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, listServiceSASOperationSpec);
        }
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The failover
         * occurs from the storage account's primary cluster to secondary cluster for RA-GRS accounts. The
         * secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginFailover(resourceGroupName5, accountName3, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, options }, failoverOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Failover request can be triggered for a storage account in case of availability issues. The failover
         * occurs from the storage account's primary cluster to secondary cluster for RA-GRS accounts. The
         * secondary cluster will become primary after failover.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginFailoverAndWait(resourceGroupName5, accountName3, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginFailover(resourceGroupName5, accountName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for restore blob ranges.
         * @param options The options parameters.
         */
        beginRestoreBlobRanges(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, restoreBlobRangesOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for restore blob ranges.
         * @param options The options parameters.
         */
        beginRestoreBlobRangesAndWait(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestoreBlobRanges(resourceGroupName5, accountName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Revoke user delegation keys.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        revokeUserDelegationKeys(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, revokeUserDelegationKeysOperationSpec);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec);
        }
      };
      __name(StorageAccountsImpl, "StorageAccountsImpl");
      serializer3 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      checkNameAvailabilityOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: CheckNameAvailabilityResult
          }
        },
        requestBody: accountName,
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      createOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: StorageAccount
          },
          201: {
            bodyMapper: StorageAccount
          },
          202: {
            bodyMapper: StorageAccount
          },
          204: {
            bodyMapper: StorageAccount
          }
        },
        requestBody: parameters,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      deleteOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "DELETE",
        responses: { 200: {}, 204: {} },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        serializer: serializer3
      };
      getPropertiesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccount
          }
        },
        queryParameters: [apiVersion, expand],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer3
      };
      updateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: StorageAccount
          }
        },
        requestBody: parameters1,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      listOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept],
        serializer: serializer3
      };
      listByResourceGroupOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName
        ],
        headerParameters: [accept],
        serializer: serializer3
      };
      listKeysOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: StorageAccountListKeysResult
          }
        },
        queryParameters: [apiVersion, expand1],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer3
      };
      regenerateKeyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: StorageAccountListKeysResult
          }
        },
        requestBody: regenerateKey,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      listAccountSASOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ListAccountSasResponse
          }
        },
        requestBody: parameters2,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      listServiceSASOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ListServiceSasResponse
          }
        },
        requestBody: parameters3,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      failoverOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover",
        httpMethod: "POST",
        responses: { 200: {}, 201: {}, 202: {}, 204: {} },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        serializer: serializer3
      };
      restoreBlobRangesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: BlobRestoreStatus
          },
          201: {
            bodyMapper: BlobRestoreStatus
          },
          202: {
            bodyMapper: BlobRestoreStatus
          },
          204: {
            bodyMapper: BlobRestoreStatus
          }
        },
        requestBody: parameters4,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer3
      };
      revokeUserDelegationKeysOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys",
        httpMethod: "POST",
        responses: { 200: {} },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        serializer: serializer3
      };
      listNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          nextLink
        ],
        headerParameters: [accept],
        serializer: serializer3
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/usages.js
  var UsagesImpl, serializer4, listByLocationOperationSpec;
  var init_usages = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/usages.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      UsagesImpl = class {
        /**
         * Initialize a new instance of the class Usages class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the current usage count and the limit for the resources of the location under the subscription.
         * @param location The location of the Azure Storage resource.
         * @param options The options parameters.
         */
        listByLocation(location4, options) {
          const iter = this.listByLocationPagingAll(location4, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByLocationPagingPage(location4, options);
            }
          };
        }
        listByLocationPagingPage(location4, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listByLocationPagingPage_1() {
            let result = yield __await(this._listByLocation(location4, options));
            yield yield __await(result.value || []);
          }, "listByLocationPagingPage_1"));
        }
        listByLocationPagingAll(location4, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listByLocationPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listByLocationPagingPage(location4, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listByLocationPagingAll_1"));
        }
        /**
         * Gets the current usage count and the limit for the resources of the location under the subscription.
         * @param location The location of the Azure Storage resource.
         * @param options The options parameters.
         */
        _listByLocation(location4, options) {
          return this.client.sendOperationRequest({ location: location4, options }, listByLocationOperationSpec);
        }
      };
      __name(UsagesImpl, "UsagesImpl");
      serializer4 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listByLocationOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: UsageListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          location2
        ],
        headerParameters: [accept],
        serializer: serializer4
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/managementPolicies.js
  var ManagementPoliciesImpl, serializer5, getOperationSpec, createOrUpdateOperationSpec, deleteOperationSpec2;
  var init_managementPolicies = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/managementPolicies.js"() {
      init_src6();
      init_mappers();
      init_parameters();
      ManagementPoliciesImpl = class {
        /**
         * Initialize a new instance of the class ManagementPolicies class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the managementpolicy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, managementPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, managementPolicyName: managementPolicyName3, options }, getOperationSpec);
        }
        /**
         * Sets the managementpolicy to the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param properties The ManagementPolicy set to a storage account.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, managementPolicyName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            managementPolicyName: managementPolicyName3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec);
        }
        /**
         * Deletes the managementpolicy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, managementPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, managementPolicyName: managementPolicyName3, options }, deleteOperationSpec2);
        }
      };
      __name(ManagementPoliciesImpl, "ManagementPoliciesImpl");
      serializer5 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      getOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ManagementPolicy
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          managementPolicyName
        ],
        headerParameters: [accept],
        serializer: serializer5
      };
      createOrUpdateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ManagementPolicy
          }
        },
        requestBody: properties,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          managementPolicyName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer5
      };
      deleteOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "DELETE",
        responses: { 200: {}, 204: {} },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          managementPolicyName
        ],
        serializer: serializer5
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/blobInventoryPolicies.js
  var BlobInventoryPoliciesImpl, serializer6, getOperationSpec2, createOrUpdateOperationSpec2, deleteOperationSpec3, listOperationSpec4;
  var init_blobInventoryPolicies = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/blobInventoryPolicies.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      BlobInventoryPoliciesImpl = class {
        /**
         * Initialize a new instance of the class BlobInventoryPolicies class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, accountName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName5, accountName3, options));
            yield yield __await(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, blobInventoryPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, blobInventoryPolicyName: blobInventoryPolicyName3, options }, getOperationSpec2);
        }
        /**
         * Sets the blob inventory policy to the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param properties The blob inventory policy set to a storage account.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, blobInventoryPolicyName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            blobInventoryPolicyName: blobInventoryPolicyName3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec2);
        }
        /**
         * Deletes the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, blobInventoryPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, blobInventoryPolicyName: blobInventoryPolicyName3, options }, deleteOperationSpec3);
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec4);
        }
      };
      __name(BlobInventoryPoliciesImpl, "BlobInventoryPoliciesImpl");
      serializer6 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      getOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: BlobInventoryPolicy
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          blobInventoryPolicyName
        ],
        headerParameters: [accept],
        serializer: serializer6
      };
      createOrUpdateOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: BlobInventoryPolicy
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        requestBody: properties1,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          blobInventoryPolicyName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer6
      };
      deleteOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          blobInventoryPolicyName
        ],
        headerParameters: [accept],
        serializer: serializer6
      };
      listOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListBlobInventoryPolicy
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer6
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/privateEndpointConnections.js
  var PrivateEndpointConnectionsImpl, serializer7, listOperationSpec5, getOperationSpec3, putOperationSpec, deleteOperationSpec4;
  var init_privateEndpointConnections = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/privateEndpointConnections.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      PrivateEndpointConnectionsImpl = class {
        /**
         * Initialize a new instance of the class PrivateEndpointConnections class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List all the private endpoint connections associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, accountName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName5, accountName3, options));
            yield yield __await(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List all the private endpoint connections associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec5);
        }
        /**
         * Gets the specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, privateEndpointConnectionName3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            options
          }, getOperationSpec3);
        }
        /**
         * Update the state of specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param properties The private endpoint connection properties.
         * @param options The options parameters.
         */
        put(resourceGroupName5, accountName3, privateEndpointConnectionName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            properties: properties6,
            options
          }, putOperationSpec);
        }
        /**
         * Deletes the specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, privateEndpointConnectionName3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            options
          }, deleteOperationSpec4);
        }
      };
      __name(PrivateEndpointConnectionsImpl, "PrivateEndpointConnectionsImpl");
      serializer7 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnectionListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer7
      };
      getOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnection
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          privateEndpointConnectionName
        ],
        headerParameters: [accept],
        serializer: serializer7
      };
      putOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnection
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        requestBody: properties2,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          privateEndpointConnectionName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer7
      };
      deleteOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          privateEndpointConnectionName
        ],
        headerParameters: [accept],
        serializer: serializer7
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/privateLinkResources.js
  var PrivateLinkResourcesImpl, serializer8, listByStorageAccountOperationSpec;
  var init_privateLinkResources = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/privateLinkResources.js"() {
      init_src6();
      init_mappers();
      init_parameters();
      PrivateLinkResourcesImpl = class {
        /**
         * Initialize a new instance of the class PrivateLinkResources class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the private link resources that need to be created for a storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        listByStorageAccount(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listByStorageAccountOperationSpec);
        }
      };
      __name(PrivateLinkResourcesImpl, "PrivateLinkResourcesImpl");
      serializer8 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listByStorageAccountOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateLinkResourceListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer8
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/objectReplicationPoliciesOperations.js
  var ObjectReplicationPoliciesOperationsImpl, serializer9, listOperationSpec6, getOperationSpec4, createOrUpdateOperationSpec3, deleteOperationSpec5;
  var init_objectReplicationPoliciesOperations = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/objectReplicationPoliciesOperations.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      ObjectReplicationPoliciesOperationsImpl = class {
        /**
         * Initialize a new instance of the class ObjectReplicationPoliciesOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List the object replication policies associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, accountName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName5, accountName3, options));
            yield yield __await(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List the object replication policies associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec6);
        }
        /**
         * Get the object replication policy of the storage account by policy ID.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId The ID of object replication policy or 'default' if the policy ID
         *                                  is unknown.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, objectReplicationPolicyId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, objectReplicationPolicyId: objectReplicationPolicyId3, options }, getOperationSpec4);
        }
        /**
         * Create or update the object replication policy of the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId The ID of object replication policy or 'default' if the policy ID
         *                                  is unknown.
         * @param properties The object replication policy set to a storage account. A unique policy ID will be
         *                   created if absent.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, objectReplicationPolicyId3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            objectReplicationPolicyId: objectReplicationPolicyId3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec3);
        }
        /**
         * Deletes the object replication policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId The ID of object replication policy or 'default' if the policy ID
         *                                  is unknown.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, objectReplicationPolicyId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, objectReplicationPolicyId: objectReplicationPolicyId3, options }, deleteOperationSpec5);
        }
      };
      __name(ObjectReplicationPoliciesOperationsImpl, "ObjectReplicationPoliciesOperationsImpl");
      serializer9 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      listOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicies
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer9
      };
      getOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicy
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          objectReplicationPolicyId
        ],
        headerParameters: [accept],
        serializer: serializer9
      };
      createOrUpdateOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicy
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        requestBody: properties3,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          objectReplicationPolicyId
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer9
      };
      deleteOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          objectReplicationPolicyId
        ],
        headerParameters: [accept],
        serializer: serializer9
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/encryptionScopes.js
  var EncryptionScopesImpl, serializer10, putOperationSpec2, patchOperationSpec, getOperationSpec5, listOperationSpec7, listNextOperationSpec2;
  var init_encryptionScopes = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/encryptionScopes.js"() {
      init_tslib_es62();
      init_src6();
      init_mappers();
      init_parameters();
      EncryptionScopesImpl = class {
        /**
         * Initialize a new instance of the class EncryptionScopes class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all the encryption scopes available under the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, accountName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName5, accountName3, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await(yield* __asyncDelegator(__asyncValues(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Synchronously creates or updates an encryption scope under the specified storage account. If an
         * encryption scope is already created and a subsequent request is issued with different properties,
         * the encryption scope properties will be updated per the specified request.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param encryptionScope Encryption scope properties to be used for the create or update.
         * @param options The options parameters.
         */
        put(resourceGroupName5, accountName3, encryptionScopeName3, encryptionScope3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            encryptionScopeName: encryptionScopeName3,
            encryptionScope: encryptionScope3,
            options
          }, putOperationSpec2);
        }
        /**
         * Update encryption scope properties as specified in the request body. Update fails if the specified
         * encryption scope does not already exist.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param encryptionScope Encryption scope properties to be used for the update.
         * @param options The options parameters.
         */
        patch(resourceGroupName5, accountName3, encryptionScopeName3, encryptionScope3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            encryptionScopeName: encryptionScopeName3,
            encryptionScope: encryptionScope3,
            options
          }, patchOperationSpec);
        }
        /**
         * Returns the properties for the specified encryption scope.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, encryptionScopeName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, encryptionScopeName: encryptionScopeName3, options }, getOperationSpec5);
        }
        /**
         * Lists all the encryption scopes available under the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec7);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec2);
        }
      };
      __name(EncryptionScopesImpl, "EncryptionScopesImpl");
      serializer10 = createSerializer(
        mappers_exports,
        /* isXml */
        false
      );
      putOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: EncryptionScope
          },
          201: {
            bodyMapper: EncryptionScope
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        requestBody: encryptionScope,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          encryptionScopeName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer10
      };
      patchOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: EncryptionScope
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        requestBody: encryptionScope,
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          encryptionScopeName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer10
      };
      getOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScope
          },
          default: {
            bodyMapper: ErrorResponse
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          encryptionScopeName
        ],
        headerParameters: [accept],
        serializer: serializer10
      };
      listOperationSpec7 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScopeListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1
        ],
        headerParameters: [accept],
        serializer: serializer10
      };
      listNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScopeListResult
          }
        },
        queryParameters: [apiVersion],
        urlParameters: [
          $host,
          subscriptionId,
          resourceGroupName,
          accountName1,
          nextLink
        ],
        headerParameters: [accept],
        serializer: serializer10
      };
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/index.js
  var init_operations2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operations/index.js"() {
      init_operations();
      init_skus();
      init_storageAccounts();
      init_usages();
      init_managementPolicies();
      init_blobInventoryPolicies();
      init_privateEndpointConnections();
      init_privateLinkResources();
      init_objectReplicationPoliciesOperations();
      init_encryptionScopes();
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/storageManagementClient.js
  var StorageManagementClient;
  var init_storageManagementClient = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/storageManagementClient.js"() {
      init_src6();
      init_operations2();
      StorageManagementClient = class extends ServiceClient {
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The ID of the target subscription.
         * @param options The parameter options
         */
        constructor(credentials, subscriptionId7, options) {
          if (credentials === void 0) {
            throw new Error("'credentials' cannot be null");
          }
          if (subscriptionId7 === void 0) {
            throw new Error("'subscriptionId' cannot be null");
          }
          if (!options) {
            options = {};
          }
          const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
          };
          const packageDetails = `azsdk-js-arm-storage-profile-2020-09-01-hybrid/2.0.0`;
          const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
          if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
          }
          const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
            userAgentPrefix
          }, baseUri: options.endpoint || "https://management.azure.com" });
          super(optionsWithDefaults);
          this.subscriptionId = subscriptionId7;
          this.$host = options.$host || "https://management.azure.com";
          this.apiVersion = options.apiVersion || "2019-06-01";
          this.operations = new OperationsImpl(this);
          this.skus = new SkusImpl(this);
          this.storageAccounts = new StorageAccountsImpl(this);
          this.usages = new UsagesImpl(this);
          this.managementPolicies = new ManagementPoliciesImpl(this);
          this.blobInventoryPolicies = new BlobInventoryPoliciesImpl(this);
          this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
          this.privateLinkResources = new PrivateLinkResourcesImpl(this);
          this.objectReplicationPoliciesOperations = new ObjectReplicationPoliciesOperationsImpl(this);
          this.encryptionScopes = new EncryptionScopesImpl(this);
        }
      };
      __name(StorageManagementClient, "StorageManagementClient");
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/operations.js
  var init_operations3 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/operations.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/skus.js
  var init_skus2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/skus.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/storageAccounts.js
  var init_storageAccounts2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/storageAccounts.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/usages.js
  var init_usages2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/usages.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/managementPolicies.js
  var init_managementPolicies2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/managementPolicies.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/blobInventoryPolicies.js
  var init_blobInventoryPolicies2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/blobInventoryPolicies.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/privateEndpointConnections.js
  var init_privateEndpointConnections2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/privateEndpointConnections.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/privateLinkResources.js
  var init_privateLinkResources2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/privateLinkResources.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/objectReplicationPoliciesOperations.js
  var init_objectReplicationPoliciesOperations2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/objectReplicationPoliciesOperations.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/encryptionScopes.js
  var init_encryptionScopes2 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/encryptionScopes.js"() {
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/index.js
  var init_operationsInterfaces = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/index.js"() {
      init_operations3();
      init_skus2();
      init_storageAccounts2();
      init_usages2();
      init_managementPolicies2();
      init_blobInventoryPolicies2();
      init_privateEndpointConnections2();
      init_privateLinkResources2();
      init_objectReplicationPoliciesOperations2();
      init_encryptionScopes2();
    }
  });

  // node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/index.js
  var src_exports3 = {};
  __export(src_exports3, {
    KnownBlobInventoryPolicyName: () => KnownBlobInventoryPolicyName,
    KnownBlobRestoreProgressStatus: () => KnownBlobRestoreProgressStatus,
    KnownBypass: () => KnownBypass,
    KnownCreatedByType: () => KnownCreatedByType,
    KnownDirectoryServiceOptions: () => KnownDirectoryServiceOptions,
    KnownEncryptionScopeSource: () => KnownEncryptionScopeSource,
    KnownEncryptionScopeState: () => KnownEncryptionScopeState,
    KnownGeoReplicationStatus: () => KnownGeoReplicationStatus,
    KnownInventoryRuleType: () => KnownInventoryRuleType,
    KnownKeySource: () => KnownKeySource,
    KnownKeyType: () => KnownKeyType,
    KnownKind: () => KnownKind,
    KnownLargeFileSharesState: () => KnownLargeFileSharesState,
    KnownManagementPolicyName: () => KnownManagementPolicyName,
    KnownMinimumTlsVersion: () => KnownMinimumTlsVersion,
    KnownPermissions: () => KnownPermissions,
    KnownPrivateEndpointConnectionProvisioningState: () => KnownPrivateEndpointConnectionProvisioningState,
    KnownPrivateEndpointServiceConnectionStatus: () => KnownPrivateEndpointServiceConnectionStatus,
    KnownReasonCode: () => KnownReasonCode,
    KnownRoutingChoice: () => KnownRoutingChoice,
    KnownRuleType: () => KnownRuleType,
    KnownServices: () => KnownServices,
    KnownSignedResource: () => KnownSignedResource,
    KnownSignedResourceTypes: () => KnownSignedResourceTypes,
    KnownSkuName: () => KnownSkuName,
    StorageManagementClient: () => StorageManagementClient
  });
  var init_src8 = __esm({
    "node_modules/@azure/arm-storage-profile-2020-09-01-hybrid/dist-esm/src/index.js"() {
      init_models();
      init_storageManagementClient();
      init_operationsInterfaces();
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/pagingHelper.js
  function getContinuationToken(page) {
    var _a7;
    if (typeof page !== "object" || page === null) {
      return void 0;
    }
    return (_a7 = pageMap.get(page)) === null || _a7 === void 0 ? void 0 : _a7.continuationToken;
  }
  function setContinuationToken(page, continuationToken) {
    var _a7;
    if (typeof page !== "object" || page === null || !continuationToken) {
      return;
    }
    const pageInfo = (_a7 = pageMap.get(page)) !== null && _a7 !== void 0 ? _a7 : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
  }
  var pageMap;
  var init_pagingHelper = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/pagingHelper.js"() {
      pageMap = /* @__PURE__ */ new WeakMap();
      __name(getContinuationToken, "getContinuationToken");
      __name(setContinuationToken, "setContinuationToken");
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/models/index.js
  var KnownSkuName2, KnownKind2, KnownReasonCode2, KnownExtendedLocationTypes, KnownIdentityType, KnownAllowedCopyScope, KnownPublicNetworkAccess, KnownExpirationAction, KnownKeyType2, KnownKeySource2, KnownBypass2, KnownState, KnownDirectoryServiceOptions2, KnownAccountType, KnownDefaultSharePermission, KnownLargeFileSharesState2, KnownRoutingChoice2, KnownMinimumTlsVersion2, KnownAccountImmutabilityPolicyState, KnownDnsEndpointType, KnownGeoReplicationStatus2, KnownPrivateEndpointServiceConnectionStatus2, KnownPrivateEndpointConnectionProvisioningState2, KnownBlobRestoreProgressStatus2, KnownSkuConversionStatus, KnownServices2, KnownSignedResourceTypes2, KnownPermissions2, KnownSignedResource2, KnownManagementPolicyName2, KnownRuleType2, KnownBlobInventoryPolicyName2, KnownInventoryRuleType2, KnownFormat, KnownSchedule, KnownObjectType, KnownCreatedByType2, KnownEncryptionScopeSource2, KnownEncryptionScopeState2, KnownListEncryptionScopesInclude, KnownAllowedMethods, KnownName, KnownListContainersInclude, KnownLeaseStatus, KnownLeaseState, KnownLeaseDuration, KnownImmutabilityPolicyState, KnownImmutabilityPolicyUpdateType, KnownMigrationState, KnownLeaseContainerRequestAction, KnownEnabledProtocols, KnownRootSquashType, KnownShareAccessTier, KnownLeaseShareAction;
  var init_models3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/models/index.js"() {
      (function(KnownSkuName3) {
        KnownSkuName3["StandardLRS"] = "Standard_LRS";
        KnownSkuName3["StandardGRS"] = "Standard_GRS";
        KnownSkuName3["StandardRagrs"] = "Standard_RAGRS";
        KnownSkuName3["StandardZRS"] = "Standard_ZRS";
        KnownSkuName3["PremiumLRS"] = "Premium_LRS";
        KnownSkuName3["PremiumZRS"] = "Premium_ZRS";
        KnownSkuName3["StandardGzrs"] = "Standard_GZRS";
        KnownSkuName3["StandardRagzrs"] = "Standard_RAGZRS";
      })(KnownSkuName2 || (KnownSkuName2 = {}));
      (function(KnownKind3) {
        KnownKind3["Storage"] = "Storage";
        KnownKind3["StorageV2"] = "StorageV2";
        KnownKind3["BlobStorage"] = "BlobStorage";
        KnownKind3["FileStorage"] = "FileStorage";
        KnownKind3["BlockBlobStorage"] = "BlockBlobStorage";
      })(KnownKind2 || (KnownKind2 = {}));
      (function(KnownReasonCode3) {
        KnownReasonCode3["QuotaId"] = "QuotaId";
        KnownReasonCode3["NotAvailableForSubscription"] = "NotAvailableForSubscription";
      })(KnownReasonCode2 || (KnownReasonCode2 = {}));
      (function(KnownExtendedLocationTypes2) {
        KnownExtendedLocationTypes2["EdgeZone"] = "EdgeZone";
      })(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
      (function(KnownIdentityType2) {
        KnownIdentityType2["None"] = "None";
        KnownIdentityType2["SystemAssigned"] = "SystemAssigned";
        KnownIdentityType2["UserAssigned"] = "UserAssigned";
        KnownIdentityType2["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
      })(KnownIdentityType || (KnownIdentityType = {}));
      (function(KnownAllowedCopyScope2) {
        KnownAllowedCopyScope2["PrivateLink"] = "PrivateLink";
        KnownAllowedCopyScope2["AAD"] = "AAD";
      })(KnownAllowedCopyScope || (KnownAllowedCopyScope = {}));
      (function(KnownPublicNetworkAccess2) {
        KnownPublicNetworkAccess2["Enabled"] = "Enabled";
        KnownPublicNetworkAccess2["Disabled"] = "Disabled";
      })(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
      (function(KnownExpirationAction2) {
        KnownExpirationAction2["Log"] = "Log";
      })(KnownExpirationAction || (KnownExpirationAction = {}));
      (function(KnownKeyType3) {
        KnownKeyType3["Service"] = "Service";
        KnownKeyType3["Account"] = "Account";
      })(KnownKeyType2 || (KnownKeyType2 = {}));
      (function(KnownKeySource3) {
        KnownKeySource3["MicrosoftStorage"] = "Microsoft.Storage";
        KnownKeySource3["MicrosoftKeyvault"] = "Microsoft.Keyvault";
      })(KnownKeySource2 || (KnownKeySource2 = {}));
      (function(KnownBypass3) {
        KnownBypass3["None"] = "None";
        KnownBypass3["Logging"] = "Logging";
        KnownBypass3["Metrics"] = "Metrics";
        KnownBypass3["AzureServices"] = "AzureServices";
      })(KnownBypass2 || (KnownBypass2 = {}));
      (function(KnownState2) {
        KnownState2["Provisioning"] = "Provisioning";
        KnownState2["Deprovisioning"] = "Deprovisioning";
        KnownState2["Succeeded"] = "Succeeded";
        KnownState2["Failed"] = "Failed";
        KnownState2["NetworkSourceDeleted"] = "NetworkSourceDeleted";
      })(KnownState || (KnownState = {}));
      (function(KnownDirectoryServiceOptions3) {
        KnownDirectoryServiceOptions3["None"] = "None";
        KnownDirectoryServiceOptions3["Aadds"] = "AADDS";
        KnownDirectoryServiceOptions3["AD"] = "AD";
        KnownDirectoryServiceOptions3["Aadkerb"] = "AADKERB";
      })(KnownDirectoryServiceOptions2 || (KnownDirectoryServiceOptions2 = {}));
      (function(KnownAccountType2) {
        KnownAccountType2["User"] = "User";
        KnownAccountType2["Computer"] = "Computer";
      })(KnownAccountType || (KnownAccountType = {}));
      (function(KnownDefaultSharePermission2) {
        KnownDefaultSharePermission2["None"] = "None";
        KnownDefaultSharePermission2["StorageFileDataSmbShareReader"] = "StorageFileDataSmbShareReader";
        KnownDefaultSharePermission2["StorageFileDataSmbShareContributor"] = "StorageFileDataSmbShareContributor";
        KnownDefaultSharePermission2["StorageFileDataSmbShareElevatedContributor"] = "StorageFileDataSmbShareElevatedContributor";
      })(KnownDefaultSharePermission || (KnownDefaultSharePermission = {}));
      (function(KnownLargeFileSharesState3) {
        KnownLargeFileSharesState3["Disabled"] = "Disabled";
        KnownLargeFileSharesState3["Enabled"] = "Enabled";
      })(KnownLargeFileSharesState2 || (KnownLargeFileSharesState2 = {}));
      (function(KnownRoutingChoice3) {
        KnownRoutingChoice3["MicrosoftRouting"] = "MicrosoftRouting";
        KnownRoutingChoice3["InternetRouting"] = "InternetRouting";
      })(KnownRoutingChoice2 || (KnownRoutingChoice2 = {}));
      (function(KnownMinimumTlsVersion3) {
        KnownMinimumTlsVersion3["TLS10"] = "TLS1_0";
        KnownMinimumTlsVersion3["TLS11"] = "TLS1_1";
        KnownMinimumTlsVersion3["TLS12"] = "TLS1_2";
      })(KnownMinimumTlsVersion2 || (KnownMinimumTlsVersion2 = {}));
      (function(KnownAccountImmutabilityPolicyState2) {
        KnownAccountImmutabilityPolicyState2["Unlocked"] = "Unlocked";
        KnownAccountImmutabilityPolicyState2["Locked"] = "Locked";
        KnownAccountImmutabilityPolicyState2["Disabled"] = "Disabled";
      })(KnownAccountImmutabilityPolicyState || (KnownAccountImmutabilityPolicyState = {}));
      (function(KnownDnsEndpointType2) {
        KnownDnsEndpointType2["Standard"] = "Standard";
        KnownDnsEndpointType2["AzureDnsZone"] = "AzureDnsZone";
      })(KnownDnsEndpointType || (KnownDnsEndpointType = {}));
      (function(KnownGeoReplicationStatus3) {
        KnownGeoReplicationStatus3["Live"] = "Live";
        KnownGeoReplicationStatus3["Bootstrap"] = "Bootstrap";
        KnownGeoReplicationStatus3["Unavailable"] = "Unavailable";
      })(KnownGeoReplicationStatus2 || (KnownGeoReplicationStatus2 = {}));
      (function(KnownPrivateEndpointServiceConnectionStatus3) {
        KnownPrivateEndpointServiceConnectionStatus3["Pending"] = "Pending";
        KnownPrivateEndpointServiceConnectionStatus3["Approved"] = "Approved";
        KnownPrivateEndpointServiceConnectionStatus3["Rejected"] = "Rejected";
      })(KnownPrivateEndpointServiceConnectionStatus2 || (KnownPrivateEndpointServiceConnectionStatus2 = {}));
      (function(KnownPrivateEndpointConnectionProvisioningState3) {
        KnownPrivateEndpointConnectionProvisioningState3["Succeeded"] = "Succeeded";
        KnownPrivateEndpointConnectionProvisioningState3["Creating"] = "Creating";
        KnownPrivateEndpointConnectionProvisioningState3["Deleting"] = "Deleting";
        KnownPrivateEndpointConnectionProvisioningState3["Failed"] = "Failed";
      })(KnownPrivateEndpointConnectionProvisioningState2 || (KnownPrivateEndpointConnectionProvisioningState2 = {}));
      (function(KnownBlobRestoreProgressStatus3) {
        KnownBlobRestoreProgressStatus3["InProgress"] = "InProgress";
        KnownBlobRestoreProgressStatus3["Complete"] = "Complete";
        KnownBlobRestoreProgressStatus3["Failed"] = "Failed";
      })(KnownBlobRestoreProgressStatus2 || (KnownBlobRestoreProgressStatus2 = {}));
      (function(KnownSkuConversionStatus2) {
        KnownSkuConversionStatus2["InProgress"] = "InProgress";
        KnownSkuConversionStatus2["Succeeded"] = "Succeeded";
        KnownSkuConversionStatus2["Failed"] = "Failed";
      })(KnownSkuConversionStatus || (KnownSkuConversionStatus = {}));
      (function(KnownServices3) {
        KnownServices3["B"] = "b";
        KnownServices3["Q"] = "q";
        KnownServices3["T"] = "t";
        KnownServices3["F"] = "f";
      })(KnownServices2 || (KnownServices2 = {}));
      (function(KnownSignedResourceTypes3) {
        KnownSignedResourceTypes3["S"] = "s";
        KnownSignedResourceTypes3["C"] = "c";
        KnownSignedResourceTypes3["O"] = "o";
      })(KnownSignedResourceTypes2 || (KnownSignedResourceTypes2 = {}));
      (function(KnownPermissions3) {
        KnownPermissions3["R"] = "r";
        KnownPermissions3["D"] = "d";
        KnownPermissions3["W"] = "w";
        KnownPermissions3["L"] = "l";
        KnownPermissions3["A"] = "a";
        KnownPermissions3["C"] = "c";
        KnownPermissions3["U"] = "u";
        KnownPermissions3["P"] = "p";
      })(KnownPermissions2 || (KnownPermissions2 = {}));
      (function(KnownSignedResource3) {
        KnownSignedResource3["B"] = "b";
        KnownSignedResource3["C"] = "c";
        KnownSignedResource3["F"] = "f";
        KnownSignedResource3["S"] = "s";
      })(KnownSignedResource2 || (KnownSignedResource2 = {}));
      (function(KnownManagementPolicyName3) {
        KnownManagementPolicyName3["Default"] = "default";
      })(KnownManagementPolicyName2 || (KnownManagementPolicyName2 = {}));
      (function(KnownRuleType3) {
        KnownRuleType3["Lifecycle"] = "Lifecycle";
      })(KnownRuleType2 || (KnownRuleType2 = {}));
      (function(KnownBlobInventoryPolicyName3) {
        KnownBlobInventoryPolicyName3["Default"] = "default";
      })(KnownBlobInventoryPolicyName2 || (KnownBlobInventoryPolicyName2 = {}));
      (function(KnownInventoryRuleType3) {
        KnownInventoryRuleType3["Inventory"] = "Inventory";
      })(KnownInventoryRuleType2 || (KnownInventoryRuleType2 = {}));
      (function(KnownFormat2) {
        KnownFormat2["Csv"] = "Csv";
        KnownFormat2["Parquet"] = "Parquet";
      })(KnownFormat || (KnownFormat = {}));
      (function(KnownSchedule2) {
        KnownSchedule2["Daily"] = "Daily";
        KnownSchedule2["Weekly"] = "Weekly";
      })(KnownSchedule || (KnownSchedule = {}));
      (function(KnownObjectType2) {
        KnownObjectType2["Blob"] = "Blob";
        KnownObjectType2["Container"] = "Container";
      })(KnownObjectType || (KnownObjectType = {}));
      (function(KnownCreatedByType3) {
        KnownCreatedByType3["User"] = "User";
        KnownCreatedByType3["Application"] = "Application";
        KnownCreatedByType3["ManagedIdentity"] = "ManagedIdentity";
        KnownCreatedByType3["Key"] = "Key";
      })(KnownCreatedByType2 || (KnownCreatedByType2 = {}));
      (function(KnownEncryptionScopeSource3) {
        KnownEncryptionScopeSource3["MicrosoftStorage"] = "Microsoft.Storage";
        KnownEncryptionScopeSource3["MicrosoftKeyVault"] = "Microsoft.KeyVault";
      })(KnownEncryptionScopeSource2 || (KnownEncryptionScopeSource2 = {}));
      (function(KnownEncryptionScopeState3) {
        KnownEncryptionScopeState3["Enabled"] = "Enabled";
        KnownEncryptionScopeState3["Disabled"] = "Disabled";
      })(KnownEncryptionScopeState2 || (KnownEncryptionScopeState2 = {}));
      (function(KnownListEncryptionScopesInclude2) {
        KnownListEncryptionScopesInclude2["All"] = "All";
        KnownListEncryptionScopesInclude2["Enabled"] = "Enabled";
        KnownListEncryptionScopesInclude2["Disabled"] = "Disabled";
      })(KnownListEncryptionScopesInclude || (KnownListEncryptionScopesInclude = {}));
      (function(KnownAllowedMethods2) {
        KnownAllowedMethods2["Delete"] = "DELETE";
        KnownAllowedMethods2["GET"] = "GET";
        KnownAllowedMethods2["Head"] = "HEAD";
        KnownAllowedMethods2["Merge"] = "MERGE";
        KnownAllowedMethods2["Post"] = "POST";
        KnownAllowedMethods2["Options"] = "OPTIONS";
        KnownAllowedMethods2["PUT"] = "PUT";
        KnownAllowedMethods2["Patch"] = "PATCH";
      })(KnownAllowedMethods || (KnownAllowedMethods = {}));
      (function(KnownName2) {
        KnownName2["AccessTimeTracking"] = "AccessTimeTracking";
      })(KnownName || (KnownName = {}));
      (function(KnownListContainersInclude2) {
        KnownListContainersInclude2["Deleted"] = "deleted";
      })(KnownListContainersInclude || (KnownListContainersInclude = {}));
      (function(KnownLeaseStatus2) {
        KnownLeaseStatus2["Locked"] = "Locked";
        KnownLeaseStatus2["Unlocked"] = "Unlocked";
      })(KnownLeaseStatus || (KnownLeaseStatus = {}));
      (function(KnownLeaseState2) {
        KnownLeaseState2["Available"] = "Available";
        KnownLeaseState2["Leased"] = "Leased";
        KnownLeaseState2["Expired"] = "Expired";
        KnownLeaseState2["Breaking"] = "Breaking";
        KnownLeaseState2["Broken"] = "Broken";
      })(KnownLeaseState || (KnownLeaseState = {}));
      (function(KnownLeaseDuration2) {
        KnownLeaseDuration2["Infinite"] = "Infinite";
        KnownLeaseDuration2["Fixed"] = "Fixed";
      })(KnownLeaseDuration || (KnownLeaseDuration = {}));
      (function(KnownImmutabilityPolicyState2) {
        KnownImmutabilityPolicyState2["Locked"] = "Locked";
        KnownImmutabilityPolicyState2["Unlocked"] = "Unlocked";
      })(KnownImmutabilityPolicyState || (KnownImmutabilityPolicyState = {}));
      (function(KnownImmutabilityPolicyUpdateType2) {
        KnownImmutabilityPolicyUpdateType2["Put"] = "put";
        KnownImmutabilityPolicyUpdateType2["Lock"] = "lock";
        KnownImmutabilityPolicyUpdateType2["Extend"] = "extend";
      })(KnownImmutabilityPolicyUpdateType || (KnownImmutabilityPolicyUpdateType = {}));
      (function(KnownMigrationState2) {
        KnownMigrationState2["InProgress"] = "InProgress";
        KnownMigrationState2["Completed"] = "Completed";
      })(KnownMigrationState || (KnownMigrationState = {}));
      (function(KnownLeaseContainerRequestAction2) {
        KnownLeaseContainerRequestAction2["Acquire"] = "Acquire";
        KnownLeaseContainerRequestAction2["Renew"] = "Renew";
        KnownLeaseContainerRequestAction2["Change"] = "Change";
        KnownLeaseContainerRequestAction2["Release"] = "Release";
        KnownLeaseContainerRequestAction2["Break"] = "Break";
      })(KnownLeaseContainerRequestAction || (KnownLeaseContainerRequestAction = {}));
      (function(KnownEnabledProtocols2) {
        KnownEnabledProtocols2["SMB"] = "SMB";
        KnownEnabledProtocols2["NFS"] = "NFS";
      })(KnownEnabledProtocols || (KnownEnabledProtocols = {}));
      (function(KnownRootSquashType2) {
        KnownRootSquashType2["NoRootSquash"] = "NoRootSquash";
        KnownRootSquashType2["RootSquash"] = "RootSquash";
        KnownRootSquashType2["AllSquash"] = "AllSquash";
      })(KnownRootSquashType || (KnownRootSquashType = {}));
      (function(KnownShareAccessTier2) {
        KnownShareAccessTier2["TransactionOptimized"] = "TransactionOptimized";
        KnownShareAccessTier2["Hot"] = "Hot";
        KnownShareAccessTier2["Cool"] = "Cool";
        KnownShareAccessTier2["Premium"] = "Premium";
      })(KnownShareAccessTier || (KnownShareAccessTier = {}));
      (function(KnownLeaseShareAction2) {
        KnownLeaseShareAction2["Acquire"] = "Acquire";
        KnownLeaseShareAction2["Renew"] = "Renew";
        KnownLeaseShareAction2["Change"] = "Change";
        KnownLeaseShareAction2["Release"] = "Release";
        KnownLeaseShareAction2["Break"] = "Break";
      })(KnownLeaseShareAction || (KnownLeaseShareAction = {}));
    }
  });

  // node_modules/@azure/arm-storage/node_modules/tslib/tslib.es6.js
  function __rest2(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __awaiter2(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    __name(adopt, "adopt");
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      __name(fulfilled, "fulfilled");
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      __name(rejected, "rejected");
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      __name(step, "step");
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __values3(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await2(v) {
    return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
  }
  function __asyncGenerator2(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  function __asyncDelegator2(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await2(o[n](v)), done: false } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  function __asyncValues2(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  var init_tslib_es63 = __esm({
    "node_modules/@azure/arm-storage/node_modules/tslib/tslib.es6.js"() {
      __name(__rest2, "__rest");
      __name(__awaiter2, "__awaiter");
      __name(__values3, "__values");
      __name(__await2, "__await");
      __name(__asyncGenerator2, "__asyncGenerator");
      __name(__asyncDelegator2, "__asyncDelegator");
      __name(__asyncValues2, "__asyncValues");
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/models/mappers.js
  var mappers_exports2 = {};
  __export(mappers_exports2, {
    AccessPolicy: () => AccessPolicy,
    AccountImmutabilityPolicyProperties: () => AccountImmutabilityPolicyProperties,
    AccountSasParameters: () => AccountSasParameters2,
    ActiveDirectoryProperties: () => ActiveDirectoryProperties2,
    AzureEntityResource: () => AzureEntityResource,
    AzureFilesIdentityBasedAuthentication: () => AzureFilesIdentityBasedAuthentication2,
    BlobContainer: () => BlobContainer,
    BlobContainersCreateOrUpdateImmutabilityPolicyHeaders: () => BlobContainersCreateOrUpdateImmutabilityPolicyHeaders,
    BlobContainersDeleteImmutabilityPolicyHeaders: () => BlobContainersDeleteImmutabilityPolicyHeaders,
    BlobContainersExtendImmutabilityPolicyHeaders: () => BlobContainersExtendImmutabilityPolicyHeaders,
    BlobContainersGetImmutabilityPolicyHeaders: () => BlobContainersGetImmutabilityPolicyHeaders,
    BlobContainersLockImmutabilityPolicyHeaders: () => BlobContainersLockImmutabilityPolicyHeaders,
    BlobInventoryPolicy: () => BlobInventoryPolicy2,
    BlobInventoryPolicyDefinition: () => BlobInventoryPolicyDefinition2,
    BlobInventoryPolicyFilter: () => BlobInventoryPolicyFilter2,
    BlobInventoryPolicyRule: () => BlobInventoryPolicyRule2,
    BlobInventoryPolicySchema: () => BlobInventoryPolicySchema2,
    BlobRestoreParameters: () => BlobRestoreParameters2,
    BlobRestoreRange: () => BlobRestoreRange2,
    BlobRestoreStatus: () => BlobRestoreStatus2,
    BlobServiceItems: () => BlobServiceItems,
    BlobServiceProperties: () => BlobServiceProperties,
    ChangeFeed: () => ChangeFeed,
    CheckNameAvailabilityResult: () => CheckNameAvailabilityResult2,
    CloudError: () => CloudError,
    CloudErrorBody: () => CloudErrorBody,
    CorsRule: () => CorsRule,
    CorsRules: () => CorsRules,
    CustomDomain: () => CustomDomain2,
    DateAfterCreation: () => DateAfterCreation2,
    DateAfterModification: () => DateAfterModification2,
    DeleteRetentionPolicy: () => DeleteRetentionPolicy,
    DeletedAccount: () => DeletedAccount,
    DeletedAccountListResult: () => DeletedAccountListResult,
    DeletedShare: () => DeletedShare,
    Dimension: () => Dimension2,
    Encryption: () => Encryption2,
    EncryptionIdentity: () => EncryptionIdentity,
    EncryptionScope: () => EncryptionScope2,
    EncryptionScopeKeyVaultProperties: () => EncryptionScopeKeyVaultProperties2,
    EncryptionScopeListResult: () => EncryptionScopeListResult2,
    EncryptionService: () => EncryptionService2,
    EncryptionServices: () => EncryptionServices2,
    Endpoints: () => Endpoints2,
    ErrorResponse: () => ErrorResponse2,
    ErrorResponseBody: () => ErrorResponseBody2,
    ExtendedLocation: () => ExtendedLocation,
    FileServiceItems: () => FileServiceItems,
    FileServiceProperties: () => FileServiceProperties,
    FileShare: () => FileShare,
    FileShareItem: () => FileShareItem,
    FileShareItems: () => FileShareItems,
    FileSharesLeaseHeaders: () => FileSharesLeaseHeaders,
    GeoReplicationStats: () => GeoReplicationStats2,
    IPRule: () => IPRule2,
    Identity: () => Identity2,
    ImmutabilityPolicy: () => ImmutabilityPolicy,
    ImmutabilityPolicyProperties: () => ImmutabilityPolicyProperties,
    ImmutableStorageAccount: () => ImmutableStorageAccount,
    ImmutableStorageWithVersioning: () => ImmutableStorageWithVersioning,
    KeyCreationTime: () => KeyCreationTime,
    KeyPolicy: () => KeyPolicy,
    KeyVaultProperties: () => KeyVaultProperties2,
    LastAccessTimeTrackingPolicy: () => LastAccessTimeTrackingPolicy,
    LeaseContainerRequest: () => LeaseContainerRequest,
    LeaseContainerResponse: () => LeaseContainerResponse,
    LeaseShareRequest: () => LeaseShareRequest,
    LeaseShareResponse: () => LeaseShareResponse,
    LegalHold: () => LegalHold,
    LegalHoldProperties: () => LegalHoldProperties,
    ListAccountSasResponse: () => ListAccountSasResponse2,
    ListBlobInventoryPolicy: () => ListBlobInventoryPolicy2,
    ListContainerItem: () => ListContainerItem,
    ListContainerItems: () => ListContainerItems,
    ListQueue: () => ListQueue,
    ListQueueResource: () => ListQueueResource,
    ListQueueServices: () => ListQueueServices,
    ListServiceSasResponse: () => ListServiceSasResponse2,
    ListTableResource: () => ListTableResource,
    ListTableServices: () => ListTableServices,
    LocalUser: () => LocalUser,
    LocalUserKeys: () => LocalUserKeys,
    LocalUserRegeneratePasswordResult: () => LocalUserRegeneratePasswordResult,
    LocalUsers: () => LocalUsers,
    ManagementPolicy: () => ManagementPolicy2,
    ManagementPolicyAction: () => ManagementPolicyAction2,
    ManagementPolicyBaseBlob: () => ManagementPolicyBaseBlob2,
    ManagementPolicyDefinition: () => ManagementPolicyDefinition2,
    ManagementPolicyFilter: () => ManagementPolicyFilter2,
    ManagementPolicyRule: () => ManagementPolicyRule2,
    ManagementPolicySchema: () => ManagementPolicySchema2,
    ManagementPolicySnapShot: () => ManagementPolicySnapShot2,
    ManagementPolicyVersion: () => ManagementPolicyVersion2,
    MetricSpecification: () => MetricSpecification2,
    Multichannel: () => Multichannel,
    NetworkRuleSet: () => NetworkRuleSet2,
    ObjectReplicationPolicies: () => ObjectReplicationPolicies2,
    ObjectReplicationPolicy: () => ObjectReplicationPolicy2,
    ObjectReplicationPolicyFilter: () => ObjectReplicationPolicyFilter2,
    ObjectReplicationPolicyRule: () => ObjectReplicationPolicyRule2,
    Operation: () => Operation2,
    OperationDisplay: () => OperationDisplay2,
    OperationListResult: () => OperationListResult2,
    PermissionScope: () => PermissionScope,
    PrivateEndpoint: () => PrivateEndpoint2,
    PrivateEndpointConnection: () => PrivateEndpointConnection2,
    PrivateEndpointConnectionListResult: () => PrivateEndpointConnectionListResult2,
    PrivateLinkResource: () => PrivateLinkResource2,
    PrivateLinkResourceListResult: () => PrivateLinkResourceListResult2,
    PrivateLinkServiceConnectionState: () => PrivateLinkServiceConnectionState2,
    ProtectedAppendWritesHistory: () => ProtectedAppendWritesHistory,
    ProtocolSettings: () => ProtocolSettings,
    ProxyResource: () => ProxyResource,
    QueueServiceProperties: () => QueueServiceProperties,
    Resource: () => Resource2,
    ResourceAccessRule: () => ResourceAccessRule,
    RestorePolicyProperties: () => RestorePolicyProperties,
    Restriction: () => Restriction2,
    RoutingPreference: () => RoutingPreference2,
    SKUCapability: () => SKUCapability2,
    SasPolicy: () => SasPolicy,
    ServiceSasParameters: () => ServiceSasParameters2,
    ServiceSpecification: () => ServiceSpecification2,
    SignedIdentifier: () => SignedIdentifier,
    Sku: () => Sku2,
    SkuInformation: () => SkuInformation2,
    SmbSetting: () => SmbSetting,
    SshPublicKey: () => SshPublicKey,
    StorageAccount: () => StorageAccount2,
    StorageAccountCheckNameAvailabilityParameters: () => StorageAccountCheckNameAvailabilityParameters2,
    StorageAccountCreateParameters: () => StorageAccountCreateParameters2,
    StorageAccountInternetEndpoints: () => StorageAccountInternetEndpoints2,
    StorageAccountKey: () => StorageAccountKey2,
    StorageAccountListKeysResult: () => StorageAccountListKeysResult2,
    StorageAccountListResult: () => StorageAccountListResult2,
    StorageAccountMicrosoftEndpoints: () => StorageAccountMicrosoftEndpoints2,
    StorageAccountRegenerateKeyParameters: () => StorageAccountRegenerateKeyParameters2,
    StorageAccountSkuConversionStatus: () => StorageAccountSkuConversionStatus,
    StorageAccountUpdateParameters: () => StorageAccountUpdateParameters2,
    StorageQueue: () => StorageQueue,
    StorageSkuListResult: () => StorageSkuListResult2,
    SystemData: () => SystemData2,
    Table: () => Table,
    TableAccessPolicy: () => TableAccessPolicy,
    TableServiceProperties: () => TableServiceProperties,
    TableSignedIdentifier: () => TableSignedIdentifier,
    TagFilter: () => TagFilter2,
    TagProperty: () => TagProperty,
    TrackedResource: () => TrackedResource2,
    UpdateHistoryProperty: () => UpdateHistoryProperty,
    Usage: () => Usage2,
    UsageListResult: () => UsageListResult2,
    UsageName: () => UsageName2,
    UserAssignedIdentity: () => UserAssignedIdentity,
    VirtualNetworkRule: () => VirtualNetworkRule2
  });
  var OperationListResult2, Operation2, OperationDisplay2, ServiceSpecification2, MetricSpecification2, Dimension2, StorageSkuListResult2, SkuInformation2, SKUCapability2, Restriction2, StorageAccountCheckNameAvailabilityParameters2, CheckNameAvailabilityResult2, StorageAccountCreateParameters2, Sku2, ExtendedLocation, Identity2, UserAssignedIdentity, SasPolicy, KeyPolicy, CustomDomain2, Encryption2, EncryptionServices2, EncryptionService2, KeyVaultProperties2, EncryptionIdentity, NetworkRuleSet2, ResourceAccessRule, VirtualNetworkRule2, IPRule2, AzureFilesIdentityBasedAuthentication2, ActiveDirectoryProperties2, RoutingPreference2, ImmutableStorageAccount, AccountImmutabilityPolicyProperties, Endpoints2, StorageAccountMicrosoftEndpoints2, StorageAccountInternetEndpoints2, KeyCreationTime, GeoReplicationStats2, PrivateEndpoint2, PrivateLinkServiceConnectionState2, Resource2, BlobRestoreStatus2, BlobRestoreParameters2, BlobRestoreRange2, StorageAccountSkuConversionStatus, StorageAccountUpdateParameters2, DeletedAccountListResult, ErrorResponse2, ErrorResponseBody2, StorageAccountListResult2, StorageAccountListKeysResult2, StorageAccountKey2, StorageAccountRegenerateKeyParameters2, UsageListResult2, Usage2, UsageName2, AccountSasParameters2, ListAccountSasResponse2, ServiceSasParameters2, ListServiceSasResponse2, ManagementPolicySchema2, ManagementPolicyRule2, ManagementPolicyDefinition2, ManagementPolicyAction2, ManagementPolicyBaseBlob2, DateAfterModification2, ManagementPolicySnapShot2, DateAfterCreation2, ManagementPolicyVersion2, ManagementPolicyFilter2, TagFilter2, BlobInventoryPolicySchema2, BlobInventoryPolicyRule2, BlobInventoryPolicyDefinition2, BlobInventoryPolicyFilter2, SystemData2, CloudError, CloudErrorBody, ListBlobInventoryPolicy2, PrivateEndpointConnectionListResult2, PrivateLinkResourceListResult2, ObjectReplicationPolicies2, ObjectReplicationPolicyRule2, ObjectReplicationPolicyFilter2, LocalUsers, PermissionScope, SshPublicKey, LocalUserKeys, LocalUserRegeneratePasswordResult, EncryptionScopeKeyVaultProperties2, EncryptionScopeListResult2, BlobServiceItems, CorsRules, CorsRule, DeleteRetentionPolicy, ChangeFeed, RestorePolicyProperties, LastAccessTimeTrackingPolicy, ListContainerItems, ImmutabilityPolicyProperties, UpdateHistoryProperty, LegalHoldProperties, TagProperty, ProtectedAppendWritesHistory, ImmutableStorageWithVersioning, LegalHold, LeaseContainerRequest, LeaseContainerResponse, FileServiceItems, ProtocolSettings, SmbSetting, Multichannel, FileShareItems, SignedIdentifier, AccessPolicy, DeletedShare, LeaseShareRequest, LeaseShareResponse, ListQueueServices, ListQueueResource, ListTableServices, TableSignedIdentifier, TableAccessPolicy, ListTableResource, PrivateEndpointConnection2, TrackedResource2, ProxyResource, ManagementPolicy2, BlobInventoryPolicy2, PrivateLinkResource2, ObjectReplicationPolicy2, LocalUser, EncryptionScope2, BlobServiceProperties, AzureEntityResource, FileServiceProperties, QueueServiceProperties, StorageQueue, ListQueue, TableServiceProperties, Table, StorageAccount2, DeletedAccount, ListContainerItem, BlobContainer, ImmutabilityPolicy, FileShareItem, FileShare, BlobContainersCreateOrUpdateImmutabilityPolicyHeaders, BlobContainersGetImmutabilityPolicyHeaders, BlobContainersDeleteImmutabilityPolicyHeaders, BlobContainersLockImmutabilityPolicyHeaders, BlobContainersExtendImmutabilityPolicyHeaders, FileSharesLeaseHeaders;
  var init_mappers2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/models/mappers.js"() {
      OperationListResult2 = {
        type: {
          name: "Composite",
          className: "OperationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Operation"
                  }
                }
              }
            }
          }
        }
      };
      Operation2 = {
        type: {
          name: "Composite",
          className: "Operation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            display: {
              serializedName: "display",
              type: {
                name: "Composite",
                className: "OperationDisplay"
              }
            },
            origin: {
              serializedName: "origin",
              type: {
                name: "String"
              }
            },
            serviceSpecification: {
              serializedName: "properties.serviceSpecification",
              type: {
                name: "Composite",
                className: "ServiceSpecification"
              }
            }
          }
        }
      };
      OperationDisplay2 = {
        type: {
          name: "Composite",
          className: "OperationDisplay",
          modelProperties: {
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ServiceSpecification2 = {
        type: {
          name: "Composite",
          className: "ServiceSpecification",
          modelProperties: {
            metricSpecifications: {
              serializedName: "metricSpecifications",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "MetricSpecification"
                  }
                }
              }
            }
          }
        }
      };
      MetricSpecification2 = {
        type: {
          name: "Composite",
          className: "MetricSpecification",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              type: {
                name: "String"
              }
            },
            displayDescription: {
              serializedName: "displayDescription",
              type: {
                name: "String"
              }
            },
            unit: {
              serializedName: "unit",
              type: {
                name: "String"
              }
            },
            dimensions: {
              serializedName: "dimensions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Dimension"
                  }
                }
              }
            },
            aggregationType: {
              serializedName: "aggregationType",
              type: {
                name: "String"
              }
            },
            fillGapWithZero: {
              serializedName: "fillGapWithZero",
              type: {
                name: "Boolean"
              }
            },
            category: {
              serializedName: "category",
              type: {
                name: "String"
              }
            },
            resourceIdDimensionNameOverride: {
              serializedName: "resourceIdDimensionNameOverride",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Dimension2 = {
        type: {
          name: "Composite",
          className: "Dimension",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageSkuListResult2 = {
        type: {
          name: "Composite",
          className: "StorageSkuListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "SkuInformation"
                  }
                }
              }
            }
          }
        }
      };
      SkuInformation2 = {
        type: {
          name: "Composite",
          className: "SkuInformation",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Standard", "Premium"]
              }
            },
            resourceType: {
              serializedName: "resourceType",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            kind: {
              serializedName: "kind",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            locations: {
              serializedName: "locations",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            capabilities: {
              serializedName: "capabilities",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "SKUCapability"
                  }
                }
              }
            },
            restrictions: {
              serializedName: "restrictions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Restriction"
                  }
                }
              }
            }
          }
        }
      };
      SKUCapability2 = {
        type: {
          name: "Composite",
          className: "SKUCapability",
          modelProperties: {
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Restriction2 = {
        type: {
          name: "Composite",
          className: "Restriction",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            values: {
              serializedName: "values",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            reasonCode: {
              serializedName: "reasonCode",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountCheckNameAvailabilityParameters2 = {
        type: {
          name: "Composite",
          className: "StorageAccountCheckNameAvailabilityParameters",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              defaultValue: "Microsoft.Storage/storageAccounts",
              isConstant: true,
              serializedName: "type",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CheckNameAvailabilityResult2 = {
        type: {
          name: "Composite",
          className: "CheckNameAvailabilityResult",
          modelProperties: {
            nameAvailable: {
              serializedName: "nameAvailable",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            },
            reason: {
              serializedName: "reason",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["AccountNameInvalid", "AlreadyExists"]
              }
            },
            message: {
              serializedName: "message",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountCreateParameters2 = {
        type: {
          name: "Composite",
          className: "StorageAccountCreateParameters",
          modelProperties: {
            sku: {
              serializedName: "sku",
              type: {
                name: "Composite",
                className: "Sku"
              }
            },
            kind: {
              serializedName: "kind",
              required: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            extendedLocation: {
              serializedName: "extendedLocation",
              type: {
                name: "Composite",
                className: "ExtendedLocation"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            },
            identity: {
              serializedName: "identity",
              type: {
                name: "Composite",
                className: "Identity"
              }
            },
            allowedCopyScope: {
              serializedName: "properties.allowedCopyScope",
              type: {
                name: "String"
              }
            },
            publicNetworkAccess: {
              serializedName: "properties.publicNetworkAccess",
              type: {
                name: "String"
              }
            },
            sasPolicy: {
              serializedName: "properties.sasPolicy",
              type: {
                name: "Composite",
                className: "SasPolicy"
              }
            },
            keyPolicy: {
              serializedName: "properties.keyPolicy",
              type: {
                name: "Composite",
                className: "KeyPolicy"
              }
            },
            customDomain: {
              serializedName: "properties.customDomain",
              type: {
                name: "Composite",
                className: "CustomDomain"
              }
            },
            encryption: {
              serializedName: "properties.encryption",
              type: {
                name: "Composite",
                className: "Encryption"
              }
            },
            networkRuleSet: {
              serializedName: "properties.networkAcls",
              type: {
                name: "Composite",
                className: "NetworkRuleSet"
              }
            },
            accessTier: {
              serializedName: "properties.accessTier",
              type: {
                name: "Enum",
                allowedValues: ["Hot", "Cool", "Premium"]
              }
            },
            azureFilesIdentityBasedAuthentication: {
              serializedName: "properties.azureFilesIdentityBasedAuthentication",
              type: {
                name: "Composite",
                className: "AzureFilesIdentityBasedAuthentication"
              }
            },
            enableHttpsTrafficOnly: {
              serializedName: "properties.supportsHttpsTrafficOnly",
              type: {
                name: "Boolean"
              }
            },
            isSftpEnabled: {
              serializedName: "properties.isSftpEnabled",
              type: {
                name: "Boolean"
              }
            },
            isLocalUserEnabled: {
              serializedName: "properties.isLocalUserEnabled",
              type: {
                name: "Boolean"
              }
            },
            isHnsEnabled: {
              serializedName: "properties.isHnsEnabled",
              type: {
                name: "Boolean"
              }
            },
            largeFileSharesState: {
              serializedName: "properties.largeFileSharesState",
              type: {
                name: "String"
              }
            },
            routingPreference: {
              serializedName: "properties.routingPreference",
              type: {
                name: "Composite",
                className: "RoutingPreference"
              }
            },
            allowBlobPublicAccess: {
              serializedName: "properties.allowBlobPublicAccess",
              type: {
                name: "Boolean"
              }
            },
            minimumTlsVersion: {
              serializedName: "properties.minimumTlsVersion",
              type: {
                name: "String"
              }
            },
            allowSharedKeyAccess: {
              serializedName: "properties.allowSharedKeyAccess",
              type: {
                name: "Boolean"
              }
            },
            enableNfsV3: {
              serializedName: "properties.isNfsV3Enabled",
              type: {
                name: "Boolean"
              }
            },
            allowCrossTenantReplication: {
              serializedName: "properties.allowCrossTenantReplication",
              type: {
                name: "Boolean"
              }
            },
            defaultToOAuthAuthentication: {
              serializedName: "properties.defaultToOAuthAuthentication",
              type: {
                name: "Boolean"
              }
            },
            immutableStorageWithVersioning: {
              serializedName: "properties.immutableStorageWithVersioning",
              type: {
                name: "Composite",
                className: "ImmutableStorageAccount"
              }
            },
            dnsEndpointType: {
              serializedName: "properties.dnsEndpointType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Sku2 = {
        type: {
          name: "Composite",
          className: "Sku",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Standard", "Premium"]
              }
            }
          }
        }
      };
      ExtendedLocation = {
        type: {
          name: "Composite",
          className: "ExtendedLocation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Identity2 = {
        type: {
          name: "Composite",
          className: "Identity",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            },
            userAssignedIdentities: {
              serializedName: "userAssignedIdentities",
              type: {
                name: "Dictionary",
                value: {
                  type: { name: "Composite", className: "UserAssignedIdentity" }
                }
              }
            }
          }
        }
      };
      UserAssignedIdentity = {
        type: {
          name: "Composite",
          className: "UserAssignedIdentity",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            clientId: {
              serializedName: "clientId",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SasPolicy = {
        type: {
          name: "Composite",
          className: "SasPolicy",
          modelProperties: {
            sasExpirationPeriod: {
              serializedName: "sasExpirationPeriod",
              required: true,
              type: {
                name: "String"
              }
            },
            expirationAction: {
              defaultValue: "Log",
              serializedName: "expirationAction",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      KeyPolicy = {
        type: {
          name: "Composite",
          className: "KeyPolicy",
          modelProperties: {
            keyExpirationPeriodInDays: {
              serializedName: "keyExpirationPeriodInDays",
              required: true,
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      CustomDomain2 = {
        type: {
          name: "Composite",
          className: "CustomDomain",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            useSubDomainName: {
              serializedName: "useSubDomainName",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      Encryption2 = {
        type: {
          name: "Composite",
          className: "Encryption",
          modelProperties: {
            services: {
              serializedName: "services",
              type: {
                name: "Composite",
                className: "EncryptionServices"
              }
            },
            keySource: {
              defaultValue: "Microsoft.Storage",
              serializedName: "keySource",
              type: {
                name: "String"
              }
            },
            requireInfrastructureEncryption: {
              serializedName: "requireInfrastructureEncryption",
              type: {
                name: "Boolean"
              }
            },
            keyVaultProperties: {
              serializedName: "keyvaultproperties",
              type: {
                name: "Composite",
                className: "KeyVaultProperties"
              }
            },
            encryptionIdentity: {
              serializedName: "identity",
              type: {
                name: "Composite",
                className: "EncryptionIdentity"
              }
            }
          }
        }
      };
      EncryptionServices2 = {
        type: {
          name: "Composite",
          className: "EncryptionServices",
          modelProperties: {
            blob: {
              serializedName: "blob",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            file: {
              serializedName: "file",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            table: {
              serializedName: "table",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            },
            queue: {
              serializedName: "queue",
              type: {
                name: "Composite",
                className: "EncryptionService"
              }
            }
          }
        }
      };
      EncryptionService2 = {
        type: {
          name: "Composite",
          className: "EncryptionService",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            lastEnabledTime: {
              serializedName: "lastEnabledTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            keyType: {
              serializedName: "keyType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      KeyVaultProperties2 = {
        type: {
          name: "Composite",
          className: "KeyVaultProperties",
          modelProperties: {
            keyName: {
              serializedName: "keyname",
              type: {
                name: "String"
              }
            },
            keyVersion: {
              serializedName: "keyversion",
              type: {
                name: "String"
              }
            },
            keyVaultUri: {
              serializedName: "keyvaulturi",
              type: {
                name: "String"
              }
            },
            currentVersionedKeyIdentifier: {
              serializedName: "currentVersionedKeyIdentifier",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            lastKeyRotationTimestamp: {
              serializedName: "lastKeyRotationTimestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            currentVersionedKeyExpirationTimestamp: {
              serializedName: "currentVersionedKeyExpirationTimestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      EncryptionIdentity = {
        type: {
          name: "Composite",
          className: "EncryptionIdentity",
          modelProperties: {
            encryptionUserAssignedIdentity: {
              serializedName: "userAssignedIdentity",
              type: {
                name: "String"
              }
            },
            encryptionFederatedIdentityClientId: {
              serializedName: "federatedIdentityClientId",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      NetworkRuleSet2 = {
        type: {
          name: "Composite",
          className: "NetworkRuleSet",
          modelProperties: {
            bypass: {
              defaultValue: "AzureServices",
              serializedName: "bypass",
              type: {
                name: "String"
              }
            },
            resourceAccessRules: {
              serializedName: "resourceAccessRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceAccessRule"
                  }
                }
              }
            },
            virtualNetworkRules: {
              serializedName: "virtualNetworkRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "VirtualNetworkRule"
                  }
                }
              }
            },
            ipRules: {
              serializedName: "ipRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "IPRule"
                  }
                }
              }
            },
            defaultAction: {
              defaultValue: "Allow",
              serializedName: "defaultAction",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Allow", "Deny"]
              }
            }
          }
        }
      };
      ResourceAccessRule = {
        type: {
          name: "Composite",
          className: "ResourceAccessRule",
          modelProperties: {
            tenantId: {
              serializedName: "tenantId",
              type: {
                name: "String"
              }
            },
            resourceId: {
              serializedName: "resourceId",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      VirtualNetworkRule2 = {
        type: {
          name: "Composite",
          className: "VirtualNetworkRule",
          modelProperties: {
            virtualNetworkResourceId: {
              serializedName: "id",
              required: true,
              type: {
                name: "String"
              }
            },
            action: {
              defaultValue: "Allow",
              isConstant: true,
              serializedName: "action",
              type: {
                name: "String"
              }
            },
            state: {
              serializedName: "state",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      IPRule2 = {
        type: {
          name: "Composite",
          className: "IPRule",
          modelProperties: {
            iPAddressOrRange: {
              serializedName: "value",
              required: true,
              type: {
                name: "String"
              }
            },
            action: {
              defaultValue: "Allow",
              isConstant: true,
              serializedName: "action",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      AzureFilesIdentityBasedAuthentication2 = {
        type: {
          name: "Composite",
          className: "AzureFilesIdentityBasedAuthentication",
          modelProperties: {
            directoryServiceOptions: {
              serializedName: "directoryServiceOptions",
              required: true,
              type: {
                name: "String"
              }
            },
            activeDirectoryProperties: {
              serializedName: "activeDirectoryProperties",
              type: {
                name: "Composite",
                className: "ActiveDirectoryProperties"
              }
            },
            defaultSharePermission: {
              serializedName: "defaultSharePermission",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ActiveDirectoryProperties2 = {
        type: {
          name: "Composite",
          className: "ActiveDirectoryProperties",
          modelProperties: {
            domainName: {
              serializedName: "domainName",
              required: true,
              type: {
                name: "String"
              }
            },
            netBiosDomainName: {
              serializedName: "netBiosDomainName",
              type: {
                name: "String"
              }
            },
            forestName: {
              serializedName: "forestName",
              type: {
                name: "String"
              }
            },
            domainGuid: {
              serializedName: "domainGuid",
              required: true,
              type: {
                name: "String"
              }
            },
            domainSid: {
              serializedName: "domainSid",
              type: {
                name: "String"
              }
            },
            azureStorageSid: {
              serializedName: "azureStorageSid",
              type: {
                name: "String"
              }
            },
            samAccountName: {
              serializedName: "samAccountName",
              type: {
                name: "String"
              }
            },
            accountType: {
              serializedName: "accountType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      RoutingPreference2 = {
        type: {
          name: "Composite",
          className: "RoutingPreference",
          modelProperties: {
            routingChoice: {
              serializedName: "routingChoice",
              type: {
                name: "String"
              }
            },
            publishMicrosoftEndpoints: {
              serializedName: "publishMicrosoftEndpoints",
              type: {
                name: "Boolean"
              }
            },
            publishInternetEndpoints: {
              serializedName: "publishInternetEndpoints",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      ImmutableStorageAccount = {
        type: {
          name: "Composite",
          className: "ImmutableStorageAccount",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            immutabilityPolicy: {
              serializedName: "immutabilityPolicy",
              type: {
                name: "Composite",
                className: "AccountImmutabilityPolicyProperties"
              }
            }
          }
        }
      };
      AccountImmutabilityPolicyProperties = {
        type: {
          name: "Composite",
          className: "AccountImmutabilityPolicyProperties",
          modelProperties: {
            immutabilityPeriodSinceCreationInDays: {
              constraints: {
                InclusiveMaximum: 146e3,
                InclusiveMinimum: 1
              },
              serializedName: "immutabilityPeriodSinceCreationInDays",
              type: {
                name: "Number"
              }
            },
            state: {
              serializedName: "state",
              type: {
                name: "String"
              }
            },
            allowProtectedAppendWrites: {
              serializedName: "allowProtectedAppendWrites",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      Endpoints2 = {
        type: {
          name: "Composite",
          className: "Endpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            queue: {
              serializedName: "queue",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            table: {
              serializedName: "table",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            microsoftEndpoints: {
              serializedName: "microsoftEndpoints",
              type: {
                name: "Composite",
                className: "StorageAccountMicrosoftEndpoints"
              }
            },
            internetEndpoints: {
              serializedName: "internetEndpoints",
              type: {
                name: "Composite",
                className: "StorageAccountInternetEndpoints"
              }
            }
          }
        }
      };
      StorageAccountMicrosoftEndpoints2 = {
        type: {
          name: "Composite",
          className: "StorageAccountMicrosoftEndpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            queue: {
              serializedName: "queue",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            table: {
              serializedName: "table",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountInternetEndpoints2 = {
        type: {
          name: "Composite",
          className: "StorageAccountInternetEndpoints",
          modelProperties: {
            blob: {
              serializedName: "blob",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            file: {
              serializedName: "file",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            web: {
              serializedName: "web",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            dfs: {
              serializedName: "dfs",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      KeyCreationTime = {
        type: {
          name: "Composite",
          className: "KeyCreationTime",
          modelProperties: {
            key1: {
              serializedName: "key1",
              type: {
                name: "DateTime"
              }
            },
            key2: {
              serializedName: "key2",
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      GeoReplicationStats2 = {
        type: {
          name: "Composite",
          className: "GeoReplicationStats",
          modelProperties: {
            status: {
              serializedName: "status",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            lastSyncTime: {
              serializedName: "lastSyncTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            canFailover: {
              serializedName: "canFailover",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      PrivateEndpoint2 = {
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      PrivateLinkServiceConnectionState2 = {
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
          modelProperties: {
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            },
            actionRequired: {
              serializedName: "actionRequired",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Resource2 = {
        type: {
          name: "Composite",
          className: "Resource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobRestoreStatus2 = {
        type: {
          name: "Composite",
          className: "BlobRestoreStatus",
          modelProperties: {
            status: {
              serializedName: "status",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            failureReason: {
              serializedName: "failureReason",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            restoreId: {
              serializedName: "restoreId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            parameters: {
              serializedName: "parameters",
              type: {
                name: "Composite",
                className: "BlobRestoreParameters"
              }
            }
          }
        }
      };
      BlobRestoreParameters2 = {
        type: {
          name: "Composite",
          className: "BlobRestoreParameters",
          modelProperties: {
            timeToRestore: {
              serializedName: "timeToRestore",
              required: true,
              type: {
                name: "DateTime"
              }
            },
            blobRanges: {
              serializedName: "blobRanges",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobRestoreRange"
                  }
                }
              }
            }
          }
        }
      };
      BlobRestoreRange2 = {
        type: {
          name: "Composite",
          className: "BlobRestoreRange",
          modelProperties: {
            startRange: {
              serializedName: "startRange",
              required: true,
              type: {
                name: "String"
              }
            },
            endRange: {
              serializedName: "endRange",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountSkuConversionStatus = {
        type: {
          name: "Composite",
          className: "StorageAccountSkuConversionStatus",
          modelProperties: {
            skuConversionStatus: {
              serializedName: "skuConversionStatus",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            targetSkuName: {
              serializedName: "targetSkuName",
              type: {
                name: "String"
              }
            },
            startTime: {
              serializedName: "startTime",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            endTime: {
              serializedName: "endTime",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountUpdateParameters2 = {
        type: {
          name: "Composite",
          className: "StorageAccountUpdateParameters",
          modelProperties: {
            sku: {
              serializedName: "sku",
              type: {
                name: "Composite",
                className: "Sku"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            },
            identity: {
              serializedName: "identity",
              type: {
                name: "Composite",
                className: "Identity"
              }
            },
            kind: {
              serializedName: "kind",
              type: {
                name: "String"
              }
            },
            customDomain: {
              serializedName: "properties.customDomain",
              type: {
                name: "Composite",
                className: "CustomDomain"
              }
            },
            encryption: {
              serializedName: "properties.encryption",
              type: {
                name: "Composite",
                className: "Encryption"
              }
            },
            sasPolicy: {
              serializedName: "properties.sasPolicy",
              type: {
                name: "Composite",
                className: "SasPolicy"
              }
            },
            keyPolicy: {
              serializedName: "properties.keyPolicy",
              type: {
                name: "Composite",
                className: "KeyPolicy"
              }
            },
            accessTier: {
              serializedName: "properties.accessTier",
              type: {
                name: "Enum",
                allowedValues: ["Hot", "Cool", "Premium"]
              }
            },
            azureFilesIdentityBasedAuthentication: {
              serializedName: "properties.azureFilesIdentityBasedAuthentication",
              type: {
                name: "Composite",
                className: "AzureFilesIdentityBasedAuthentication"
              }
            },
            enableHttpsTrafficOnly: {
              serializedName: "properties.supportsHttpsTrafficOnly",
              type: {
                name: "Boolean"
              }
            },
            isSftpEnabled: {
              serializedName: "properties.isSftpEnabled",
              type: {
                name: "Boolean"
              }
            },
            isLocalUserEnabled: {
              serializedName: "properties.isLocalUserEnabled",
              type: {
                name: "Boolean"
              }
            },
            networkRuleSet: {
              serializedName: "properties.networkAcls",
              type: {
                name: "Composite",
                className: "NetworkRuleSet"
              }
            },
            largeFileSharesState: {
              serializedName: "properties.largeFileSharesState",
              type: {
                name: "String"
              }
            },
            routingPreference: {
              serializedName: "properties.routingPreference",
              type: {
                name: "Composite",
                className: "RoutingPreference"
              }
            },
            allowBlobPublicAccess: {
              serializedName: "properties.allowBlobPublicAccess",
              type: {
                name: "Boolean"
              }
            },
            minimumTlsVersion: {
              serializedName: "properties.minimumTlsVersion",
              type: {
                name: "String"
              }
            },
            allowSharedKeyAccess: {
              serializedName: "properties.allowSharedKeyAccess",
              type: {
                name: "Boolean"
              }
            },
            allowCrossTenantReplication: {
              serializedName: "properties.allowCrossTenantReplication",
              type: {
                name: "Boolean"
              }
            },
            defaultToOAuthAuthentication: {
              serializedName: "properties.defaultToOAuthAuthentication",
              type: {
                name: "Boolean"
              }
            },
            publicNetworkAccess: {
              serializedName: "properties.publicNetworkAccess",
              type: {
                name: "String"
              }
            },
            immutableStorageWithVersioning: {
              serializedName: "properties.immutableStorageWithVersioning",
              type: {
                name: "Composite",
                className: "ImmutableStorageAccount"
              }
            },
            allowedCopyScope: {
              serializedName: "properties.allowedCopyScope",
              type: {
                name: "String"
              }
            },
            dnsEndpointType: {
              serializedName: "properties.dnsEndpointType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeletedAccountListResult = {
        type: {
          name: "Composite",
          className: "DeletedAccountListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "DeletedAccount"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ErrorResponse2 = {
        type: {
          name: "Composite",
          className: "ErrorResponse",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponseBody"
              }
            }
          }
        }
      };
      ErrorResponseBody2 = {
        type: {
          name: "Composite",
          className: "ErrorResponseBody",
          modelProperties: {
            code: {
              serializedName: "code",
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountListResult2 = {
        type: {
          name: "Composite",
          className: "StorageAccountListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "StorageAccount"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      StorageAccountListKeysResult2 = {
        type: {
          name: "Composite",
          className: "StorageAccountListKeysResult",
          modelProperties: {
            keys: {
              serializedName: "keys",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "StorageAccountKey"
                  }
                }
              }
            }
          }
        }
      };
      StorageAccountKey2 = {
        type: {
          name: "Composite",
          className: "StorageAccountKey",
          modelProperties: {
            keyName: {
              serializedName: "keyName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "permissions",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Read", "Full"]
              }
            },
            creationTime: {
              serializedName: "creationTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      StorageAccountRegenerateKeyParameters2 = {
        type: {
          name: "Composite",
          className: "StorageAccountRegenerateKeyParameters",
          modelProperties: {
            keyName: {
              serializedName: "keyName",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      UsageListResult2 = {
        type: {
          name: "Composite",
          className: "UsageListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Usage"
                  }
                }
              }
            }
          }
        }
      };
      Usage2 = {
        type: {
          name: "Composite",
          className: "Usage",
          modelProperties: {
            unit: {
              serializedName: "unit",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "Count",
                  "Bytes",
                  "Seconds",
                  "Percent",
                  "CountsPerSecond",
                  "BytesPerSecond"
                ]
              }
            },
            currentValue: {
              serializedName: "currentValue",
              readOnly: true,
              type: {
                name: "Number"
              }
            },
            limit: {
              serializedName: "limit",
              readOnly: true,
              type: {
                name: "Number"
              }
            },
            name: {
              serializedName: "name",
              type: {
                name: "Composite",
                className: "UsageName"
              }
            }
          }
        }
      };
      UsageName2 = {
        type: {
          name: "Composite",
          className: "UsageName",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            localizedValue: {
              serializedName: "localizedValue",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      AccountSasParameters2 = {
        type: {
          name: "Composite",
          className: "AccountSasParameters",
          modelProperties: {
            services: {
              serializedName: "signedServices",
              required: true,
              type: {
                name: "String"
              }
            },
            resourceTypes: {
              serializedName: "signedResourceTypes",
              required: true,
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "signedPermission",
              required: true,
              type: {
                name: "String"
              }
            },
            iPAddressOrRange: {
              serializedName: "signedIp",
              type: {
                name: "String"
              }
            },
            protocols: {
              serializedName: "signedProtocol",
              type: {
                name: "Enum",
                allowedValues: ["https,http", "https"]
              }
            },
            sharedAccessStartTime: {
              serializedName: "signedStart",
              type: {
                name: "DateTime"
              }
            },
            sharedAccessExpiryTime: {
              serializedName: "signedExpiry",
              required: true,
              type: {
                name: "DateTime"
              }
            },
            keyToSign: {
              serializedName: "keyToSign",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListAccountSasResponse2 = {
        type: {
          name: "Composite",
          className: "ListAccountSasResponse",
          modelProperties: {
            accountSasToken: {
              serializedName: "accountSasToken",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ServiceSasParameters2 = {
        type: {
          name: "Composite",
          className: "ServiceSasParameters",
          modelProperties: {
            canonicalizedResource: {
              serializedName: "canonicalizedResource",
              required: true,
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "signedResource",
              type: {
                name: "String"
              }
            },
            permissions: {
              serializedName: "signedPermission",
              type: {
                name: "String"
              }
            },
            iPAddressOrRange: {
              serializedName: "signedIp",
              type: {
                name: "String"
              }
            },
            protocols: {
              serializedName: "signedProtocol",
              type: {
                name: "Enum",
                allowedValues: ["https,http", "https"]
              }
            },
            sharedAccessStartTime: {
              serializedName: "signedStart",
              type: {
                name: "DateTime"
              }
            },
            sharedAccessExpiryTime: {
              serializedName: "signedExpiry",
              type: {
                name: "DateTime"
              }
            },
            identifier: {
              constraints: {
                MaxLength: 64
              },
              serializedName: "signedIdentifier",
              type: {
                name: "String"
              }
            },
            partitionKeyStart: {
              serializedName: "startPk",
              type: {
                name: "String"
              }
            },
            partitionKeyEnd: {
              serializedName: "endPk",
              type: {
                name: "String"
              }
            },
            rowKeyStart: {
              serializedName: "startRk",
              type: {
                name: "String"
              }
            },
            rowKeyEnd: {
              serializedName: "endRk",
              type: {
                name: "String"
              }
            },
            keyToSign: {
              serializedName: "keyToSign",
              type: {
                name: "String"
              }
            },
            cacheControl: {
              serializedName: "rscc",
              type: {
                name: "String"
              }
            },
            contentDisposition: {
              serializedName: "rscd",
              type: {
                name: "String"
              }
            },
            contentEncoding: {
              serializedName: "rsce",
              type: {
                name: "String"
              }
            },
            contentLanguage: {
              serializedName: "rscl",
              type: {
                name: "String"
              }
            },
            contentType: {
              serializedName: "rsct",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListServiceSasResponse2 = {
        type: {
          name: "Composite",
          className: "ListServiceSasResponse",
          modelProperties: {
            serviceSasToken: {
              serializedName: "serviceSasToken",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ManagementPolicySchema2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicySchema",
          modelProperties: {
            rules: {
              serializedName: "rules",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ManagementPolicyRule"
                  }
                }
              }
            }
          }
        }
      };
      ManagementPolicyRule2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyRule",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            },
            definition: {
              serializedName: "definition",
              type: {
                name: "Composite",
                className: "ManagementPolicyDefinition"
              }
            }
          }
        }
      };
      ManagementPolicyDefinition2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyDefinition",
          modelProperties: {
            actions: {
              serializedName: "actions",
              type: {
                name: "Composite",
                className: "ManagementPolicyAction"
              }
            },
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "ManagementPolicyFilter"
              }
            }
          }
        }
      };
      ManagementPolicyAction2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyAction",
          modelProperties: {
            baseBlob: {
              serializedName: "baseBlob",
              type: {
                name: "Composite",
                className: "ManagementPolicyBaseBlob"
              }
            },
            snapshot: {
              serializedName: "snapshot",
              type: {
                name: "Composite",
                className: "ManagementPolicySnapShot"
              }
            },
            version: {
              serializedName: "version",
              type: {
                name: "Composite",
                className: "ManagementPolicyVersion"
              }
            }
          }
        }
      };
      ManagementPolicyBaseBlob2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyBaseBlob",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            tierToCold: {
              serializedName: "tierToCold",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            tierToHot: {
              serializedName: "tierToHot",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterModification"
              }
            },
            enableAutoTierToHotFromCool: {
              serializedName: "enableAutoTierToHotFromCool",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      DateAfterModification2 = {
        type: {
          name: "Composite",
          className: "DateAfterModification",
          modelProperties: {
            daysAfterModificationGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterModificationGreaterThan",
              type: {
                name: "Number"
              }
            },
            daysAfterLastAccessTimeGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterLastAccessTimeGreaterThan",
              type: {
                name: "Number"
              }
            },
            daysAfterLastTierChangeGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterLastTierChangeGreaterThan",
              type: {
                name: "Number"
              }
            },
            daysAfterCreationGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterCreationGreaterThan",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      ManagementPolicySnapShot2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicySnapShot",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToCold: {
              serializedName: "tierToCold",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToHot: {
              serializedName: "tierToHot",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            }
          }
        }
      };
      DateAfterCreation2 = {
        type: {
          name: "Composite",
          className: "DateAfterCreation",
          modelProperties: {
            daysAfterCreationGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterCreationGreaterThan",
              required: true,
              type: {
                name: "Number"
              }
            },
            daysAfterLastTierChangeGreaterThan: {
              constraints: {
                InclusiveMinimum: 0,
                MultipleOf: 1
              },
              serializedName: "daysAfterLastTierChangeGreaterThan",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      ManagementPolicyVersion2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyVersion",
          modelProperties: {
            tierToCool: {
              serializedName: "tierToCool",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToArchive: {
              serializedName: "tierToArchive",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToCold: {
              serializedName: "tierToCold",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            tierToHot: {
              serializedName: "tierToHot",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            },
            delete: {
              serializedName: "delete",
              type: {
                name: "Composite",
                className: "DateAfterCreation"
              }
            }
          }
        }
      };
      ManagementPolicyFilter2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobTypes: {
              serializedName: "blobTypes",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobIndexMatch: {
              serializedName: "blobIndexMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagFilter"
                  }
                }
              }
            }
          }
        }
      };
      TagFilter2 = {
        type: {
          name: "Composite",
          className: "TagFilter",
          modelProperties: {
            name: {
              constraints: {
                MaxLength: 128,
                MinLength: 1
              },
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            op: {
              serializedName: "op",
              required: true,
              type: {
                name: "String"
              }
            },
            value: {
              constraints: {
                MaxLength: 256
              },
              serializedName: "value",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobInventoryPolicySchema2 = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicySchema",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            destination: {
              serializedName: "destination",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            },
            rules: {
              serializedName: "rules",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobInventoryPolicyRule"
                  }
                }
              }
            }
          }
        }
      };
      BlobInventoryPolicyRule2 = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyRule",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            destination: {
              serializedName: "destination",
              required: true,
              type: {
                name: "String"
              }
            },
            definition: {
              serializedName: "definition",
              type: {
                name: "Composite",
                className: "BlobInventoryPolicyDefinition"
              }
            }
          }
        }
      };
      BlobInventoryPolicyDefinition2 = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyDefinition",
          modelProperties: {
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "BlobInventoryPolicyFilter"
              }
            },
            format: {
              serializedName: "format",
              required: true,
              type: {
                name: "String"
              }
            },
            schedule: {
              serializedName: "schedule",
              required: true,
              type: {
                name: "String"
              }
            },
            objectType: {
              serializedName: "objectType",
              required: true,
              type: {
                name: "String"
              }
            },
            schemaFields: {
              serializedName: "schemaFields",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      BlobInventoryPolicyFilter2 = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            excludePrefix: {
              serializedName: "excludePrefix",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            blobTypes: {
              serializedName: "blobTypes",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            includeBlobVersions: {
              serializedName: "includeBlobVersions",
              type: {
                name: "Boolean"
              }
            },
            includeSnapshots: {
              serializedName: "includeSnapshots",
              type: {
                name: "Boolean"
              }
            },
            includeDeleted: {
              serializedName: "includeDeleted",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      SystemData2 = {
        type: {
          name: "Composite",
          className: "SystemData",
          modelProperties: {
            createdBy: {
              serializedName: "createdBy",
              type: {
                name: "String"
              }
            },
            createdByType: {
              serializedName: "createdByType",
              type: {
                name: "String"
              }
            },
            createdAt: {
              serializedName: "createdAt",
              type: {
                name: "DateTime"
              }
            },
            lastModifiedBy: {
              serializedName: "lastModifiedBy",
              type: {
                name: "String"
              }
            },
            lastModifiedByType: {
              serializedName: "lastModifiedByType",
              type: {
                name: "String"
              }
            },
            lastModifiedAt: {
              serializedName: "lastModifiedAt",
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      CloudError = {
        type: {
          name: "Composite",
          className: "CloudError",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "CloudErrorBody"
              }
            }
          }
        }
      };
      CloudErrorBody = {
        type: {
          name: "Composite",
          className: "CloudErrorBody",
          modelProperties: {
            code: {
              serializedName: "code",
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              type: {
                name: "String"
              }
            },
            target: {
              serializedName: "target",
              type: {
                name: "String"
              }
            },
            details: {
              serializedName: "details",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                  }
                }
              }
            }
          }
        }
      };
      ListBlobInventoryPolicy2 = {
        type: {
          name: "Composite",
          className: "ListBlobInventoryPolicy",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobInventoryPolicy"
                  }
                }
              }
            }
          }
        }
      };
      PrivateEndpointConnectionListResult2 = {
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "PrivateEndpointConnection"
                  }
                }
              }
            }
          }
        }
      };
      PrivateLinkResourceListResult2 = {
        type: {
          name: "Composite",
          className: "PrivateLinkResourceListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "PrivateLinkResource"
                  }
                }
              }
            }
          }
        }
      };
      ObjectReplicationPolicies2 = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicies",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ObjectReplicationPolicy"
                  }
                }
              }
            }
          }
        }
      };
      ObjectReplicationPolicyRule2 = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyRule",
          modelProperties: {
            ruleId: {
              serializedName: "ruleId",
              type: {
                name: "String"
              }
            },
            sourceContainer: {
              serializedName: "sourceContainer",
              required: true,
              type: {
                name: "String"
              }
            },
            destinationContainer: {
              serializedName: "destinationContainer",
              required: true,
              type: {
                name: "String"
              }
            },
            filters: {
              serializedName: "filters",
              type: {
                name: "Composite",
                className: "ObjectReplicationPolicyFilter"
              }
            }
          }
        }
      };
      ObjectReplicationPolicyFilter2 = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicyFilter",
          modelProperties: {
            prefixMatch: {
              serializedName: "prefixMatch",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            minCreationTime: {
              serializedName: "minCreationTime",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LocalUsers = {
        type: {
          name: "Composite",
          className: "LocalUsers",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "LocalUser"
                  }
                }
              }
            }
          }
        }
      };
      PermissionScope = {
        type: {
          name: "Composite",
          className: "PermissionScope",
          modelProperties: {
            permissions: {
              serializedName: "permissions",
              required: true,
              type: {
                name: "String"
              }
            },
            service: {
              serializedName: "service",
              required: true,
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SshPublicKey = {
        type: {
          name: "Composite",
          className: "SshPublicKey",
          modelProperties: {
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            },
            key: {
              serializedName: "key",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LocalUserKeys = {
        type: {
          name: "Composite",
          className: "LocalUserKeys",
          modelProperties: {
            sshAuthorizedKeys: {
              serializedName: "sshAuthorizedKeys",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "SshPublicKey"
                  }
                }
              }
            },
            sharedKey: {
              serializedName: "sharedKey",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LocalUserRegeneratePasswordResult = {
        type: {
          name: "Composite",
          className: "LocalUserRegeneratePasswordResult",
          modelProperties: {
            sshPassword: {
              serializedName: "sshPassword",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      EncryptionScopeKeyVaultProperties2 = {
        type: {
          name: "Composite",
          className: "EncryptionScopeKeyVaultProperties",
          modelProperties: {
            keyUri: {
              serializedName: "keyUri",
              type: {
                name: "String"
              }
            },
            currentVersionedKeyIdentifier: {
              serializedName: "currentVersionedKeyIdentifier",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            lastKeyRotationTimestamp: {
              serializedName: "lastKeyRotationTimestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      EncryptionScopeListResult2 = {
        type: {
          name: "Composite",
          className: "EncryptionScopeListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "EncryptionScope"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobServiceItems = {
        type: {
          name: "Composite",
          className: "BlobServiceItems",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BlobServiceProperties"
                  }
                }
              }
            }
          }
        }
      };
      CorsRules = {
        type: {
          name: "Composite",
          className: "CorsRules",
          modelProperties: {
            corsRules: {
              serializedName: "corsRules",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "CorsRule"
                  }
                }
              }
            }
          }
        }
      };
      CorsRule = {
        type: {
          name: "Composite",
          className: "CorsRule",
          modelProperties: {
            allowedOrigins: {
              serializedName: "allowedOrigins",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            allowedMethods: {
              serializedName: "allowedMethods",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            maxAgeInSeconds: {
              serializedName: "maxAgeInSeconds",
              required: true,
              type: {
                name: "Number"
              }
            },
            exposedHeaders: {
              serializedName: "exposedHeaders",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            allowedHeaders: {
              serializedName: "allowedHeaders",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      DeleteRetentionPolicy = {
        type: {
          name: "Composite",
          className: "DeleteRetentionPolicy",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            days: {
              constraints: {
                InclusiveMaximum: 365,
                InclusiveMinimum: 1
              },
              serializedName: "days",
              type: {
                name: "Number"
              }
            },
            allowPermanentDelete: {
              serializedName: "allowPermanentDelete",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      ChangeFeed = {
        type: {
          name: "Composite",
          className: "ChangeFeed",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            retentionInDays: {
              constraints: {
                InclusiveMaximum: 146e3,
                InclusiveMinimum: 1
              },
              serializedName: "retentionInDays",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      RestorePolicyProperties = {
        type: {
          name: "Composite",
          className: "RestorePolicyProperties",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            days: {
              constraints: {
                InclusiveMaximum: 365,
                InclusiveMinimum: 1
              },
              serializedName: "days",
              type: {
                name: "Number"
              }
            },
            lastEnabledTime: {
              serializedName: "lastEnabledTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            minRestoreTime: {
              serializedName: "minRestoreTime",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      LastAccessTimeTrackingPolicy = {
        type: {
          name: "Composite",
          className: "LastAccessTimeTrackingPolicy",
          modelProperties: {
            enable: {
              serializedName: "enable",
              required: true,
              type: {
                name: "Boolean"
              }
            },
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            trackingGranularityInDays: {
              serializedName: "trackingGranularityInDays",
              type: {
                name: "Number"
              }
            },
            blobType: {
              serializedName: "blobType",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      ListContainerItems = {
        type: {
          name: "Composite",
          className: "ListContainerItems",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ListContainerItem"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ImmutabilityPolicyProperties = {
        type: {
          name: "Composite",
          className: "ImmutabilityPolicyProperties",
          modelProperties: {
            etag: {
              serializedName: "etag",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            updateHistory: {
              serializedName: "updateHistory",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "UpdateHistoryProperty"
                  }
                }
              }
            },
            immutabilityPeriodSinceCreationInDays: {
              serializedName: "properties.immutabilityPeriodSinceCreationInDays",
              type: {
                name: "Number"
              }
            },
            state: {
              serializedName: "properties.state",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            allowProtectedAppendWrites: {
              serializedName: "properties.allowProtectedAppendWrites",
              type: {
                name: "Boolean"
              }
            },
            allowProtectedAppendWritesAll: {
              serializedName: "properties.allowProtectedAppendWritesAll",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      UpdateHistoryProperty = {
        type: {
          name: "Composite",
          className: "UpdateHistoryProperty",
          modelProperties: {
            update: {
              serializedName: "update",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            immutabilityPeriodSinceCreationInDays: {
              serializedName: "immutabilityPeriodSinceCreationInDays",
              readOnly: true,
              type: {
                name: "Number"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            objectIdentifier: {
              serializedName: "objectIdentifier",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            upn: {
              serializedName: "upn",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            allowProtectedAppendWrites: {
              serializedName: "allowProtectedAppendWrites",
              type: {
                name: "Boolean"
              }
            },
            allowProtectedAppendWritesAll: {
              serializedName: "allowProtectedAppendWritesAll",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      LegalHoldProperties = {
        type: {
          name: "Composite",
          className: "LegalHoldProperties",
          modelProperties: {
            hasLegalHold: {
              serializedName: "hasLegalHold",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagProperty"
                  }
                }
              }
            },
            protectedAppendWritesHistory: {
              serializedName: "protectedAppendWritesHistory",
              type: {
                name: "Composite",
                className: "ProtectedAppendWritesHistory"
              }
            }
          }
        }
      };
      TagProperty = {
        type: {
          name: "Composite",
          className: "TagProperty",
          modelProperties: {
            tag: {
              serializedName: "tag",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            objectIdentifier: {
              serializedName: "objectIdentifier",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            upn: {
              serializedName: "upn",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ProtectedAppendWritesHistory = {
        type: {
          name: "Composite",
          className: "ProtectedAppendWritesHistory",
          modelProperties: {
            allowProtectedAppendWritesAll: {
              serializedName: "allowProtectedAppendWritesAll",
              type: {
                name: "Boolean"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            }
          }
        }
      };
      ImmutableStorageWithVersioning = {
        type: {
          name: "Composite",
          className: "ImmutableStorageWithVersioning",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            },
            timeStamp: {
              serializedName: "timeStamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            migrationState: {
              serializedName: "migrationState",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LegalHold = {
        type: {
          name: "Composite",
          className: "LegalHold",
          modelProperties: {
            hasLegalHold: {
              serializedName: "hasLegalHold",
              readOnly: true,
              type: {
                name: "Boolean"
              }
            },
            tags: {
              serializedName: "tags",
              required: true,
              type: {
                name: "Sequence",
                element: {
                  constraints: {
                    MaxLength: 23,
                    MinLength: 3
                  },
                  type: {
                    name: "String"
                  }
                }
              }
            },
            allowProtectedAppendWritesAll: {
              serializedName: "allowProtectedAppendWritesAll",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      LeaseContainerRequest = {
        type: {
          name: "Composite",
          className: "LeaseContainerRequest",
          modelProperties: {
            action: {
              serializedName: "action",
              required: true,
              type: {
                name: "String"
              }
            },
            leaseId: {
              serializedName: "leaseId",
              type: {
                name: "String"
              }
            },
            breakPeriod: {
              serializedName: "breakPeriod",
              type: {
                name: "Number"
              }
            },
            leaseDuration: {
              serializedName: "leaseDuration",
              type: {
                name: "Number"
              }
            },
            proposedLeaseId: {
              serializedName: "proposedLeaseId",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LeaseContainerResponse = {
        type: {
          name: "Composite",
          className: "LeaseContainerResponse",
          modelProperties: {
            leaseId: {
              serializedName: "leaseId",
              type: {
                name: "String"
              }
            },
            leaseTimeSeconds: {
              serializedName: "leaseTimeSeconds",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      FileServiceItems = {
        type: {
          name: "Composite",
          className: "FileServiceItems",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "FileServiceProperties"
                  }
                }
              }
            }
          }
        }
      };
      ProtocolSettings = {
        type: {
          name: "Composite",
          className: "ProtocolSettings",
          modelProperties: {
            smb: {
              serializedName: "smb",
              type: {
                name: "Composite",
                className: "SmbSetting"
              }
            }
          }
        }
      };
      SmbSetting = {
        type: {
          name: "Composite",
          className: "SmbSetting",
          modelProperties: {
            multichannel: {
              serializedName: "multichannel",
              type: {
                name: "Composite",
                className: "Multichannel"
              }
            },
            versions: {
              serializedName: "versions",
              type: {
                name: "String"
              }
            },
            authenticationMethods: {
              serializedName: "authenticationMethods",
              type: {
                name: "String"
              }
            },
            kerberosTicketEncryption: {
              serializedName: "kerberosTicketEncryption",
              type: {
                name: "String"
              }
            },
            channelEncryption: {
              serializedName: "channelEncryption",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Multichannel = {
        type: {
          name: "Composite",
          className: "Multichannel",
          modelProperties: {
            enabled: {
              serializedName: "enabled",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      FileShareItems = {
        type: {
          name: "Composite",
          className: "FileShareItems",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "FileShareItem"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SignedIdentifier = {
        type: {
          name: "Composite",
          className: "SignedIdentifier",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            accessPolicy: {
              serializedName: "accessPolicy",
              type: {
                name: "Composite",
                className: "AccessPolicy"
              }
            }
          }
        }
      };
      AccessPolicy = {
        type: {
          name: "Composite",
          className: "AccessPolicy",
          modelProperties: {
            startTime: {
              serializedName: "startTime",
              type: {
                name: "DateTime"
              }
            },
            expiryTime: {
              serializedName: "expiryTime",
              type: {
                name: "DateTime"
              }
            },
            permission: {
              serializedName: "permission",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeletedShare = {
        type: {
          name: "Composite",
          className: "DeletedShare",
          modelProperties: {
            deletedShareName: {
              serializedName: "deletedShareName",
              required: true,
              type: {
                name: "String"
              }
            },
            deletedShareVersion: {
              serializedName: "deletedShareVersion",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LeaseShareRequest = {
        type: {
          name: "Composite",
          className: "LeaseShareRequest",
          modelProperties: {
            action: {
              serializedName: "action",
              required: true,
              type: {
                name: "String"
              }
            },
            leaseId: {
              serializedName: "leaseId",
              type: {
                name: "String"
              }
            },
            breakPeriod: {
              serializedName: "breakPeriod",
              type: {
                name: "Number"
              }
            },
            leaseDuration: {
              serializedName: "leaseDuration",
              type: {
                name: "Number"
              }
            },
            proposedLeaseId: {
              serializedName: "proposedLeaseId",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      LeaseShareResponse = {
        type: {
          name: "Composite",
          className: "LeaseShareResponse",
          modelProperties: {
            leaseId: {
              serializedName: "leaseId",
              type: {
                name: "String"
              }
            },
            leaseTimeSeconds: {
              serializedName: "leaseTimeSeconds",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListQueueServices = {
        type: {
          name: "Composite",
          className: "ListQueueServices",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "QueueServiceProperties"
                  }
                }
              }
            }
          }
        }
      };
      ListQueueResource = {
        type: {
          name: "Composite",
          className: "ListQueueResource",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ListQueue"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListTableServices = {
        type: {
          name: "Composite",
          className: "ListTableServices",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TableServiceProperties"
                  }
                }
              }
            }
          }
        }
      };
      TableSignedIdentifier = {
        type: {
          name: "Composite",
          className: "TableSignedIdentifier",
          modelProperties: {
            id: {
              serializedName: "id",
              required: true,
              type: {
                name: "String"
              }
            },
            accessPolicy: {
              serializedName: "accessPolicy",
              type: {
                name: "Composite",
                className: "TableAccessPolicy"
              }
            }
          }
        }
      };
      TableAccessPolicy = {
        type: {
          name: "Composite",
          className: "TableAccessPolicy",
          modelProperties: {
            startTime: {
              serializedName: "startTime",
              type: {
                name: "DateTime"
              }
            },
            expiryTime: {
              serializedName: "expiryTime",
              type: {
                name: "DateTime"
              }
            },
            permission: {
              serializedName: "permission",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ListTableResource = {
        type: {
          name: "Composite",
          className: "ListTableResource",
          modelProperties: {
            value: {
              serializedName: "value",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Table"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      PrivateEndpointConnection2 = {
        type: {
          name: "Composite",
          className: "PrivateEndpointConnection",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { privateEndpoint: {
            serializedName: "properties.privateEndpoint",
            type: {
              name: "Composite",
              className: "PrivateEndpoint"
            }
          }, privateLinkServiceConnectionState: {
            serializedName: "properties.privateLinkServiceConnectionState",
            type: {
              name: "Composite",
              className: "PrivateLinkServiceConnectionState"
            }
          }, provisioningState: {
            serializedName: "properties.provisioningState",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      TrackedResource2 = {
        type: {
          name: "Composite",
          className: "TrackedResource",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { tags: {
            serializedName: "tags",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, location: {
            serializedName: "location",
            required: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      ProxyResource = {
        type: {
          name: "Composite",
          className: "ProxyResource",
          modelProperties: Object.assign({}, Resource2.type.modelProperties)
        }
      };
      ManagementPolicy2 = {
        type: {
          name: "Composite",
          className: "ManagementPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, policy: {
            serializedName: "properties.policy",
            type: {
              name: "Composite",
              className: "ManagementPolicySchema"
            }
          } })
        }
      };
      BlobInventoryPolicy2 = {
        type: {
          name: "Composite",
          className: "BlobInventoryPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { systemData: {
            serializedName: "systemData",
            type: {
              name: "Composite",
              className: "SystemData"
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, policy: {
            serializedName: "properties.policy",
            type: {
              name: "Composite",
              className: "BlobInventoryPolicySchema"
            }
          } })
        }
      };
      PrivateLinkResource2 = {
        type: {
          name: "Composite",
          className: "PrivateLinkResource",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { groupId: {
            serializedName: "properties.groupId",
            readOnly: true,
            type: {
              name: "String"
            }
          }, requiredMembers: {
            serializedName: "properties.requiredMembers",
            readOnly: true,
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }, requiredZoneNames: {
            serializedName: "properties.requiredZoneNames",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          } })
        }
      };
      ObjectReplicationPolicy2 = {
        type: {
          name: "Composite",
          className: "ObjectReplicationPolicy",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { policyId: {
            serializedName: "properties.policyId",
            readOnly: true,
            type: {
              name: "String"
            }
          }, enabledTime: {
            serializedName: "properties.enabledTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, sourceAccount: {
            serializedName: "properties.sourceAccount",
            type: {
              name: "String"
            }
          }, destinationAccount: {
            serializedName: "properties.destinationAccount",
            type: {
              name: "String"
            }
          }, rules: {
            serializedName: "properties.rules",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "ObjectReplicationPolicyRule"
                }
              }
            }
          } })
        }
      };
      LocalUser = {
        type: {
          name: "Composite",
          className: "LocalUser",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { systemData: {
            serializedName: "systemData",
            type: {
              name: "Composite",
              className: "SystemData"
            }
          }, permissionScopes: {
            serializedName: "properties.permissionScopes",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "PermissionScope"
                }
              }
            }
          }, homeDirectory: {
            serializedName: "properties.homeDirectory",
            type: {
              name: "String"
            }
          }, sshAuthorizedKeys: {
            serializedName: "properties.sshAuthorizedKeys",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "SshPublicKey"
                }
              }
            }
          }, sid: {
            serializedName: "properties.sid",
            readOnly: true,
            type: {
              name: "String"
            }
          }, hasSharedKey: {
            serializedName: "properties.hasSharedKey",
            type: {
              name: "Boolean"
            }
          }, hasSshKey: {
            serializedName: "properties.hasSshKey",
            type: {
              name: "Boolean"
            }
          }, hasSshPassword: {
            serializedName: "properties.hasSshPassword",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
      EncryptionScope2 = {
        type: {
          name: "Composite",
          className: "EncryptionScope",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { source: {
            serializedName: "properties.source",
            type: {
              name: "String"
            }
          }, state: {
            serializedName: "properties.state",
            type: {
              name: "String"
            }
          }, creationTime: {
            serializedName: "properties.creationTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, keyVaultProperties: {
            serializedName: "properties.keyVaultProperties",
            type: {
              name: "Composite",
              className: "EncryptionScopeKeyVaultProperties"
            }
          }, requireInfrastructureEncryption: {
            serializedName: "properties.requireInfrastructureEncryption",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
      BlobServiceProperties = {
        type: {
          name: "Composite",
          className: "BlobServiceProperties",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, cors: {
            serializedName: "properties.cors",
            type: {
              name: "Composite",
              className: "CorsRules"
            }
          }, defaultServiceVersion: {
            serializedName: "properties.defaultServiceVersion",
            type: {
              name: "String"
            }
          }, deleteRetentionPolicy: {
            serializedName: "properties.deleteRetentionPolicy",
            type: {
              name: "Composite",
              className: "DeleteRetentionPolicy"
            }
          }, isVersioningEnabled: {
            serializedName: "properties.isVersioningEnabled",
            type: {
              name: "Boolean"
            }
          }, automaticSnapshotPolicyEnabled: {
            serializedName: "properties.automaticSnapshotPolicyEnabled",
            type: {
              name: "Boolean"
            }
          }, changeFeed: {
            serializedName: "properties.changeFeed",
            type: {
              name: "Composite",
              className: "ChangeFeed"
            }
          }, restorePolicy: {
            serializedName: "properties.restorePolicy",
            type: {
              name: "Composite",
              className: "RestorePolicyProperties"
            }
          }, containerDeleteRetentionPolicy: {
            serializedName: "properties.containerDeleteRetentionPolicy",
            type: {
              name: "Composite",
              className: "DeleteRetentionPolicy"
            }
          }, lastAccessTimeTrackingPolicy: {
            serializedName: "properties.lastAccessTimeTrackingPolicy",
            type: {
              name: "Composite",
              className: "LastAccessTimeTrackingPolicy"
            }
          } })
        }
      };
      AzureEntityResource = {
        type: {
          name: "Composite",
          className: "AzureEntityResource",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { etag: {
            serializedName: "etag",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      FileServiceProperties = {
        type: {
          name: "Composite",
          className: "FileServiceProperties",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, cors: {
            serializedName: "properties.cors",
            type: {
              name: "Composite",
              className: "CorsRules"
            }
          }, shareDeleteRetentionPolicy: {
            serializedName: "properties.shareDeleteRetentionPolicy",
            type: {
              name: "Composite",
              className: "DeleteRetentionPolicy"
            }
          }, protocolSettings: {
            serializedName: "properties.protocolSettings",
            type: {
              name: "Composite",
              className: "ProtocolSettings"
            }
          } })
        }
      };
      QueueServiceProperties = {
        type: {
          name: "Composite",
          className: "QueueServiceProperties",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { cors: {
            serializedName: "properties.cors",
            type: {
              name: "Composite",
              className: "CorsRules"
            }
          } })
        }
      };
      StorageQueue = {
        type: {
          name: "Composite",
          className: "StorageQueue",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, approximateMessageCount: {
            serializedName: "properties.approximateMessageCount",
            readOnly: true,
            type: {
              name: "Number"
            }
          } })
        }
      };
      ListQueue = {
        type: {
          name: "Composite",
          className: "ListQueue",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          } })
        }
      };
      TableServiceProperties = {
        type: {
          name: "Composite",
          className: "TableServiceProperties",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { cors: {
            serializedName: "properties.cors",
            type: {
              name: "Composite",
              className: "CorsRules"
            }
          } })
        }
      };
      Table = {
        type: {
          name: "Composite",
          className: "Table",
          modelProperties: Object.assign(Object.assign({}, Resource2.type.modelProperties), { tableName: {
            serializedName: "properties.tableName",
            readOnly: true,
            type: {
              name: "String"
            }
          }, signedIdentifiers: {
            serializedName: "properties.signedIdentifiers",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "TableSignedIdentifier"
                }
              }
            }
          } })
        }
      };
      StorageAccount2 = {
        type: {
          name: "Composite",
          className: "StorageAccount",
          modelProperties: Object.assign(Object.assign({}, TrackedResource2.type.modelProperties), { sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, kind: {
            serializedName: "kind",
            readOnly: true,
            type: {
              name: "String"
            }
          }, identity: {
            serializedName: "identity",
            type: {
              name: "Composite",
              className: "Identity"
            }
          }, extendedLocation: {
            serializedName: "extendedLocation",
            type: {
              name: "Composite",
              className: "ExtendedLocation"
            }
          }, provisioningState: {
            serializedName: "properties.provisioningState",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["Creating", "ResolvingDNS", "Succeeded"]
            }
          }, primaryEndpoints: {
            serializedName: "properties.primaryEndpoints",
            type: {
              name: "Composite",
              className: "Endpoints"
            }
          }, primaryLocation: {
            serializedName: "properties.primaryLocation",
            readOnly: true,
            type: {
              name: "String"
            }
          }, statusOfPrimary: {
            serializedName: "properties.statusOfPrimary",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["available", "unavailable"]
            }
          }, lastGeoFailoverTime: {
            serializedName: "properties.lastGeoFailoverTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, secondaryLocation: {
            serializedName: "properties.secondaryLocation",
            readOnly: true,
            type: {
              name: "String"
            }
          }, statusOfSecondary: {
            serializedName: "properties.statusOfSecondary",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["available", "unavailable"]
            }
          }, creationTime: {
            serializedName: "properties.creationTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, customDomain: {
            serializedName: "properties.customDomain",
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }, sasPolicy: {
            serializedName: "properties.sasPolicy",
            type: {
              name: "Composite",
              className: "SasPolicy"
            }
          }, keyPolicy: {
            serializedName: "properties.keyPolicy",
            type: {
              name: "Composite",
              className: "KeyPolicy"
            }
          }, keyCreationTime: {
            serializedName: "properties.keyCreationTime",
            type: {
              name: "Composite",
              className: "KeyCreationTime"
            }
          }, secondaryEndpoints: {
            serializedName: "properties.secondaryEndpoints",
            type: {
              name: "Composite",
              className: "Endpoints"
            }
          }, encryption: {
            serializedName: "properties.encryption",
            type: {
              name: "Composite",
              className: "Encryption"
            }
          }, accessTier: {
            serializedName: "properties.accessTier",
            readOnly: true,
            type: {
              name: "Enum",
              allowedValues: ["Hot", "Cool", "Premium"]
            }
          }, azureFilesIdentityBasedAuthentication: {
            serializedName: "properties.azureFilesIdentityBasedAuthentication",
            type: {
              name: "Composite",
              className: "AzureFilesIdentityBasedAuthentication"
            }
          }, enableHttpsTrafficOnly: {
            serializedName: "properties.supportsHttpsTrafficOnly",
            type: {
              name: "Boolean"
            }
          }, networkRuleSet: {
            serializedName: "properties.networkAcls",
            type: {
              name: "Composite",
              className: "NetworkRuleSet"
            }
          }, isSftpEnabled: {
            serializedName: "properties.isSftpEnabled",
            type: {
              name: "Boolean"
            }
          }, isLocalUserEnabled: {
            serializedName: "properties.isLocalUserEnabled",
            type: {
              name: "Boolean"
            }
          }, isHnsEnabled: {
            serializedName: "properties.isHnsEnabled",
            type: {
              name: "Boolean"
            }
          }, geoReplicationStats: {
            serializedName: "properties.geoReplicationStats",
            type: {
              name: "Composite",
              className: "GeoReplicationStats"
            }
          }, failoverInProgress: {
            serializedName: "properties.failoverInProgress",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, largeFileSharesState: {
            serializedName: "properties.largeFileSharesState",
            type: {
              name: "String"
            }
          }, privateEndpointConnections: {
            serializedName: "properties.privateEndpointConnections",
            readOnly: true,
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "PrivateEndpointConnection"
                }
              }
            }
          }, routingPreference: {
            serializedName: "properties.routingPreference",
            type: {
              name: "Composite",
              className: "RoutingPreference"
            }
          }, blobRestoreStatus: {
            serializedName: "properties.blobRestoreStatus",
            type: {
              name: "Composite",
              className: "BlobRestoreStatus"
            }
          }, allowBlobPublicAccess: {
            serializedName: "properties.allowBlobPublicAccess",
            type: {
              name: "Boolean"
            }
          }, minimumTlsVersion: {
            serializedName: "properties.minimumTlsVersion",
            type: {
              name: "String"
            }
          }, allowSharedKeyAccess: {
            serializedName: "properties.allowSharedKeyAccess",
            type: {
              name: "Boolean"
            }
          }, enableNfsV3: {
            serializedName: "properties.isNfsV3Enabled",
            type: {
              name: "Boolean"
            }
          }, allowCrossTenantReplication: {
            serializedName: "properties.allowCrossTenantReplication",
            type: {
              name: "Boolean"
            }
          }, defaultToOAuthAuthentication: {
            serializedName: "properties.defaultToOAuthAuthentication",
            type: {
              name: "Boolean"
            }
          }, publicNetworkAccess: {
            serializedName: "properties.publicNetworkAccess",
            type: {
              name: "String"
            }
          }, immutableStorageWithVersioning: {
            serializedName: "properties.immutableStorageWithVersioning",
            type: {
              name: "Composite",
              className: "ImmutableStorageAccount"
            }
          }, allowedCopyScope: {
            serializedName: "properties.allowedCopyScope",
            type: {
              name: "String"
            }
          }, storageAccountSkuConversionStatus: {
            serializedName: "properties.storageAccountSkuConversionStatus",
            type: {
              name: "Composite",
              className: "StorageAccountSkuConversionStatus"
            }
          }, dnsEndpointType: {
            serializedName: "properties.dnsEndpointType",
            type: {
              name: "String"
            }
          } })
        }
      };
      DeletedAccount = {
        type: {
          name: "Composite",
          className: "DeletedAccount",
          modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { storageAccountResourceId: {
            serializedName: "properties.storageAccountResourceId",
            readOnly: true,
            type: {
              name: "String"
            }
          }, location: {
            serializedName: "properties.location",
            readOnly: true,
            type: {
              name: "String"
            }
          }, restoreReference: {
            serializedName: "properties.restoreReference",
            readOnly: true,
            type: {
              name: "String"
            }
          }, creationTime: {
            serializedName: "properties.creationTime",
            readOnly: true,
            type: {
              name: "String"
            }
          }, deletionTime: {
            serializedName: "properties.deletionTime",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      ListContainerItem = {
        type: {
          name: "Composite",
          className: "ListContainerItem",
          modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { version: {
            serializedName: "properties.version",
            readOnly: true,
            type: {
              name: "String"
            }
          }, deleted: {
            serializedName: "properties.deleted",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, deletedTime: {
            serializedName: "properties.deletedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, remainingRetentionDays: {
            serializedName: "properties.remainingRetentionDays",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, defaultEncryptionScope: {
            serializedName: "properties.defaultEncryptionScope",
            type: {
              name: "String"
            }
          }, denyEncryptionScopeOverride: {
            serializedName: "properties.denyEncryptionScopeOverride",
            type: {
              name: "Boolean"
            }
          }, publicAccess: {
            serializedName: "properties.publicAccess",
            type: {
              name: "Enum",
              allowedValues: ["Container", "Blob", "None"]
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, leaseStatus: {
            serializedName: "properties.leaseStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseState: {
            serializedName: "properties.leaseState",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseDuration: {
            serializedName: "properties.leaseDuration",
            readOnly: true,
            type: {
              name: "String"
            }
          }, metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, immutabilityPolicy: {
            serializedName: "properties.immutabilityPolicy",
            type: {
              name: "Composite",
              className: "ImmutabilityPolicyProperties"
            }
          }, legalHold: {
            serializedName: "properties.legalHold",
            type: {
              name: "Composite",
              className: "LegalHoldProperties"
            }
          }, hasLegalHold: {
            serializedName: "properties.hasLegalHold",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, hasImmutabilityPolicy: {
            serializedName: "properties.hasImmutabilityPolicy",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, immutableStorageWithVersioning: {
            serializedName: "properties.immutableStorageWithVersioning",
            type: {
              name: "Composite",
              className: "ImmutableStorageWithVersioning"
            }
          }, enableNfsV3RootSquash: {
            serializedName: "properties.enableNfsV3RootSquash",
            type: {
              name: "Boolean"
            }
          }, enableNfsV3AllSquash: {
            serializedName: "properties.enableNfsV3AllSquash",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
      BlobContainer = {
        type: {
          name: "Composite",
          className: "BlobContainer",
          modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { version: {
            serializedName: "properties.version",
            readOnly: true,
            type: {
              name: "String"
            }
          }, deleted: {
            serializedName: "properties.deleted",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, deletedTime: {
            serializedName: "properties.deletedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, remainingRetentionDays: {
            serializedName: "properties.remainingRetentionDays",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, defaultEncryptionScope: {
            serializedName: "properties.defaultEncryptionScope",
            type: {
              name: "String"
            }
          }, denyEncryptionScopeOverride: {
            serializedName: "properties.denyEncryptionScopeOverride",
            type: {
              name: "Boolean"
            }
          }, publicAccess: {
            serializedName: "properties.publicAccess",
            type: {
              name: "Enum",
              allowedValues: ["Container", "Blob", "None"]
            }
          }, lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, leaseStatus: {
            serializedName: "properties.leaseStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseState: {
            serializedName: "properties.leaseState",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseDuration: {
            serializedName: "properties.leaseDuration",
            readOnly: true,
            type: {
              name: "String"
            }
          }, metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, immutabilityPolicy: {
            serializedName: "properties.immutabilityPolicy",
            type: {
              name: "Composite",
              className: "ImmutabilityPolicyProperties"
            }
          }, legalHold: {
            serializedName: "properties.legalHold",
            type: {
              name: "Composite",
              className: "LegalHoldProperties"
            }
          }, hasLegalHold: {
            serializedName: "properties.hasLegalHold",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, hasImmutabilityPolicy: {
            serializedName: "properties.hasImmutabilityPolicy",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, immutableStorageWithVersioning: {
            serializedName: "properties.immutableStorageWithVersioning",
            type: {
              name: "Composite",
              className: "ImmutableStorageWithVersioning"
            }
          }, enableNfsV3RootSquash: {
            serializedName: "properties.enableNfsV3RootSquash",
            type: {
              name: "Boolean"
            }
          }, enableNfsV3AllSquash: {
            serializedName: "properties.enableNfsV3AllSquash",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
      ImmutabilityPolicy = {
        type: {
          name: "Composite",
          className: "ImmutabilityPolicy",
          modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { immutabilityPeriodSinceCreationInDays: {
            serializedName: "properties.immutabilityPeriodSinceCreationInDays",
            type: {
              name: "Number"
            }
          }, state: {
            serializedName: "properties.state",
            readOnly: true,
            type: {
              name: "String"
            }
          }, allowProtectedAppendWrites: {
            serializedName: "properties.allowProtectedAppendWrites",
            type: {
              name: "Boolean"
            }
          }, allowProtectedAppendWritesAll: {
            serializedName: "properties.allowProtectedAppendWritesAll",
            type: {
              name: "Boolean"
            }
          } })
        }
      };
      FileShareItem = {
        type: {
          name: "Composite",
          className: "FileShareItem",
          modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, shareQuota: {
            constraints: {
              InclusiveMaximum: 102400,
              InclusiveMinimum: 1
            },
            serializedName: "properties.shareQuota",
            type: {
              name: "Number"
            }
          }, enabledProtocols: {
            serializedName: "properties.enabledProtocols",
            type: {
              name: "String"
            }
          }, rootSquash: {
            serializedName: "properties.rootSquash",
            type: {
              name: "String"
            }
          }, version: {
            serializedName: "properties.version",
            readOnly: true,
            type: {
              name: "String"
            }
          }, deleted: {
            serializedName: "properties.deleted",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, deletedTime: {
            serializedName: "properties.deletedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, remainingRetentionDays: {
            serializedName: "properties.remainingRetentionDays",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, accessTier: {
            serializedName: "properties.accessTier",
            type: {
              name: "String"
            }
          }, accessTierChangeTime: {
            serializedName: "properties.accessTierChangeTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, accessTierStatus: {
            serializedName: "properties.accessTierStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, shareUsageBytes: {
            serializedName: "properties.shareUsageBytes",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, leaseStatus: {
            serializedName: "properties.leaseStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseState: {
            serializedName: "properties.leaseState",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseDuration: {
            serializedName: "properties.leaseDuration",
            readOnly: true,
            type: {
              name: "String"
            }
          }, signedIdentifiers: {
            serializedName: "properties.signedIdentifiers",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "SignedIdentifier"
                }
              }
            }
          }, snapshotTime: {
            serializedName: "properties.snapshotTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          } })
        }
      };
      FileShare = {
        type: {
          name: "Composite",
          className: "FileShare",
          modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { lastModifiedTime: {
            serializedName: "properties.lastModifiedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, metadata: {
            serializedName: "properties.metadata",
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }, shareQuota: {
            constraints: {
              InclusiveMaximum: 102400,
              InclusiveMinimum: 1
            },
            serializedName: "properties.shareQuota",
            type: {
              name: "Number"
            }
          }, enabledProtocols: {
            serializedName: "properties.enabledProtocols",
            type: {
              name: "String"
            }
          }, rootSquash: {
            serializedName: "properties.rootSquash",
            type: {
              name: "String"
            }
          }, version: {
            serializedName: "properties.version",
            readOnly: true,
            type: {
              name: "String"
            }
          }, deleted: {
            serializedName: "properties.deleted",
            readOnly: true,
            type: {
              name: "Boolean"
            }
          }, deletedTime: {
            serializedName: "properties.deletedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, remainingRetentionDays: {
            serializedName: "properties.remainingRetentionDays",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, accessTier: {
            serializedName: "properties.accessTier",
            type: {
              name: "String"
            }
          }, accessTierChangeTime: {
            serializedName: "properties.accessTierChangeTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, accessTierStatus: {
            serializedName: "properties.accessTierStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, shareUsageBytes: {
            serializedName: "properties.shareUsageBytes",
            readOnly: true,
            type: {
              name: "Number"
            }
          }, leaseStatus: {
            serializedName: "properties.leaseStatus",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseState: {
            serializedName: "properties.leaseState",
            readOnly: true,
            type: {
              name: "String"
            }
          }, leaseDuration: {
            serializedName: "properties.leaseDuration",
            readOnly: true,
            type: {
              name: "String"
            }
          }, signedIdentifiers: {
            serializedName: "properties.signedIdentifiers",
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "SignedIdentifier"
                }
              }
            }
          }, snapshotTime: {
            serializedName: "properties.snapshotTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          } })
        }
      };
      BlobContainersCreateOrUpdateImmutabilityPolicyHeaders = {
        type: {
          name: "Composite",
          className: "BlobContainersCreateOrUpdateImmutabilityPolicyHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobContainersGetImmutabilityPolicyHeaders = {
        type: {
          name: "Composite",
          className: "BlobContainersGetImmutabilityPolicyHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobContainersDeleteImmutabilityPolicyHeaders = {
        type: {
          name: "Composite",
          className: "BlobContainersDeleteImmutabilityPolicyHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobContainersLockImmutabilityPolicyHeaders = {
        type: {
          name: "Composite",
          className: "BlobContainersLockImmutabilityPolicyHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BlobContainersExtendImmutabilityPolicyHeaders = {
        type: {
          name: "Composite",
          className: "BlobContainersExtendImmutabilityPolicyHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      FileSharesLeaseHeaders = {
        type: {
          name: "Composite",
          className: "FileSharesLeaseHeaders",
          modelProperties: {
            eTag: {
              serializedName: "etag",
              type: {
                name: "String"
              }
            }
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/models/parameters.js
  var accept2, $host2, apiVersion2, subscriptionId2, contentType2, accountName2, parameters5, resourceGroupName2, accountName12, expand2, parameters12, expand12, regenerateKey2, parameters22, parameters32, failoverType, requestType, parameters42, nextLink2, deletedAccountName, location3, managementPolicyName2, properties4, blobInventoryPolicyName2, properties12, privateEndpointConnectionName2, properties22, objectReplicationPolicyId2, properties32, username, properties42, encryptionScope2, encryptionScopeName2, maxpagesize, filter, include, parameters52, blobServicesName, maxpagesize1, include1, blobContainer, containerName, legalHold, parameters6, immutabilityPolicyName, ifMatch, ifMatch1, parameters7, parameters8, fileServicesName, expand22, fileShare, shareName, xMsSnapshot, include2, deletedShare, parameters9, parameters10, queueServiceName, queue, queueName, parameters11, tableServiceName, parameters122, tableName;
  var init_parameters2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/models/parameters.js"() {
      init_mappers2();
      accept2 = {
        parameterPath: "accept",
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Accept",
          type: {
            name: "String"
          }
        }
      };
      $host2 = {
        parameterPath: "$host",
        mapper: {
          serializedName: "$host",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
          defaultValue: "2022-09-01",
          isConstant: true,
          serializedName: "api-version",
          type: {
            name: "String"
          }
        }
      };
      subscriptionId2 = {
        parameterPath: "subscriptionId",
        mapper: {
          constraints: {
            MinLength: 1
          },
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      contentType2 = {
        parameterPath: ["options", "contentType"],
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Content-Type",
          type: {
            name: "String"
          }
        }
      };
      accountName2 = {
        parameterPath: "accountName",
        mapper: StorageAccountCheckNameAvailabilityParameters2
      };
      parameters5 = {
        parameterPath: "parameters",
        mapper: StorageAccountCreateParameters2
      };
      resourceGroupName2 = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      accountName12 = {
        parameterPath: "accountName",
        mapper: {
          constraints: {
            MaxLength: 24,
            MinLength: 3
          },
          serializedName: "accountName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      expand2 = {
        parameterPath: ["options", "expand"],
        mapper: {
          serializedName: "$expand",
          type: {
            name: "Enum",
            allowedValues: ["geoReplicationStats", "blobRestoreStatus"]
          }
        }
      };
      parameters12 = {
        parameterPath: "parameters",
        mapper: StorageAccountUpdateParameters2
      };
      expand12 = {
        parameterPath: ["options", "expand"],
        mapper: {
          defaultValue: "kerb",
          isConstant: true,
          serializedName: "$expand",
          type: {
            name: "String"
          }
        }
      };
      regenerateKey2 = {
        parameterPath: "regenerateKey",
        mapper: StorageAccountRegenerateKeyParameters2
      };
      parameters22 = {
        parameterPath: "parameters",
        mapper: AccountSasParameters2
      };
      parameters32 = {
        parameterPath: "parameters",
        mapper: ServiceSasParameters2
      };
      failoverType = {
        parameterPath: ["options", "failoverType"],
        mapper: {
          defaultValue: "Planned",
          isConstant: true,
          serializedName: "failoverType",
          type: {
            name: "String"
          }
        }
      };
      requestType = {
        parameterPath: "requestType",
        mapper: {
          serializedName: "requestType",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters42 = {
        parameterPath: "parameters",
        mapper: BlobRestoreParameters2
      };
      nextLink2 = {
        parameterPath: "nextLink",
        mapper: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      deletedAccountName = {
        parameterPath: "deletedAccountName",
        mapper: {
          constraints: {
            MaxLength: 24,
            MinLength: 3
          },
          serializedName: "deletedAccountName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      location3 = {
        parameterPath: "location",
        mapper: {
          serializedName: "location",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      managementPolicyName2 = {
        parameterPath: "managementPolicyName",
        mapper: {
          serializedName: "managementPolicyName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties4 = {
        parameterPath: "properties",
        mapper: ManagementPolicy2
      };
      blobInventoryPolicyName2 = {
        parameterPath: "blobInventoryPolicyName",
        mapper: {
          serializedName: "blobInventoryPolicyName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties12 = {
        parameterPath: "properties",
        mapper: BlobInventoryPolicy2
      };
      privateEndpointConnectionName2 = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
          serializedName: "privateEndpointConnectionName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties22 = {
        parameterPath: "properties",
        mapper: PrivateEndpointConnection2
      };
      objectReplicationPolicyId2 = {
        parameterPath: "objectReplicationPolicyId",
        mapper: {
          constraints: {
            MinLength: 1
          },
          serializedName: "objectReplicationPolicyId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties32 = {
        parameterPath: "properties",
        mapper: ObjectReplicationPolicy2
      };
      username = {
        parameterPath: "username",
        mapper: {
          constraints: {
            MaxLength: 64,
            MinLength: 3
          },
          serializedName: "username",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties42 = {
        parameterPath: "properties",
        mapper: LocalUser
      };
      encryptionScope2 = {
        parameterPath: "encryptionScope",
        mapper: EncryptionScope2
      };
      encryptionScopeName2 = {
        parameterPath: "encryptionScopeName",
        mapper: {
          constraints: {
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "encryptionScopeName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      maxpagesize = {
        parameterPath: ["options", "maxpagesize"],
        mapper: {
          constraints: {
            InclusiveMaximum: 5e3,
            InclusiveMinimum: 1
          },
          serializedName: "$maxpagesize",
          type: {
            name: "Number"
          }
        }
      };
      filter = {
        parameterPath: ["options", "filter"],
        mapper: {
          serializedName: "$filter",
          type: {
            name: "String"
          }
        }
      };
      include = {
        parameterPath: ["options", "include"],
        mapper: {
          serializedName: "$include",
          type: {
            name: "String"
          }
        }
      };
      parameters52 = {
        parameterPath: "parameters",
        mapper: BlobServiceProperties
      };
      blobServicesName = {
        parameterPath: "blobServicesName",
        mapper: {
          defaultValue: "default",
          isConstant: true,
          serializedName: "BlobServicesName",
          type: {
            name: "String"
          }
        }
      };
      maxpagesize1 = {
        parameterPath: ["options", "maxpagesize"],
        mapper: {
          serializedName: "$maxpagesize",
          type: {
            name: "String"
          }
        }
      };
      include1 = {
        parameterPath: ["options", "include"],
        mapper: {
          serializedName: "$include",
          type: {
            name: "String"
          }
        }
      };
      blobContainer = {
        parameterPath: "blobContainer",
        mapper: BlobContainer
      };
      containerName = {
        parameterPath: "containerName",
        mapper: {
          constraints: {
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "containerName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      legalHold = {
        parameterPath: "legalHold",
        mapper: LegalHold
      };
      parameters6 = {
        parameterPath: ["options", "parameters"],
        mapper: ImmutabilityPolicy
      };
      immutabilityPolicyName = {
        parameterPath: "immutabilityPolicyName",
        mapper: {
          defaultValue: "default",
          isConstant: true,
          serializedName: "immutabilityPolicyName",
          type: {
            name: "String"
          }
        }
      };
      ifMatch = {
        parameterPath: ["options", "ifMatch"],
        mapper: {
          serializedName: "If-Match",
          type: {
            name: "String"
          }
        }
      };
      ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
          serializedName: "If-Match",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters7 = {
        parameterPath: ["options", "parameters"],
        mapper: LeaseContainerRequest
      };
      parameters8 = {
        parameterPath: "parameters",
        mapper: FileServiceProperties
      };
      fileServicesName = {
        parameterPath: "fileServicesName",
        mapper: {
          defaultValue: "default",
          isConstant: true,
          serializedName: "FileServicesName",
          type: {
            name: "String"
          }
        }
      };
      expand22 = {
        parameterPath: ["options", "expand"],
        mapper: {
          serializedName: "$expand",
          type: {
            name: "String"
          }
        }
      };
      fileShare = {
        parameterPath: "fileShare",
        mapper: FileShare
      };
      shareName = {
        parameterPath: "shareName",
        mapper: {
          constraints: {
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "shareName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      xMsSnapshot = {
        parameterPath: ["options", "xMsSnapshot"],
        mapper: {
          serializedName: "x-ms-snapshot",
          type: {
            name: "String"
          }
        }
      };
      include2 = {
        parameterPath: ["options", "include"],
        mapper: {
          serializedName: "$include",
          type: {
            name: "String"
          }
        }
      };
      deletedShare = {
        parameterPath: "deletedShare",
        mapper: DeletedShare
      };
      parameters9 = {
        parameterPath: ["options", "parameters"],
        mapper: LeaseShareRequest
      };
      parameters10 = {
        parameterPath: "parameters",
        mapper: QueueServiceProperties
      };
      queueServiceName = {
        parameterPath: "queueServiceName",
        mapper: {
          defaultValue: "default",
          isConstant: true,
          serializedName: "queueServiceName",
          type: {
            name: "String"
          }
        }
      };
      queue = {
        parameterPath: "queue",
        mapper: StorageQueue
      };
      queueName = {
        parameterPath: "queueName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[a-z0-9]([a-z0-9]|(-(?!-))){1,61}[a-z0-9]$"),
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "queueName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters11 = {
        parameterPath: "parameters",
        mapper: TableServiceProperties
      };
      tableServiceName = {
        parameterPath: "tableServiceName",
        mapper: {
          defaultValue: "default",
          isConstant: true,
          serializedName: "tableServiceName",
          type: {
            name: "String"
          }
        }
      };
      parameters122 = {
        parameterPath: ["options", "parameters"],
        mapper: Table
      };
      tableName = {
        parameterPath: "tableName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9]{2,62}$"),
            MaxLength: 63,
            MinLength: 3
          },
          serializedName: "tableName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/operations.js
  var OperationsImpl2, serializer11, listOperationSpec8;
  var init_operations4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/operations.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      OperationsImpl2 = class {
        /**
         * Initialize a new instance of the class Operations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all of the available Storage Rest API operations.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(options, settings);
            }
          };
        }
        listPagingPage(options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all of the available Storage Rest API operations.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec8);
        }
      };
      __name(OperationsImpl2, "OperationsImpl");
      serializer11 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec8 = {
        path: "/providers/Microsoft.Storage/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [$host2],
        headerParameters: [accept2],
        serializer: serializer11
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/skus.js
  var SkusImpl2, serializer12, listOperationSpec9;
  var init_skus3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/skus.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      SkusImpl2 = class {
        /**
         * Initialize a new instance of the class Skus class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists the available SKUs supported by Microsoft.Storage for given subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(options, settings);
            }
          };
        }
        listPagingPage(options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists the available SKUs supported by Microsoft.Storage for given subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec9);
        }
      };
      __name(SkusImpl2, "SkusImpl");
      serializer12 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec9 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageSkuListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [$host2, subscriptionId2],
        headerParameters: [accept2],
        serializer: serializer12
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/lroImpl.js
  var LroImpl2;
  var init_lroImpl2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/lroImpl.js"() {
      init_tslib_es63();
      LroImpl2 = class {
        constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
          this.sendOperationFn = sendOperationFn;
          this.args = args;
          this.spec = spec;
          this.requestPath = requestPath;
          this.requestMethod = requestMethod;
        }
        sendInitialRequest() {
          return __awaiter2(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
          });
        }
        sendPollRequest(path) {
          return __awaiter2(this, void 0, void 0, function* () {
            const _a7 = this.spec, { requestBody } = _a7, restSpec = __rest2(_a7, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
          });
        }
      };
      __name(LroImpl2, "LroImpl");
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/storageAccounts.js
  var StorageAccountsImpl2, serializer13, checkNameAvailabilityOperationSpec2, createOperationSpec2, deleteOperationSpec6, getPropertiesOperationSpec2, updateOperationSpec2, listOperationSpec10, listByResourceGroupOperationSpec2, listKeysOperationSpec2, regenerateKeyOperationSpec2, listAccountSASOperationSpec2, listServiceSASOperationSpec2, failoverOperationSpec2, hierarchicalNamespaceMigrationOperationSpec, abortHierarchicalNamespaceMigrationOperationSpec, restoreBlobRangesOperationSpec2, revokeUserDelegationKeysOperationSpec2, listNextOperationSpec3, listByResourceGroupNextOperationSpec;
  var init_storageAccounts3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/storageAccounts.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      init_src7();
      init_lroImpl2();
      StorageAccountsImpl2 = class {
        /**
         * Initialize a new instance of the class StorageAccounts class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all the storage accounts available under the subscription. Note that storage keys are not
         * returned; use the ListKeys operation for this.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(options, settings);
            }
          };
        }
        listPagingPage(options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all the storage accounts available under the given resource group. Note that storage keys are
         * not returned; use the ListKeys operation for this.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listByResourceGroupPagingPage(resourceGroupName5, options, settings);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._listByResourceGroup(resourceGroupName5, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listByResourceGroupNext(resourceGroupName5, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * Checks that the storage account name is valid and is not already in use.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        checkNameAvailability(accountName3, options) {
          return this.client.sendOperationRequest({ accountName: accountName3, options }, checkNameAvailabilityOperationSpec2);
        }
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is already
         * created and a subsequent create request is issued with different properties, the account properties
         * will be updated. If an account is already created and a subsequent create or update request is
         * issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the created account.
         * @param options The options parameters.
         */
        beginCreate(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, createOperationSpec2);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * Asynchronously creates a new storage account with the specified parameters. If an account is already
         * created and a subsequent create request is issued with different properties, the account properties
         * will be updated. If an account is already created and a subsequent create or update request is
         * issued with the exact same set of properties, the request will succeed.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the created account.
         * @param options The options parameters.
         */
        beginCreateAndWait(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName5, accountName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Deletes a storage account in Microsoft Azure.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, deleteOperationSpec6);
        }
        /**
         * Returns the properties for the specified storage account including but not limited to name, SKU
         * name, location, and account status. The ListKeys operation should be used to retrieve storage keys.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getPropertiesOperationSpec2);
        }
        /**
         * The update operation can be used to update the SKU, encryption, access tier, or tags for a storage
         * account. It can also be used to map the account to a custom domain. Only one custom domain is
         * supported per storage account; the replacement/change of custom domain is not supported. In order to
         * replace an old custom domain, the old value must be cleared/unregistered before a new value can be
         * set. The update of multiple properties is supported. This call does not change the storage keys for
         * the account. If you want to change the storage account keys, use the regenerate keys operation. The
         * location and name of the storage account cannot be changed after creation.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for the updated account.
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, updateOperationSpec2);
        }
        /**
         * Lists all the storage accounts available under the subscription. Note that storage keys are not
         * returned; use the ListKeys operation for this.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec10);
        }
        /**
         * Lists all the storage accounts available under the given resource group. Note that storage keys are
         * not returned; use the ListKeys operation for this.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec2);
        }
        /**
         * Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage
         * account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        listKeys(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listKeysOperationSpec2);
        }
        /**
         * Regenerates one of the access keys or Kerberos keys for the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param regenerateKey Specifies name of the key which should be regenerated -- key1, key2, kerb1,
         *                      kerb2.
         * @param options The options parameters.
         */
        regenerateKey(resourceGroupName5, accountName3, regenerateKey3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, regenerateKey: regenerateKey3, options }, regenerateKeyOperationSpec2);
        }
        /**
         * List SAS credentials of a storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide to list SAS credentials for the storage account.
         * @param options The options parameters.
         */
        listAccountSAS(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, listAccountSASOperationSpec2);
        }
        /**
         * List service SAS credentials of a specific resource.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide to list service SAS credentials.
         * @param options The options parameters.
         */
        listServiceSAS(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, listServiceSASOperationSpec2);
        }
        /**
         * A failover request can be triggered for a storage account in the event a primary endpoint becomes
         * unavailable for any reason. The failover occurs from the storage account's primary cluster to the
         * secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and
         * the account is converted to LRS. In the case of a Planned Failover, the primary and secondary
         * clusters are swapped after failover and the account remains geo-replicated. Failover should continue
         * to be used in the event of availability issues as Planned failover is only available while the
         * primary and secondary endpoints are available. The primary use case of a Planned Failover is
         * disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter
         * to 'Planned'. Learn more about the failover options here-
         * https://learn.microsoft.com/azure/storage/common/storage-disaster-recovery-guidance
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginFailover(resourceGroupName5, accountName3, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, options }, failoverOperationSpec2);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * A failover request can be triggered for a storage account in the event a primary endpoint becomes
         * unavailable for any reason. The failover occurs from the storage account's primary cluster to the
         * secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover and
         * the account is converted to LRS. In the case of a Planned Failover, the primary and secondary
         * clusters are swapped after failover and the account remains geo-replicated. Failover should continue
         * to be used in the event of availability issues as Planned failover is only available while the
         * primary and secondary endpoints are available. The primary use case of a Planned Failover is
         * disaster recovery testing drills. This type of failover is invoked by setting FailoverType parameter
         * to 'Planned'. Learn more about the failover options here-
         * https://learn.microsoft.com/azure/storage/common/storage-disaster-recovery-guidance
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginFailoverAndWait(resourceGroupName5, accountName3, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginFailover(resourceGroupName5, accountName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Live Migration of storage account to enable Hns
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param requestType Required. Hierarchical namespace migration type can either be a hierarchical
         *                    namespace validation request 'HnsOnValidationRequest' or a hydration request
         *                    'HnsOnHydrationRequest'. The validation request will validate the migration whereas the hydration
         *                    request will migrate the account.
         * @param options The options parameters.
         */
        beginHierarchicalNamespaceMigration(resourceGroupName5, accountName3, requestType2, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, requestType: requestType2, options }, hierarchicalNamespaceMigrationOperationSpec);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * Live Migration of storage account to enable Hns
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param requestType Required. Hierarchical namespace migration type can either be a hierarchical
         *                    namespace validation request 'HnsOnValidationRequest' or a hydration request
         *                    'HnsOnHydrationRequest'. The validation request will validate the migration whereas the hydration
         *                    request will migrate the account.
         * @param options The options parameters.
         */
        beginHierarchicalNamespaceMigrationAndWait(resourceGroupName5, accountName3, requestType2, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginHierarchicalNamespaceMigration(resourceGroupName5, accountName3, requestType2, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Abort live Migration of storage account to enable Hns
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginAbortHierarchicalNamespaceMigration(resourceGroupName5, accountName3, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, options }, abortHierarchicalNamespaceMigrationOperationSpec);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * Abort live Migration of storage account to enable Hns
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        beginAbortHierarchicalNamespaceMigrationAndWait(resourceGroupName5, accountName3, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginAbortHierarchicalNamespaceMigration(resourceGroupName5, accountName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for restore blob ranges.
         * @param options The options parameters.
         */
        beginRestoreBlobRanges(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, restoreBlobRangesOperationSpec2);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * Restore blobs in the specified blob ranges
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The parameters to provide for restore blob ranges.
         * @param options The options parameters.
         */
        beginRestoreBlobRangesAndWait(resourceGroupName5, accountName3, parameters17, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginRestoreBlobRanges(resourceGroupName5, accountName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Revoke user delegation keys.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        revokeUserDelegationKeys(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, revokeUserDelegationKeysOperationSpec2);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec3);
        }
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        _listByResourceGroupNext(resourceGroupName5, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, nextLink: nextLink7, options }, listByResourceGroupNextOperationSpec);
        }
      };
      __name(StorageAccountsImpl2, "StorageAccountsImpl");
      serializer13 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      checkNameAvailabilityOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: CheckNameAvailabilityResult2
          }
        },
        requestBody: accountName2,
        queryParameters: [apiVersion2],
        urlParameters: [$host2, subscriptionId2],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      createOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: StorageAccount2
          },
          201: {
            bodyMapper: StorageAccount2
          },
          202: {
            bodyMapper: StorageAccount2
          },
          204: {
            bodyMapper: StorageAccount2
          }
        },
        requestBody: parameters5,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      deleteOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "DELETE",
        responses: { 200: {}, 204: {} },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        serializer: serializer13
      };
      getPropertiesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccount2
          }
        },
        queryParameters: [apiVersion2, expand2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      updateOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: StorageAccount2
          }
        },
        requestBody: parameters12,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      listOperationSpec10 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [$host2, subscriptionId2],
        headerParameters: [accept2],
        serializer: serializer13
      };
      listByResourceGroupOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      listKeysOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: StorageAccountListKeysResult2
          }
        },
        queryParameters: [apiVersion2, expand12],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      regenerateKeyOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: StorageAccountListKeysResult2
          }
        },
        requestBody: regenerateKey2,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      listAccountSASOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ListAccountSasResponse2
          }
        },
        requestBody: parameters22,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      listServiceSASOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ListServiceSasResponse2
          }
        },
        requestBody: parameters32,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      failoverOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover",
        httpMethod: "POST",
        responses: { 200: {}, 201: {}, 202: {}, 204: {} },
        queryParameters: [apiVersion2, failoverType],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        serializer: serializer13
      };
      hierarchicalNamespaceMigrationOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/hnsonmigration",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2, requestType],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      abortHierarchicalNamespaceMigrationOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/aborthnsonmigration",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      restoreBlobRangesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: BlobRestoreStatus2
          },
          201: {
            bodyMapper: BlobRestoreStatus2
          },
          202: {
            bodyMapper: BlobRestoreStatus2
          },
          204: {
            bodyMapper: BlobRestoreStatus2
          }
        },
        requestBody: parameters42,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer13
      };
      revokeUserDelegationKeysOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys",
        httpMethod: "POST",
        responses: { 200: {} },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        serializer: serializer13
      };
      listNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
      listByResourceGroupNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageAccountListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer13
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/deletedAccounts.js
  var DeletedAccountsImpl, serializer14, listOperationSpec11, getOperationSpec6, listNextOperationSpec4;
  var init_deletedAccounts = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/deletedAccounts.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      DeletedAccountsImpl = class {
        /**
         * Initialize a new instance of the class DeletedAccounts class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists deleted accounts under the subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(options, settings);
            }
          };
        }
        listPagingPage(options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists deleted accounts under the subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec11);
        }
        /**
         * Get properties of specified deleted account resource.
         * @param deletedAccountName Name of the deleted storage account.
         * @param location The location of the deleted storage account.
         * @param options The options parameters.
         */
        get(deletedAccountName2, location4, options) {
          return this.client.sendOperationRequest({ deletedAccountName: deletedAccountName2, location: location4, options }, getOperationSpec6);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec4);
        }
      };
      __name(DeletedAccountsImpl, "DeletedAccountsImpl");
      serializer14 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec11 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/deletedAccounts",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeletedAccountListResult
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [$host2, subscriptionId2],
        headerParameters: [accept2],
        serializer: serializer14
      };
      getOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/deletedAccounts/{deletedAccountName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeletedAccount
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          deletedAccountName,
          location3
        ],
        headerParameters: [accept2],
        serializer: serializer14
      };
      listNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeletedAccountListResult
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer14
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/usages.js
  var UsagesImpl2, serializer15, listByLocationOperationSpec2;
  var init_usages3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/usages.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      UsagesImpl2 = class {
        /**
         * Initialize a new instance of the class Usages class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the current usage count and the limit for the resources of the location under the subscription.
         * @param location The location of the Azure Storage resource.
         * @param options The options parameters.
         */
        listByLocation(location4, options) {
          const iter = this.listByLocationPagingAll(location4, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listByLocationPagingPage(location4, options, settings);
            }
          };
        }
        listByLocationPagingPage(location4, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listByLocationPagingPage_1() {
            let result;
            result = yield __await2(this._listByLocation(location4, options));
            yield yield __await2(result.value || []);
          }, "listByLocationPagingPage_1"));
        }
        listByLocationPagingAll(location4, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listByLocationPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listByLocationPagingPage(location4, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listByLocationPagingAll_1"));
        }
        /**
         * Gets the current usage count and the limit for the resources of the location under the subscription.
         * @param location The location of the Azure Storage resource.
         * @param options The options parameters.
         */
        _listByLocation(location4, options) {
          return this.client.sendOperationRequest({ location: location4, options }, listByLocationOperationSpec2);
        }
      };
      __name(UsagesImpl2, "UsagesImpl");
      serializer15 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listByLocationOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/locations/{location}/usages",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: UsageListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          location3
        ],
        headerParameters: [accept2],
        serializer: serializer15
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/managementPolicies.js
  var ManagementPoliciesImpl2, serializer16, getOperationSpec7, createOrUpdateOperationSpec4, deleteOperationSpec7;
  var init_managementPolicies3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/managementPolicies.js"() {
      init_src6();
      init_mappers2();
      init_parameters2();
      ManagementPoliciesImpl2 = class {
        /**
         * Initialize a new instance of the class ManagementPolicies class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the managementpolicy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, managementPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, managementPolicyName: managementPolicyName3, options }, getOperationSpec7);
        }
        /**
         * Sets the managementpolicy to the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param properties The ManagementPolicy set to a storage account.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, managementPolicyName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            managementPolicyName: managementPolicyName3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec4);
        }
        /**
         * Deletes the managementpolicy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param managementPolicyName The name of the Storage Account Management Policy. It should always be
         *                             'default'
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, managementPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, managementPolicyName: managementPolicyName3, options }, deleteOperationSpec7);
        }
      };
      __name(ManagementPoliciesImpl2, "ManagementPoliciesImpl");
      serializer16 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      getOperationSpec7 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ManagementPolicy2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          managementPolicyName2
        ],
        headerParameters: [accept2],
        serializer: serializer16
      };
      createOrUpdateOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ManagementPolicy2
          }
        },
        requestBody: properties4,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          managementPolicyName2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer16
      };
      deleteOperationSpec7 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}",
        httpMethod: "DELETE",
        responses: { 200: {}, 204: {} },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          managementPolicyName2
        ],
        serializer: serializer16
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/blobInventoryPolicies.js
  var BlobInventoryPoliciesImpl2, serializer17, getOperationSpec8, createOrUpdateOperationSpec5, deleteOperationSpec8, listOperationSpec12;
  var init_blobInventoryPolicies3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/blobInventoryPolicies.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      BlobInventoryPoliciesImpl2 = class {
        /**
         * Initialize a new instance of the class BlobInventoryPolicies class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(resourceGroupName5, accountName3, options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, blobInventoryPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, blobInventoryPolicyName: blobInventoryPolicyName3, options }, getOperationSpec8);
        }
        /**
         * Sets the blob inventory policy to the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param properties The blob inventory policy set to a storage account.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, blobInventoryPolicyName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            blobInventoryPolicyName: blobInventoryPolicyName3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec5);
        }
        /**
         * Deletes the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param blobInventoryPolicyName The name of the storage account blob inventory policy. It should
         *                                always be 'default'
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, blobInventoryPolicyName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, blobInventoryPolicyName: blobInventoryPolicyName3, options }, deleteOperationSpec8);
        }
        /**
         * Gets the blob inventory policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec12);
        }
      };
      __name(BlobInventoryPoliciesImpl2, "BlobInventoryPoliciesImpl");
      serializer17 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      getOperationSpec8 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: BlobInventoryPolicy2
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          blobInventoryPolicyName2
        ],
        headerParameters: [accept2],
        serializer: serializer17
      };
      createOrUpdateOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: BlobInventoryPolicy2
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: properties12,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          blobInventoryPolicyName2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer17
      };
      deleteOperationSpec8 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies/{blobInventoryPolicyName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          blobInventoryPolicyName2
        ],
        headerParameters: [accept2],
        serializer: serializer17
      };
      listOperationSpec12 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/inventoryPolicies",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListBlobInventoryPolicy2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer17
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/privateEndpointConnections.js
  var PrivateEndpointConnectionsImpl2, serializer18, listOperationSpec13, getOperationSpec9, putOperationSpec3, deleteOperationSpec9;
  var init_privateEndpointConnections3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/privateEndpointConnections.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      PrivateEndpointConnectionsImpl2 = class {
        /**
         * Initialize a new instance of the class PrivateEndpointConnections class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List all the private endpoint connections associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(resourceGroupName5, accountName3, options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List all the private endpoint connections associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec13);
        }
        /**
         * Gets the specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, privateEndpointConnectionName3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            options
          }, getOperationSpec9);
        }
        /**
         * Update the state of specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param properties The private endpoint connection properties.
         * @param options The options parameters.
         */
        put(resourceGroupName5, accountName3, privateEndpointConnectionName3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            properties: properties6,
            options
          }, putOperationSpec3);
        }
        /**
         * Deletes the specified private endpoint connection associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
         *                                      Azure resource
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, privateEndpointConnectionName3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            privateEndpointConnectionName: privateEndpointConnectionName3,
            options
          }, deleteOperationSpec9);
        }
      };
      __name(PrivateEndpointConnectionsImpl2, "PrivateEndpointConnectionsImpl");
      serializer18 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec13 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnectionListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer18
      };
      getOperationSpec9 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnection2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          privateEndpointConnectionName2
        ],
        headerParameters: [accept2],
        serializer: serializer18
      };
      putOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: PrivateEndpointConnection2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        requestBody: properties22,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          privateEndpointConnectionName2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer18
      };
      deleteOperationSpec9 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          privateEndpointConnectionName2
        ],
        headerParameters: [accept2],
        serializer: serializer18
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/privateLinkResources.js
  var PrivateLinkResourcesImpl2, serializer19, listByStorageAccountOperationSpec2;
  var init_privateLinkResources3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/privateLinkResources.js"() {
      init_src6();
      init_mappers2();
      init_parameters2();
      PrivateLinkResourcesImpl2 = class {
        /**
         * Initialize a new instance of the class PrivateLinkResources class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the private link resources that need to be created for a storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        listByStorageAccount(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listByStorageAccountOperationSpec2);
        }
      };
      __name(PrivateLinkResourcesImpl2, "PrivateLinkResourcesImpl");
      serializer19 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listByStorageAccountOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/privateLinkResources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: PrivateLinkResourceListResult2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer19
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/objectReplicationPoliciesOperations.js
  var ObjectReplicationPoliciesOperationsImpl2, serializer20, listOperationSpec14, getOperationSpec10, createOrUpdateOperationSpec6, deleteOperationSpec10;
  var init_objectReplicationPoliciesOperations3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/objectReplicationPoliciesOperations.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      ObjectReplicationPoliciesOperationsImpl2 = class {
        /**
         * Initialize a new instance of the class ObjectReplicationPoliciesOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List the object replication policies associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(resourceGroupName5, accountName3, options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List the object replication policies associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec14);
        }
        /**
         * Get the object replication policy of the storage account by policy ID.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId For the destination account, provide the value 'default'. Configure
         *                                  the policy on the destination account first. For the source account, provide the value of the policy
         *                                  ID that is returned when you download the policy that was defined on the destination account. The
         *                                  policy is downloaded as a JSON file.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, objectReplicationPolicyId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, objectReplicationPolicyId: objectReplicationPolicyId3, options }, getOperationSpec10);
        }
        /**
         * Create or update the object replication policy of the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId For the destination account, provide the value 'default'. Configure
         *                                  the policy on the destination account first. For the source account, provide the value of the policy
         *                                  ID that is returned when you download the policy that was defined on the destination account. The
         *                                  policy is downloaded as a JSON file.
         * @param properties The object replication policy set to a storage account. A unique policy ID will be
         *                   created if absent.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, objectReplicationPolicyId3, properties6, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            objectReplicationPolicyId: objectReplicationPolicyId3,
            properties: properties6,
            options
          }, createOrUpdateOperationSpec6);
        }
        /**
         * Deletes the object replication policy associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param objectReplicationPolicyId For the destination account, provide the value 'default'. Configure
         *                                  the policy on the destination account first. For the source account, provide the value of the policy
         *                                  ID that is returned when you download the policy that was defined on the destination account. The
         *                                  policy is downloaded as a JSON file.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, objectReplicationPolicyId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, objectReplicationPolicyId: objectReplicationPolicyId3, options }, deleteOperationSpec10);
        }
      };
      __name(ObjectReplicationPoliciesOperationsImpl2, "ObjectReplicationPoliciesOperationsImpl");
      serializer20 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec14 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicies2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer20
      };
      getOperationSpec10 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicy2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          objectReplicationPolicyId2
        ],
        headerParameters: [accept2],
        serializer: serializer20
      };
      createOrUpdateOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ObjectReplicationPolicy2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        requestBody: properties32,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          objectReplicationPolicyId2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer20
      };
      deleteOperationSpec10 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/objectReplicationPolicies/{objectReplicationPolicyId}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          objectReplicationPolicyId2
        ],
        headerParameters: [accept2],
        serializer: serializer20
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/localUsersOperations.js
  var LocalUsersOperationsImpl, serializer21, listOperationSpec15, getOperationSpec11, createOrUpdateOperationSpec7, deleteOperationSpec11, listKeysOperationSpec3, regeneratePasswordOperationSpec;
  var init_localUsersOperations = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/localUsersOperations.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      LocalUsersOperationsImpl = class {
        /**
         * Initialize a new instance of the class LocalUsersOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List the local users associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(resourceGroupName5, accountName3, options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List the local users associated with the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec15);
        }
        /**
         * Get the local user of the storage account by username.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param username The name of local user. The username must contain lowercase letters and numbers
         *                 only. It must be unique only within the storage account.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, username2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, username: username2, options }, getOperationSpec11);
        }
        /**
         * Create or update the properties of a local user associated with the storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param username The name of local user. The username must contain lowercase letters and numbers
         *                 only. It must be unique only within the storage account.
         * @param properties The local user associated with a storage account.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, accountName3, username2, properties6, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, username: username2, properties: properties6, options }, createOrUpdateOperationSpec7);
        }
        /**
         * Deletes the local user associated with the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param username The name of local user. The username must contain lowercase letters and numbers
         *                 only. It must be unique only within the storage account.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, username2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, username: username2, options }, deleteOperationSpec11);
        }
        /**
         * List SSH authorized keys and shared key of the local user.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param username The name of local user. The username must contain lowercase letters and numbers
         *                 only. It must be unique only within the storage account.
         * @param options The options parameters.
         */
        listKeys(resourceGroupName5, accountName3, username2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, username: username2, options }, listKeysOperationSpec3);
        }
        /**
         * Regenerate the local user SSH password.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param username The name of local user. The username must contain lowercase letters and numbers
         *                 only. It must be unique only within the storage account.
         * @param options The options parameters.
         */
        regeneratePassword(resourceGroupName5, accountName3, username2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, username: username2, options }, regeneratePasswordOperationSpec);
        }
      };
      __name(LocalUsersOperationsImpl, "LocalUsersOperationsImpl");
      serializer21 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec15 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: LocalUsers
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer21
      };
      getOperationSpec11 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: LocalUser
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          username
        ],
        headerParameters: [accept2],
        serializer: serializer21
      };
      createOrUpdateOperationSpec7 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: LocalUser
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        requestBody: properties42,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          username
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer21
      };
      deleteOperationSpec11 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          username
        ],
        headerParameters: [accept2],
        serializer: serializer21
      };
      listKeysOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/listKeys",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LocalUserKeys
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          username
        ],
        headerParameters: [accept2],
        serializer: serializer21
      };
      regeneratePasswordOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/regeneratePassword",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LocalUserRegeneratePasswordResult
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          username
        ],
        headerParameters: [accept2],
        serializer: serializer21
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/encryptionScopes.js
  var EncryptionScopesImpl2, serializer22, putOperationSpec4, patchOperationSpec2, getOperationSpec12, listOperationSpec16, listNextOperationSpec5;
  var init_encryptionScopes3 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/encryptionScopes.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      EncryptionScopesImpl2 = class {
        /**
         * Initialize a new instance of the class EncryptionScopes class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all the encryption scopes available under the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(resourceGroupName5, accountName3, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Synchronously creates or updates an encryption scope under the specified storage account. If an
         * encryption scope is already created and a subsequent request is issued with different properties,
         * the encryption scope properties will be updated per the specified request.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param encryptionScope Encryption scope properties to be used for the create or update.
         * @param options The options parameters.
         */
        put(resourceGroupName5, accountName3, encryptionScopeName3, encryptionScope3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            encryptionScopeName: encryptionScopeName3,
            encryptionScope: encryptionScope3,
            options
          }, putOperationSpec4);
        }
        /**
         * Update encryption scope properties as specified in the request body. Update fails if the specified
         * encryption scope does not already exist.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param encryptionScope Encryption scope properties to be used for the update.
         * @param options The options parameters.
         */
        patch(resourceGroupName5, accountName3, encryptionScopeName3, encryptionScope3, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            accountName: accountName3,
            encryptionScopeName: encryptionScopeName3,
            encryptionScope: encryptionScope3,
            options
          }, patchOperationSpec2);
        }
        /**
         * Returns the properties for the specified encryption scope.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param encryptionScopeName The name of the encryption scope within the specified storage account.
         *                            Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case
         *                            letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a
         *                            letter or number.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, encryptionScopeName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, encryptionScopeName: encryptionScopeName3, options }, getOperationSpec12);
        }
        /**
         * Lists all the encryption scopes available under the specified storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec16);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec5);
        }
      };
      __name(EncryptionScopesImpl2, "EncryptionScopesImpl");
      serializer22 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      putOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: EncryptionScope2
          },
          201: {
            bodyMapper: EncryptionScope2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        requestBody: encryptionScope2,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          encryptionScopeName2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer22
      };
      patchOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: EncryptionScope2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        requestBody: encryptionScope2,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          encryptionScopeName2
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer22
      };
      getOperationSpec12 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScope2
          },
          default: {
            bodyMapper: ErrorResponse2
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          encryptionScopeName2
        ],
        headerParameters: [accept2],
        serializer: serializer22
      };
      listOperationSpec16 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScopeListResult2
          }
        },
        queryParameters: [
          apiVersion2,
          maxpagesize,
          filter,
          include
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer22
      };
      listNextOperationSpec5 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: EncryptionScopeListResult2
          }
        },
        queryParameters: [
          apiVersion2,
          maxpagesize,
          filter,
          include
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer22
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/blobServices.js
  var BlobServicesImpl, serializer23, listOperationSpec17, setServicePropertiesOperationSpec, getServicePropertiesOperationSpec;
  var init_blobServices = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/blobServices.js"() {
      init_tslib_es63();
      init_src6();
      init_mappers2();
      init_parameters2();
      BlobServicesImpl = class {
        /**
         * Initialize a new instance of the class BlobServices class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List blob services of storage account. It returns a collection of one object named default.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, _settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            result = yield __await2(this._list(resourceGroupName5, accountName3, options));
            yield yield __await2(result.value || []);
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * List blob services of storage account. It returns a collection of one object named default.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec17);
        }
        /**
         * Sets the properties of a storage account’s Blob service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The properties of a storage account’s Blob service, including properties for
         *                   Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
         * @param options The options parameters.
         */
        setServiceProperties(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, setServicePropertiesOperationSpec);
        }
        /**
         * Gets the properties of a storage account’s Blob service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getServiceProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getServicePropertiesOperationSpec);
        }
      };
      __name(BlobServicesImpl, "BlobServicesImpl");
      serializer23 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec17 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: BlobServiceItems
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer23
      };
      setServicePropertiesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: BlobServiceProperties
          }
        },
        requestBody: parameters52,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          blobServicesName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer23
      };
      getServicePropertiesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/{BlobServicesName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: BlobServiceProperties
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          blobServicesName
        ],
        headerParameters: [accept2],
        serializer: serializer23
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/blobContainers.js
  var BlobContainersImpl, serializer24, listOperationSpec18, createOperationSpec3, updateOperationSpec3, getOperationSpec13, deleteOperationSpec12, setLegalHoldOperationSpec, clearLegalHoldOperationSpec, createOrUpdateImmutabilityPolicyOperationSpec, getImmutabilityPolicyOperationSpec, deleteImmutabilityPolicyOperationSpec, lockImmutabilityPolicyOperationSpec, extendImmutabilityPolicyOperationSpec, leaseOperationSpec, objectLevelWormOperationSpec, listNextOperationSpec6;
  var init_blobContainers = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/blobContainers.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      init_src7();
      init_lroImpl2();
      BlobContainersImpl = class {
        /**
         * Initialize a new instance of the class BlobContainers class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all containers and does not support a prefix like data plane. Also SRP today does not return
         * continuation token.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(resourceGroupName5, accountName3, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all containers and does not support a prefix like data plane. Also SRP today does not return
         * continuation token.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec18);
        }
        /**
         * Creates a new container under the specified account as described by request body. The container
         * resource includes metadata and properties for that container. It does not include a list of the
         * blobs contained by the container.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param blobContainer Properties of the blob container to create.
         * @param options The options parameters.
         */
        create(resourceGroupName5, accountName3, containerName2, blobContainer2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, blobContainer: blobContainer2, options }, createOperationSpec3);
        }
        /**
         * Updates container properties as specified in request body. Properties not mentioned in the request
         * will be unchanged. Update fails if the specified container doesn't already exist.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param blobContainer Properties to update for the blob container.
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, containerName2, blobContainer2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, blobContainer: blobContainer2, options }, updateOperationSpec3);
        }
        /**
         * Gets properties of a specified container.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, containerName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, getOperationSpec13);
        }
        /**
         * Deletes specified container under its account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, containerName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, deleteOperationSpec12);
        }
        /**
         * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows
         * an append pattern and does not clear out the existing tags that are not specified in the request.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param legalHold The LegalHold property that will be set to a blob container.
         * @param options The options parameters.
         */
        setLegalHold(resourceGroupName5, accountName3, containerName2, legalHold2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, legalHold: legalHold2, options }, setLegalHoldOperationSpec);
        }
        /**
         * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation.
         * ClearLegalHold clears out only the specified tags in the request.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param legalHold The LegalHold property that will be clear from a blob container.
         * @param options The options parameters.
         */
        clearLegalHold(resourceGroupName5, accountName3, containerName2, legalHold2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, legalHold: legalHold2, options }, clearLegalHoldOperationSpec);
        }
        /**
         * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not
         * required for this operation.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        createOrUpdateImmutabilityPolicy(resourceGroupName5, accountName3, containerName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, createOrUpdateImmutabilityPolicyOperationSpec);
        }
        /**
         * Gets the existing immutability policy along with the corresponding ETag in response headers and
         * body.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        getImmutabilityPolicy(resourceGroupName5, accountName3, containerName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, getImmutabilityPolicyOperationSpec);
        }
        /**
         * Aborts an unlocked immutability policy. The response of delete has
         * immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation.
         * Deleting a locked immutability policy is not allowed, the only way is to delete the container after
         * deleting all expired blobs inside the policy locked container.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of "*"
         *                can be used to apply the operation only if the immutability policy already exists. If omitted, this
         *                operation will always be applied.
         * @param options The options parameters.
         */
        deleteImmutabilityPolicy(resourceGroupName5, accountName3, containerName2, ifMatch2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, ifMatch: ifMatch2, options }, deleteImmutabilityPolicyOperationSpec);
        }
        /**
         * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is
         * ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of "*"
         *                can be used to apply the operation only if the immutability policy already exists. If omitted, this
         *                operation will always be applied.
         * @param options The options parameters.
         */
        lockImmutabilityPolicy(resourceGroupName5, accountName3, containerName2, ifMatch2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, ifMatch: ifMatch2, options }, lockImmutabilityPolicyOperationSpec);
        }
        /**
         * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action
         * allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of "*"
         *                can be used to apply the operation only if the immutability policy already exists. If omitted, this
         *                operation will always be applied.
         * @param options The options parameters.
         */
        extendImmutabilityPolicy(resourceGroupName5, accountName3, containerName2, ifMatch2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, ifMatch: ifMatch2, options }, extendImmutabilityPolicyOperationSpec);
        }
        /**
         * The Lease Container operation establishes and manages a lock on a container for delete operations.
         * The lock duration can be 15 to 60 seconds, or can be infinite.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        lease(resourceGroupName5, accountName3, containerName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, leaseOperationSpec);
        }
        /**
         * This operation migrates a blob container from container level WORM to object level immutability
         * enabled container. Prerequisites require a container level immutability policy either in locked or
         * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the
         * container.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        beginObjectLevelWorm(resourceGroupName5, accountName3, containerName2, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter2(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl2(sendOperation, { resourceGroupName: resourceGroupName5, accountName: accountName3, containerName: containerName2, options }, objectLevelWormOperationSpec);
            const poller = new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
          });
        }
        /**
         * This operation migrates a blob container from container level WORM to object level immutability
         * enabled container. Prerequisites require a container level immutability policy either in locked or
         * unlocked state, Account level versioning must be enabled and there should be no Legal hold on the
         * container.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param containerName The name of the blob container within the specified storage account. Blob
         *                      container names must be between 3 and 63 characters in length and use numbers, lower-case letters
         *                      and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or
         *                      number.
         * @param options The options parameters.
         */
        beginObjectLevelWormAndWait(resourceGroupName5, accountName3, containerName2, options) {
          return __awaiter2(this, void 0, void 0, function* () {
            const poller = yield this.beginObjectLevelWorm(resourceGroupName5, accountName3, containerName2, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec6);
        }
      };
      __name(BlobContainersImpl, "BlobContainersImpl");
      serializer24 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec18 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListContainerItems
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1,
          include1
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer24
      };
      createOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: BlobContainer
          },
          201: {
            bodyMapper: BlobContainer
          }
        },
        requestBody: blobContainer,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer24
      };
      updateOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: BlobContainer
          }
        },
        requestBody: blobContainer,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer24
      };
      getOperationSpec13 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: BlobContainer
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2],
        serializer: serializer24
      };
      deleteOperationSpec12 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}",
        httpMethod: "DELETE",
        responses: { 200: {}, 204: {} },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        serializer: serializer24
      };
      setLegalHoldOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LegalHold
          }
        },
        requestBody: legalHold,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer24
      };
      clearLegalHoldOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LegalHold
          }
        },
        requestBody: legalHold,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer24
      };
      createOrUpdateImmutabilityPolicyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ImmutabilityPolicy,
            headersMapper: BlobContainersCreateOrUpdateImmutabilityPolicyHeaders
          }
        },
        requestBody: parameters6,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName,
          immutabilityPolicyName
        ],
        headerParameters: [
          accept2,
          contentType2,
          ifMatch
        ],
        mediaType: "json",
        serializer: serializer24
      };
      getImmutabilityPolicyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ImmutabilityPolicy,
            headersMapper: BlobContainersGetImmutabilityPolicyHeaders
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName,
          immutabilityPolicyName
        ],
        headerParameters: [accept2, ifMatch],
        serializer: serializer24
      };
      deleteImmutabilityPolicyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}",
        httpMethod: "DELETE",
        responses: {
          200: {
            bodyMapper: ImmutabilityPolicy,
            headersMapper: BlobContainersDeleteImmutabilityPolicyHeaders
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName,
          immutabilityPolicyName
        ],
        headerParameters: [accept2, ifMatch1],
        serializer: serializer24
      };
      lockImmutabilityPolicyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ImmutabilityPolicy,
            headersMapper: BlobContainersLockImmutabilityPolicyHeaders
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, ifMatch1],
        serializer: serializer24
      };
      extendImmutabilityPolicyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ImmutabilityPolicy,
            headersMapper: BlobContainersExtendImmutabilityPolicyHeaders
          }
        },
        requestBody: parameters6,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [
          accept2,
          contentType2,
          ifMatch1
        ],
        mediaType: "json",
        serializer: serializer24
      };
      leaseOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LeaseContainerResponse
          }
        },
        requestBody: parameters7,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer24
      };
      objectLevelWormOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/migrate",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          containerName
        ],
        headerParameters: [accept2],
        serializer: serializer24
      };
      listNextOperationSpec6 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListContainerItems
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1,
          include1
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer24
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/fileServices.js
  var FileServicesImpl, serializer25, listOperationSpec19, setServicePropertiesOperationSpec2, getServicePropertiesOperationSpec2;
  var init_fileServices = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/fileServices.js"() {
      init_src6();
      init_mappers2();
      init_parameters2();
      FileServicesImpl = class {
        /**
         * Initialize a new instance of the class FileServices class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List all file services in storage accounts
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec19);
        }
        /**
         * Sets the properties of file services in storage accounts, including CORS (Cross-Origin Resource
         * Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The properties of file services in storage accounts, including CORS (Cross-Origin
         *                   Resource Sharing) rules.
         * @param options The options parameters.
         */
        setServiceProperties(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, setServicePropertiesOperationSpec2);
        }
        /**
         * Gets the properties of file services in storage accounts, including CORS (Cross-Origin Resource
         * Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getServiceProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getServicePropertiesOperationSpec2);
        }
      };
      __name(FileServicesImpl, "FileServicesImpl");
      serializer25 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec19 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: FileServiceItems
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer25
      };
      setServicePropertiesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/{FileServicesName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: FileServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters8,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          fileServicesName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer25
      };
      getServicePropertiesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/{FileServicesName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: FileServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          fileServicesName
        ],
        headerParameters: [accept2],
        serializer: serializer25
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/fileShares.js
  var FileSharesImpl, serializer26, listOperationSpec20, createOperationSpec4, updateOperationSpec4, getOperationSpec14, deleteOperationSpec13, restoreOperationSpec, leaseOperationSpec2, listNextOperationSpec7;
  var init_fileShares = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/fileShares.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      FileSharesImpl = class {
        /**
         * Initialize a new instance of the class FileShares class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all shares.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(resourceGroupName5, accountName3, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all shares.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec20);
        }
        /**
         * Creates a new share under the specified account as described by request body. The share resource
         * includes metadata and properties for that share. It does not include a list of the files contained
         * by the share.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param fileShare Properties of the file share to create.
         * @param options The options parameters.
         */
        create(resourceGroupName5, accountName3, shareName2, fileShare2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, fileShare: fileShare2, options }, createOperationSpec4);
        }
        /**
         * Updates share properties as specified in request body. Properties not mentioned in the request will
         * not be changed. Update fails if the specified share does not already exist.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param fileShare Properties to update for the file share.
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, shareName2, fileShare2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, fileShare: fileShare2, options }, updateOperationSpec4);
        }
        /**
         * Gets properties of a specified share.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, shareName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, options }, getOperationSpec14);
        }
        /**
         * Deletes specified share under its account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, shareName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, options }, deleteOperationSpec13);
        }
        /**
         * Restore a file share within a valid retention days if share soft delete is enabled
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param deletedShare The deleted share to be restored.
         * @param options The options parameters.
         */
        restore(resourceGroupName5, accountName3, shareName2, deletedShare2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, deletedShare: deletedShare2, options }, restoreOperationSpec);
        }
        /**
         * The Lease Share operation establishes and manages a lock on a share for delete operations. The lock
         * duration can be 15 to 60 seconds, or can be infinite.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param shareName The name of the file share within the specified storage account. File share names
         *                  must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only.
         *                  Every dash (-) character must be immediately preceded and followed by a letter or number.
         * @param options The options parameters.
         */
        lease(resourceGroupName5, accountName3, shareName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, shareName: shareName2, options }, leaseOperationSpec2);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec7);
        }
      };
      __name(FileSharesImpl, "FileSharesImpl");
      serializer26 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec20 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: FileShareItems
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1,
          expand22
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer26
      };
      createOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: FileShare
          },
          201: {
            bodyMapper: FileShare
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: fileShare,
        queryParameters: [apiVersion2, expand22],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer26
      };
      updateOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: FileShare
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: fileShare,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer26
      };
      getOperationSpec14 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: FileShare
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2, expand22],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [accept2, xMsSnapshot],
        serializer: serializer26
      };
      deleteOperationSpec13 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2, include2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [accept2, xMsSnapshot],
        serializer: serializer26
      };
      restoreOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/restore",
        httpMethod: "POST",
        responses: {
          200: {},
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: deletedShare,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer26
      };
      leaseOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/fileServices/default/shares/{shareName}/lease",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: LeaseShareResponse,
            headersMapper: FileSharesLeaseHeaders
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters9,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          shareName
        ],
        headerParameters: [
          accept2,
          contentType2,
          xMsSnapshot
        ],
        mediaType: "json",
        serializer: serializer26
      };
      listNextOperationSpec7 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: FileShareItems
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1,
          expand22
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer26
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/queueServices.js
  var QueueServicesImpl, serializer27, listOperationSpec21, setServicePropertiesOperationSpec3, getServicePropertiesOperationSpec3;
  var init_queueServices = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/queueServices.js"() {
      init_src6();
      init_mappers2();
      init_parameters2();
      QueueServicesImpl = class {
        /**
         * Initialize a new instance of the class QueueServices class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List all queue services for the storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec21);
        }
        /**
         * Sets the properties of a storage account’s Queue service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The properties of a storage account’s Queue service, only properties for Storage
         *                   Analytics and CORS (Cross-Origin Resource Sharing) rules can be specified.
         * @param options The options parameters.
         */
        setServiceProperties(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, setServicePropertiesOperationSpec3);
        }
        /**
         * Gets the properties of a storage account’s Queue service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getServiceProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getServicePropertiesOperationSpec3);
        }
      };
      __name(QueueServicesImpl, "QueueServicesImpl");
      serializer27 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec21 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListQueueServices
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer27
      };
      setServicePropertiesOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: QueueServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters10,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueServiceName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer27
      };
      getServicePropertiesOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/{queueServiceName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: QueueServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueServiceName
        ],
        headerParameters: [accept2],
        serializer: serializer27
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/queue.js
  var QueueImpl, serializer28, createOperationSpec5, updateOperationSpec5, getOperationSpec15, deleteOperationSpec14, listOperationSpec22, listNextOperationSpec8;
  var init_queue = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/queue.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      QueueImpl = class {
        /**
         * Initialize a new instance of the class Queue class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets a list of all the queues under the specified storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(resourceGroupName5, accountName3, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Creates a new queue with the specified queue name, under the specified account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param queueName A queue name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should
         *                  begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
         * @param queue Queue properties and metadata to be created with
         * @param options The options parameters.
         */
        create(resourceGroupName5, accountName3, queueName2, queue2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, queueName: queueName2, queue: queue2, options }, createOperationSpec5);
        }
        /**
         * Creates a new queue with the specified queue name, under the specified account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param queueName A queue name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should
         *                  begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
         * @param queue Queue properties and metadata to be created with
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, queueName2, queue2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, queueName: queueName2, queue: queue2, options }, updateOperationSpec5);
        }
        /**
         * Gets the queue with the specified queue name, under the specified account if it exists.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param queueName A queue name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should
         *                  begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, queueName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, queueName: queueName2, options }, getOperationSpec15);
        }
        /**
         * Deletes the queue with the specified queue name, under the specified account if it exists.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param queueName A queue name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of lowercase alphanumeric and dash(-) characters only, it should
         *                  begin and end with an alphanumeric character and it cannot have two consecutive dash(-) characters.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, queueName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, queueName: queueName2, options }, deleteOperationSpec14);
        }
        /**
         * Gets a list of all the queues under the specified storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec22);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec8);
        }
      };
      __name(QueueImpl, "QueueImpl");
      serializer28 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      createOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: StorageQueue
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: queue,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer28
      };
      updateOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: StorageQueue
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: queue,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer28
      };
      getOperationSpec15 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: StorageQueue
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueName
        ],
        headerParameters: [accept2],
        serializer: serializer28
      };
      deleteOperationSpec14 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues/{queueName}",
        httpMethod: "DELETE",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          queueName
        ],
        headerParameters: [accept2],
        serializer: serializer28
      };
      listOperationSpec22 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/queueServices/default/queues",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListQueueResource
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer28
      };
      listNextOperationSpec8 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListQueueResource
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [
          apiVersion2,
          filter,
          maxpagesize1
        ],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer28
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/tableServices.js
  var TableServicesImpl, serializer29, listOperationSpec23, setServicePropertiesOperationSpec4, getServicePropertiesOperationSpec4;
  var init_tableServices = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/tableServices.js"() {
      init_src6();
      init_mappers2();
      init_parameters2();
      TableServicesImpl = class {
        /**
         * Initialize a new instance of the class TableServices class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List all table services for the storage account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec23);
        }
        /**
         * Sets the properties of a storage account’s Table service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param parameters The properties of a storage account’s Table service, only properties for Storage
         *                   Analytics and CORS (Cross-Origin Resource Sharing) rules can be specified.
         * @param options The options parameters.
         */
        setServiceProperties(resourceGroupName5, accountName3, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, parameters: parameters17, options }, setServicePropertiesOperationSpec4);
        }
        /**
         * Gets the properties of a storage account’s Table service, including properties for Storage Analytics
         * and CORS (Cross-Origin Resource Sharing) rules.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        getServiceProperties(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, getServicePropertiesOperationSpec4);
        }
      };
      __name(TableServicesImpl, "TableServicesImpl");
      serializer29 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      listOperationSpec23 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListTableServices
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer29
      };
      setServicePropertiesOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/{tableServiceName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TableServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters11,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableServiceName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer29
      };
      getServicePropertiesOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/{tableServiceName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TableServiceProperties
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableServiceName
        ],
        headerParameters: [accept2],
        serializer: serializer29
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/tableOperations.js
  var TableOperationsImpl, serializer30, createOperationSpec6, updateOperationSpec6, getOperationSpec16, deleteOperationSpec15, listOperationSpec24, listNextOperationSpec9;
  var init_tableOperations = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/tableOperations.js"() {
      init_tslib_es63();
      init_pagingHelper();
      init_src6();
      init_mappers2();
      init_parameters2();
      TableOperationsImpl = class {
        /**
         * Initialize a new instance of the class TableOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets a list of all the tables under the specified storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        list(resourceGroupName5, accountName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, accountName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: (settings) => {
              if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                throw new Error("maxPageSize is not supported by this operation.");
              }
              return this.listPagingPage(resourceGroupName5, accountName3, options, settings);
            }
          };
        }
        listPagingPage(resourceGroupName5, accountName3, options, settings) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
              result = yield __await2(this._list(resourceGroupName5, accountName3, options));
              let page = result.value || [];
              continuationToken = result.nextLink;
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
            while (continuationToken) {
              result = yield __await2(this._listNext(resourceGroupName5, accountName3, continuationToken, options));
              continuationToken = result.nextLink;
              let page = result.value || [];
              setContinuationToken(page, continuationToken);
              yield yield __await2(page);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, accountName3, options) {
          return __asyncGenerator2(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues2(this.listPagingPage(resourceGroupName5, accountName3, options)), _c2; _c2 = yield __await2(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await2(yield* __asyncDelegator2(__asyncValues2(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await2(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Creates a new table with the specified table name, under the specified account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param tableName A table name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric
         *                  character.
         * @param options The options parameters.
         */
        create(resourceGroupName5, accountName3, tableName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, tableName: tableName2, options }, createOperationSpec6);
        }
        /**
         * Creates a new table with the specified table name, under the specified account.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param tableName A table name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric
         *                  character.
         * @param options The options parameters.
         */
        update(resourceGroupName5, accountName3, tableName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, tableName: tableName2, options }, updateOperationSpec6);
        }
        /**
         * Gets the table with the specified table name, under the specified account if it exists.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param tableName A table name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric
         *                  character.
         * @param options The options parameters.
         */
        get(resourceGroupName5, accountName3, tableName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, tableName: tableName2, options }, getOperationSpec16);
        }
        /**
         * Deletes the table with the specified table name, under the specified account if it exists.
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param tableName A table name must be unique within a storage account and must be between 3 and 63
         *                  characters.The name must comprise of only alphanumeric characters and it cannot begin with a numeric
         *                  character.
         * @param options The options parameters.
         */
        delete(resourceGroupName5, accountName3, tableName2, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, tableName: tableName2, options }, deleteOperationSpec15);
        }
        /**
         * Gets a list of all the tables under the specified storage account
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, accountName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, options }, listOperationSpec24);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group within the user's subscription. The name is
         *                          case insensitive.
         * @param accountName The name of the storage account within the specified resource group. Storage
         *                    account names must be between 3 and 24 characters in length and use numbers and lower-case letters
         *                    only.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, accountName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, accountName: accountName3, nextLink: nextLink7, options }, listNextOperationSpec9);
        }
      };
      __name(TableOperationsImpl, "TableOperationsImpl");
      serializer30 = createSerializer(
        mappers_exports2,
        /* isXml */
        false
      );
      createOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: Table
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters122,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer30
      };
      updateOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: Table
          },
          default: {
            bodyMapper: CloudError
          }
        },
        requestBody: parameters122,
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableName
        ],
        headerParameters: [accept2, contentType2],
        mediaType: "json",
        serializer: serializer30
      };
      getOperationSpec16 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Table
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableName
        ],
        headerParameters: [accept2],
        serializer: serializer30
      };
      deleteOperationSpec15 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables/{tableName}",
        httpMethod: "DELETE",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          tableName
        ],
        headerParameters: [accept2],
        serializer: serializer30
      };
      listOperationSpec24 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/tableServices/default/tables",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListTableResource
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12
        ],
        headerParameters: [accept2],
        serializer: serializer30
      };
      listNextOperationSpec9 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ListTableResource
          },
          default: {
            bodyMapper: CloudError
          }
        },
        queryParameters: [apiVersion2],
        urlParameters: [
          $host2,
          subscriptionId2,
          resourceGroupName2,
          accountName12,
          nextLink2
        ],
        headerParameters: [accept2],
        serializer: serializer30
      };
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operations/index.js
  var init_operations5 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operations/index.js"() {
      init_operations4();
      init_skus3();
      init_storageAccounts3();
      init_deletedAccounts();
      init_usages3();
      init_managementPolicies3();
      init_blobInventoryPolicies3();
      init_privateEndpointConnections3();
      init_privateLinkResources3();
      init_objectReplicationPoliciesOperations3();
      init_localUsersOperations();
      init_encryptionScopes3();
      init_blobServices();
      init_blobContainers();
      init_fileServices();
      init_fileShares();
      init_queueServices();
      init_queue();
      init_tableServices();
      init_tableOperations();
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/storageManagementClient.js
  var StorageManagementClient2;
  var init_storageManagementClient2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/storageManagementClient.js"() {
      init_tslib_es63();
      init_src6();
      init_src5();
      init_operations5();
      StorageManagementClient2 = class extends ServiceClient {
        /**
         * Initializes a new instance of the StorageManagementClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The ID of the target subscription.
         * @param options The parameter options
         */
        constructor(credentials, subscriptionId7, options) {
          var _a7, _b2, _c2;
          if (credentials === void 0) {
            throw new Error("'credentials' cannot be null");
          }
          if (subscriptionId7 === void 0) {
            throw new Error("'subscriptionId' cannot be null");
          }
          if (!options) {
            options = {};
          }
          const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
          };
          const packageDetails = `azsdk-js-arm-storage/18.1.0`;
          const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
          const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
            userAgentPrefix
          }, endpoint: (_b2 = (_a7 = options.endpoint) !== null && _a7 !== void 0 ? _a7 : options.baseUri) !== null && _b2 !== void 0 ? _b2 : "https://management.azure.com" });
          super(optionsWithDefaults);
          let bearerTokenAuthenticationPolicyFound = false;
          if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name === bearerTokenAuthenticationPolicyName);
          }
          if (!options || !options.pipeline || options.pipeline.getOrderedPolicies().length == 0 || !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
              name: bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(bearerTokenAuthenticationPolicy({
              credential: credentials,
              scopes: (_c2 = optionsWithDefaults.credentialScopes) !== null && _c2 !== void 0 ? _c2 : `${optionsWithDefaults.endpoint}/.default`,
              challengeCallbacks: {
                authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge
              }
            }));
          }
          this.subscriptionId = subscriptionId7;
          this.$host = options.$host || "https://management.azure.com";
          this.apiVersion = options.apiVersion || "2022-09-01";
          this.operations = new OperationsImpl2(this);
          this.skus = new SkusImpl2(this);
          this.storageAccounts = new StorageAccountsImpl2(this);
          this.deletedAccounts = new DeletedAccountsImpl(this);
          this.usages = new UsagesImpl2(this);
          this.managementPolicies = new ManagementPoliciesImpl2(this);
          this.blobInventoryPolicies = new BlobInventoryPoliciesImpl2(this);
          this.privateEndpointConnections = new PrivateEndpointConnectionsImpl2(this);
          this.privateLinkResources = new PrivateLinkResourcesImpl2(this);
          this.objectReplicationPoliciesOperations = new ObjectReplicationPoliciesOperationsImpl2(this);
          this.localUsersOperations = new LocalUsersOperationsImpl(this);
          this.encryptionScopes = new EncryptionScopesImpl2(this);
          this.blobServices = new BlobServicesImpl(this);
          this.blobContainers = new BlobContainersImpl(this);
          this.fileServices = new FileServicesImpl(this);
          this.fileShares = new FileSharesImpl(this);
          this.queueServices = new QueueServicesImpl(this);
          this.queue = new QueueImpl(this);
          this.tableServices = new TableServicesImpl(this);
          this.tableOperations = new TableOperationsImpl(this);
          this.addCustomApiVersionPolicy(options.apiVersion);
        }
        /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
        addCustomApiVersionPolicy(apiVersion7) {
          if (!apiVersion7) {
            return;
          }
          const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
              return __awaiter2(this, void 0, void 0, function* () {
                const param = request.url.split("?");
                if (param.length > 1) {
                  const newParams = param[1].split("&").map((item) => {
                    if (item.indexOf("api-version") > -1) {
                      return "api-version=" + apiVersion7;
                    } else {
                      return item;
                    }
                  });
                  request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
              });
            }
          };
          this.pipeline.addPolicy(apiVersionPolicy);
        }
      };
      __name(StorageManagementClient2, "StorageManagementClient");
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/operations.js
  var init_operations6 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/operations.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/skus.js
  var init_skus4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/skus.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/storageAccounts.js
  var init_storageAccounts4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/storageAccounts.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/deletedAccounts.js
  var init_deletedAccounts2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/deletedAccounts.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/usages.js
  var init_usages4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/usages.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/managementPolicies.js
  var init_managementPolicies4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/managementPolicies.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobInventoryPolicies.js
  var init_blobInventoryPolicies4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobInventoryPolicies.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/privateEndpointConnections.js
  var init_privateEndpointConnections4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/privateEndpointConnections.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/privateLinkResources.js
  var init_privateLinkResources4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/privateLinkResources.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/objectReplicationPoliciesOperations.js
  var init_objectReplicationPoliciesOperations4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/objectReplicationPoliciesOperations.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/localUsersOperations.js
  var init_localUsersOperations2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/localUsersOperations.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/encryptionScopes.js
  var init_encryptionScopes4 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/encryptionScopes.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobServices.js
  var init_blobServices2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobServices.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobContainers.js
  var init_blobContainers2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/blobContainers.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/fileServices.js
  var init_fileServices2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/fileServices.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/fileShares.js
  var init_fileShares2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/fileShares.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/queueServices.js
  var init_queueServices2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/queueServices.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/queue.js
  var init_queue2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/queue.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/tableServices.js
  var init_tableServices2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/tableServices.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/tableOperations.js
  var init_tableOperations2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/tableOperations.js"() {
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/index.js
  var init_operationsInterfaces2 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/operationsInterfaces/index.js"() {
      init_operations6();
      init_skus4();
      init_storageAccounts4();
      init_deletedAccounts2();
      init_usages4();
      init_managementPolicies4();
      init_blobInventoryPolicies4();
      init_privateEndpointConnections4();
      init_privateLinkResources4();
      init_objectReplicationPoliciesOperations4();
      init_localUsersOperations2();
      init_encryptionScopes4();
      init_blobServices2();
      init_blobContainers2();
      init_fileServices2();
      init_fileShares2();
      init_queueServices2();
      init_queue2();
      init_tableServices2();
      init_tableOperations2();
    }
  });

  // node_modules/@azure/arm-storage/dist-esm/src/index.js
  var src_exports4 = {};
  __export(src_exports4, {
    KnownAccountImmutabilityPolicyState: () => KnownAccountImmutabilityPolicyState,
    KnownAccountType: () => KnownAccountType,
    KnownAllowedCopyScope: () => KnownAllowedCopyScope,
    KnownAllowedMethods: () => KnownAllowedMethods,
    KnownBlobInventoryPolicyName: () => KnownBlobInventoryPolicyName2,
    KnownBlobRestoreProgressStatus: () => KnownBlobRestoreProgressStatus2,
    KnownBypass: () => KnownBypass2,
    KnownCreatedByType: () => KnownCreatedByType2,
    KnownDefaultSharePermission: () => KnownDefaultSharePermission,
    KnownDirectoryServiceOptions: () => KnownDirectoryServiceOptions2,
    KnownDnsEndpointType: () => KnownDnsEndpointType,
    KnownEnabledProtocols: () => KnownEnabledProtocols,
    KnownEncryptionScopeSource: () => KnownEncryptionScopeSource2,
    KnownEncryptionScopeState: () => KnownEncryptionScopeState2,
    KnownExpirationAction: () => KnownExpirationAction,
    KnownExtendedLocationTypes: () => KnownExtendedLocationTypes,
    KnownFormat: () => KnownFormat,
    KnownGeoReplicationStatus: () => KnownGeoReplicationStatus2,
    KnownIdentityType: () => KnownIdentityType,
    KnownImmutabilityPolicyState: () => KnownImmutabilityPolicyState,
    KnownImmutabilityPolicyUpdateType: () => KnownImmutabilityPolicyUpdateType,
    KnownInventoryRuleType: () => KnownInventoryRuleType2,
    KnownKeySource: () => KnownKeySource2,
    KnownKeyType: () => KnownKeyType2,
    KnownKind: () => KnownKind2,
    KnownLargeFileSharesState: () => KnownLargeFileSharesState2,
    KnownLeaseContainerRequestAction: () => KnownLeaseContainerRequestAction,
    KnownLeaseDuration: () => KnownLeaseDuration,
    KnownLeaseShareAction: () => KnownLeaseShareAction,
    KnownLeaseState: () => KnownLeaseState,
    KnownLeaseStatus: () => KnownLeaseStatus,
    KnownListContainersInclude: () => KnownListContainersInclude,
    KnownListEncryptionScopesInclude: () => KnownListEncryptionScopesInclude,
    KnownManagementPolicyName: () => KnownManagementPolicyName2,
    KnownMigrationState: () => KnownMigrationState,
    KnownMinimumTlsVersion: () => KnownMinimumTlsVersion2,
    KnownName: () => KnownName,
    KnownObjectType: () => KnownObjectType,
    KnownPermissions: () => KnownPermissions2,
    KnownPrivateEndpointConnectionProvisioningState: () => KnownPrivateEndpointConnectionProvisioningState2,
    KnownPrivateEndpointServiceConnectionStatus: () => KnownPrivateEndpointServiceConnectionStatus2,
    KnownPublicNetworkAccess: () => KnownPublicNetworkAccess,
    KnownReasonCode: () => KnownReasonCode2,
    KnownRootSquashType: () => KnownRootSquashType,
    KnownRoutingChoice: () => KnownRoutingChoice2,
    KnownRuleType: () => KnownRuleType2,
    KnownSchedule: () => KnownSchedule,
    KnownServices: () => KnownServices2,
    KnownShareAccessTier: () => KnownShareAccessTier,
    KnownSignedResource: () => KnownSignedResource2,
    KnownSignedResourceTypes: () => KnownSignedResourceTypes2,
    KnownSkuConversionStatus: () => KnownSkuConversionStatus,
    KnownSkuName: () => KnownSkuName2,
    KnownState: () => KnownState,
    StorageManagementClient: () => StorageManagementClient2,
    getContinuationToken: () => getContinuationToken
  });
  var init_src9 = __esm({
    "node_modules/@azure/arm-storage/dist-esm/src/index.js"() {
      init_pagingHelper();
      init_models3();
      init_storageManagementClient2();
      init_operationsInterfaces2();
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/index.js
  var KnownTagsPatchOperation;
  var init_models4 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/index.js"() {
      (function(KnownTagsPatchOperation3) {
        KnownTagsPatchOperation3["Replace"] = "Replace";
        KnownTagsPatchOperation3["Merge"] = "Merge";
        KnownTagsPatchOperation3["Delete"] = "Delete";
      })(KnownTagsPatchOperation || (KnownTagsPatchOperation = {}));
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/node_modules/tslib/tslib.es6.js
  function __rest3(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __awaiter3(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    __name(adopt, "adopt");
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      __name(fulfilled, "fulfilled");
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      __name(rejected, "rejected");
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      __name(step, "step");
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __values4(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await3(v) {
    return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
  }
  function __asyncGenerator3(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  function __asyncDelegator3(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  function __asyncValues3(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values4 === "function" ? __values4(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  var init_tslib_es64 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/node_modules/tslib/tslib.es6.js"() {
      __name(__rest3, "__rest");
      __name(__awaiter3, "__awaiter");
      __name(__values4, "__values");
      __name(__await3, "__await");
      __name(__asyncGenerator3, "__asyncGenerator");
      __name(__asyncDelegator3, "__asyncDelegator");
      __name(__asyncValues3, "__asyncValues");
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/mappers.js
  var mappers_exports3 = {};
  __export(mappers_exports3, {
    Alias: () => Alias,
    AliasPath: () => AliasPath,
    AliasPattern: () => AliasPattern,
    BasicDependency: () => BasicDependency,
    CloudError: () => CloudError2,
    DebugSetting: () => DebugSetting,
    Dependency: () => Dependency,
    Deployment: () => Deployment,
    DeploymentExportResult: () => DeploymentExportResult,
    DeploymentExtended: () => DeploymentExtended,
    DeploymentExtendedFilter: () => DeploymentExtendedFilter,
    DeploymentListResult: () => DeploymentListResult,
    DeploymentOperation: () => DeploymentOperation,
    DeploymentOperationProperties: () => DeploymentOperationProperties,
    DeploymentOperationsListResult: () => DeploymentOperationsListResult,
    DeploymentProperties: () => DeploymentProperties,
    DeploymentPropertiesExtended: () => DeploymentPropertiesExtended,
    DeploymentValidateResult: () => DeploymentValidateResult,
    DeploymentWhatIf: () => DeploymentWhatIf,
    DeploymentWhatIfProperties: () => DeploymentWhatIfProperties,
    DeploymentWhatIfSettings: () => DeploymentWhatIfSettings,
    DeploymentsWhatIfAtManagementGroupScopeHeaders: () => DeploymentsWhatIfAtManagementGroupScopeHeaders,
    DeploymentsWhatIfAtSubscriptionScopeHeaders: () => DeploymentsWhatIfAtSubscriptionScopeHeaders,
    DeploymentsWhatIfAtTenantScopeHeaders: () => DeploymentsWhatIfAtTenantScopeHeaders,
    DeploymentsWhatIfHeaders: () => DeploymentsWhatIfHeaders,
    ErrorAdditionalInfo: () => ErrorAdditionalInfo,
    ErrorResponse: () => ErrorResponse3,
    ExportTemplateRequest: () => ExportTemplateRequest,
    GenericResource: () => GenericResource,
    GenericResourceExpanded: () => GenericResourceExpanded,
    GenericResourceFilter: () => GenericResourceFilter,
    HttpMessage: () => HttpMessage,
    Identity: () => Identity3,
    IdentityUserAssignedIdentitiesValue: () => IdentityUserAssignedIdentitiesValue,
    OnErrorDeployment: () => OnErrorDeployment,
    OnErrorDeploymentExtended: () => OnErrorDeploymentExtended,
    Operation: () => Operation3,
    OperationDisplay: () => OperationDisplay3,
    OperationListResult: () => OperationListResult3,
    ParametersLink: () => ParametersLink,
    Plan: () => Plan,
    Provider: () => Provider,
    ProviderListResult: () => ProviderListResult,
    ProviderResourceType: () => ProviderResourceType,
    Resource: () => Resource3,
    ResourceGroup: () => ResourceGroup,
    ResourceGroupExportResult: () => ResourceGroupExportResult,
    ResourceGroupFilter: () => ResourceGroupFilter,
    ResourceGroupListResult: () => ResourceGroupListResult,
    ResourceGroupPatchable: () => ResourceGroupPatchable,
    ResourceGroupProperties: () => ResourceGroupProperties,
    ResourceListResult: () => ResourceListResult,
    ResourceProviderOperationDisplayProperties: () => ResourceProviderOperationDisplayProperties,
    ResourceReference: () => ResourceReference,
    ResourcesMoveInfo: () => ResourcesMoveInfo,
    ScopedDeployment: () => ScopedDeployment,
    ScopedDeploymentWhatIf: () => ScopedDeploymentWhatIf,
    Sku: () => Sku3,
    SubResource: () => SubResource,
    TagCount: () => TagCount,
    TagDetails: () => TagDetails,
    TagValue: () => TagValue,
    Tags: () => Tags,
    TagsListResult: () => TagsListResult,
    TagsPatchResource: () => TagsPatchResource,
    TagsResource: () => TagsResource,
    TargetResource: () => TargetResource,
    TemplateHashResult: () => TemplateHashResult,
    TemplateLink: () => TemplateLink,
    WhatIfChange: () => WhatIfChange,
    WhatIfOperationResult: () => WhatIfOperationResult,
    WhatIfPropertyChange: () => WhatIfPropertyChange,
    ZoneMapping: () => ZoneMapping
  });
  var OperationListResult3, Operation3, OperationDisplay3, CloudError2, ErrorResponse3, ErrorAdditionalInfo, Deployment, DeploymentProperties, TemplateLink, ParametersLink, DebugSetting, OnErrorDeployment, DeploymentExtended, DeploymentPropertiesExtended, Provider, ProviderResourceType, Alias, AliasPath, AliasPattern, ZoneMapping, Dependency, BasicDependency, OnErrorDeploymentExtended, ResourceReference, DeploymentValidateResult, DeploymentExportResult, DeploymentListResult, ScopedDeployment, ScopedDeploymentWhatIf, DeploymentWhatIfSettings, WhatIfOperationResult, WhatIfChange, WhatIfPropertyChange, DeploymentWhatIf, ProviderListResult, ResourceListResult, Plan, Sku3, Identity3, IdentityUserAssignedIdentitiesValue, Resource3, ResourceGroup, ResourceGroupProperties, ResourceGroupPatchable, ExportTemplateRequest, ResourceGroupExportResult, ResourceGroupListResult, ResourcesMoveInfo, TagValue, TagCount, TagDetails, TagsListResult, DeploymentOperation, DeploymentOperationProperties, TargetResource, HttpMessage, DeploymentOperationsListResult, TemplateHashResult, TagsResource, Tags, TagsPatchResource, DeploymentExtendedFilter, GenericResourceFilter, ResourceGroupFilter, ResourceProviderOperationDisplayProperties, SubResource, DeploymentWhatIfProperties, GenericResource, GenericResourceExpanded, DeploymentsWhatIfAtTenantScopeHeaders, DeploymentsWhatIfAtManagementGroupScopeHeaders, DeploymentsWhatIfAtSubscriptionScopeHeaders, DeploymentsWhatIfHeaders;
  var init_mappers3 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/mappers.js"() {
      OperationListResult3 = {
        type: {
          name: "Composite",
          className: "OperationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Operation"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Operation3 = {
        type: {
          name: "Composite",
          className: "Operation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            display: {
              serializedName: "display",
              type: {
                name: "Composite",
                className: "OperationDisplay"
              }
            }
          }
        }
      };
      OperationDisplay3 = {
        type: {
          name: "Composite",
          className: "OperationDisplay",
          modelProperties: {
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CloudError2 = {
        type: {
          name: "Composite",
          className: "CloudError",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      ErrorResponse3 = {
        type: {
          name: "Composite",
          className: "ErrorResponse",
          modelProperties: {
            code: {
              serializedName: "code",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            target: {
              serializedName: "target",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            details: {
              serializedName: "details",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorResponse"
                  }
                }
              }
            },
            additionalInfo: {
              serializedName: "additionalInfo",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorAdditionalInfo"
                  }
                }
              }
            }
          }
        }
      };
      ErrorAdditionalInfo = {
        type: {
          name: "Composite",
          className: "ErrorAdditionalInfo",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            info: {
              serializedName: "info",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      Deployment = {
        type: {
          name: "Composite",
          className: "Deployment",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentProperties"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      DeploymentProperties = {
        type: {
          name: "Composite",
          className: "DeploymentProperties",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            templateLink: {
              serializedName: "templateLink",
              type: {
                name: "Composite",
                className: "TemplateLink"
              }
            },
            parameters: {
              serializedName: "parameters",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            parametersLink: {
              serializedName: "parametersLink",
              type: {
                name: "Composite",
                className: "ParametersLink"
              }
            },
            mode: {
              serializedName: "mode",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Incremental", "Complete"]
              }
            },
            debugSetting: {
              serializedName: "debugSetting",
              type: {
                name: "Composite",
                className: "DebugSetting"
              }
            },
            onErrorDeployment: {
              serializedName: "onErrorDeployment",
              type: {
                name: "Composite",
                className: "OnErrorDeployment"
              }
            }
          }
        }
      };
      TemplateLink = {
        type: {
          name: "Composite",
          className: "TemplateLink",
          modelProperties: {
            uri: {
              serializedName: "uri",
              required: true,
              type: {
                name: "String"
              }
            },
            contentVersion: {
              serializedName: "contentVersion",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ParametersLink = {
        type: {
          name: "Composite",
          className: "ParametersLink",
          modelProperties: {
            uri: {
              serializedName: "uri",
              required: true,
              type: {
                name: "String"
              }
            },
            contentVersion: {
              serializedName: "contentVersion",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DebugSetting = {
        type: {
          name: "Composite",
          className: "DebugSetting",
          modelProperties: {
            detailLevel: {
              serializedName: "detailLevel",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      OnErrorDeployment = {
        type: {
          name: "Composite",
          className: "OnErrorDeployment",
          modelProperties: {
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["LastSuccessful", "SpecificDeployment"]
              }
            },
            deploymentName: {
              serializedName: "deploymentName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentExtended = {
        type: {
          name: "Composite",
          className: "DeploymentExtended",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentPropertiesExtended"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      DeploymentPropertiesExtended = {
        type: {
          name: "Composite",
          className: "DeploymentPropertiesExtended",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            correlationId: {
              serializedName: "correlationId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            duration: {
              serializedName: "duration",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            outputs: {
              serializedName: "outputs",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            providers: {
              serializedName: "providers",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Provider"
                  }
                }
              }
            },
            dependencies: {
              serializedName: "dependencies",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Dependency"
                  }
                }
              }
            },
            templateLink: {
              serializedName: "templateLink",
              type: {
                name: "Composite",
                className: "TemplateLink"
              }
            },
            parameters: {
              serializedName: "parameters",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            parametersLink: {
              serializedName: "parametersLink",
              type: {
                name: "Composite",
                className: "ParametersLink"
              }
            },
            mode: {
              serializedName: "mode",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Incremental", "Complete"]
              }
            },
            debugSetting: {
              serializedName: "debugSetting",
              type: {
                name: "Composite",
                className: "DebugSetting"
              }
            },
            onErrorDeployment: {
              serializedName: "onErrorDeployment",
              type: {
                name: "Composite",
                className: "OnErrorDeploymentExtended"
              }
            },
            templateHash: {
              serializedName: "templateHash",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            outputResources: {
              serializedName: "outputResources",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceReference"
                  }
                }
              }
            },
            validatedResources: {
              serializedName: "validatedResources",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceReference"
                  }
                }
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      Provider = {
        type: {
          name: "Composite",
          className: "Provider",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            namespace: {
              serializedName: "namespace",
              type: {
                name: "String"
              }
            },
            registrationState: {
              serializedName: "registrationState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            registrationPolicy: {
              serializedName: "registrationPolicy",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            resourceTypes: {
              serializedName: "resourceTypes",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ProviderResourceType"
                  }
                }
              }
            }
          }
        }
      };
      ProviderResourceType = {
        type: {
          name: "Composite",
          className: "ProviderResourceType",
          modelProperties: {
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            locations: {
              serializedName: "locations",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            aliases: {
              serializedName: "aliases",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Alias"
                  }
                }
              }
            },
            apiVersions: {
              serializedName: "apiVersions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            zoneMappings: {
              serializedName: "zoneMappings",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ZoneMapping"
                  }
                }
              }
            },
            capabilities: {
              serializedName: "capabilities",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      Alias = {
        type: {
          name: "Composite",
          className: "Alias",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            paths: {
              serializedName: "paths",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "AliasPath"
                  }
                }
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["NotSpecified", "PlainText", "Mask"]
              }
            },
            defaultPath: {
              serializedName: "defaultPath",
              type: {
                name: "String"
              }
            },
            defaultPattern: {
              serializedName: "defaultPattern",
              type: {
                name: "Composite",
                className: "AliasPattern"
              }
            }
          }
        }
      };
      AliasPath = {
        type: {
          name: "Composite",
          className: "AliasPath",
          modelProperties: {
            path: {
              serializedName: "path",
              type: {
                name: "String"
              }
            },
            apiVersions: {
              serializedName: "apiVersions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            pattern: {
              serializedName: "pattern",
              type: {
                name: "Composite",
                className: "AliasPattern"
              }
            }
          }
        }
      };
      AliasPattern = {
        type: {
          name: "Composite",
          className: "AliasPattern",
          modelProperties: {
            phrase: {
              serializedName: "phrase",
              type: {
                name: "String"
              }
            },
            variable: {
              serializedName: "variable",
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["NotSpecified", "Extract"]
              }
            }
          }
        }
      };
      ZoneMapping = {
        type: {
          name: "Composite",
          className: "ZoneMapping",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            zones: {
              serializedName: "zones",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      Dependency = {
        type: {
          name: "Composite",
          className: "Dependency",
          modelProperties: {
            dependsOn: {
              serializedName: "dependsOn",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BasicDependency"
                  }
                }
              }
            },
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BasicDependency = {
        type: {
          name: "Composite",
          className: "BasicDependency",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      OnErrorDeploymentExtended = {
        type: {
          name: "Composite",
          className: "OnErrorDeploymentExtended",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["LastSuccessful", "SpecificDeployment"]
              }
            },
            deploymentName: {
              serializedName: "deploymentName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceReference = {
        type: {
          name: "Composite",
          className: "ResourceReference",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentValidateResult = {
        type: {
          name: "Composite",
          className: "DeploymentValidateResult",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentPropertiesExtended"
              }
            }
          }
        }
      };
      DeploymentExportResult = {
        type: {
          name: "Composite",
          className: "DeploymentExportResult",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      DeploymentListResult = {
        type: {
          name: "Composite",
          className: "DeploymentListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "DeploymentExtended"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ScopedDeployment = {
        type: {
          name: "Composite",
          className: "ScopedDeployment",
          modelProperties: {
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentProperties"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ScopedDeploymentWhatIf = {
        type: {
          name: "Composite",
          className: "ScopedDeploymentWhatIf",
          modelProperties: {
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentWhatIfProperties"
              }
            }
          }
        }
      };
      DeploymentWhatIfSettings = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIfSettings",
          modelProperties: {
            resultFormat: {
              serializedName: "resultFormat",
              type: {
                name: "Enum",
                allowedValues: ["ResourceIdOnly", "FullResourcePayloads"]
              }
            }
          }
        }
      };
      WhatIfOperationResult = {
        type: {
          name: "Composite",
          className: "WhatIfOperationResult",
          modelProperties: {
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            },
            changes: {
              serializedName: "properties.changes",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfChange"
                  }
                }
              }
            }
          }
        }
      };
      WhatIfChange = {
        type: {
          name: "Composite",
          className: "WhatIfChange",
          modelProperties: {
            resourceId: {
              serializedName: "resourceId",
              required: true,
              type: {
                name: "String"
              }
            },
            changeType: {
              serializedName: "changeType",
              required: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "Create",
                  "Delete",
                  "Ignore",
                  "Deploy",
                  "NoChange",
                  "Modify"
                ]
              }
            },
            before: {
              serializedName: "before",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            after: {
              serializedName: "after",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            delta: {
              serializedName: "delta",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfPropertyChange"
                  }
                }
              }
            }
          }
        }
      };
      WhatIfPropertyChange = {
        type: {
          name: "Composite",
          className: "WhatIfPropertyChange",
          modelProperties: {
            path: {
              serializedName: "path",
              required: true,
              type: {
                name: "String"
              }
            },
            propertyChangeType: {
              serializedName: "propertyChangeType",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Create", "Delete", "Modify", "Array"]
              }
            },
            before: {
              serializedName: "before",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            after: {
              serializedName: "after",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            children: {
              serializedName: "children",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfPropertyChange"
                  }
                }
              }
            }
          }
        }
      };
      DeploymentWhatIf = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIf",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentWhatIfProperties"
              }
            }
          }
        }
      };
      ProviderListResult = {
        type: {
          name: "Composite",
          className: "ProviderListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Provider"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceListResult = {
        type: {
          name: "Composite",
          className: "ResourceListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "GenericResourceExpanded"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Plan = {
        type: {
          name: "Composite",
          className: "Plan",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            publisher: {
              serializedName: "publisher",
              type: {
                name: "String"
              }
            },
            product: {
              serializedName: "product",
              type: {
                name: "String"
              }
            },
            promotionCode: {
              serializedName: "promotionCode",
              type: {
                name: "String"
              }
            },
            version: {
              serializedName: "version",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Sku3 = {
        type: {
          name: "Composite",
          className: "Sku",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              type: {
                name: "String"
              }
            },
            size: {
              serializedName: "size",
              type: {
                name: "String"
              }
            },
            family: {
              serializedName: "family",
              type: {
                name: "String"
              }
            },
            model: {
              serializedName: "model",
              type: {
                name: "String"
              }
            },
            capacity: {
              serializedName: "capacity",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      Identity3 = {
        type: {
          name: "Composite",
          className: "Identity",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: [
                  "SystemAssigned",
                  "UserAssigned",
                  "SystemAssigned, UserAssigned",
                  "None"
                ]
              }
            },
            userAssignedIdentities: {
              serializedName: "userAssignedIdentities",
              type: {
                name: "Dictionary",
                value: {
                  type: {
                    name: "Composite",
                    className: "IdentityUserAssignedIdentitiesValue"
                  }
                }
              }
            }
          }
        }
      };
      IdentityUserAssignedIdentitiesValue = {
        type: {
          name: "Composite",
          className: "IdentityUserAssignedIdentitiesValue",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            clientId: {
              serializedName: "clientId",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Resource3 = {
        type: {
          name: "Composite",
          className: "Resource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ResourceGroup = {
        type: {
          name: "Composite",
          className: "ResourceGroup",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "ResourceGroupProperties"
              }
            },
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            managedBy: {
              serializedName: "managedBy",
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ResourceGroupProperties = {
        type: {
          name: "Composite",
          className: "ResourceGroupProperties",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupPatchable = {
        type: {
          name: "Composite",
          className: "ResourceGroupPatchable",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "ResourceGroupProperties"
              }
            },
            managedBy: {
              serializedName: "managedBy",
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ExportTemplateRequest = {
        type: {
          name: "Composite",
          className: "ExportTemplateRequest",
          modelProperties: {
            resources: {
              serializedName: "resources",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            options: {
              serializedName: "options",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupExportResult = {
        type: {
          name: "Composite",
          className: "ResourceGroupExportResult",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      ResourceGroupListResult = {
        type: {
          name: "Composite",
          className: "ResourceGroupListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceGroup"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourcesMoveInfo = {
        type: {
          name: "Composite",
          className: "ResourcesMoveInfo",
          modelProperties: {
            resources: {
              serializedName: "resources",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            targetResourceGroup: {
              serializedName: "targetResourceGroup",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TagValue = {
        type: {
          name: "Composite",
          className: "TagValue",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tagValue: {
              serializedName: "tagValue",
              type: {
                name: "String"
              }
            },
            count: {
              serializedName: "count",
              type: {
                name: "Composite",
                className: "TagCount"
              }
            }
          }
        }
      };
      TagCount = {
        type: {
          name: "Composite",
          className: "TagCount",
          modelProperties: {
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      TagDetails = {
        type: {
          name: "Composite",
          className: "TagDetails",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tagName: {
              serializedName: "tagName",
              type: {
                name: "String"
              }
            },
            count: {
              serializedName: "count",
              type: {
                name: "Composite",
                className: "TagCount"
              }
            },
            values: {
              serializedName: "values",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagValue"
                  }
                }
              }
            }
          }
        }
      };
      TagsListResult = {
        type: {
          name: "Composite",
          className: "TagsListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagDetails"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentOperation = {
        type: {
          name: "Composite",
          className: "DeploymentOperation",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            operationId: {
              serializedName: "operationId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentOperationProperties"
              }
            }
          }
        }
      };
      DeploymentOperationProperties = {
        type: {
          name: "Composite",
          className: "DeploymentOperationProperties",
          modelProperties: {
            provisioningOperation: {
              serializedName: "provisioningOperation",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "NotSpecified",
                  "Create",
                  "Delete",
                  "Waiting",
                  "AzureAsyncOperationWaiting",
                  "ResourceCacheWaiting",
                  "Action",
                  "Read",
                  "EvaluateDeploymentOutput",
                  "DeploymentCleanup"
                ]
              }
            },
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            duration: {
              serializedName: "duration",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            serviceRequestId: {
              serializedName: "serviceRequestId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            statusCode: {
              serializedName: "statusCode",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            statusMessage: {
              serializedName: "statusMessage",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            targetResource: {
              serializedName: "targetResource",
              type: {
                name: "Composite",
                className: "TargetResource"
              }
            },
            request: {
              serializedName: "request",
              type: {
                name: "Composite",
                className: "HttpMessage"
              }
            },
            response: {
              serializedName: "response",
              type: {
                name: "Composite",
                className: "HttpMessage"
              }
            }
          }
        }
      };
      TargetResource = {
        type: {
          name: "Composite",
          className: "TargetResource",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      HttpMessage = {
        type: {
          name: "Composite",
          className: "HttpMessage",
          modelProperties: {
            content: {
              serializedName: "content",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      DeploymentOperationsListResult = {
        type: {
          name: "Composite",
          className: "DeploymentOperationsListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "DeploymentOperation"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TemplateHashResult = {
        type: {
          name: "Composite",
          className: "TemplateHashResult",
          modelProperties: {
            minifiedTemplate: {
              serializedName: "minifiedTemplate",
              type: {
                name: "String"
              }
            },
            templateHash: {
              serializedName: "templateHash",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TagsResource = {
        type: {
          name: "Composite",
          className: "TagsResource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "Tags"
              }
            }
          }
        }
      };
      Tags = {
        type: {
          name: "Composite",
          className: "Tags",
          modelProperties: {
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      TagsPatchResource = {
        type: {
          name: "Composite",
          className: "TagsPatchResource",
          modelProperties: {
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "Tags"
              }
            }
          }
        }
      };
      DeploymentExtendedFilter = {
        type: {
          name: "Composite",
          className: "DeploymentExtendedFilter",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      GenericResourceFilter = {
        type: {
          name: "Composite",
          className: "GenericResourceFilter",
          modelProperties: {
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            tagname: {
              serializedName: "tagname",
              type: {
                name: "String"
              }
            },
            tagvalue: {
              serializedName: "tagvalue",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupFilter = {
        type: {
          name: "Composite",
          className: "ResourceGroupFilter",
          modelProperties: {
            tagName: {
              serializedName: "tagName",
              type: {
                name: "String"
              }
            },
            tagValue: {
              serializedName: "tagValue",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceProviderOperationDisplayProperties = {
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplayProperties",
          modelProperties: {
            publisher: {
              serializedName: "publisher",
              type: {
                name: "String"
              }
            },
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SubResource = {
        type: {
          name: "Composite",
          className: "SubResource",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentWhatIfProperties = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIfProperties",
          modelProperties: Object.assign(Object.assign({}, DeploymentProperties.type.modelProperties), { whatIfSettings: {
            serializedName: "whatIfSettings",
            type: {
              name: "Composite",
              className: "DeploymentWhatIfSettings"
            }
          } })
        }
      };
      GenericResource = {
        type: {
          name: "Composite",
          className: "GenericResource",
          modelProperties: Object.assign(Object.assign({}, Resource3.type.modelProperties), { plan: {
            serializedName: "plan",
            type: {
              name: "Composite",
              className: "Plan"
            }
          }, properties: {
            serializedName: "properties",
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }, kind: {
            constraints: {
              Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
            },
            serializedName: "kind",
            type: {
              name: "String"
            }
          }, managedBy: {
            serializedName: "managedBy",
            type: {
              name: "String"
            }
          }, sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, identity: {
            serializedName: "identity",
            type: {
              name: "Composite",
              className: "Identity"
            }
          } })
        }
      };
      GenericResourceExpanded = {
        type: {
          name: "Composite",
          className: "GenericResourceExpanded",
          modelProperties: Object.assign(Object.assign({}, GenericResource.type.modelProperties), { createdTime: {
            serializedName: "createdTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, changedTime: {
            serializedName: "changedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, provisioningState: {
            serializedName: "provisioningState",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      DeploymentsWhatIfAtTenantScopeHeaders = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtTenantScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfAtManagementGroupScopeHeaders = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtManagementGroupScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfAtSubscriptionScopeHeaders = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtSubscriptionScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfHeaders = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/parameters.js
  var accept3, $host3, apiVersion3, nextLink3, scope, deploymentName, contentType3, parameters13, filter2, top, parameters14, parameters23, groupId, subscriptionId3, parameters33, resourceGroupName3, template, resourceProviderNamespace, expand3, parameters43, sourceResourceGroupName, parentResourcePath, resourceType, resourceName, apiVersion1, parameters53, resourceId, parameters62, parameters72, parameters82, resourceGroupName1, tagName, tagValue, parameters92, parameters102, operationId;
  var init_parameters3 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/models/parameters.js"() {
      init_mappers3();
      accept3 = {
        parameterPath: "accept",
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Accept",
          type: {
            name: "String"
          }
        }
      };
      $host3 = {
        parameterPath: "$host",
        mapper: {
          serializedName: "$host",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
          defaultValue: "2019-10-01",
          isConstant: true,
          serializedName: "api-version",
          type: {
            name: "String"
          }
        }
      };
      nextLink3 = {
        parameterPath: "nextLink",
        mapper: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      scope = {
        parameterPath: "scope",
        mapper: {
          serializedName: "scope",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      deploymentName = {
        parameterPath: "deploymentName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 64,
            MinLength: 1
          },
          serializedName: "deploymentName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      contentType3 = {
        parameterPath: ["options", "contentType"],
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Content-Type",
          type: {
            name: "String"
          }
        }
      };
      parameters13 = {
        parameterPath: "parameters",
        mapper: Deployment
      };
      filter2 = {
        parameterPath: ["options", "filter"],
        mapper: {
          serializedName: "$filter",
          type: {
            name: "String"
          }
        }
      };
      top = {
        parameterPath: ["options", "top"],
        mapper: {
          serializedName: "$top",
          type: {
            name: "Number"
          }
        }
      };
      parameters14 = {
        parameterPath: "parameters",
        mapper: ScopedDeployment
      };
      parameters23 = {
        parameterPath: "parameters",
        mapper: ScopedDeploymentWhatIf
      };
      groupId = {
        parameterPath: "groupId",
        mapper: {
          constraints: {
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "groupId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      subscriptionId3 = {
        parameterPath: "subscriptionId",
        mapper: {
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters33 = {
        parameterPath: "parameters",
        mapper: DeploymentWhatIf
      };
      resourceGroupName3 = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      template = {
        parameterPath: "template",
        mapper: {
          serializedName: "template",
          required: true,
          type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
          }
        }
      };
      resourceProviderNamespace = {
        parameterPath: "resourceProviderNamespace",
        mapper: {
          serializedName: "resourceProviderNamespace",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      expand3 = {
        parameterPath: ["options", "expand"],
        mapper: {
          serializedName: "$expand",
          type: {
            name: "String"
          }
        }
      };
      parameters43 = {
        parameterPath: "parameters",
        mapper: ResourcesMoveInfo
      };
      sourceResourceGroupName = {
        parameterPath: "sourceResourceGroupName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "sourceResourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parentResourcePath = {
        parameterPath: "parentResourcePath",
        mapper: {
          serializedName: "parentResourcePath",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      resourceType = {
        parameterPath: "resourceType",
        mapper: {
          serializedName: "resourceType",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      resourceName = {
        parameterPath: "resourceName",
        mapper: {
          serializedName: "resourceName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
          serializedName: "api-version",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters53 = {
        parameterPath: "parameters",
        mapper: GenericResource
      };
      resourceId = {
        parameterPath: "resourceId",
        mapper: {
          serializedName: "resourceId",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      parameters62 = {
        parameterPath: "parameters",
        mapper: ResourceGroup
      };
      parameters72 = {
        parameterPath: "parameters",
        mapper: ResourceGroupPatchable
      };
      parameters82 = {
        parameterPath: "parameters",
        mapper: ExportTemplateRequest
      };
      resourceGroupName1 = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      tagName = {
        parameterPath: "tagName",
        mapper: {
          serializedName: "tagName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      tagValue = {
        parameterPath: "tagValue",
        mapper: {
          serializedName: "tagValue",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters92 = {
        parameterPath: "parameters",
        mapper: TagsResource
      };
      parameters102 = {
        parameterPath: "parameters",
        mapper: TagsPatchResource
      };
      operationId = {
        parameterPath: "operationId",
        mapper: {
          serializedName: "operationId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/operations.js
  var OperationsImpl3, serializer31, listOperationSpec25, listNextOperationSpec10;
  var init_operations7 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/operations.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      OperationsImpl3 = class {
        /**
         * Initialize a new instance of the class Operations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all of the available Microsoft.Resources REST API operations.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all of the available Microsoft.Resources REST API operations.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec25);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec10);
        }
      };
      __name(OperationsImpl3, "OperationsImpl");
      serializer31 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      listOperationSpec25 = {
        path: "/providers/Microsoft.Resources/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult3
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3],
        headerParameters: [accept3],
        serializer: serializer31
      };
      listNextOperationSpec10 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult3
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, nextLink3],
        headerParameters: [accept3],
        serializer: serializer31
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/lroImpl.js
  var LroImpl3;
  var init_lroImpl3 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/lroImpl.js"() {
      init_tslib_es64();
      LroImpl3 = class {
        constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
          this.sendOperationFn = sendOperationFn;
          this.args = args;
          this.spec = spec;
          this.requestPath = requestPath;
          this.requestMethod = requestMethod;
        }
        sendInitialRequest() {
          return __awaiter3(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
          });
        }
        sendPollRequest(path) {
          return __awaiter3(this, void 0, void 0, function* () {
            const _a7 = this.spec, { requestBody } = _a7, restSpec = __rest3(_a7, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
          });
        }
      };
      __name(LroImpl3, "LroImpl");
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/deployments.js
  var DeploymentsImpl, serializer32, deleteAtScopeOperationSpec, checkExistenceAtScopeOperationSpec, createOrUpdateAtScopeOperationSpec, getAtScopeOperationSpec, cancelAtScopeOperationSpec, validateAtScopeOperationSpec, exportTemplateAtScopeOperationSpec, listAtScopeOperationSpec, deleteAtTenantScopeOperationSpec, checkExistenceAtTenantScopeOperationSpec, createOrUpdateAtTenantScopeOperationSpec, getAtTenantScopeOperationSpec, cancelAtTenantScopeOperationSpec, validateAtTenantScopeOperationSpec, whatIfAtTenantScopeOperationSpec, exportTemplateAtTenantScopeOperationSpec, listAtTenantScopeOperationSpec, deleteAtManagementGroupScopeOperationSpec, checkExistenceAtManagementGroupScopeOperationSpec, createOrUpdateAtManagementGroupScopeOperationSpec, getAtManagementGroupScopeOperationSpec, cancelAtManagementGroupScopeOperationSpec, validateAtManagementGroupScopeOperationSpec, whatIfAtManagementGroupScopeOperationSpec, exportTemplateAtManagementGroupScopeOperationSpec, listAtManagementGroupScopeOperationSpec, deleteAtSubscriptionScopeOperationSpec, checkExistenceAtSubscriptionScopeOperationSpec, createOrUpdateAtSubscriptionScopeOperationSpec, getAtSubscriptionScopeOperationSpec, cancelAtSubscriptionScopeOperationSpec, validateAtSubscriptionScopeOperationSpec, whatIfAtSubscriptionScopeOperationSpec, exportTemplateAtSubscriptionScopeOperationSpec, listAtSubscriptionScopeOperationSpec, deleteOperationSpec16, checkExistenceOperationSpec, createOrUpdateOperationSpec8, getOperationSpec17, cancelOperationSpec, validateOperationSpec, whatIfOperationSpec, exportTemplateOperationSpec, listByResourceGroupOperationSpec3, calculateTemplateHashOperationSpec, listAtScopeNextOperationSpec, listAtTenantScopeNextOperationSpec, listAtManagementGroupScopeNextOperationSpec, listAtSubscriptionScopeNextOperationSpec, listByResourceGroupNextOperationSpec2;
  var init_deployments = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/deployments.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      init_src7();
      init_lroImpl3();
      DeploymentsImpl = class {
        /**
         * Initialize a new instance of the class Deployments class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Get all the deployments at the given scope.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        listAtScope(scope3, options) {
          const iter = this.listAtScopePagingAll(scope3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtScopePagingPage(scope3, options);
            }
          };
        }
        listAtScopePagingPage(scope3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingPage_1() {
            let result = yield __await3(this._listAtScope(scope3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtScopeNext(scope3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtScopePagingPage_1"));
        }
        listAtScopePagingAll(scope3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtScopePagingPage(scope3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listAtScopePagingAll_1"));
        }
        /**
         * Get all the deployments at the tenant scope.
         * @param options The options parameters.
         */
        listAtTenantScope(options) {
          const iter = this.listAtTenantScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(options);
            }
          };
        }
        listAtTenantScopePagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await3(this._listAtTenantScope(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtTenantScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtTenantScopePagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a management group.
         * @param groupId The management group ID.
         * @param options The options parameters.
         */
        listAtManagementGroupScope(groupId3, options) {
          const iter = this.listAtManagementGroupScopePagingAll(groupId3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtManagementGroupScopePagingPage(groupId3, options);
            }
          };
        }
        listAtManagementGroupScopePagingPage(groupId3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingPage_1() {
            let result = yield __await3(this._listAtManagementGroupScope(groupId3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtManagementGroupScopeNext(groupId3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtManagementGroupScopePagingPage_1"));
        }
        listAtManagementGroupScopePagingAll(groupId3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingAll_1() {
            var e_3, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtManagementGroupScopePagingPage(groupId3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          }, "listAtManagementGroupScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a subscription.
         * @param options The options parameters.
         */
        listAtSubscriptionScope(options) {
          const iter = this.listAtSubscriptionScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtSubscriptionScopePagingPage(options);
            }
          };
        }
        listAtSubscriptionScopePagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingPage_1() {
            let result = yield __await3(this._listAtSubscriptionScope(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtSubscriptionScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtSubscriptionScopePagingPage_1"));
        }
        listAtSubscriptionScopePagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingAll_1() {
            var e_4, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtSubscriptionScopePagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }, "listAtSubscriptionScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a resource group.
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByResourceGroupPagingPage(resourceGroupName5, options);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result = yield __await3(this._listByResourceGroup(resourceGroupName5, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listByResourceGroupNext(resourceGroupName5, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_5, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtScope(scope3, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { scope: scope3, deploymentName: deploymentName3, options }, deleteAtScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtScopeAndWait(scope3, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtScope(scope3, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, checkExistenceAtScopeOperationSpec);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtScope(scope3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { scope: scope3, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtScopeAndWait(scope3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtScope(scope3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, getAtScopeOperationSpec);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, cancelAtScopeOperationSpec);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtScope(scope3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { scope: scope3, deploymentName: deploymentName3, parameters: parameters17, options }, validateAtScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtScopeAndWait(scope3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtScope(scope3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, exportTemplateAtScopeOperationSpec);
        }
        /**
         * Get all the deployments at the given scope.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        _listAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, listAtScopeOperationSpec);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtTenantScope(deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, options }, deleteAtTenantScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtTenantScopeAndWait(deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtTenantScope(deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, checkExistenceAtTenantScopeOperationSpec);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtTenantScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, getAtTenantScopeOperationSpec);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, cancelAtTenantScopeOperationSpec);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, validateAtTenantScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtTenantScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, exportTemplateAtTenantScopeOperationSpec);
        }
        /**
         * Get all the deployments at the tenant scope.
         * @param options The options parameters.
         */
        _listAtTenantScope(options) {
          return this.client.sendOperationRequest({ options }, listAtTenantScopeOperationSpec);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtManagementGroupScope(groupId3, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, options }, deleteAtManagementGroupScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtManagementGroupScopeAndWait(groupId3, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtManagementGroupScope(groupId3, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, checkExistenceAtManagementGroupScopeOperationSpec);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtManagementGroupScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, getAtManagementGroupScopeOperationSpec);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, cancelAtManagementGroupScopeOperationSpec);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, validateAtManagementGroupScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtManagementGroupScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, exportTemplateAtManagementGroupScopeOperationSpec);
        }
        /**
         * Get all the deployments for a management group.
         * @param groupId The management group ID.
         * @param options The options parameters.
         */
        _listAtManagementGroupScope(groupId3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, options }, listAtManagementGroupScopeOperationSpec);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtSubscriptionScope(deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, options }, deleteAtSubscriptionScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtSubscriptionScopeAndWait(deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtSubscriptionScope(deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, checkExistenceAtSubscriptionScopeOperationSpec);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtSubscriptionScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, getAtSubscriptionScopeOperationSpec);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, cancelAtSubscriptionScopeOperationSpec);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, validateAtSubscriptionScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param options The options parameters.
         */
        beginWhatIfAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtSubscriptionScopeOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param options The options parameters.
         */
        beginWhatIfAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, exportTemplateAtSubscriptionScopeOperationSpec);
        }
        /**
         * Get all the deployments for a subscription.
         * @param options The options parameters.
         */
        _listAtSubscriptionScope(options) {
          return this.client.sendOperationRequest({ options }, listAtSubscriptionScopeOperationSpec);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. Deleting a template deployment does not affect the
         * state of the resource group. This is an asynchronous operation that returns a status of 202 until
         * the template deployment is successfully deleted. The Location response header contains the URI that
         * is used to obtain the status of the process. While the process is running, a call to the URI in the
         * Location header returns a status of 202. When the process finishes, the URI in the Location header
         * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
         * header returns an error-level status code.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, deleteOperationSpec16);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. Deleting a template deployment does not affect the
         * state of the resource group. This is an asynchronous operation that returns a status of 202 until
         * the template deployment is successfully deleted. The Location response header contains the URI that
         * is used to obtain the status of the process. While the process is running, a call to the URI in the
         * Location header returns a status of 202. When the process finishes, the URI in the Location header
         * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
         * header returns an error-level status code.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, deploymentName3, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param resourceGroupName The name of the resource group with the deployment to check. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, checkExistenceOperationSpec);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
         *                          insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdate(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateOperationSpec8);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
         *                          insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        get(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, getOperationSpec17);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resource group partially deployed.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancel(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, cancelOperationSpec);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidate(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, validateOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIf(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, whatIfOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIf(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplate(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, exportTemplateOperationSpec);
        }
        /**
         * Get all the deployments for a resource group.
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec3);
        }
        /**
         * Calculate the hash of the given template.
         * @param template The template provided to calculate hash.
         * @param options The options parameters.
         */
        calculateTemplateHash(template3, options) {
          return this.client.sendOperationRequest({ template: template3, options }, calculateTemplateHashOperationSpec);
        }
        /**
         * ListAtScopeNext
         * @param scope The resource scope.
         * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
         * @param options The options parameters.
         */
        _listAtScopeNext(scope3, nextLink7, options) {
          return this.client.sendOperationRequest({ scope: scope3, nextLink: nextLink7, options }, listAtScopeNextOperationSpec);
        }
        /**
         * ListAtTenantScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec);
        }
        /**
         * ListAtManagementGroupScopeNext
         * @param groupId The management group ID.
         * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtManagementGroupScopeNext(groupId3, nextLink7, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, nextLink: nextLink7, options }, listAtManagementGroupScopeNextOperationSpec);
        }
        /**
         * ListAtSubscriptionScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtSubscriptionScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtSubscriptionScopeNextOperationSpec);
        }
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        _listByResourceGroupNext(resourceGroupName5, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, nextLink: nextLink7, options }, listByResourceGroupNextOperationSpec2);
        }
      };
      __name(DeploymentsImpl, "DeploymentsImpl");
      serializer32 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      deleteAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      checkExistenceAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      createOrUpdateAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          201: {
            bodyMapper: DeploymentExtended
          },
          202: {
            bodyMapper: DeploymentExtended
          },
          204: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      getAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      cancelAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      validateAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult
          },
          201: {
            bodyMapper: DeploymentValidateResult
          },
          202: {
            bodyMapper: DeploymentValidateResult
          },
          204: {
            bodyMapper: DeploymentValidateResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      exportTemplateAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, scope],
        headerParameters: [accept3],
        serializer: serializer32
      };
      deleteAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer32
      };
      checkExistenceAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer32
      };
      createOrUpdateAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          201: {
            bodyMapper: DeploymentExtended
          },
          202: {
            bodyMapper: DeploymentExtended
          },
          204: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters14,
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      getAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer32
      };
      cancelAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer32
      };
      validateAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult
          },
          201: {
            bodyMapper: DeploymentValidateResult
          },
          202: {
            bodyMapper: DeploymentValidateResult
          },
          204: {
            bodyMapper: DeploymentValidateResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters14,
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      whatIfAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult
          },
          201: {
            bodyMapper: WhatIfOperationResult
          },
          202: {
            bodyMapper: WhatIfOperationResult
          },
          204: {
            bodyMapper: WhatIfOperationResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters23,
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      exportTemplateAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtTenantScopeOperationSpec = {
        path: "/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3],
        headerParameters: [accept3],
        serializer: serializer32
      };
      deleteAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      checkExistenceAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      createOrUpdateAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          201: {
            bodyMapper: DeploymentExtended
          },
          202: {
            bodyMapper: DeploymentExtended
          },
          204: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters14,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      getAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      cancelAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      validateAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult
          },
          201: {
            bodyMapper: DeploymentValidateResult
          },
          202: {
            bodyMapper: DeploymentValidateResult
          },
          204: {
            bodyMapper: DeploymentValidateResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters14,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      whatIfAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult
          },
          201: {
            bodyMapper: WhatIfOperationResult
          },
          202: {
            bodyMapper: WhatIfOperationResult
          },
          204: {
            bodyMapper: WhatIfOperationResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters23,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      exportTemplateAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, groupId],
        headerParameters: [accept3],
        serializer: serializer32
      };
      deleteAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      checkExistenceAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      createOrUpdateAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          201: {
            bodyMapper: DeploymentExtended
          },
          202: {
            bodyMapper: DeploymentExtended
          },
          204: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      getAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      cancelAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      validateAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult
          },
          201: {
            bodyMapper: DeploymentValidateResult
          },
          202: {
            bodyMapper: DeploymentValidateResult
          },
          204: {
            bodyMapper: DeploymentValidateResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      whatIfAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult
          },
          201: {
            bodyMapper: WhatIfOperationResult
          },
          202: {
            bodyMapper: WhatIfOperationResult
          },
          204: {
            bodyMapper: WhatIfOperationResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters33,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      exportTemplateAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtSubscriptionScopeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, subscriptionId3],
        headerParameters: [accept3],
        serializer: serializer32
      };
      deleteOperationSpec16 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      checkExistenceOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      createOrUpdateOperationSpec8 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          201: {
            bodyMapper: DeploymentExtended
          },
          202: {
            bodyMapper: DeploymentExtended
          },
          204: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      getOperationSpec17 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      cancelOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      validateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult
          },
          201: {
            bodyMapper: DeploymentValidateResult
          },
          202: {
            bodyMapper: DeploymentValidateResult
          },
          204: {
            bodyMapper: DeploymentValidateResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters13,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      whatIfOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult
          },
          201: {
            bodyMapper: WhatIfOperationResult
          },
          202: {
            bodyMapper: WhatIfOperationResult
          },
          204: {
            bodyMapper: WhatIfOperationResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters33,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      exportTemplateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listByResourceGroupOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      calculateTemplateHashOperationSpec = {
        path: "/providers/Microsoft.Resources/calculateTemplateHash",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: TemplateHashResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: template,
        queryParameters: [apiVersion3],
        urlParameters: [$host3],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer32
      };
      listAtScopeNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, nextLink3, scope],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtTenantScopeNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, nextLink3],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtManagementGroupScopeNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, nextLink3, groupId],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listAtSubscriptionScopeNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
      listByResourceGroupNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer32
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/providers.js
  var ProvidersImpl, serializer33, unregisterOperationSpec, registerOperationSpec, listOperationSpec26, listAtTenantScopeOperationSpec2, getOperationSpec18, getAtTenantScopeOperationSpec2, listNextOperationSpec11, listAtTenantScopeNextOperationSpec2;
  var init_providers = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/providers.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      ProvidersImpl = class {
        /**
         * Initialize a new instance of the class Providers class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all resource providers for a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets all resource providers for the tenant.
         * @param options The options parameters.
         */
        listAtTenantScope(options) {
          const iter = this.listAtTenantScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(options);
            }
          };
        }
        listAtTenantScopePagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await3(this._listAtTenantScope(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtTenantScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtTenantScopePagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Unregisters a subscription from a resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider to unregister.
         * @param options The options parameters.
         */
        unregister(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, unregisterOperationSpec);
        }
        /**
         * Registers a subscription with a resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider to register.
         * @param options The options parameters.
         */
        register(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, registerOperationSpec);
        }
        /**
         * Gets all resource providers for a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec26);
        }
        /**
         * Gets all resource providers for the tenant.
         * @param options The options parameters.
         */
        _listAtTenantScope(options) {
          return this.client.sendOperationRequest({ options }, listAtTenantScopeOperationSpec2);
        }
        /**
         * Gets the specified resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        get(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, getOperationSpec18);
        }
        /**
         * Gets the specified resource provider at the tenant level.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        getAtTenantScope(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, getAtTenantScopeOperationSpec2);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec11);
        }
        /**
         * ListAtTenantScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec2);
        }
      };
      __name(ProvidersImpl, "ProvidersImpl");
      serializer33 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      unregisterOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: Provider
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceProviderNamespace
        ],
        headerParameters: [accept3],
        serializer: serializer33
      };
      registerOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: Provider
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceProviderNamespace
        ],
        headerParameters: [accept3],
        serializer: serializer33
      };
      listOperationSpec26 = {
        path: "/subscriptions/{subscriptionId}/providers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top, expand3],
        urlParameters: [$host3, subscriptionId3],
        headerParameters: [accept3],
        serializer: serializer33
      };
      listAtTenantScopeOperationSpec2 = {
        path: "/providers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top, expand3],
        urlParameters: [$host3],
        headerParameters: [accept3],
        serializer: serializer33
      };
      getOperationSpec18 = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Provider
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, expand3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceProviderNamespace
        ],
        headerParameters: [accept3],
        serializer: serializer33
      };
      getAtTenantScopeOperationSpec2 = {
        path: "/providers/{resourceProviderNamespace}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Provider
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, expand3],
        urlParameters: [$host3, resourceProviderNamespace],
        headerParameters: [accept3],
        serializer: serializer33
      };
      listNextOperationSpec11 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top, expand3],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer33
      };
      listAtTenantScopeNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top, expand3],
        urlParameters: [$host3, nextLink3],
        headerParameters: [accept3],
        serializer: serializer33
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/resources.js
  var ResourcesImpl, serializer34, listByResourceGroupOperationSpec4, moveResourcesOperationSpec, validateMoveResourcesOperationSpec, listOperationSpec27, checkExistenceOperationSpec2, deleteOperationSpec17, createOrUpdateOperationSpec9, updateOperationSpec7, getOperationSpec19, checkExistenceByIdOperationSpec, deleteByIdOperationSpec, createOrUpdateByIdOperationSpec, updateByIdOperationSpec, getByIdOperationSpec, listByResourceGroupNextOperationSpec3, listNextOperationSpec12;
  var init_resources = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/resources.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      init_src7();
      init_lroImpl3();
      ResourcesImpl = class {
        /**
         * Initialize a new instance of the class Resources class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Get all the resources for a resource group.
         * @param resourceGroupName The resource group with the resources to get.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByResourceGroupPagingPage(resourceGroupName5, options);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result = yield __await3(this._listByResourceGroup(resourceGroupName5, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listByResourceGroupNext(resourceGroupName5, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * Get all the resources in a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Get all the resources for a resource group.
         * @param resourceGroupName The resource group with the resources to get.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec4);
        }
        /**
         * The resources to move must be in the same source resource group. The target resource group may be in
         * a different subscription. When moving resources, both the source group and the target group are
         * locked for the duration of the operation. Write and delete operations are blocked on the groups
         * until the move completes.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginMoveResources(sourceResourceGroupName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { sourceResourceGroupName: sourceResourceGroupName3, parameters: parameters17, options }, moveResourcesOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * The resources to move must be in the same source resource group. The target resource group may be in
         * a different subscription. When moving resources, both the source group and the target group are
         * locked for the duration of the operation. Write and delete operations are blocked on the groups
         * until the move completes.
         * @param sourceResourceGroupName The name of the resource group containing the resources to move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginMoveResourcesAndWait(sourceResourceGroupName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginMoveResources(sourceResourceGroupName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources to
         * move must be in the same source resource group. The target resource group may be in a different
         * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
         * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
         * Location header value to check the result of the long-running operation.
         * @param sourceResourceGroupName The name of the resource group containing the resources to validate
         *                                for move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginValidateMoveResources(sourceResourceGroupName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { sourceResourceGroupName: sourceResourceGroupName3, parameters: parameters17, options }, validateMoveResourcesOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources to
         * move must be in the same source resource group. The target resource group may be in a different
         * subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation
         * fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the
         * Location header value to check the result of the long-running operation.
         * @param sourceResourceGroupName The name of the resource group containing the resources to validate
         *                                for move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginValidateMoveResourcesAndWait(sourceResourceGroupName3, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateMoveResources(sourceResourceGroupName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Get all the resources in a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec27);
        }
        /**
         * Checks whether a resource exists.
         * @param resourceGroupName The name of the resource group containing the resource to check. The name
         *                          is case insensitive.
         * @param resourceProviderNamespace The resource provider of the resource to check.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to check whether it exists.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            resourceProviderNamespace: resourceProviderNamespace3,
            parentResourcePath: parentResourcePath3,
            resourceType: resourceType3,
            resourceName: resourceName3,
            apiVersion: apiVersion7,
            options
          }, checkExistenceOperationSpec2);
        }
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete. The
         *                          name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              options
            }, deleteOperationSpec17);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete. The
         *                          name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param options The options parameters.
         */
        beginCreateOrUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              parameters: parameters17,
              options
            }, createOrUpdateOperationSpec9);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param options The options parameters.
         */
        beginUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              parameters: parameters17,
              options
            }, updateOperationSpec7);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param options The options parameters.
         */
        beginUpdateAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource.
         * @param resourceGroupName The name of the resource group containing the resource to get. The name is
         *                          case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource.
         * @param resourceName The name of the resource to get.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        get(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            resourceProviderNamespace: resourceProviderNamespace3,
            parentResourcePath: parentResourcePath3,
            resourceType: resourceType3,
            resourceName: resourceName3,
            apiVersion: apiVersion7,
            options
          }, getOperationSpec19);
        }
        /**
         * Checks by ID whether a resource exists.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        checkExistenceById(resourceId3, apiVersion7, options) {
          return this.client.sendOperationRequest({ resourceId: resourceId3, apiVersion: apiVersion7, options }, checkExistenceByIdOperationSpec);
        }
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteById(resourceId3, apiVersion7, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, options }, deleteByIdOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteByIdAndWait(resourceId3, apiVersion7, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteById(resourceId3, apiVersion7, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param options The options parameters.
         */
        beginCreateOrUpdateById(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, parameters: parameters17, options }, createOrUpdateByIdOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param options The options parameters.
         */
        beginCreateOrUpdateByIdAndWait(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateById(resourceId3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param options The options parameters.
         */
        beginUpdateById(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, parameters: parameters17, options }, updateByIdOperationSpec);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param options The options parameters.
         */
        beginUpdateByIdAndWait(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateById(resourceId3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        getById(resourceId3, apiVersion7, options) {
          return this.client.sendOperationRequest({ resourceId: resourceId3, apiVersion: apiVersion7, options }, getByIdOperationSpec);
        }
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The resource group with the resources to get.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        _listByResourceGroupNext(resourceGroupName5, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, nextLink: nextLink7, options }, listByResourceGroupNextOperationSpec3);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec12);
        }
      };
      __name(ResourcesImpl, "ResourcesImpl");
      serializer34 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      listByResourceGroupOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [
          apiVersion3,
          filter2,
          top,
          expand3
        ],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
      moveResourcesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters43,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          sourceResourceGroupName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      validateMoveResourcesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters43,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          sourceResourceGroupName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      listOperationSpec27 = {
        path: "/subscriptions/{subscriptionId}/resources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [
          apiVersion3,
          filter2,
          top,
          expand3
        ],
        urlParameters: [$host3, subscriptionId3],
        headerParameters: [accept3],
        serializer: serializer34
      };
      checkExistenceOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
      deleteOperationSpec17 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
      createOrUpdateOperationSpec9 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          201: {
            bodyMapper: GenericResource
          },
          202: {
            bodyMapper: GenericResource
          },
          204: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters53,
        queryParameters: [apiVersion1],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      updateOperationSpec7 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          201: {
            bodyMapper: GenericResource
          },
          202: {
            bodyMapper: GenericResource
          },
          204: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters53,
        queryParameters: [apiVersion1],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      getOperationSpec19 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
      checkExistenceByIdOperationSpec = {
        path: "/{resourceId}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [$host3, resourceId],
        headerParameters: [accept3],
        serializer: serializer34
      };
      deleteByIdOperationSpec = {
        path: "/{resourceId}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [$host3, resourceId],
        headerParameters: [accept3],
        serializer: serializer34
      };
      createOrUpdateByIdOperationSpec = {
        path: "/{resourceId}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          201: {
            bodyMapper: GenericResource
          },
          202: {
            bodyMapper: GenericResource
          },
          204: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters53,
        queryParameters: [apiVersion1],
        urlParameters: [$host3, resourceId],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      updateByIdOperationSpec = {
        path: "/{resourceId}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          201: {
            bodyMapper: GenericResource
          },
          202: {
            bodyMapper: GenericResource
          },
          204: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters53,
        queryParameters: [apiVersion1],
        urlParameters: [$host3, resourceId],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer34
      };
      getByIdOperationSpec = {
        path: "/{resourceId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: GenericResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion1],
        urlParameters: [$host3, resourceId],
        headerParameters: [accept3],
        serializer: serializer34
      };
      listByResourceGroupNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [
          apiVersion3,
          filter2,
          top,
          expand3
        ],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
      listNextOperationSpec12 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [
          apiVersion3,
          filter2,
          top,
          expand3
        ],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer34
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/resourceGroups.js
  var ResourceGroupsImpl, serializer35, checkExistenceOperationSpec3, createOrUpdateOperationSpec10, deleteOperationSpec18, getOperationSpec20, updateOperationSpec8, exportTemplateOperationSpec2, listOperationSpec28, listNextOperationSpec13;
  var init_resourceGroups = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/resourceGroups.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      init_src7();
      init_lroImpl3();
      ResourceGroupsImpl = class {
        /**
         * Initialize a new instance of the class ResourceGroups class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all the resource groups for a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Checks whether a resource group exists.
         * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, checkExistenceOperationSpec3);
        }
        /**
         * Creates or updates a resource group.
         * @param resourceGroupName The name of the resource group to create or update. Can include
         *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that
         *                          match the allowed characters.
         * @param parameters Parameters supplied to the create or update a resource group.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, parameters: parameters17, options }, createOrUpdateOperationSpec10);
        }
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
         * deletes all of its template deployments and currently stored operations.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, options }, deleteOperationSpec18);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
         * deletes all of its template deployments and currently stored operations.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource group.
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param options The options parameters.
         */
        get(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, getOperationSpec20);
        }
        /**
         * Resource groups can be updated through a simple PATCH operation to a group address. The format of
         * the request is the same as that for creating a resource group. If a field is unspecified, the
         * current value is retained.
         * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
         * @param parameters Parameters supplied to update a resource group.
         * @param options The options parameters.
         */
        update(resourceGroupName5, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, parameters: parameters17, options }, updateOperationSpec8);
        }
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param options The options parameters.
         */
        beginExportTemplate(resourceGroupName5, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter3(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl3(sendOperation, { resourceGroupName: resourceGroupName5, parameters: parameters17, options }, exportTemplateOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param options The options parameters.
         */
        beginExportTemplateAndWait(resourceGroupName5, parameters17, options) {
          return __awaiter3(this, void 0, void 0, function* () {
            const poller = yield this.beginExportTemplate(resourceGroupName5, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets all the resource groups for a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec28);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec13);
        }
      };
      __name(ResourceGroupsImpl, "ResourceGroupsImpl");
      serializer35 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      checkExistenceOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer35
      };
      createOrUpdateOperationSpec10 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ResourceGroup
          },
          201: {
            bodyMapper: ResourceGroup
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters62,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer35
      };
      deleteOperationSpec18 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer35
      };
      getOperationSpec20 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroup
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer35
      };
      updateOperationSpec8 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: ResourceGroup
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters72,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer35
      };
      exportTemplateOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ResourceGroupExportResult
          },
          201: {
            bodyMapper: ResourceGroupExportResult
          },
          202: {
            bodyMapper: ResourceGroupExportResult
          },
          204: {
            bodyMapper: ResourceGroupExportResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters82,
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          resourceGroupName1
        ],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer35
      };
      listOperationSpec28 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroupListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [$host3, subscriptionId3],
        headerParameters: [accept3],
        serializer: serializer35
      };
      listNextOperationSpec13 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroupListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, filter2, top],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer35
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/tagsOperations.js
  var TagsOperationsImpl, serializer36, deleteValueOperationSpec, createOrUpdateValueOperationSpec, createOrUpdateOperationSpec11, deleteOperationSpec19, listOperationSpec29, createOrUpdateAtScopeOperationSpec2, updateAtScopeOperationSpec, getAtScopeOperationSpec2, deleteAtScopeOperationSpec2, listNextOperationSpec14;
  var init_tagsOperations = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/tagsOperations.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      TagsOperationsImpl = class {
        /**
         * Initialize a new instance of the class TagsOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * This operation performs a union of predefined tags, resource tags, resource group tags and
         * subscription tags, and returns a summary of usage for each tag name and value under the given
         * subscription. In case of a large number of tags, this operation may return a previously cached
         * result.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * This operation allows deleting a value from the list of predefined values for an existing predefined
         * tag name. The value being deleted must not be in use as a tag value for the given tag name for any
         * resource.
         * @param tagName The name of the tag.
         * @param tagValue The value of the tag to delete.
         * @param options The options parameters.
         */
        deleteValue(tagName3, tagValue3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, tagValue: tagValue3, options }, deleteValueOperationSpec);
        }
        /**
         * This operation allows adding a value to the list of predefined values for an existing predefined tag
         * name. A tag value can have a maximum of 256 characters.
         * @param tagName The name of the tag.
         * @param tagValue The value of the tag to create.
         * @param options The options parameters.
         */
        createOrUpdateValue(tagName3, tagValue3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, tagValue: tagValue3, options }, createOrUpdateValueOperationSpec);
        }
        /**
         * This operation allows adding a name to the list of predefined tag names for the given subscription.
         * A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the
         * following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
         * @param tagName The name of the tag to create.
         * @param options The options parameters.
         */
        createOrUpdate(tagName3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, options }, createOrUpdateOperationSpec11);
        }
        /**
         * This operation allows deleting a name from the list of predefined tag names for the given
         * subscription. The name being deleted must not be in use as a tag name for any resource. All
         * predefined values for the given name must have already been deleted.
         * @param tagName The name of the tag.
         * @param options The options parameters.
         */
        delete(tagName3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, options }, deleteOperationSpec19);
        }
        /**
         * This operation performs a union of predefined tags, resource tags, resource group tags and
         * subscription tags, and returns a summary of usage for each tag name and value under the given
         * subscription. In case of a large number of tags, this operation may return a previously cached
         * result.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec29);
        }
        /**
         * This operation allows adding or replacing the entire set of tags on the specified resource or
         * subscription. The specified entity can have a maximum of 50 tags.
         * @param scope The resource scope.
         * @param parameters Wrapper resource for tags API requests and responses.
         * @param options The options parameters.
         */
        createOrUpdateAtScope(scope3, parameters17, options) {
          return this.client.sendOperationRequest({ scope: scope3, parameters: parameters17, options }, createOrUpdateAtScopeOperationSpec2);
        }
        /**
         * This operation allows replacing, merging or selectively deleting tags on the specified resource or
         * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The
         * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows
         * adding tags with new names and updating the values of tags with existing names. The 'delete' option
         * allows selectively deleting tags based on given names or name/value pairs.
         * @param scope The resource scope.
         * @param parameters Wrapper resource for tags patch API request only.
         * @param options The options parameters.
         */
        updateAtScope(scope3, parameters17, options) {
          return this.client.sendOperationRequest({ scope: scope3, parameters: parameters17, options }, updateAtScopeOperationSpec);
        }
        /**
         * Gets the entire set of tags on a resource or subscription.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        getAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, getAtScopeOperationSpec2);
        }
        /**
         * Deletes the entire set of tags on a resource or subscription.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        deleteAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, deleteAtScopeOperationSpec2);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec14);
        }
      };
      __name(TagsOperationsImpl, "TagsOperationsImpl");
      serializer36 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      deleteValueOperationSpec = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          tagName,
          tagValue
        ],
        headerParameters: [accept3],
        serializer: serializer36
      };
      createOrUpdateValueOperationSpec = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagValue
          },
          201: {
            bodyMapper: TagValue
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          tagName,
          tagValue
        ],
        headerParameters: [accept3],
        serializer: serializer36
      };
      createOrUpdateOperationSpec11 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagDetails
          },
          201: {
            bodyMapper: TagDetails
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          tagName
        ],
        headerParameters: [accept3],
        serializer: serializer36
      };
      deleteOperationSpec19 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          subscriptionId3,
          tagName
        ],
        headerParameters: [accept3],
        serializer: serializer36
      };
      listOperationSpec29 = {
        path: "/subscriptions/{subscriptionId}/tagNames",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, subscriptionId3],
        headerParameters: [accept3],
        serializer: serializer36
      };
      createOrUpdateAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagsResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters92,
        queryParameters: [apiVersion3],
        urlParameters: [$host3, scope],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer36
      };
      updateAtScopeOperationSpec = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: TagsResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        requestBody: parameters102,
        queryParameters: [apiVersion3],
        urlParameters: [$host3, scope],
        headerParameters: [accept3, contentType3],
        mediaType: "json",
        serializer: serializer36
      };
      getAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsResource
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, scope],
        headerParameters: [accept3],
        serializer: serializer36
      };
      deleteAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "DELETE",
        responses: {
          200: {},
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [$host3, scope],
        headerParameters: [accept3],
        serializer: serializer36
      };
      listNextOperationSpec14 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          nextLink3,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer36
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/deploymentOperations.js
  var DeploymentOperationsImpl, serializer37, getAtScopeOperationSpec3, listAtScopeOperationSpec2, getAtTenantScopeOperationSpec3, listAtTenantScopeOperationSpec3, getAtManagementGroupScopeOperationSpec2, listAtManagementGroupScopeOperationSpec2, getAtSubscriptionScopeOperationSpec2, listAtSubscriptionScopeOperationSpec2, getOperationSpec21, listOperationSpec30, listAtScopeNextOperationSpec2, listAtTenantScopeNextOperationSpec3, listAtManagementGroupScopeNextOperationSpec2, listAtSubscriptionScopeNextOperationSpec2, listNextOperationSpec15;
  var init_deploymentOperations = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/deploymentOperations.js"() {
      init_tslib_es64();
      init_src6();
      init_mappers3();
      init_parameters3();
      DeploymentOperationsImpl = class {
        /**
         * Initialize a new instance of the class DeploymentOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtScope(scope3, deploymentName3, options) {
          const iter = this.listAtScopePagingAll(scope3, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtScopePagingPage(scope3, deploymentName3, options);
            }
          };
        }
        listAtScopePagingPage(scope3, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingPage_1() {
            let result = yield __await3(this._listAtScope(scope3, deploymentName3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtScopeNext(scope3, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtScopePagingPage_1"));
        }
        listAtScopePagingAll(scope3, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtScopePagingPage(scope3, deploymentName3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listAtScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtTenantScope(deploymentName3, options) {
          const iter = this.listAtTenantScopePagingAll(deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(deploymentName3, options);
            }
          };
        }
        listAtTenantScopePagingPage(deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await3(this._listAtTenantScope(deploymentName3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtTenantScopeNext(deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtTenantScopePagingPage(deploymentName3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtManagementGroupScope(groupId3, deploymentName3, options) {
          const iter = this.listAtManagementGroupScopePagingAll(groupId3, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options);
            }
          };
        }
        listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingPage_1() {
            let result = yield __await3(this._listAtManagementGroupScope(groupId3, deploymentName3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtManagementGroupScopeNext(groupId3, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtManagementGroupScopePagingPage_1"));
        }
        listAtManagementGroupScopePagingAll(groupId3, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingAll_1() {
            var e_3, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          }, "listAtManagementGroupScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtSubscriptionScope(deploymentName3, options) {
          const iter = this.listAtSubscriptionScopePagingAll(deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtSubscriptionScopePagingPage(deploymentName3, options);
            }
          };
        }
        listAtSubscriptionScopePagingPage(deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingPage_1() {
            let result = yield __await3(this._listAtSubscriptionScope(deploymentName3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listAtSubscriptionScopeNext(deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listAtSubscriptionScopePagingPage_1"));
        }
        listAtSubscriptionScopePagingAll(deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingAll_1() {
            var e_4, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listAtSubscriptionScopePagingPage(deploymentName3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }, "listAtSubscriptionScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        list(resourceGroupName5, deploymentName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, deploymentName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await3(this._list(resourceGroupName5, deploymentName3, options));
            yield yield __await3(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await3(this._listNext(resourceGroupName5, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await3(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, deploymentName3, options) {
          return __asyncGenerator3(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_5, _a7;
            try {
              for (var _b2 = __asyncValues3(this.listPagingPage(resourceGroupName5, deploymentName3, options)), _c2; _c2 = yield __await3(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await3(yield* __asyncDelegator3(__asyncValues3(page)));
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await3(_a7.call(_b2));
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets a deployments operation.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtScope(scope3, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, operationId: operationId3, options }, getAtScopeOperationSpec3);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, listAtScopeOperationSpec2);
        }
        /**
         * Gets a deployments operation.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtTenantScope(deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, operationId: operationId3, options }, getAtTenantScopeOperationSpec3);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, listAtTenantScopeOperationSpec3);
        }
        /**
         * Gets a deployments operation.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtManagementGroupScope(groupId3, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, operationId: operationId3, options }, getAtManagementGroupScopeOperationSpec2);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, listAtManagementGroupScopeOperationSpec2);
        }
        /**
         * Gets a deployments operation.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtSubscriptionScope(deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, operationId: operationId3, options }, getAtSubscriptionScopeOperationSpec2);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, listAtSubscriptionScopeOperationSpec2);
        }
        /**
         * Gets a deployments operation.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        get(resourceGroupName5, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, operationId: operationId3, options }, getOperationSpec21);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, listOperationSpec30);
        }
        /**
         * ListAtScopeNext
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
         * @param options The options parameters.
         */
        _listAtScopeNext(scope3, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtScopeNextOperationSpec2);
        }
        /**
         * ListAtTenantScopeNext
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec3);
        }
        /**
         * ListAtManagementGroupScopeNext
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtManagementGroupScopeNext(groupId3, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtManagementGroupScopeNextOperationSpec2);
        }
        /**
         * ListAtSubscriptionScopeNext
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtSubscriptionScopeNext(deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtSubscriptionScopeNextOperationSpec2);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, nextLink: nextLink7, options }, listNextOperationSpec15);
        }
      };
      __name(DeploymentOperationsImpl, "DeploymentOperationsImpl");
      serializer37 = createSerializer(
        mappers_exports3,
        /* isXml */
        false
      );
      getAtScopeOperationSpec3 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          scope,
          deploymentName,
          operationId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      getAtTenantScopeOperationSpec3 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          operationId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtTenantScopeOperationSpec3 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [$host3, deploymentName],
        headerParameters: [accept3],
        serializer: serializer37
      };
      getAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          groupId,
          operationId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      getAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          operationId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      getOperationSpec21 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3,
          operationId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listOperationSpec30 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtScopeNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          nextLink3,
          scope,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtTenantScopeNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          nextLink3,
          deploymentName
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtManagementGroupScopeNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          nextLink3,
          deploymentName,
          groupId
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listAtSubscriptionScopeNextOperationSpec2 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          nextLink3,
          deploymentName,
          subscriptionId3
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
      listNextOperationSpec15 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult
          },
          default: {
            bodyMapper: CloudError2
          }
        },
        queryParameters: [apiVersion3, top],
        urlParameters: [
          $host3,
          nextLink3,
          deploymentName,
          subscriptionId3,
          resourceGroupName3
        ],
        headerParameters: [accept3],
        serializer: serializer37
      };
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/index.js
  var init_operations8 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operations/index.js"() {
      init_operations7();
      init_deployments();
      init_providers();
      init_resources();
      init_resourceGroups();
      init_tagsOperations();
      init_deploymentOperations();
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/resourceManagementClient.js
  var ResourceManagementClient;
  var init_resourceManagementClient = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/resourceManagementClient.js"() {
      init_src6();
      init_operations8();
      ResourceManagementClient = class extends ServiceClient {
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The ID of the target subscription.
         * @param options The parameter options
         */
        constructor(credentials, subscriptionId7, options) {
          if (credentials === void 0) {
            throw new Error("'credentials' cannot be null");
          }
          if (subscriptionId7 === void 0) {
            throw new Error("'subscriptionId' cannot be null");
          }
          if (!options) {
            options = {};
          }
          const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
          };
          const packageDetails = `azsdk-js-arm-resources-profile-2020-09-01-hybrid/2.0.0`;
          const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
          if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
          }
          const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
            userAgentPrefix
          }, baseUri: options.endpoint || "https://management.azure.com" });
          super(optionsWithDefaults);
          this.subscriptionId = subscriptionId7;
          this.$host = options.$host || "https://management.azure.com";
          this.apiVersion = options.apiVersion || "2019-10-01";
          this.operations = new OperationsImpl3(this);
          this.deployments = new DeploymentsImpl(this);
          this.providers = new ProvidersImpl(this);
          this.resources = new ResourcesImpl(this);
          this.resourceGroups = new ResourceGroupsImpl(this);
          this.tagsOperations = new TagsOperationsImpl(this);
          this.deploymentOperations = new DeploymentOperationsImpl(this);
        }
      };
      __name(ResourceManagementClient, "ResourceManagementClient");
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/operations.js
  var init_operations9 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/operations.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/deployments.js
  var init_deployments2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/deployments.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/providers.js
  var init_providers2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/providers.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/resources.js
  var init_resources2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/resources.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/resourceGroups.js
  var init_resourceGroups2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/resourceGroups.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/tagsOperations.js
  var init_tagsOperations2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/tagsOperations.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/deploymentOperations.js
  var init_deploymentOperations2 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/deploymentOperations.js"() {
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/index.js
  var init_operationsInterfaces3 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/operationsInterfaces/index.js"() {
      init_operations9();
      init_deployments2();
      init_providers2();
      init_resources2();
      init_resourceGroups2();
      init_tagsOperations2();
      init_deploymentOperations2();
    }
  });

  // node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/index.js
  var src_exports5 = {};
  __export(src_exports5, {
    KnownTagsPatchOperation: () => KnownTagsPatchOperation,
    ResourceManagementClient: () => ResourceManagementClient
  });
  var init_src10 = __esm({
    "node_modules/@azure/arm-resources-profile-2020-09-01-hybrid/dist-esm/src/index.js"() {
      init_models4();
      init_resourceManagementClient();
      init_operationsInterfaces3();
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/models/index.js
  var KnownExpressionEvaluationOptionsScopeType, KnownProvisioningState, KnownAliasPathTokenType, KnownAliasPathAttributes, KnownProviderAuthorizationConsentState, KnownExtendedLocationType, KnownTagsPatchOperation2;
  var init_models5 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/models/index.js"() {
      (function(KnownExpressionEvaluationOptionsScopeType2) {
        KnownExpressionEvaluationOptionsScopeType2["NotSpecified"] = "NotSpecified";
        KnownExpressionEvaluationOptionsScopeType2["Outer"] = "Outer";
        KnownExpressionEvaluationOptionsScopeType2["Inner"] = "Inner";
      })(KnownExpressionEvaluationOptionsScopeType || (KnownExpressionEvaluationOptionsScopeType = {}));
      (function(KnownProvisioningState2) {
        KnownProvisioningState2["NotSpecified"] = "NotSpecified";
        KnownProvisioningState2["Accepted"] = "Accepted";
        KnownProvisioningState2["Running"] = "Running";
        KnownProvisioningState2["Ready"] = "Ready";
        KnownProvisioningState2["Creating"] = "Creating";
        KnownProvisioningState2["Created"] = "Created";
        KnownProvisioningState2["Deleting"] = "Deleting";
        KnownProvisioningState2["Deleted"] = "Deleted";
        KnownProvisioningState2["Canceled"] = "Canceled";
        KnownProvisioningState2["Failed"] = "Failed";
        KnownProvisioningState2["Succeeded"] = "Succeeded";
        KnownProvisioningState2["Updating"] = "Updating";
      })(KnownProvisioningState || (KnownProvisioningState = {}));
      (function(KnownAliasPathTokenType2) {
        KnownAliasPathTokenType2["NotSpecified"] = "NotSpecified";
        KnownAliasPathTokenType2["Any"] = "Any";
        KnownAliasPathTokenType2["String"] = "String";
        KnownAliasPathTokenType2["Object"] = "Object";
        KnownAliasPathTokenType2["Array"] = "Array";
        KnownAliasPathTokenType2["Integer"] = "Integer";
        KnownAliasPathTokenType2["Number"] = "Number";
        KnownAliasPathTokenType2["Boolean"] = "Boolean";
      })(KnownAliasPathTokenType || (KnownAliasPathTokenType = {}));
      (function(KnownAliasPathAttributes2) {
        KnownAliasPathAttributes2["None"] = "None";
        KnownAliasPathAttributes2["Modifiable"] = "Modifiable";
      })(KnownAliasPathAttributes || (KnownAliasPathAttributes = {}));
      (function(KnownProviderAuthorizationConsentState2) {
        KnownProviderAuthorizationConsentState2["NotSpecified"] = "NotSpecified";
        KnownProviderAuthorizationConsentState2["Required"] = "Required";
        KnownProviderAuthorizationConsentState2["NotRequired"] = "NotRequired";
        KnownProviderAuthorizationConsentState2["Consented"] = "Consented";
      })(KnownProviderAuthorizationConsentState || (KnownProviderAuthorizationConsentState = {}));
      (function(KnownExtendedLocationType2) {
        KnownExtendedLocationType2["EdgeZone"] = "EdgeZone";
      })(KnownExtendedLocationType || (KnownExtendedLocationType = {}));
      (function(KnownTagsPatchOperation3) {
        KnownTagsPatchOperation3["Replace"] = "Replace";
        KnownTagsPatchOperation3["Merge"] = "Merge";
        KnownTagsPatchOperation3["Delete"] = "Delete";
      })(KnownTagsPatchOperation2 || (KnownTagsPatchOperation2 = {}));
    }
  });

  // node_modules/@azure/arm-resources/node_modules/tslib/tslib.es6.js
  function __rest4(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __awaiter4(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    __name(adopt, "adopt");
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      __name(fulfilled, "fulfilled");
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      __name(rejected, "rejected");
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      __name(step, "step");
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __values5(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await4(v) {
    return this instanceof __await4 ? (this.v = v, this) : new __await4(v);
  }
  function __asyncGenerator4(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await4 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  function __asyncDelegator4(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await4(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  function __asyncValues4(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values5 === "function" ? __values5(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  var init_tslib_es65 = __esm({
    "node_modules/@azure/arm-resources/node_modules/tslib/tslib.es6.js"() {
      __name(__rest4, "__rest");
      __name(__awaiter4, "__awaiter");
      __name(__values5, "__values");
      __name(__await4, "__await");
      __name(__asyncGenerator4, "__asyncGenerator");
      __name(__asyncDelegator4, "__asyncDelegator");
      __name(__asyncValues4, "__asyncValues");
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/models/mappers.js
  var mappers_exports4 = {};
  __export(mappers_exports4, {
    Alias: () => Alias2,
    AliasPath: () => AliasPath2,
    AliasPathMetadata: () => AliasPathMetadata,
    AliasPattern: () => AliasPattern2,
    ApiProfile: () => ApiProfile,
    BasicDependency: () => BasicDependency2,
    CloudError: () => CloudError3,
    DebugSetting: () => DebugSetting2,
    Dependency: () => Dependency2,
    Deployment: () => Deployment2,
    DeploymentExportResult: () => DeploymentExportResult2,
    DeploymentExtended: () => DeploymentExtended2,
    DeploymentExtendedFilter: () => DeploymentExtendedFilter2,
    DeploymentListResult: () => DeploymentListResult2,
    DeploymentOperation: () => DeploymentOperation2,
    DeploymentOperationProperties: () => DeploymentOperationProperties2,
    DeploymentOperationsListResult: () => DeploymentOperationsListResult2,
    DeploymentProperties: () => DeploymentProperties2,
    DeploymentPropertiesExtended: () => DeploymentPropertiesExtended2,
    DeploymentValidateResult: () => DeploymentValidateResult2,
    DeploymentWhatIf: () => DeploymentWhatIf2,
    DeploymentWhatIfProperties: () => DeploymentWhatIfProperties2,
    DeploymentWhatIfSettings: () => DeploymentWhatIfSettings2,
    DeploymentsWhatIfAtManagementGroupScopeHeaders: () => DeploymentsWhatIfAtManagementGroupScopeHeaders2,
    DeploymentsWhatIfAtSubscriptionScopeHeaders: () => DeploymentsWhatIfAtSubscriptionScopeHeaders2,
    DeploymentsWhatIfAtTenantScopeHeaders: () => DeploymentsWhatIfAtTenantScopeHeaders2,
    DeploymentsWhatIfHeaders: () => DeploymentsWhatIfHeaders2,
    ErrorAdditionalInfo: () => ErrorAdditionalInfo2,
    ErrorResponse: () => ErrorResponse4,
    ExportTemplateRequest: () => ExportTemplateRequest2,
    ExpressionEvaluationOptions: () => ExpressionEvaluationOptions,
    ExtendedLocation: () => ExtendedLocation2,
    GenericResource: () => GenericResource2,
    GenericResourceExpanded: () => GenericResourceExpanded2,
    GenericResourceFilter: () => GenericResourceFilter2,
    HttpMessage: () => HttpMessage2,
    Identity: () => Identity4,
    IdentityUserAssignedIdentitiesValue: () => IdentityUserAssignedIdentitiesValue2,
    OnErrorDeployment: () => OnErrorDeployment2,
    OnErrorDeploymentExtended: () => OnErrorDeploymentExtended2,
    Operation: () => Operation4,
    OperationDisplay: () => OperationDisplay4,
    OperationListResult: () => OperationListResult4,
    ParametersLink: () => ParametersLink2,
    Permission: () => Permission,
    Plan: () => Plan2,
    Provider: () => Provider2,
    ProviderConsentDefinition: () => ProviderConsentDefinition,
    ProviderExtendedLocation: () => ProviderExtendedLocation,
    ProviderListResult: () => ProviderListResult2,
    ProviderPermission: () => ProviderPermission,
    ProviderPermissionListResult: () => ProviderPermissionListResult,
    ProviderRegistrationRequest: () => ProviderRegistrationRequest,
    ProviderResourceType: () => ProviderResourceType2,
    ProviderResourceTypeListResult: () => ProviderResourceTypeListResult,
    Resource: () => Resource4,
    ResourceGroup: () => ResourceGroup2,
    ResourceGroupExportResult: () => ResourceGroupExportResult2,
    ResourceGroupFilter: () => ResourceGroupFilter2,
    ResourceGroupListResult: () => ResourceGroupListResult2,
    ResourceGroupPatchable: () => ResourceGroupPatchable2,
    ResourceGroupProperties: () => ResourceGroupProperties2,
    ResourceListResult: () => ResourceListResult2,
    ResourceProviderOperationDisplayProperties: () => ResourceProviderOperationDisplayProperties2,
    ResourceReference: () => ResourceReference2,
    ResourcesMoveInfo: () => ResourcesMoveInfo2,
    RoleDefinition: () => RoleDefinition,
    ScopedDeployment: () => ScopedDeployment2,
    ScopedDeploymentWhatIf: () => ScopedDeploymentWhatIf2,
    Sku: () => Sku4,
    StatusMessage: () => StatusMessage,
    SubResource: () => SubResource2,
    TagCount: () => TagCount2,
    TagDetails: () => TagDetails2,
    TagValue: () => TagValue2,
    Tags: () => Tags2,
    TagsListResult: () => TagsListResult2,
    TagsPatchResource: () => TagsPatchResource2,
    TagsResource: () => TagsResource2,
    TargetResource: () => TargetResource2,
    TemplateHashResult: () => TemplateHashResult2,
    TemplateLink: () => TemplateLink2,
    WhatIfChange: () => WhatIfChange2,
    WhatIfOperationResult: () => WhatIfOperationResult2,
    WhatIfPropertyChange: () => WhatIfPropertyChange2,
    ZoneMapping: () => ZoneMapping2
  });
  var OperationListResult4, Operation4, OperationDisplay4, CloudError3, ErrorResponse4, ErrorAdditionalInfo2, Deployment2, DeploymentProperties2, TemplateLink2, ParametersLink2, DebugSetting2, OnErrorDeployment2, ExpressionEvaluationOptions, DeploymentExtended2, DeploymentPropertiesExtended2, Provider2, ProviderResourceType2, ProviderExtendedLocation, Alias2, AliasPath2, AliasPattern2, AliasPathMetadata, ZoneMapping2, ApiProfile, Dependency2, BasicDependency2, OnErrorDeploymentExtended2, ResourceReference2, DeploymentValidateResult2, DeploymentExportResult2, DeploymentListResult2, ScopedDeployment2, ScopedDeploymentWhatIf2, DeploymentWhatIfSettings2, WhatIfOperationResult2, WhatIfChange2, WhatIfPropertyChange2, DeploymentWhatIf2, ProviderPermissionListResult, ProviderPermission, RoleDefinition, Permission, ProviderRegistrationRequest, ProviderConsentDefinition, ProviderListResult2, ProviderResourceTypeListResult, ResourceListResult2, Plan2, Sku4, Identity4, IdentityUserAssignedIdentitiesValue2, Resource4, ExtendedLocation2, ResourceGroup2, ResourceGroupProperties2, ResourceGroupPatchable2, ExportTemplateRequest2, ResourceGroupExportResult2, ResourceGroupListResult2, ResourcesMoveInfo2, TagValue2, TagCount2, TagDetails2, TagsListResult2, DeploymentOperation2, DeploymentOperationProperties2, StatusMessage, TargetResource2, HttpMessage2, DeploymentOperationsListResult2, TemplateHashResult2, TagsResource2, Tags2, TagsPatchResource2, DeploymentExtendedFilter2, GenericResourceFilter2, ResourceGroupFilter2, ResourceProviderOperationDisplayProperties2, SubResource2, DeploymentWhatIfProperties2, GenericResource2, GenericResourceExpanded2, DeploymentsWhatIfAtTenantScopeHeaders2, DeploymentsWhatIfAtManagementGroupScopeHeaders2, DeploymentsWhatIfAtSubscriptionScopeHeaders2, DeploymentsWhatIfHeaders2;
  var init_mappers4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/models/mappers.js"() {
      OperationListResult4 = {
        type: {
          name: "Composite",
          className: "OperationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Operation"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Operation4 = {
        type: {
          name: "Composite",
          className: "Operation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            display: {
              serializedName: "display",
              type: {
                name: "Composite",
                className: "OperationDisplay"
              }
            }
          }
        }
      };
      OperationDisplay4 = {
        type: {
          name: "Composite",
          className: "OperationDisplay",
          modelProperties: {
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CloudError3 = {
        type: {
          name: "Composite",
          className: "CloudError",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      ErrorResponse4 = {
        type: {
          name: "Composite",
          className: "ErrorResponse",
          modelProperties: {
            code: {
              serializedName: "code",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            target: {
              serializedName: "target",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            details: {
              serializedName: "details",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorResponse"
                  }
                }
              }
            },
            additionalInfo: {
              serializedName: "additionalInfo",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorAdditionalInfo"
                  }
                }
              }
            }
          }
        }
      };
      ErrorAdditionalInfo2 = {
        type: {
          name: "Composite",
          className: "ErrorAdditionalInfo",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            info: {
              serializedName: "info",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      Deployment2 = {
        type: {
          name: "Composite",
          className: "Deployment",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentProperties"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      DeploymentProperties2 = {
        type: {
          name: "Composite",
          className: "DeploymentProperties",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            templateLink: {
              serializedName: "templateLink",
              type: {
                name: "Composite",
                className: "TemplateLink"
              }
            },
            parameters: {
              serializedName: "parameters",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            parametersLink: {
              serializedName: "parametersLink",
              type: {
                name: "Composite",
                className: "ParametersLink"
              }
            },
            mode: {
              serializedName: "mode",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Incremental", "Complete"]
              }
            },
            debugSetting: {
              serializedName: "debugSetting",
              type: {
                name: "Composite",
                className: "DebugSetting"
              }
            },
            onErrorDeployment: {
              serializedName: "onErrorDeployment",
              type: {
                name: "Composite",
                className: "OnErrorDeployment"
              }
            },
            expressionEvaluationOptions: {
              serializedName: "expressionEvaluationOptions",
              type: {
                name: "Composite",
                className: "ExpressionEvaluationOptions"
              }
            }
          }
        }
      };
      TemplateLink2 = {
        type: {
          name: "Composite",
          className: "TemplateLink",
          modelProperties: {
            uri: {
              serializedName: "uri",
              type: {
                name: "String"
              }
            },
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            relativePath: {
              serializedName: "relativePath",
              type: {
                name: "String"
              }
            },
            contentVersion: {
              serializedName: "contentVersion",
              type: {
                name: "String"
              }
            },
            queryString: {
              serializedName: "queryString",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ParametersLink2 = {
        type: {
          name: "Composite",
          className: "ParametersLink",
          modelProperties: {
            uri: {
              serializedName: "uri",
              required: true,
              type: {
                name: "String"
              }
            },
            contentVersion: {
              serializedName: "contentVersion",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DebugSetting2 = {
        type: {
          name: "Composite",
          className: "DebugSetting",
          modelProperties: {
            detailLevel: {
              serializedName: "detailLevel",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      OnErrorDeployment2 = {
        type: {
          name: "Composite",
          className: "OnErrorDeployment",
          modelProperties: {
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["LastSuccessful", "SpecificDeployment"]
              }
            },
            deploymentName: {
              serializedName: "deploymentName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ExpressionEvaluationOptions = {
        type: {
          name: "Composite",
          className: "ExpressionEvaluationOptions",
          modelProperties: {
            scope: {
              serializedName: "scope",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentExtended2 = {
        type: {
          name: "Composite",
          className: "DeploymentExtended",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentPropertiesExtended"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      DeploymentPropertiesExtended2 = {
        type: {
          name: "Composite",
          className: "DeploymentPropertiesExtended",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            correlationId: {
              serializedName: "correlationId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            duration: {
              serializedName: "duration",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            outputs: {
              serializedName: "outputs",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            providers: {
              serializedName: "providers",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Provider"
                  }
                }
              }
            },
            dependencies: {
              serializedName: "dependencies",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Dependency"
                  }
                }
              }
            },
            templateLink: {
              serializedName: "templateLink",
              type: {
                name: "Composite",
                className: "TemplateLink"
              }
            },
            parameters: {
              serializedName: "parameters",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            parametersLink: {
              serializedName: "parametersLink",
              type: {
                name: "Composite",
                className: "ParametersLink"
              }
            },
            mode: {
              serializedName: "mode",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Incremental", "Complete"]
              }
            },
            debugSetting: {
              serializedName: "debugSetting",
              type: {
                name: "Composite",
                className: "DebugSetting"
              }
            },
            onErrorDeployment: {
              serializedName: "onErrorDeployment",
              type: {
                name: "Composite",
                className: "OnErrorDeploymentExtended"
              }
            },
            templateHash: {
              serializedName: "templateHash",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            outputResources: {
              serializedName: "outputResources",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceReference"
                  }
                }
              }
            },
            validatedResources: {
              serializedName: "validatedResources",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceReference"
                  }
                }
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      Provider2 = {
        type: {
          name: "Composite",
          className: "Provider",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            namespace: {
              serializedName: "namespace",
              type: {
                name: "String"
              }
            },
            registrationState: {
              serializedName: "registrationState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            registrationPolicy: {
              serializedName: "registrationPolicy",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            resourceTypes: {
              serializedName: "resourceTypes",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ProviderResourceType"
                  }
                }
              }
            },
            providerAuthorizationConsentState: {
              serializedName: "providerAuthorizationConsentState",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ProviderResourceType2 = {
        type: {
          name: "Composite",
          className: "ProviderResourceType",
          modelProperties: {
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            locations: {
              serializedName: "locations",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            locationMappings: {
              serializedName: "locationMappings",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ProviderExtendedLocation"
                  }
                }
              }
            },
            aliases: {
              serializedName: "aliases",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Alias"
                  }
                }
              }
            },
            apiVersions: {
              serializedName: "apiVersions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            defaultApiVersion: {
              serializedName: "defaultApiVersion",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            zoneMappings: {
              serializedName: "zoneMappings",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ZoneMapping"
                  }
                }
              }
            },
            apiProfiles: {
              serializedName: "apiProfiles",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ApiProfile"
                  }
                }
              }
            },
            capabilities: {
              serializedName: "capabilities",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ProviderExtendedLocation = {
        type: {
          name: "Composite",
          className: "ProviderExtendedLocation",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            },
            extendedLocations: {
              serializedName: "extendedLocations",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      Alias2 = {
        type: {
          name: "Composite",
          className: "Alias",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            paths: {
              serializedName: "paths",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "AliasPath"
                  }
                }
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["NotSpecified", "PlainText", "Mask"]
              }
            },
            defaultPath: {
              serializedName: "defaultPath",
              type: {
                name: "String"
              }
            },
            defaultPattern: {
              serializedName: "defaultPattern",
              type: {
                name: "Composite",
                className: "AliasPattern"
              }
            },
            defaultMetadata: {
              serializedName: "defaultMetadata",
              type: {
                name: "Composite",
                className: "AliasPathMetadata"
              }
            }
          }
        }
      };
      AliasPath2 = {
        type: {
          name: "Composite",
          className: "AliasPath",
          modelProperties: {
            path: {
              serializedName: "path",
              type: {
                name: "String"
              }
            },
            apiVersions: {
              serializedName: "apiVersions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            pattern: {
              serializedName: "pattern",
              type: {
                name: "Composite",
                className: "AliasPattern"
              }
            },
            metadata: {
              serializedName: "metadata",
              type: {
                name: "Composite",
                className: "AliasPathMetadata"
              }
            }
          }
        }
      };
      AliasPattern2 = {
        type: {
          name: "Composite",
          className: "AliasPattern",
          modelProperties: {
            phrase: {
              serializedName: "phrase",
              type: {
                name: "String"
              }
            },
            variable: {
              serializedName: "variable",
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["NotSpecified", "Extract"]
              }
            }
          }
        }
      };
      AliasPathMetadata = {
        type: {
          name: "Composite",
          className: "AliasPathMetadata",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            attributes: {
              serializedName: "attributes",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ZoneMapping2 = {
        type: {
          name: "Composite",
          className: "ZoneMapping",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            zones: {
              serializedName: "zones",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      ApiProfile = {
        type: {
          name: "Composite",
          className: "ApiProfile",
          modelProperties: {
            profileVersion: {
              serializedName: "profileVersion",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            apiVersion: {
              serializedName: "apiVersion",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Dependency2 = {
        type: {
          name: "Composite",
          className: "Dependency",
          modelProperties: {
            dependsOn: {
              serializedName: "dependsOn",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "BasicDependency"
                  }
                }
              }
            },
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      BasicDependency2 = {
        type: {
          name: "Composite",
          className: "BasicDependency",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      OnErrorDeploymentExtended2 = {
        type: {
          name: "Composite",
          className: "OnErrorDeploymentExtended",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: ["LastSuccessful", "SpecificDeployment"]
              }
            },
            deploymentName: {
              serializedName: "deploymentName",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceReference2 = {
        type: {
          name: "Composite",
          className: "ResourceReference",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentValidateResult2 = {
        type: {
          name: "Composite",
          className: "DeploymentValidateResult",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentPropertiesExtended"
              }
            }
          }
        }
      };
      DeploymentExportResult2 = {
        type: {
          name: "Composite",
          className: "DeploymentExportResult",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      DeploymentListResult2 = {
        type: {
          name: "Composite",
          className: "DeploymentListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "DeploymentExtended"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ScopedDeployment2 = {
        type: {
          name: "Composite",
          className: "ScopedDeployment",
          modelProperties: {
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentProperties"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ScopedDeploymentWhatIf2 = {
        type: {
          name: "Composite",
          className: "ScopedDeploymentWhatIf",
          modelProperties: {
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentWhatIfProperties"
              }
            }
          }
        }
      };
      DeploymentWhatIfSettings2 = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIfSettings",
          modelProperties: {
            resultFormat: {
              serializedName: "resultFormat",
              type: {
                name: "Enum",
                allowedValues: ["ResourceIdOnly", "FullResourcePayloads"]
              }
            }
          }
        }
      };
      WhatIfOperationResult2 = {
        type: {
          name: "Composite",
          className: "WhatIfOperationResult",
          modelProperties: {
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            },
            changes: {
              serializedName: "properties.changes",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfChange"
                  }
                }
              }
            }
          }
        }
      };
      WhatIfChange2 = {
        type: {
          name: "Composite",
          className: "WhatIfChange",
          modelProperties: {
            resourceId: {
              serializedName: "resourceId",
              required: true,
              type: {
                name: "String"
              }
            },
            changeType: {
              serializedName: "changeType",
              required: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "Create",
                  "Delete",
                  "Ignore",
                  "Deploy",
                  "NoChange",
                  "Modify",
                  "Unsupported"
                ]
              }
            },
            unsupportedReason: {
              serializedName: "unsupportedReason",
              type: {
                name: "String"
              }
            },
            before: {
              serializedName: "before",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            after: {
              serializedName: "after",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            delta: {
              serializedName: "delta",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfPropertyChange"
                  }
                }
              }
            }
          }
        }
      };
      WhatIfPropertyChange2 = {
        type: {
          name: "Composite",
          className: "WhatIfPropertyChange",
          modelProperties: {
            path: {
              serializedName: "path",
              required: true,
              type: {
                name: "String"
              }
            },
            propertyChangeType: {
              serializedName: "propertyChangeType",
              required: true,
              type: {
                name: "Enum",
                allowedValues: ["Create", "Delete", "Modify", "Array", "NoEffect"]
              }
            },
            before: {
              serializedName: "before",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            after: {
              serializedName: "after",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            children: {
              serializedName: "children",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "WhatIfPropertyChange"
                  }
                }
              }
            }
          }
        }
      };
      DeploymentWhatIf2 = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIf",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentWhatIfProperties"
              }
            }
          }
        }
      };
      ProviderPermissionListResult = {
        type: {
          name: "Composite",
          className: "ProviderPermissionListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ProviderPermission"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ProviderPermission = {
        type: {
          name: "Composite",
          className: "ProviderPermission",
          modelProperties: {
            applicationId: {
              serializedName: "applicationId",
              type: {
                name: "String"
              }
            },
            roleDefinition: {
              serializedName: "roleDefinition",
              type: {
                name: "Composite",
                className: "RoleDefinition"
              }
            },
            managedByRoleDefinition: {
              serializedName: "managedByRoleDefinition",
              type: {
                name: "Composite",
                className: "RoleDefinition"
              }
            },
            providerAuthorizationConsentState: {
              serializedName: "providerAuthorizationConsentState",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      RoleDefinition = {
        type: {
          name: "Composite",
          className: "RoleDefinition",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            isServiceRole: {
              serializedName: "isServiceRole",
              type: {
                name: "Boolean"
              }
            },
            permissions: {
              serializedName: "permissions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Permission"
                  }
                }
              }
            },
            scopes: {
              serializedName: "scopes",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      Permission = {
        type: {
          name: "Composite",
          className: "Permission",
          modelProperties: {
            actions: {
              serializedName: "actions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            notActions: {
              serializedName: "notActions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            dataActions: {
              serializedName: "dataActions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            notDataActions: {
              serializedName: "notDataActions",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            }
          }
        }
      };
      ProviderRegistrationRequest = {
        type: {
          name: "Composite",
          className: "ProviderRegistrationRequest",
          modelProperties: {
            thirdPartyProviderConsent: {
              serializedName: "thirdPartyProviderConsent",
              type: {
                name: "Composite",
                className: "ProviderConsentDefinition"
              }
            }
          }
        }
      };
      ProviderConsentDefinition = {
        type: {
          name: "Composite",
          className: "ProviderConsentDefinition",
          modelProperties: {
            consentToAuthorization: {
              serializedName: "consentToAuthorization",
              type: {
                name: "Boolean"
              }
            }
          }
        }
      };
      ProviderListResult2 = {
        type: {
          name: "Composite",
          className: "ProviderListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Provider"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ProviderResourceTypeListResult = {
        type: {
          name: "Composite",
          className: "ProviderResourceTypeListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ProviderResourceType"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceListResult2 = {
        type: {
          name: "Composite",
          className: "ResourceListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "GenericResourceExpanded"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Plan2 = {
        type: {
          name: "Composite",
          className: "Plan",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            publisher: {
              serializedName: "publisher",
              type: {
                name: "String"
              }
            },
            product: {
              serializedName: "product",
              type: {
                name: "String"
              }
            },
            promotionCode: {
              serializedName: "promotionCode",
              type: {
                name: "String"
              }
            },
            version: {
              serializedName: "version",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Sku4 = {
        type: {
          name: "Composite",
          className: "Sku",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            tier: {
              serializedName: "tier",
              type: {
                name: "String"
              }
            },
            size: {
              serializedName: "size",
              type: {
                name: "String"
              }
            },
            family: {
              serializedName: "family",
              type: {
                name: "String"
              }
            },
            model: {
              serializedName: "model",
              type: {
                name: "String"
              }
            },
            capacity: {
              serializedName: "capacity",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      Identity4 = {
        type: {
          name: "Composite",
          className: "Identity",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "Enum",
                allowedValues: [
                  "SystemAssigned",
                  "UserAssigned",
                  "SystemAssigned, UserAssigned",
                  "None"
                ]
              }
            },
            userAssignedIdentities: {
              serializedName: "userAssignedIdentities",
              type: {
                name: "Dictionary",
                value: {
                  type: {
                    name: "Composite",
                    className: "IdentityUserAssignedIdentitiesValue"
                  }
                }
              }
            }
          }
        }
      };
      IdentityUserAssignedIdentitiesValue2 = {
        type: {
          name: "Composite",
          className: "IdentityUserAssignedIdentitiesValue",
          modelProperties: {
            principalId: {
              serializedName: "principalId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            clientId: {
              serializedName: "clientId",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Resource4 = {
        type: {
          name: "Composite",
          className: "Resource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            extendedLocation: {
              serializedName: "extendedLocation",
              type: {
                name: "Composite",
                className: "ExtendedLocation"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ExtendedLocation2 = {
        type: {
          name: "Composite",
          className: "ExtendedLocation",
          modelProperties: {
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroup2 = {
        type: {
          name: "Composite",
          className: "ResourceGroup",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "ResourceGroupProperties"
              }
            },
            location: {
              serializedName: "location",
              required: true,
              type: {
                name: "String"
              }
            },
            managedBy: {
              serializedName: "managedBy",
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ResourceGroupProperties2 = {
        type: {
          name: "Composite",
          className: "ResourceGroupProperties",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupPatchable2 = {
        type: {
          name: "Composite",
          className: "ResourceGroupPatchable",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "ResourceGroupProperties"
              }
            },
            managedBy: {
              serializedName: "managedBy",
              type: {
                name: "String"
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      ExportTemplateRequest2 = {
        type: {
          name: "Composite",
          className: "ExportTemplateRequest",
          modelProperties: {
            resources: {
              serializedName: "resources",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            options: {
              serializedName: "options",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupExportResult2 = {
        type: {
          name: "Composite",
          className: "ResourceGroupExportResult",
          modelProperties: {
            template: {
              serializedName: "template",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      ResourceGroupListResult2 = {
        type: {
          name: "Composite",
          className: "ResourceGroupListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ResourceGroup"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourcesMoveInfo2 = {
        type: {
          name: "Composite",
          className: "ResourcesMoveInfo",
          modelProperties: {
            resources: {
              serializedName: "resources",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            targetResourceGroup: {
              serializedName: "targetResourceGroup",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TagValue2 = {
        type: {
          name: "Composite",
          className: "TagValue",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tagValue: {
              serializedName: "tagValue",
              type: {
                name: "String"
              }
            },
            count: {
              serializedName: "count",
              type: {
                name: "Composite",
                className: "TagCount"
              }
            }
          }
        }
      };
      TagCount2 = {
        type: {
          name: "Composite",
          className: "TagCount",
          modelProperties: {
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            },
            value: {
              serializedName: "value",
              type: {
                name: "Number"
              }
            }
          }
        }
      };
      TagDetails2 = {
        type: {
          name: "Composite",
          className: "TagDetails",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tagName: {
              serializedName: "tagName",
              type: {
                name: "String"
              }
            },
            count: {
              serializedName: "count",
              type: {
                name: "Composite",
                className: "TagCount"
              }
            },
            values: {
              serializedName: "values",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagValue"
                  }
                }
              }
            }
          }
        }
      };
      TagsListResult2 = {
        type: {
          name: "Composite",
          className: "TagsListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TagDetails"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentOperation2 = {
        type: {
          name: "Composite",
          className: "DeploymentOperation",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            operationId: {
              serializedName: "operationId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "DeploymentOperationProperties"
              }
            }
          }
        }
      };
      DeploymentOperationProperties2 = {
        type: {
          name: "Composite",
          className: "DeploymentOperationProperties",
          modelProperties: {
            provisioningOperation: {
              serializedName: "provisioningOperation",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: [
                  "NotSpecified",
                  "Create",
                  "Delete",
                  "Waiting",
                  "AzureAsyncOperationWaiting",
                  "ResourceCacheWaiting",
                  "Action",
                  "Read",
                  "EvaluateDeploymentOutput",
                  "DeploymentCleanup"
                ]
              }
            },
            provisioningState: {
              serializedName: "provisioningState",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            timestamp: {
              serializedName: "timestamp",
              readOnly: true,
              type: {
                name: "DateTime"
              }
            },
            duration: {
              serializedName: "duration",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            serviceRequestId: {
              serializedName: "serviceRequestId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            statusCode: {
              serializedName: "statusCode",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            statusMessage: {
              serializedName: "statusMessage",
              type: {
                name: "Composite",
                className: "StatusMessage"
              }
            },
            targetResource: {
              serializedName: "targetResource",
              type: {
                name: "Composite",
                className: "TargetResource"
              }
            },
            request: {
              serializedName: "request",
              type: {
                name: "Composite",
                className: "HttpMessage"
              }
            },
            response: {
              serializedName: "response",
              type: {
                name: "Composite",
                className: "HttpMessage"
              }
            }
          }
        }
      };
      StatusMessage = {
        type: {
          name: "Composite",
          className: "StatusMessage",
          modelProperties: {
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            },
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      TargetResource2 = {
        type: {
          name: "Composite",
          className: "TargetResource",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            },
            resourceName: {
              serializedName: "resourceName",
              type: {
                name: "String"
              }
            },
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      HttpMessage2 = {
        type: {
          name: "Composite",
          className: "HttpMessage",
          modelProperties: {
            content: {
              serializedName: "content",
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      DeploymentOperationsListResult2 = {
        type: {
          name: "Composite",
          className: "DeploymentOperationsListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "DeploymentOperation"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TemplateHashResult2 = {
        type: {
          name: "Composite",
          className: "TemplateHashResult",
          modelProperties: {
            minifiedTemplate: {
              serializedName: "minifiedTemplate",
              type: {
                name: "String"
              }
            },
            templateHash: {
              serializedName: "templateHash",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TagsResource2 = {
        type: {
          name: "Composite",
          className: "TagsResource",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "Tags"
              }
            }
          }
        }
      };
      Tags2 = {
        type: {
          name: "Composite",
          className: "Tags",
          modelProperties: {
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      TagsPatchResource2 = {
        type: {
          name: "Composite",
          className: "TagsPatchResource",
          modelProperties: {
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            properties: {
              serializedName: "properties",
              type: {
                name: "Composite",
                className: "Tags"
              }
            }
          }
        }
      };
      DeploymentExtendedFilter2 = {
        type: {
          name: "Composite",
          className: "DeploymentExtendedFilter",
          modelProperties: {
            provisioningState: {
              serializedName: "provisioningState",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      GenericResourceFilter2 = {
        type: {
          name: "Composite",
          className: "GenericResourceFilter",
          modelProperties: {
            resourceType: {
              serializedName: "resourceType",
              type: {
                name: "String"
              }
            },
            tagname: {
              serializedName: "tagname",
              type: {
                name: "String"
              }
            },
            tagvalue: {
              serializedName: "tagvalue",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceGroupFilter2 = {
        type: {
          name: "Composite",
          className: "ResourceGroupFilter",
          modelProperties: {
            tagName: {
              serializedName: "tagName",
              type: {
                name: "String"
              }
            },
            tagValue: {
              serializedName: "tagValue",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceProviderOperationDisplayProperties2 = {
        type: {
          name: "Composite",
          className: "ResourceProviderOperationDisplayProperties",
          modelProperties: {
            publisher: {
              serializedName: "publisher",
              type: {
                name: "String"
              }
            },
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SubResource2 = {
        type: {
          name: "Composite",
          className: "SubResource",
          modelProperties: {
            id: {
              serializedName: "id",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentWhatIfProperties2 = {
        type: {
          name: "Composite",
          className: "DeploymentWhatIfProperties",
          modelProperties: Object.assign(Object.assign({}, DeploymentProperties2.type.modelProperties), { whatIfSettings: {
            serializedName: "whatIfSettings",
            type: {
              name: "Composite",
              className: "DeploymentWhatIfSettings"
            }
          } })
        }
      };
      GenericResource2 = {
        type: {
          name: "Composite",
          className: "GenericResource",
          modelProperties: Object.assign(Object.assign({}, Resource4.type.modelProperties), { plan: {
            serializedName: "plan",
            type: {
              name: "Composite",
              className: "Plan"
            }
          }, properties: {
            serializedName: "properties",
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }, kind: {
            constraints: {
              Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
            },
            serializedName: "kind",
            type: {
              name: "String"
            }
          }, managedBy: {
            serializedName: "managedBy",
            type: {
              name: "String"
            }
          }, sku: {
            serializedName: "sku",
            type: {
              name: "Composite",
              className: "Sku"
            }
          }, identity: {
            serializedName: "identity",
            type: {
              name: "Composite",
              className: "Identity"
            }
          } })
        }
      };
      GenericResourceExpanded2 = {
        type: {
          name: "Composite",
          className: "GenericResourceExpanded",
          modelProperties: Object.assign(Object.assign({}, GenericResource2.type.modelProperties), { createdTime: {
            serializedName: "createdTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, changedTime: {
            serializedName: "changedTime",
            readOnly: true,
            type: {
              name: "DateTime"
            }
          }, provisioningState: {
            serializedName: "provisioningState",
            readOnly: true,
            type: {
              name: "String"
            }
          } })
        }
      };
      DeploymentsWhatIfAtTenantScopeHeaders2 = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtTenantScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfAtManagementGroupScopeHeaders2 = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtManagementGroupScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfAtSubscriptionScopeHeaders2 = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfAtSubscriptionScopeHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      DeploymentsWhatIfHeaders2 = {
        type: {
          name: "Composite",
          className: "DeploymentsWhatIfHeaders",
          modelProperties: {
            location: {
              serializedName: "location",
              type: {
                name: "String"
              }
            },
            retryAfter: {
              serializedName: "retry-after",
              type: {
                name: "String"
              }
            }
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/models/parameters.js
  var accept4, $host4, apiVersion4, nextLink4, scope2, deploymentName2, contentType4, parameters15, filter3, top2, parameters16, parameters24, groupId2, subscriptionId4, parameters34, resourceGroupName4, template2, resourceProviderNamespace2, properties5, expand4, parameters44, sourceResourceGroupName2, parentResourcePath2, resourceType2, resourceName2, apiVersion12, parameters54, resourceId2, parameters63, forceDeletionTypes, parameters73, parameters83, resourceGroupName12, tagName2, tagValue2, parameters93, parameters103, operationId2;
  var init_parameters4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/models/parameters.js"() {
      init_mappers4();
      accept4 = {
        parameterPath: "accept",
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Accept",
          type: {
            name: "String"
          }
        }
      };
      $host4 = {
        parameterPath: "$host",
        mapper: {
          serializedName: "$host",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      apiVersion4 = {
        parameterPath: "apiVersion",
        mapper: {
          defaultValue: "2021-04-01",
          isConstant: true,
          serializedName: "api-version",
          type: {
            name: "String"
          }
        }
      };
      nextLink4 = {
        parameterPath: "nextLink",
        mapper: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      scope2 = {
        parameterPath: "scope",
        mapper: {
          serializedName: "scope",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      deploymentName2 = {
        parameterPath: "deploymentName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 64,
            MinLength: 1
          },
          serializedName: "deploymentName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      contentType4 = {
        parameterPath: ["options", "contentType"],
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Content-Type",
          type: {
            name: "String"
          }
        }
      };
      parameters15 = {
        parameterPath: "parameters",
        mapper: Deployment2
      };
      filter3 = {
        parameterPath: ["options", "filter"],
        mapper: {
          serializedName: "$filter",
          type: {
            name: "String"
          }
        }
      };
      top2 = {
        parameterPath: ["options", "top"],
        mapper: {
          serializedName: "$top",
          type: {
            name: "Number"
          }
        }
      };
      parameters16 = {
        parameterPath: "parameters",
        mapper: ScopedDeployment2
      };
      parameters24 = {
        parameterPath: "parameters",
        mapper: ScopedDeploymentWhatIf2
      };
      groupId2 = {
        parameterPath: "groupId",
        mapper: {
          constraints: {
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "groupId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      subscriptionId4 = {
        parameterPath: "subscriptionId",
        mapper: {
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters34 = {
        parameterPath: "parameters",
        mapper: DeploymentWhatIf2
      };
      resourceGroupName4 = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      template2 = {
        parameterPath: "template",
        mapper: {
          serializedName: "template",
          required: true,
          type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
          }
        }
      };
      resourceProviderNamespace2 = {
        parameterPath: "resourceProviderNamespace",
        mapper: {
          serializedName: "resourceProviderNamespace",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      properties5 = {
        parameterPath: ["options", "properties"],
        mapper: ProviderRegistrationRequest
      };
      expand4 = {
        parameterPath: ["options", "expand"],
        mapper: {
          serializedName: "$expand",
          type: {
            name: "String"
          }
        }
      };
      parameters44 = {
        parameterPath: "parameters",
        mapper: ResourcesMoveInfo2
      };
      sourceResourceGroupName2 = {
        parameterPath: "sourceResourceGroupName",
        mapper: {
          constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "sourceResourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parentResourcePath2 = {
        parameterPath: "parentResourcePath",
        mapper: {
          serializedName: "parentResourcePath",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      resourceType2 = {
        parameterPath: "resourceType",
        mapper: {
          serializedName: "resourceType",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      resourceName2 = {
        parameterPath: "resourceName",
        mapper: {
          serializedName: "resourceName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      apiVersion12 = {
        parameterPath: "apiVersion",
        mapper: {
          serializedName: "api-version",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters54 = {
        parameterPath: "parameters",
        mapper: GenericResource2
      };
      resourceId2 = {
        parameterPath: "resourceId",
        mapper: {
          serializedName: "resourceId",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      parameters63 = {
        parameterPath: "parameters",
        mapper: ResourceGroup2
      };
      forceDeletionTypes = {
        parameterPath: ["options", "forceDeletionTypes"],
        mapper: {
          serializedName: "forceDeletionTypes",
          type: {
            name: "String"
          }
        }
      };
      parameters73 = {
        parameterPath: "parameters",
        mapper: ResourceGroupPatchable2
      };
      parameters83 = {
        parameterPath: "parameters",
        mapper: ExportTemplateRequest2
      };
      resourceGroupName12 = {
        parameterPath: "resourceGroupName",
        mapper: {
          constraints: {
            MaxLength: 90,
            MinLength: 1
          },
          serializedName: "resourceGroupName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      tagName2 = {
        parameterPath: "tagName",
        mapper: {
          serializedName: "tagName",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      tagValue2 = {
        parameterPath: "tagValue",
        mapper: {
          serializedName: "tagValue",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      parameters93 = {
        parameterPath: "parameters",
        mapper: TagsResource2
      };
      parameters103 = {
        parameterPath: "parameters",
        mapper: TagsPatchResource2
      };
      operationId2 = {
        parameterPath: "operationId",
        mapper: {
          serializedName: "operationId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/operations.js
  var OperationsImpl4, serializer38, listOperationSpec31, listNextOperationSpec16;
  var init_operations10 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/operations.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      OperationsImpl4 = class {
        /**
         * Initialize a new instance of the class Operations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Lists all of the available Microsoft.Resources REST API operations.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Lists all of the available Microsoft.Resources REST API operations.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec31);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec16);
        }
      };
      __name(OperationsImpl4, "OperationsImpl");
      serializer38 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      listOperationSpec31 = {
        path: "/providers/Microsoft.Resources/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult4
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4],
        headerParameters: [accept4],
        serializer: serializer38
      };
      listNextOperationSpec16 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: OperationListResult4
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, nextLink4],
        headerParameters: [accept4],
        serializer: serializer38
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/lroImpl.js
  var LroImpl4;
  var init_lroImpl4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/lroImpl.js"() {
      init_tslib_es65();
      LroImpl4 = class {
        constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
          this.sendOperationFn = sendOperationFn;
          this.args = args;
          this.spec = spec;
          this.requestPath = requestPath;
          this.requestMethod = requestMethod;
        }
        sendInitialRequest() {
          return __awaiter4(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
          });
        }
        sendPollRequest(path) {
          return __awaiter4(this, void 0, void 0, function* () {
            const _a7 = this.spec, { requestBody } = _a7, restSpec = __rest4(_a7, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
          });
        }
      };
      __name(LroImpl4, "LroImpl");
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/deployments.js
  var DeploymentsImpl2, serializer39, deleteAtScopeOperationSpec3, checkExistenceAtScopeOperationSpec2, createOrUpdateAtScopeOperationSpec3, getAtScopeOperationSpec4, cancelAtScopeOperationSpec2, validateAtScopeOperationSpec2, exportTemplateAtScopeOperationSpec2, listAtScopeOperationSpec3, deleteAtTenantScopeOperationSpec2, checkExistenceAtTenantScopeOperationSpec2, createOrUpdateAtTenantScopeOperationSpec2, getAtTenantScopeOperationSpec4, cancelAtTenantScopeOperationSpec2, validateAtTenantScopeOperationSpec2, whatIfAtTenantScopeOperationSpec2, exportTemplateAtTenantScopeOperationSpec2, listAtTenantScopeOperationSpec4, deleteAtManagementGroupScopeOperationSpec2, checkExistenceAtManagementGroupScopeOperationSpec2, createOrUpdateAtManagementGroupScopeOperationSpec2, getAtManagementGroupScopeOperationSpec3, cancelAtManagementGroupScopeOperationSpec2, validateAtManagementGroupScopeOperationSpec2, whatIfAtManagementGroupScopeOperationSpec2, exportTemplateAtManagementGroupScopeOperationSpec2, listAtManagementGroupScopeOperationSpec3, deleteAtSubscriptionScopeOperationSpec2, checkExistenceAtSubscriptionScopeOperationSpec2, createOrUpdateAtSubscriptionScopeOperationSpec2, getAtSubscriptionScopeOperationSpec3, cancelAtSubscriptionScopeOperationSpec2, validateAtSubscriptionScopeOperationSpec2, whatIfAtSubscriptionScopeOperationSpec2, exportTemplateAtSubscriptionScopeOperationSpec2, listAtSubscriptionScopeOperationSpec3, deleteOperationSpec20, checkExistenceOperationSpec4, createOrUpdateOperationSpec12, getOperationSpec22, cancelOperationSpec2, validateOperationSpec2, whatIfOperationSpec2, exportTemplateOperationSpec3, listByResourceGroupOperationSpec5, calculateTemplateHashOperationSpec2, listAtScopeNextOperationSpec3, listAtTenantScopeNextOperationSpec4, listAtManagementGroupScopeNextOperationSpec3, listAtSubscriptionScopeNextOperationSpec3, listByResourceGroupNextOperationSpec4;
  var init_deployments3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/deployments.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      init_src7();
      init_lroImpl4();
      DeploymentsImpl2 = class {
        /**
         * Initialize a new instance of the class Deployments class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Get all the deployments at the given scope.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        listAtScope(scope3, options) {
          const iter = this.listAtScopePagingAll(scope3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtScopePagingPage(scope3, options);
            }
          };
        }
        listAtScopePagingPage(scope3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingPage_1() {
            let result = yield __await4(this._listAtScope(scope3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtScopeNext(scope3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtScopePagingPage_1"));
        }
        listAtScopePagingAll(scope3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtScopePagingPage(scope3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listAtScopePagingAll_1"));
        }
        /**
         * Get all the deployments at the tenant scope.
         * @param options The options parameters.
         */
        listAtTenantScope(options) {
          const iter = this.listAtTenantScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(options);
            }
          };
        }
        listAtTenantScopePagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await4(this._listAtTenantScope(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtTenantScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtTenantScopePagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a management group.
         * @param groupId The management group ID.
         * @param options The options parameters.
         */
        listAtManagementGroupScope(groupId3, options) {
          const iter = this.listAtManagementGroupScopePagingAll(groupId3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtManagementGroupScopePagingPage(groupId3, options);
            }
          };
        }
        listAtManagementGroupScopePagingPage(groupId3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingPage_1() {
            let result = yield __await4(this._listAtManagementGroupScope(groupId3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtManagementGroupScopeNext(groupId3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtManagementGroupScopePagingPage_1"));
        }
        listAtManagementGroupScopePagingAll(groupId3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingAll_1() {
            var e_3, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtManagementGroupScopePagingPage(groupId3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          }, "listAtManagementGroupScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a subscription.
         * @param options The options parameters.
         */
        listAtSubscriptionScope(options) {
          const iter = this.listAtSubscriptionScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtSubscriptionScopePagingPage(options);
            }
          };
        }
        listAtSubscriptionScopePagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingPage_1() {
            let result = yield __await4(this._listAtSubscriptionScope(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtSubscriptionScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtSubscriptionScopePagingPage_1"));
        }
        listAtSubscriptionScopePagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingAll_1() {
            var e_4, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtSubscriptionScopePagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }, "listAtSubscriptionScopePagingAll_1"));
        }
        /**
         * Get all the deployments for a resource group.
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByResourceGroupPagingPage(resourceGroupName5, options);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result = yield __await4(this._listByResourceGroup(resourceGroupName5, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listByResourceGroupNext(resourceGroupName5, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_5, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtScope(scope3, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { scope: scope3, deploymentName: deploymentName3, options }, deleteAtScopeOperationSpec3);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtScopeAndWait(scope3, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtScope(scope3, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, checkExistenceAtScopeOperationSpec2);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtScope(scope3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { scope: scope3, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtScopeOperationSpec3);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtScopeAndWait(scope3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtScope(scope3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, getAtScopeOperationSpec4);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, cancelAtScopeOperationSpec2);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtScope(scope3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { scope: scope3, deploymentName: deploymentName3, parameters: parameters17, options }, validateAtScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtScopeAndWait(scope3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtScope(scope3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, exportTemplateAtScopeOperationSpec2);
        }
        /**
         * Get all the deployments at the given scope.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        _listAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, listAtScopeOperationSpec3);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtTenantScope(deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, options }, deleteAtTenantScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtTenantScopeAndWait(deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtTenantScope(deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, checkExistenceAtTenantScopeOperationSpec2);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtTenantScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, getAtTenantScopeOperationSpec4);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, cancelAtTenantScopeOperationSpec2);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, validateAtTenantScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtTenantScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtTenantScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the tenant group.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtTenantScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtTenantScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, exportTemplateAtTenantScopeOperationSpec2);
        }
        /**
         * Get all the deployments at the tenant scope.
         * @param options The options parameters.
         */
        _listAtTenantScope(options) {
          return this.client.sendOperationRequest({ options }, listAtTenantScopeOperationSpec4);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtManagementGroupScope(groupId3, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, options }, deleteAtManagementGroupScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtManagementGroupScopeAndWait(groupId3, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtManagementGroupScope(groupId3, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, checkExistenceAtManagementGroupScopeOperationSpec2);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtManagementGroupScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, getAtManagementGroupScopeOperationSpec3);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, cancelAtManagementGroupScopeOperationSpec2);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, validateAtManagementGroupScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtManagementGroupScope(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { groupId: groupId3, deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtManagementGroupScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the management
         * group.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAtManagementGroupScopeAndWait(groupId3, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtManagementGroupScope(groupId3, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, exportTemplateAtManagementGroupScopeOperationSpec2);
        }
        /**
         * Get all the deployments for a management group.
         * @param groupId The management group ID.
         * @param options The options parameters.
         */
        _listAtManagementGroupScope(groupId3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, options }, listAtManagementGroupScopeOperationSpec3);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtSubscriptionScope(deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, options }, deleteAtSubscriptionScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. This is an asynchronous operation that returns a
         * status of 202 until the template deployment is successfully deleted. The Location response header
         * contains the URI that is used to obtain the status of the process. While the process is running, a
         * call to the URI in the Location header returns a status of 202. When the process finishes, the URI
         * in the Location header returns a status of 204 on success. If the asynchronous request failed, the
         * URI in the Location header returns an error-level status code.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAtSubscriptionScopeAndWait(deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteAtSubscriptionScope(deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistenceAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, checkExistenceAtSubscriptionScopeOperationSpec2);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateAtSubscriptionScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        getAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, getAtSubscriptionScopeOperationSpec3);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resources partially deployed.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancelAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, cancelAtSubscriptionScopeOperationSpec2);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, validateAtSubscriptionScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param options The options parameters.
         */
        beginWhatIfAtSubscriptionScope(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { deploymentName: deploymentName3, parameters: parameters17, options }, whatIfAtSubscriptionScopeOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the subscription.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to What If.
         * @param options The options parameters.
         */
        beginWhatIfAtSubscriptionScopeAndWait(deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIfAtSubscriptionScope(deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplateAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, exportTemplateAtSubscriptionScopeOperationSpec2);
        }
        /**
         * Get all the deployments for a subscription.
         * @param options The options parameters.
         */
        _listAtSubscriptionScope(options) {
          return this.client.sendOperationRequest({ options }, listAtSubscriptionScopeOperationSpec3);
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. Deleting a template deployment does not affect the
         * state of the resource group. This is an asynchronous operation that returns a status of 202 until
         * the template deployment is successfully deleted. The Location response header contains the URI that
         * is used to obtain the status of the process. While the process is running, a call to the URI in the
         * Location header returns a status of 202. When the process finishes, the URI in the Location header
         * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
         * header returns an error-level status code.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, deleteOperationSpec20);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * A template deployment that is currently running cannot be deleted. Deleting a template deployment
         * removes the associated deployment operations. Deleting a template deployment does not affect the
         * state of the resource group. This is an asynchronous operation that returns a status of 202 until
         * the template deployment is successfully deleted. The Location response header contains the URI that
         * is used to obtain the status of the process. While the process is running, a call to the URI in the
         * Location header returns a status of 202. When the process finishes, the URI in the Location header
         * returns a status of 204 on success. If the asynchronous request failed, the URI in the Location
         * header returns an error-level status code.
         * @param resourceGroupName The name of the resource group with the deployment to delete. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, deploymentName3, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, deploymentName3, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Checks whether the deployment exists.
         * @param resourceGroupName The name of the resource group with the deployment to check. The name is
         *                          case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, checkExistenceOperationSpec4);
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
         *                          insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdate(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, createOrUpdateOperationSpec12);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * You can provide the template and parameters directly in the request or link to JSON files.
         * @param resourceGroupName The name of the resource group to deploy the resources to. The name is case
         *                          insensitive. The resource group must already exist.
         * @param deploymentName The name of the deployment.
         * @param parameters Additional parameters supplied to the operation.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        get(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, getOperationSpec22);
        }
        /**
         * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
         * deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment
         * stops the currently running template deployment and leaves the resource group partially deployed.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        cancel(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, cancelOperationSpec2);
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidate(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, validateOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Validates whether the specified template is syntactically correct and will be accepted by Azure
         * Resource Manager..
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginValidateAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIf(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, parameters: parameters17, options }, whatIfOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Returns changes that will be made by the deployment if executed at the scope of the resource group.
         * @param resourceGroupName The name of the resource group the template will be deployed to. The name
         *                          is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param parameters Parameters to validate.
         * @param options The options parameters.
         */
        beginWhatIfAndWait(resourceGroupName5, deploymentName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginWhatIf(resourceGroupName5, deploymentName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Exports the template used for specified deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        exportTemplate(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, exportTemplateOperationSpec3);
        }
        /**
         * Get all the deployments for a resource group.
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec5);
        }
        /**
         * Calculate the hash of the given template.
         * @param template The template provided to calculate hash.
         * @param options The options parameters.
         */
        calculateTemplateHash(template3, options) {
          return this.client.sendOperationRequest({ template: template3, options }, calculateTemplateHashOperationSpec2);
        }
        /**
         * ListAtScopeNext
         * @param scope The resource scope.
         * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
         * @param options The options parameters.
         */
        _listAtScopeNext(scope3, nextLink7, options) {
          return this.client.sendOperationRequest({ scope: scope3, nextLink: nextLink7, options }, listAtScopeNextOperationSpec3);
        }
        /**
         * ListAtTenantScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec4);
        }
        /**
         * ListAtManagementGroupScopeNext
         * @param groupId The management group ID.
         * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtManagementGroupScopeNext(groupId3, nextLink7, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, nextLink: nextLink7, options }, listAtManagementGroupScopeNextOperationSpec3);
        }
        /**
         * ListAtSubscriptionScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtSubscriptionScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtSubscriptionScopeNextOperationSpec3);
        }
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The name of the resource group with the deployments to get. The name is
         *                          case insensitive.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        _listByResourceGroupNext(resourceGroupName5, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, nextLink: nextLink7, options }, listByResourceGroupNextOperationSpec4);
        }
      };
      __name(DeploymentsImpl2, "DeploymentsImpl");
      serializer39 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      deleteAtScopeOperationSpec3 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      checkExistenceAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      createOrUpdateAtScopeOperationSpec3 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          201: {
            bodyMapper: DeploymentExtended2
          },
          202: {
            bodyMapper: DeploymentExtended2
          },
          204: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      getAtScopeOperationSpec4 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      cancelAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      validateAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult2
          },
          201: {
            bodyMapper: DeploymentValidateResult2
          },
          202: {
            bodyMapper: DeploymentValidateResult2
          },
          204: {
            bodyMapper: DeploymentValidateResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      exportTemplateAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtScopeOperationSpec3 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, scope2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      deleteAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      checkExistenceAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      createOrUpdateAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          201: {
            bodyMapper: DeploymentExtended2
          },
          202: {
            bodyMapper: DeploymentExtended2
          },
          204: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters16,
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      getAtTenantScopeOperationSpec4 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      cancelAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      validateAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult2
          },
          201: {
            bodyMapper: DeploymentValidateResult2
          },
          202: {
            bodyMapper: DeploymentValidateResult2
          },
          204: {
            bodyMapper: DeploymentValidateResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters16,
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      whatIfAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult2
          },
          201: {
            bodyMapper: WhatIfOperationResult2
          },
          202: {
            bodyMapper: WhatIfOperationResult2
          },
          204: {
            bodyMapper: WhatIfOperationResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters24,
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      exportTemplateAtTenantScopeOperationSpec2 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtTenantScopeOperationSpec4 = {
        path: "/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4],
        headerParameters: [accept4],
        serializer: serializer39
      };
      deleteAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      checkExistenceAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      createOrUpdateAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          201: {
            bodyMapper: DeploymentExtended2
          },
          202: {
            bodyMapper: DeploymentExtended2
          },
          204: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters16,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      getAtManagementGroupScopeOperationSpec3 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      cancelAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      validateAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult2
          },
          201: {
            bodyMapper: DeploymentValidateResult2
          },
          202: {
            bodyMapper: DeploymentValidateResult2
          },
          204: {
            bodyMapper: DeploymentValidateResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters16,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      whatIfAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult2
          },
          201: {
            bodyMapper: WhatIfOperationResult2
          },
          202: {
            bodyMapper: WhatIfOperationResult2
          },
          204: {
            bodyMapper: WhatIfOperationResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters24,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      exportTemplateAtManagementGroupScopeOperationSpec2 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtManagementGroupScopeOperationSpec3 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, groupId2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      deleteAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      checkExistenceAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      createOrUpdateAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          201: {
            bodyMapper: DeploymentExtended2
          },
          202: {
            bodyMapper: DeploymentExtended2
          },
          204: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      getAtSubscriptionScopeOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      cancelAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      validateAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult2
          },
          201: {
            bodyMapper: DeploymentValidateResult2
          },
          202: {
            bodyMapper: DeploymentValidateResult2
          },
          204: {
            bodyMapper: DeploymentValidateResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      whatIfAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult2
          },
          201: {
            bodyMapper: WhatIfOperationResult2
          },
          202: {
            bodyMapper: WhatIfOperationResult2
          },
          204: {
            bodyMapper: WhatIfOperationResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters34,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      exportTemplateAtSubscriptionScopeOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtSubscriptionScopeOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, subscriptionId4],
        headerParameters: [accept4],
        serializer: serializer39
      };
      deleteOperationSpec20 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      checkExistenceOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      createOrUpdateOperationSpec12 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          201: {
            bodyMapper: DeploymentExtended2
          },
          202: {
            bodyMapper: DeploymentExtended2
          },
          204: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      getOperationSpec22 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentExtended2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      cancelOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
        httpMethod: "POST",
        responses: {
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      validateOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentValidateResult2
          },
          201: {
            bodyMapper: DeploymentValidateResult2
          },
          202: {
            bodyMapper: DeploymentValidateResult2
          },
          204: {
            bodyMapper: DeploymentValidateResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters15,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      whatIfOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: WhatIfOperationResult2
          },
          201: {
            bodyMapper: WhatIfOperationResult2
          },
          202: {
            bodyMapper: WhatIfOperationResult2
          },
          204: {
            bodyMapper: WhatIfOperationResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters34,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      exportTemplateOperationSpec3 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: DeploymentExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listByResourceGroupOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      calculateTemplateHashOperationSpec2 = {
        path: "/providers/Microsoft.Resources/calculateTemplateHash",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: TemplateHashResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: template2,
        queryParameters: [apiVersion4],
        urlParameters: [$host4],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer39
      };
      listAtScopeNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, nextLink4, scope2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtTenantScopeNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, nextLink4],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtManagementGroupScopeNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, nextLink4, groupId2],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listAtSubscriptionScopeNextOperationSpec3 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
      listByResourceGroupNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer39
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/providers.js
  var ProvidersImpl2, serializer40, unregisterOperationSpec2, registerAtManagementGroupScopeOperationSpec, providerPermissionsOperationSpec, registerOperationSpec2, listOperationSpec32, listAtTenantScopeOperationSpec5, getOperationSpec23, getAtTenantScopeOperationSpec5, listNextOperationSpec17, listAtTenantScopeNextOperationSpec5;
  var init_providers3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/providers.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      ProvidersImpl2 = class {
        /**
         * Initialize a new instance of the class Providers class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all resource providers for a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets all resource providers for the tenant.
         * @param options The options parameters.
         */
        listAtTenantScope(options) {
          const iter = this.listAtTenantScopePagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(options);
            }
          };
        }
        listAtTenantScopePagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await4(this._listAtTenantScope(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtTenantScopeNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtTenantScopePagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Unregisters a subscription from a resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider to unregister.
         * @param options The options parameters.
         */
        unregister(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, unregisterOperationSpec2);
        }
        /**
         * Registers a management group with a resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider to register.
         * @param groupId The management group ID.
         * @param options The options parameters.
         */
        registerAtManagementGroupScope(resourceProviderNamespace3, groupId3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, groupId: groupId3, options }, registerAtManagementGroupScopeOperationSpec);
        }
        /**
         * Get the provider permissions.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        providerPermissions(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, providerPermissionsOperationSpec);
        }
        /**
         * Registers a subscription with a resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider to register.
         * @param options The options parameters.
         */
        register(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, registerOperationSpec2);
        }
        /**
         * Gets all resource providers for a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec32);
        }
        /**
         * Gets all resource providers for the tenant.
         * @param options The options parameters.
         */
        _listAtTenantScope(options) {
          return this.client.sendOperationRequest({ options }, listAtTenantScopeOperationSpec5);
        }
        /**
         * Gets the specified resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        get(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, getOperationSpec23);
        }
        /**
         * Gets the specified resource provider at the tenant level.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        getAtTenantScope(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, getAtTenantScopeOperationSpec5);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec17);
        }
        /**
         * ListAtTenantScopeNext
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec5);
        }
      };
      __name(ProvidersImpl2, "ProvidersImpl");
      serializer40 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      unregisterOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: Provider2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4],
        serializer: serializer40
      };
      registerAtManagementGroupScopeOperationSpec = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/{resourceProviderNamespace}/register",
        httpMethod: "POST",
        responses: {
          200: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          groupId2,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4],
        serializer: serializer40
      };
      providerPermissionsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderPermissionListResult
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4],
        serializer: serializer40
      };
      registerOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: Provider2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: properties5,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer40
      };
      listOperationSpec32 = {
        path: "/subscriptions/{subscriptionId}/providers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [$host4, subscriptionId4],
        headerParameters: [accept4],
        serializer: serializer40
      };
      listAtTenantScopeOperationSpec5 = {
        path: "/providers",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [$host4],
        headerParameters: [accept4],
        serializer: serializer40
      };
      getOperationSpec23 = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Provider2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4],
        serializer: serializer40
      };
      getAtTenantScopeOperationSpec5 = {
        path: "/providers/{resourceProviderNamespace}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Provider2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [$host4, resourceProviderNamespace2],
        headerParameters: [accept4],
        serializer: serializer40
      };
      listNextOperationSpec17 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer40
      };
      listAtTenantScopeNextOperationSpec5 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [$host4, nextLink4],
        headerParameters: [accept4],
        serializer: serializer40
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/providerResourceTypes.js
  var ProviderResourceTypesImpl, serializer41, listOperationSpec33;
  var init_providerResourceTypes = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/providerResourceTypes.js"() {
      init_src6();
      init_mappers4();
      init_parameters4();
      ProviderResourceTypesImpl = class {
        /**
         * Initialize a new instance of the class ProviderResourceTypes class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * List the resource types for a specified resource provider.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param options The options parameters.
         */
        list(resourceProviderNamespace3, options) {
          return this.client.sendOperationRequest({ resourceProviderNamespace: resourceProviderNamespace3, options }, listOperationSpec33);
        }
      };
      __name(ProviderResourceTypesImpl, "ProviderResourceTypesImpl");
      serializer41 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      listOperationSpec33 = {
        path: "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ProviderResourceTypeListResult
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, expand4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceProviderNamespace2
        ],
        headerParameters: [accept4],
        serializer: serializer41
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/resources.js
  var ResourcesImpl2, serializer42, listByResourceGroupOperationSpec6, moveResourcesOperationSpec2, validateMoveResourcesOperationSpec2, listOperationSpec34, checkExistenceOperationSpec5, deleteOperationSpec21, createOrUpdateOperationSpec13, updateOperationSpec9, getOperationSpec24, checkExistenceByIdOperationSpec2, deleteByIdOperationSpec2, createOrUpdateByIdOperationSpec2, updateByIdOperationSpec2, getByIdOperationSpec2, listByResourceGroupNextOperationSpec5, listNextOperationSpec18;
  var init_resources3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/resources.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      init_src7();
      init_lroImpl4();
      ResourcesImpl2 = class {
        /**
         * Initialize a new instance of the class Resources class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Get all the resources for a resource group.
         * @param resourceGroupName The resource group with the resources to get.
         * @param options The options parameters.
         */
        listByResourceGroup(resourceGroupName5, options) {
          const iter = this.listByResourceGroupPagingAll(resourceGroupName5, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listByResourceGroupPagingPage(resourceGroupName5, options);
            }
          };
        }
        listByResourceGroupPagingPage(resourceGroupName5, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingPage_1() {
            let result = yield __await4(this._listByResourceGroup(resourceGroupName5, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listByResourceGroupNext(resourceGroupName5, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listByResourceGroupPagingPage_1"));
        }
        listByResourceGroupPagingAll(resourceGroupName5, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listByResourceGroupPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listByResourceGroupPagingPage(resourceGroupName5, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listByResourceGroupPagingAll_1"));
        }
        /**
         * Get all the resources in a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Get all the resources for a resource group.
         * @param resourceGroupName The resource group with the resources to get.
         * @param options The options parameters.
         */
        _listByResourceGroup(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, listByResourceGroupOperationSpec6);
        }
        /**
         * The resources to be moved must be in the same source resource group in the source subscription being
         * used. The target resource group may be in a different subscription. When moving resources, both the
         * source group and the target group are locked for the duration of the operation. Write and delete
         * operations are blocked on the groups until the move completes.
         * @param sourceResourceGroupName The name of the resource group from the source subscription
         *                                containing the resources to be moved.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginMoveResources(sourceResourceGroupName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { sourceResourceGroupName: sourceResourceGroupName3, parameters: parameters17, options }, moveResourcesOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * The resources to be moved must be in the same source resource group in the source subscription being
         * used. The target resource group may be in a different subscription. When moving resources, both the
         * source group and the target group are locked for the duration of the operation. Write and delete
         * operations are blocked on the groups until the move completes.
         * @param sourceResourceGroupName The name of the resource group from the source subscription
         *                                containing the resources to be moved.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginMoveResourcesAndWait(sourceResourceGroupName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginMoveResources(sourceResourceGroupName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources to
         * be moved must be in the same source resource group in the source subscription being used. The target
         * resource group may be in a different subscription. If validation succeeds, it returns HTTP response
         * code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an
         * error message. Retrieve the URL in the Location header value to check the result of the long-running
         * operation.
         * @param sourceResourceGroupName The name of the resource group from the source subscription
         *                                containing the resources to be validated for move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginValidateMoveResources(sourceResourceGroupName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { sourceResourceGroupName: sourceResourceGroupName3, parameters: parameters17, options }, validateMoveResourcesOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * This operation checks whether the specified resources can be moved to the target. The resources to
         * be moved must be in the same source resource group in the source subscription being used. The target
         * resource group may be in a different subscription. If validation succeeds, it returns HTTP response
         * code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an
         * error message. Retrieve the URL in the Location header value to check the result of the long-running
         * operation.
         * @param sourceResourceGroupName The name of the resource group from the source subscription
         *                                containing the resources to be validated for move.
         * @param parameters Parameters for moving resources.
         * @param options The options parameters.
         */
        beginValidateMoveResourcesAndWait(sourceResourceGroupName3, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginValidateMoveResources(sourceResourceGroupName3, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Get all the resources in a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec34);
        }
        /**
         * Checks whether a resource exists.
         * @param resourceGroupName The name of the resource group containing the resource to check. The name
         *                          is case insensitive.
         * @param resourceProviderNamespace The resource provider of the resource to check.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to check whether it exists.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            resourceProviderNamespace: resourceProviderNamespace3,
            parentResourcePath: parentResourcePath3,
            resourceType: resourceType3,
            resourceName: resourceName3,
            apiVersion: apiVersion7,
            options
          }, checkExistenceOperationSpec5);
        }
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete. The
         *                          name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              options
            }, deleteOperationSpec21);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Deletes a resource.
         * @param resourceGroupName The name of the resource group that contains the resource to delete. The
         *                          name is case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type.
         * @param resourceName The name of the resource to delete.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param options The options parameters.
         */
        beginCreateOrUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              parameters: parameters17,
              options
            }, createOrUpdateOperationSpec13);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Creates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to create.
         * @param resourceName The name of the resource to create.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for creating or updating the resource.
         * @param options The options parameters.
         */
        beginCreateOrUpdateAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param options The options parameters.
         */
        beginUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, {
              resourceGroupName: resourceGroupName5,
              resourceProviderNamespace: resourceProviderNamespace3,
              parentResourcePath: parentResourcePath3,
              resourceType: resourceType3,
              resourceName: resourceName3,
              apiVersion: apiVersion7,
              parameters: parameters17,
              options
            }, updateOperationSpec9);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Updates a resource.
         * @param resourceGroupName The name of the resource group for the resource. The name is case
         *                          insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource to update.
         * @param resourceName The name of the resource to update.
         * @param apiVersion The API version to use for the operation.
         * @param parameters Parameters for updating the resource.
         * @param options The options parameters.
         */
        beginUpdateAndWait(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource.
         * @param resourceGroupName The name of the resource group containing the resource to get. The name is
         *                          case insensitive.
         * @param resourceProviderNamespace The namespace of the resource provider.
         * @param parentResourcePath The parent resource identity.
         * @param resourceType The resource type of the resource.
         * @param resourceName The name of the resource to get.
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        get(resourceGroupName5, resourceProviderNamespace3, parentResourcePath3, resourceType3, resourceName3, apiVersion7, options) {
          return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName5,
            resourceProviderNamespace: resourceProviderNamespace3,
            parentResourcePath: parentResourcePath3,
            resourceType: resourceType3,
            resourceName: resourceName3,
            apiVersion: apiVersion7,
            options
          }, getOperationSpec24);
        }
        /**
         * Checks by ID whether a resource exists.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        checkExistenceById(resourceId3, apiVersion7, options) {
          return this.client.sendOperationRequest({ resourceId: resourceId3, apiVersion: apiVersion7, options }, checkExistenceByIdOperationSpec2);
        }
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteById(resourceId3, apiVersion7, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, options }, deleteByIdOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Deletes a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        beginDeleteByIdAndWait(resourceId3, apiVersion7, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteById(resourceId3, apiVersion7, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param options The options parameters.
         */
        beginCreateOrUpdateById(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, parameters: parameters17, options }, createOrUpdateByIdOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Create a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Create or update resource parameters.
         * @param options The options parameters.
         */
        beginCreateOrUpdateByIdAndWait(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateById(resourceId3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param options The options parameters.
         */
        beginUpdateById(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceId: resourceId3, apiVersion: apiVersion7, parameters: parameters17, options }, updateByIdOperationSpec2);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * Updates a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param parameters Update resource parameters.
         * @param options The options parameters.
         */
        beginUpdateByIdAndWait(resourceId3, apiVersion7, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateById(resourceId3, apiVersion7, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource by ID.
         * @param resourceId The fully qualified ID of the resource, including the resource name and resource
         *                   type. Use the format,
         *                   /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
         * @param apiVersion The API version to use for the operation.
         * @param options The options parameters.
         */
        getById(resourceId3, apiVersion7, options) {
          return this.client.sendOperationRequest({ resourceId: resourceId3, apiVersion: apiVersion7, options }, getByIdOperationSpec2);
        }
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The resource group with the resources to get.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        _listByResourceGroupNext(resourceGroupName5, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, nextLink: nextLink7, options }, listByResourceGroupNextOperationSpec5);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec18);
        }
      };
      __name(ResourcesImpl2, "ResourcesImpl");
      serializer42 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      listByResourceGroupOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [
          apiVersion4,
          filter3,
          top2,
          expand4
        ],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
      moveResourcesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters44,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          sourceResourceGroupName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      validateMoveResourcesOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources",
        httpMethod: "POST",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters44,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          sourceResourceGroupName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      listOperationSpec34 = {
        path: "/subscriptions/{subscriptionId}/resources",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [
          apiVersion4,
          filter3,
          top2,
          expand4
        ],
        urlParameters: [$host4, subscriptionId4],
        headerParameters: [accept4],
        serializer: serializer42
      };
      checkExistenceOperationSpec5 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4,
          resourceProviderNamespace2,
          parentResourcePath2,
          resourceType2,
          resourceName2
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
      deleteOperationSpec21 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4,
          resourceProviderNamespace2,
          parentResourcePath2,
          resourceType2,
          resourceName2
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
      createOrUpdateOperationSpec13 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          201: {
            bodyMapper: GenericResource2
          },
          202: {
            bodyMapper: GenericResource2
          },
          204: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters54,
        queryParameters: [apiVersion12],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4,
          resourceProviderNamespace2,
          parentResourcePath2,
          resourceType2,
          resourceName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      updateOperationSpec9 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          201: {
            bodyMapper: GenericResource2
          },
          202: {
            bodyMapper: GenericResource2
          },
          204: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters54,
        queryParameters: [apiVersion12],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4,
          resourceProviderNamespace2,
          parentResourcePath2,
          resourceType2,
          resourceName2
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      getOperationSpec24 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4,
          resourceProviderNamespace2,
          parentResourcePath2,
          resourceType2,
          resourceName2
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
      checkExistenceByIdOperationSpec2 = {
        path: "/{resourceId}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [$host4, resourceId2],
        headerParameters: [accept4],
        serializer: serializer42
      };
      deleteByIdOperationSpec2 = {
        path: "/{resourceId}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [$host4, resourceId2],
        headerParameters: [accept4],
        serializer: serializer42
      };
      createOrUpdateByIdOperationSpec2 = {
        path: "/{resourceId}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          201: {
            bodyMapper: GenericResource2
          },
          202: {
            bodyMapper: GenericResource2
          },
          204: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters54,
        queryParameters: [apiVersion12],
        urlParameters: [$host4, resourceId2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      updateByIdOperationSpec2 = {
        path: "/{resourceId}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          201: {
            bodyMapper: GenericResource2
          },
          202: {
            bodyMapper: GenericResource2
          },
          204: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters54,
        queryParameters: [apiVersion12],
        urlParameters: [$host4, resourceId2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer42
      };
      getByIdOperationSpec2 = {
        path: "/{resourceId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: GenericResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion12],
        urlParameters: [$host4, resourceId2],
        headerParameters: [accept4],
        serializer: serializer42
      };
      listByResourceGroupNextOperationSpec5 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [
          apiVersion4,
          filter3,
          top2,
          expand4
        ],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
      listNextOperationSpec18 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [
          apiVersion4,
          filter3,
          top2,
          expand4
        ],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer42
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/resourceGroups.js
  var ResourceGroupsImpl2, serializer43, checkExistenceOperationSpec6, createOrUpdateOperationSpec14, deleteOperationSpec22, getOperationSpec25, updateOperationSpec10, exportTemplateOperationSpec4, listOperationSpec35, listNextOperationSpec19;
  var init_resourceGroups3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/resourceGroups.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      init_src7();
      init_lroImpl4();
      ResourceGroupsImpl2 = class {
        /**
         * Initialize a new instance of the class ResourceGroups class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all the resource groups for a subscription.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Checks whether a resource group exists.
         * @param resourceGroupName The name of the resource group to check. The name is case insensitive.
         * @param options The options parameters.
         */
        checkExistence(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, checkExistenceOperationSpec6);
        }
        /**
         * Creates or updates a resource group.
         * @param resourceGroupName The name of the resource group to create or update. Can include
         *                          alphanumeric, underscore, parentheses, hyphen, period (except at end), and Unicode characters that
         *                          match the allowed characters.
         * @param parameters Parameters supplied to the create or update a resource group.
         * @param options The options parameters.
         */
        createOrUpdate(resourceGroupName5, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, parameters: parameters17, options }, createOrUpdateOperationSpec14);
        }
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
         * deletes all of its template deployments and currently stored operations.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param options The options parameters.
         */
        beginDelete(resourceGroupName5, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, options }, deleteOperationSpec22);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
          });
        }
        /**
         * When you delete a resource group, all of its resources are also deleted. Deleting a resource group
         * deletes all of its template deployments and currently stored operations.
         * @param resourceGroupName The name of the resource group to delete. The name is case insensitive.
         * @param options The options parameters.
         */
        beginDeleteAndWait(resourceGroupName5, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName5, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets a resource group.
         * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
         * @param options The options parameters.
         */
        get(resourceGroupName5, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, options }, getOperationSpec25);
        }
        /**
         * Resource groups can be updated through a simple PATCH operation to a group address. The format of
         * the request is the same as that for creating a resource group. If a field is unspecified, the
         * current value is retained.
         * @param resourceGroupName The name of the resource group to update. The name is case insensitive.
         * @param parameters Parameters supplied to update a resource group.
         * @param options The options parameters.
         */
        update(resourceGroupName5, parameters17, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, parameters: parameters17, options }, updateOperationSpec10);
        }
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param options The options parameters.
         */
        beginExportTemplate(resourceGroupName5, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              return this.client.sendOperationRequest(args, spec);
            }), "directSendOperation");
            const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter4(this, void 0, void 0, function* () {
              var _a7;
              let currentRawResponse = void 0;
              const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
              const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
              }, "callback");
              const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
              const flatResponse = yield directSendOperation(updatedArgs, spec);
              return {
                flatResponse,
                rawResponse: {
                  statusCode: currentRawResponse.status,
                  body: currentRawResponse.parsedBody,
                  headers: currentRawResponse.headers.toJSON()
                }
              };
            }), "sendOperation");
            const lro = new LroImpl4(sendOperation, { resourceGroupName: resourceGroupName5, parameters: parameters17, options }, exportTemplateOperationSpec4);
            return new LroEngine(lro, {
              resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
              intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
              lroResourceLocationConfig: "location"
            });
          });
        }
        /**
         * Captures the specified resource group as a template.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param parameters Parameters for exporting the template.
         * @param options The options parameters.
         */
        beginExportTemplateAndWait(resourceGroupName5, parameters17, options) {
          return __awaiter4(this, void 0, void 0, function* () {
            const poller = yield this.beginExportTemplate(resourceGroupName5, parameters17, options);
            return poller.pollUntilDone();
          });
        }
        /**
         * Gets all the resource groups for a subscription.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec35);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec19);
        }
      };
      __name(ResourceGroupsImpl2, "ResourceGroupsImpl");
      serializer43 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      checkExistenceOperationSpec6 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "HEAD",
        responses: {
          204: {},
          404: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer43
      };
      createOrUpdateOperationSpec14 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: ResourceGroup2
          },
          201: {
            bodyMapper: ResourceGroup2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters63,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer43
      };
      deleteOperationSpec22 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          201: {},
          202: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, forceDeletionTypes],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer43
      };
      getOperationSpec25 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroup2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer43
      };
      updateOperationSpec10 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: ResourceGroup2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters73,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer43
      };
      exportTemplateOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: ResourceGroupExportResult2
          },
          201: {
            bodyMapper: ResourceGroupExportResult2
          },
          202: {
            bodyMapper: ResourceGroupExportResult2
          },
          204: {
            bodyMapper: ResourceGroupExportResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters83,
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          resourceGroupName12
        ],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer43
      };
      listOperationSpec35 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroupListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [$host4, subscriptionId4],
        headerParameters: [accept4],
        serializer: serializer43
      };
      listNextOperationSpec19 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: ResourceGroupListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, filter3, top2],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer43
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/tagsOperations.js
  var TagsOperationsImpl2, serializer44, deleteValueOperationSpec2, createOrUpdateValueOperationSpec2, createOrUpdateOperationSpec15, deleteOperationSpec23, listOperationSpec36, createOrUpdateAtScopeOperationSpec4, updateAtScopeOperationSpec2, getAtScopeOperationSpec5, deleteAtScopeOperationSpec4, listNextOperationSpec20;
  var init_tagsOperations3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/tagsOperations.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      TagsOperationsImpl2 = class {
        /**
         * Initialize a new instance of the class TagsOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * This operation performs a union of predefined tags, resource tags, resource group tags and
         * subscription tags, and returns a summary of usage for each tag name and value under the given
         * subscription. In case of a large number of tags, this operation may return a previously cached
         * result.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * This operation allows deleting a value from the list of predefined values for an existing predefined
         * tag name. The value being deleted must not be in use as a tag value for the given tag name for any
         * resource.
         * @param tagName The name of the tag.
         * @param tagValue The value of the tag to delete.
         * @param options The options parameters.
         */
        deleteValue(tagName3, tagValue3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, tagValue: tagValue3, options }, deleteValueOperationSpec2);
        }
        /**
         * This operation allows adding a value to the list of predefined values for an existing predefined tag
         * name. A tag value can have a maximum of 256 characters.
         * @param tagName The name of the tag.
         * @param tagValue The value of the tag to create.
         * @param options The options parameters.
         */
        createOrUpdateValue(tagName3, tagValue3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, tagValue: tagValue3, options }, createOrUpdateValueOperationSpec2);
        }
        /**
         * This operation allows adding a name to the list of predefined tag names for the given subscription.
         * A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the
         * following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
         * @param tagName The name of the tag to create.
         * @param options The options parameters.
         */
        createOrUpdate(tagName3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, options }, createOrUpdateOperationSpec15);
        }
        /**
         * This operation allows deleting a name from the list of predefined tag names for the given
         * subscription. The name being deleted must not be in use as a tag name for any resource. All
         * predefined values for the given name must have already been deleted.
         * @param tagName The name of the tag.
         * @param options The options parameters.
         */
        delete(tagName3, options) {
          return this.client.sendOperationRequest({ tagName: tagName3, options }, deleteOperationSpec23);
        }
        /**
         * This operation performs a union of predefined tags, resource tags, resource group tags and
         * subscription tags, and returns a summary of usage for each tag name and value under the given
         * subscription. In case of a large number of tags, this operation may return a previously cached
         * result.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec36);
        }
        /**
         * This operation allows adding or replacing the entire set of tags on the specified resource or
         * subscription. The specified entity can have a maximum of 50 tags.
         * @param scope The resource scope.
         * @param parameters Wrapper resource for tags API requests and responses.
         * @param options The options parameters.
         */
        createOrUpdateAtScope(scope3, parameters17, options) {
          return this.client.sendOperationRequest({ scope: scope3, parameters: parameters17, options }, createOrUpdateAtScopeOperationSpec4);
        }
        /**
         * This operation allows replacing, merging or selectively deleting tags on the specified resource or
         * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The
         * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows
         * adding tags with new names and updating the values of tags with existing names. The 'delete' option
         * allows selectively deleting tags based on given names or name/value pairs.
         * @param scope The resource scope.
         * @param parameters Wrapper resource for tags patch API request only.
         * @param options The options parameters.
         */
        updateAtScope(scope3, parameters17, options) {
          return this.client.sendOperationRequest({ scope: scope3, parameters: parameters17, options }, updateAtScopeOperationSpec2);
        }
        /**
         * Gets the entire set of tags on a resource or subscription.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        getAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, getAtScopeOperationSpec5);
        }
        /**
         * Deletes the entire set of tags on a resource or subscription.
         * @param scope The resource scope.
         * @param options The options parameters.
         */
        deleteAtScope(scope3, options) {
          return this.client.sendOperationRequest({ scope: scope3, options }, deleteAtScopeOperationSpec4);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec20);
        }
      };
      __name(TagsOperationsImpl2, "TagsOperationsImpl");
      serializer44 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      deleteValueOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          tagName2,
          tagValue2
        ],
        headerParameters: [accept4],
        serializer: serializer44
      };
      createOrUpdateValueOperationSpec2 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagValue2
          },
          201: {
            bodyMapper: TagValue2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          tagName2,
          tagValue2
        ],
        headerParameters: [accept4],
        serializer: serializer44
      };
      createOrUpdateOperationSpec15 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagDetails2
          },
          201: {
            bodyMapper: TagDetails2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          tagName2
        ],
        headerParameters: [accept4],
        serializer: serializer44
      };
      deleteOperationSpec23 = {
        path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
        httpMethod: "DELETE",
        responses: {
          200: {},
          204: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          subscriptionId4,
          tagName2
        ],
        headerParameters: [accept4],
        serializer: serializer44
      };
      listOperationSpec36 = {
        path: "/subscriptions/{subscriptionId}/tagNames",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, subscriptionId4],
        headerParameters: [accept4],
        serializer: serializer44
      };
      createOrUpdateAtScopeOperationSpec4 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "PUT",
        responses: {
          200: {
            bodyMapper: TagsResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters93,
        queryParameters: [apiVersion4],
        urlParameters: [$host4, scope2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer44
      };
      updateAtScopeOperationSpec2 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "PATCH",
        responses: {
          200: {
            bodyMapper: TagsResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        requestBody: parameters103,
        queryParameters: [apiVersion4],
        urlParameters: [$host4, scope2],
        headerParameters: [accept4, contentType4],
        mediaType: "json",
        serializer: serializer44
      };
      getAtScopeOperationSpec5 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsResource2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, scope2],
        headerParameters: [accept4],
        serializer: serializer44
      };
      deleteAtScopeOperationSpec4 = {
        path: "/{scope}/providers/Microsoft.Resources/tags/default",
        httpMethod: "DELETE",
        responses: {
          200: {},
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [$host4, scope2],
        headerParameters: [accept4],
        serializer: serializer44
      };
      listNextOperationSpec20 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TagsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          nextLink4,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer44
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/deploymentOperations.js
  var DeploymentOperationsImpl2, serializer45, getAtScopeOperationSpec6, listAtScopeOperationSpec4, getAtTenantScopeOperationSpec6, listAtTenantScopeOperationSpec6, getAtManagementGroupScopeOperationSpec4, listAtManagementGroupScopeOperationSpec4, getAtSubscriptionScopeOperationSpec4, listAtSubscriptionScopeOperationSpec4, getOperationSpec26, listOperationSpec37, listAtScopeNextOperationSpec4, listAtTenantScopeNextOperationSpec6, listAtManagementGroupScopeNextOperationSpec4, listAtSubscriptionScopeNextOperationSpec4, listNextOperationSpec21;
  var init_deploymentOperations3 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/deploymentOperations.js"() {
      init_tslib_es65();
      init_src6();
      init_mappers4();
      init_parameters4();
      DeploymentOperationsImpl2 = class {
        /**
         * Initialize a new instance of the class DeploymentOperations class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtScope(scope3, deploymentName3, options) {
          const iter = this.listAtScopePagingAll(scope3, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtScopePagingPage(scope3, deploymentName3, options);
            }
          };
        }
        listAtScopePagingPage(scope3, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingPage_1() {
            let result = yield __await4(this._listAtScope(scope3, deploymentName3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtScopeNext(scope3, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtScopePagingPage_1"));
        }
        listAtScopePagingAll(scope3, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtScopePagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtScopePagingPage(scope3, deploymentName3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listAtScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtTenantScope(deploymentName3, options) {
          const iter = this.listAtTenantScopePagingAll(deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtTenantScopePagingPage(deploymentName3, options);
            }
          };
        }
        listAtTenantScopePagingPage(deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingPage_1() {
            let result = yield __await4(this._listAtTenantScope(deploymentName3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtTenantScopeNext(deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtTenantScopePagingPage_1"));
        }
        listAtTenantScopePagingAll(deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtTenantScopePagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtTenantScopePagingPage(deploymentName3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listAtTenantScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtManagementGroupScope(groupId3, deploymentName3, options) {
          const iter = this.listAtManagementGroupScopePagingAll(groupId3, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options);
            }
          };
        }
        listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingPage_1() {
            let result = yield __await4(this._listAtManagementGroupScope(groupId3, deploymentName3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtManagementGroupScopeNext(groupId3, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtManagementGroupScopePagingPage_1"));
        }
        listAtManagementGroupScopePagingAll(groupId3, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtManagementGroupScopePagingAll_1() {
            var e_3, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtManagementGroupScopePagingPage(groupId3, deploymentName3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          }, "listAtManagementGroupScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        listAtSubscriptionScope(deploymentName3, options) {
          const iter = this.listAtSubscriptionScopePagingAll(deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listAtSubscriptionScopePagingPage(deploymentName3, options);
            }
          };
        }
        listAtSubscriptionScopePagingPage(deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingPage_1() {
            let result = yield __await4(this._listAtSubscriptionScope(deploymentName3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listAtSubscriptionScopeNext(deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listAtSubscriptionScopePagingPage_1"));
        }
        listAtSubscriptionScopePagingAll(deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listAtSubscriptionScopePagingAll_1() {
            var e_4, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listAtSubscriptionScopePagingPage(deploymentName3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }, "listAtSubscriptionScopePagingAll_1"));
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        list(resourceGroupName5, deploymentName3, options) {
          const iter = this.listPagingAll(resourceGroupName5, deploymentName3, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(resourceGroupName5, deploymentName3, options);
            }
          };
        }
        listPagingPage(resourceGroupName5, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await4(this._list(resourceGroupName5, deploymentName3, options));
            yield yield __await4(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await4(this._listNext(resourceGroupName5, deploymentName3, continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await4(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(resourceGroupName5, deploymentName3, options) {
          return __asyncGenerator4(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_5, _a7;
            try {
              for (var _b2 = __asyncValues4(this.listPagingPage(resourceGroupName5, deploymentName3, options)), _c2; _c2 = yield __await4(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await4(yield* __asyncDelegator4(__asyncValues4(page)));
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await4(_a7.call(_b2));
              } finally {
                if (e_5)
                  throw e_5.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets a deployments operation.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtScope(scope3, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, operationId: operationId3, options }, getAtScopeOperationSpec6);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtScope(scope3, deploymentName3, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, options }, listAtScopeOperationSpec4);
        }
        /**
         * Gets a deployments operation.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtTenantScope(deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, operationId: operationId3, options }, getAtTenantScopeOperationSpec6);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtTenantScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, listAtTenantScopeOperationSpec6);
        }
        /**
         * Gets a deployments operation.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtManagementGroupScope(groupId3, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, operationId: operationId3, options }, getAtManagementGroupScopeOperationSpec4);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtManagementGroupScope(groupId3, deploymentName3, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, options }, listAtManagementGroupScopeOperationSpec4);
        }
        /**
         * Gets a deployments operation.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        getAtSubscriptionScope(deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, operationId: operationId3, options }, getAtSubscriptionScopeOperationSpec4);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _listAtSubscriptionScope(deploymentName3, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, options }, listAtSubscriptionScopeOperationSpec4);
        }
        /**
         * Gets a deployments operation.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param operationId The ID of the operation to get.
         * @param options The options parameters.
         */
        get(resourceGroupName5, deploymentName3, operationId3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, operationId: operationId3, options }, getOperationSpec26);
        }
        /**
         * Gets all deployments operations for a deployment.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param options The options parameters.
         */
        _list(resourceGroupName5, deploymentName3, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, options }, listOperationSpec37);
        }
        /**
         * ListAtScopeNext
         * @param scope The resource scope.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtScope method.
         * @param options The options parameters.
         */
        _listAtScopeNext(scope3, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ scope: scope3, deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtScopeNextOperationSpec4);
        }
        /**
         * ListAtTenantScopeNext
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtTenantScope method.
         * @param options The options parameters.
         */
        _listAtTenantScopeNext(deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtTenantScopeNextOperationSpec6);
        }
        /**
         * ListAtManagementGroupScopeNext
         * @param groupId The management group ID.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtManagementGroupScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtManagementGroupScopeNext(groupId3, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ groupId: groupId3, deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtManagementGroupScopeNextOperationSpec4);
        }
        /**
         * ListAtSubscriptionScopeNext
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the ListAtSubscriptionScope
         *                 method.
         * @param options The options parameters.
         */
        _listAtSubscriptionScopeNext(deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ deploymentName: deploymentName3, nextLink: nextLink7, options }, listAtSubscriptionScopeNextOperationSpec4);
        }
        /**
         * ListNext
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param deploymentName The name of the deployment.
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(resourceGroupName5, deploymentName3, nextLink7, options) {
          return this.client.sendOperationRequest({ resourceGroupName: resourceGroupName5, deploymentName: deploymentName3, nextLink: nextLink7, options }, listNextOperationSpec21);
        }
      };
      __name(DeploymentOperationsImpl2, "DeploymentOperationsImpl");
      serializer45 = createSerializer(
        mappers_exports4,
        /* isXml */
        false
      );
      getAtScopeOperationSpec6 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2,
          operationId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtScopeOperationSpec4 = {
        path: "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      getAtTenantScopeOperationSpec6 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          operationId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtTenantScopeOperationSpec6 = {
        path: "/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [$host4, deploymentName2],
        headerParameters: [accept4],
        serializer: serializer45
      };
      getAtManagementGroupScopeOperationSpec4 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2,
          operationId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtManagementGroupScopeOperationSpec4 = {
        path: "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      getAtSubscriptionScopeOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          operationId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtSubscriptionScopeOperationSpec4 = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      getOperationSpec26 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations/{operationId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperation2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4,
          operationId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listOperationSpec37 = {
        path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/deployments/{deploymentName}/operations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtScopeNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          nextLink4,
          scope2,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtTenantScopeNextOperationSpec6 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          nextLink4,
          deploymentName2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtManagementGroupScopeNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          nextLink4,
          deploymentName2,
          groupId2
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listAtSubscriptionScopeNextOperationSpec4 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          nextLink4,
          deploymentName2,
          subscriptionId4
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
      listNextOperationSpec21 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: DeploymentOperationsListResult2
          },
          default: {
            bodyMapper: CloudError3
          }
        },
        queryParameters: [apiVersion4, top2],
        urlParameters: [
          $host4,
          nextLink4,
          deploymentName2,
          subscriptionId4,
          resourceGroupName4
        ],
        headerParameters: [accept4],
        serializer: serializer45
      };
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operations/index.js
  var init_operations11 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operations/index.js"() {
      init_operations10();
      init_deployments3();
      init_providers3();
      init_providerResourceTypes();
      init_resources3();
      init_resourceGroups3();
      init_tagsOperations3();
      init_deploymentOperations3();
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/resourceManagementClient.js
  var ResourceManagementClient2;
  var init_resourceManagementClient2 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/resourceManagementClient.js"() {
      init_src6();
      init_operations11();
      ResourceManagementClient2 = class extends ServiceClient {
        /**
         * Initializes a new instance of the ResourceManagementClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The Microsoft Azure subscription ID.
         * @param options The parameter options
         */
        constructor(credentials, subscriptionId7, options) {
          if (credentials === void 0) {
            throw new Error("'credentials' cannot be null");
          }
          if (subscriptionId7 === void 0) {
            throw new Error("'subscriptionId' cannot be null");
          }
          if (!options) {
            options = {};
          }
          const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
          };
          const packageDetails = `azsdk-js-arm-resources/5.0.0`;
          const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
          if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
          }
          const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
            userAgentPrefix
          }, baseUri: options.endpoint || "https://management.azure.com" });
          super(optionsWithDefaults);
          this.subscriptionId = subscriptionId7;
          this.$host = options.$host || "https://management.azure.com";
          this.apiVersion = options.apiVersion || "2021-04-01";
          this.operations = new OperationsImpl4(this);
          this.deployments = new DeploymentsImpl2(this);
          this.providers = new ProvidersImpl2(this);
          this.providerResourceTypes = new ProviderResourceTypesImpl(this);
          this.resources = new ResourcesImpl2(this);
          this.resourceGroups = new ResourceGroupsImpl2(this);
          this.tagsOperations = new TagsOperationsImpl2(this);
          this.deploymentOperations = new DeploymentOperationsImpl2(this);
        }
      };
      __name(ResourceManagementClient2, "ResourceManagementClient");
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/operations.js
  var init_operations12 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/operations.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/deployments.js
  var init_deployments4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/deployments.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/providers.js
  var init_providers4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/providers.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/providerResourceTypes.js
  var init_providerResourceTypes2 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/providerResourceTypes.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/resources.js
  var init_resources4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/resources.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/resourceGroups.js
  var init_resourceGroups4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/resourceGroups.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/tagsOperations.js
  var init_tagsOperations4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/tagsOperations.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/deploymentOperations.js
  var init_deploymentOperations4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/deploymentOperations.js"() {
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/index.js
  var init_operationsInterfaces4 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/operationsInterfaces/index.js"() {
      init_operations12();
      init_deployments4();
      init_providers4();
      init_providerResourceTypes2();
      init_resources4();
      init_resourceGroups4();
      init_tagsOperations4();
      init_deploymentOperations4();
    }
  });

  // node_modules/@azure/arm-resources/dist-esm/src/index.js
  var src_exports6 = {};
  __export(src_exports6, {
    KnownAliasPathAttributes: () => KnownAliasPathAttributes,
    KnownAliasPathTokenType: () => KnownAliasPathTokenType,
    KnownExpressionEvaluationOptionsScopeType: () => KnownExpressionEvaluationOptionsScopeType,
    KnownExtendedLocationType: () => KnownExtendedLocationType,
    KnownProviderAuthorizationConsentState: () => KnownProviderAuthorizationConsentState,
    KnownProvisioningState: () => KnownProvisioningState,
    KnownTagsPatchOperation: () => KnownTagsPatchOperation2,
    ResourceManagementClient: () => ResourceManagementClient2
  });
  var init_src11 = __esm({
    "node_modules/@azure/arm-resources/dist-esm/src/index.js"() {
      init_models5();
      init_resourceManagementClient2();
      init_operationsInterfaces4();
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/index.js
  var KnownRegionType, KnownRegionCategory, KnownResourceNameStatus;
  var init_models6 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/index.js"() {
      (function(KnownRegionType2) {
        KnownRegionType2["Physical"] = "Physical";
        KnownRegionType2["Logical"] = "Logical";
      })(KnownRegionType || (KnownRegionType = {}));
      (function(KnownRegionCategory2) {
        KnownRegionCategory2["Recommended"] = "Recommended";
        KnownRegionCategory2["Extended"] = "Extended";
        KnownRegionCategory2["Other"] = "Other";
      })(KnownRegionCategory || (KnownRegionCategory = {}));
      (function(KnownResourceNameStatus2) {
        KnownResourceNameStatus2["Allowed"] = "Allowed";
        KnownResourceNameStatus2["Reserved"] = "Reserved";
      })(KnownResourceNameStatus || (KnownResourceNameStatus = {}));
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/node_modules/tslib/tslib.es6.js
  function __values6(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __await5(v) {
    return this instanceof __await5 ? (this.v = v, this) : new __await5(v);
  }
  function __asyncGenerator5(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await5 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  function __asyncDelegator5(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await5(o[n](v)), done: n === "return" } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  function __asyncValues5(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  var init_tslib_es66 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/node_modules/tslib/tslib.es6.js"() {
      __name(__values6, "__values");
      __name(__await5, "__await");
      __name(__asyncGenerator5, "__asyncGenerator");
      __name(__asyncDelegator5, "__asyncDelegator");
      __name(__asyncValues5, "__asyncValues");
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/mappers.js
  var mappers_exports5 = {};
  __export(mappers_exports5, {
    CheckResourceNameResult: () => CheckResourceNameResult,
    CloudError: () => CloudError4,
    ErrorAdditionalInfo: () => ErrorAdditionalInfo3,
    ErrorResponse: () => ErrorResponse5,
    Location: () => Location,
    LocationListResult: () => LocationListResult,
    LocationMetadata: () => LocationMetadata,
    ManagedByTenant: () => ManagedByTenant,
    Operation: () => Operation5,
    OperationDisplay: () => OperationDisplay5,
    OperationListResult: () => OperationListResult5,
    PairedRegion: () => PairedRegion,
    ResourceName: () => ResourceName,
    Subscription: () => Subscription,
    SubscriptionListResult: () => SubscriptionListResult,
    SubscriptionPolicies: () => SubscriptionPolicies,
    TenantIdDescription: () => TenantIdDescription,
    TenantListResult: () => TenantListResult
  });
  var LocationListResult, Location, LocationMetadata, PairedRegion, CloudError4, ErrorResponse5, ErrorAdditionalInfo3, Subscription, SubscriptionPolicies, ManagedByTenant, SubscriptionListResult, TenantListResult, TenantIdDescription, ResourceName, CheckResourceNameResult, Operation5, OperationDisplay5, OperationListResult5;
  var init_mappers5 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/mappers.js"() {
      LocationListResult = {
        type: {
          name: "Composite",
          className: "LocationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Location"
                  }
                }
              }
            }
          }
        }
      };
      Location = {
        type: {
          name: "Composite",
          className: "Location",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            subscriptionId: {
              serializedName: "subscriptionId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Region", "EdgeZone"]
              }
            },
            displayName: {
              serializedName: "displayName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            regionalDisplayName: {
              serializedName: "regionalDisplayName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            metadata: {
              serializedName: "metadata",
              type: {
                name: "Composite",
                className: "LocationMetadata"
              }
            }
          }
        }
      };
      LocationMetadata = {
        type: {
          name: "Composite",
          className: "LocationMetadata",
          modelProperties: {
            regionType: {
              serializedName: "regionType",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            regionCategory: {
              serializedName: "regionCategory",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            geographyGroup: {
              serializedName: "geographyGroup",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            longitude: {
              serializedName: "longitude",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            latitude: {
              serializedName: "latitude",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            physicalLocation: {
              serializedName: "physicalLocation",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            pairedRegion: {
              serializedName: "pairedRegion",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "PairedRegion"
                  }
                }
              }
            },
            homeLocation: {
              serializedName: "homeLocation",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      PairedRegion = {
        type: {
          name: "Composite",
          className: "PairedRegion",
          modelProperties: {
            name: {
              serializedName: "name",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            subscriptionId: {
              serializedName: "subscriptionId",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CloudError4 = {
        type: {
          name: "Composite",
          className: "CloudError",
          modelProperties: {
            error: {
              serializedName: "error",
              type: {
                name: "Composite",
                className: "ErrorResponse"
              }
            }
          }
        }
      };
      ErrorResponse5 = {
        type: {
          name: "Composite",
          className: "ErrorResponse",
          modelProperties: {
            code: {
              serializedName: "code",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            message: {
              serializedName: "message",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            target: {
              serializedName: "target",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            details: {
              serializedName: "details",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorResponse"
                  }
                }
              }
            },
            additionalInfo: {
              serializedName: "additionalInfo",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ErrorAdditionalInfo"
                  }
                }
              }
            }
          }
        }
      };
      ErrorAdditionalInfo3 = {
        type: {
          name: "Composite",
          className: "ErrorAdditionalInfo",
          modelProperties: {
            type: {
              serializedName: "type",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            info: {
              serializedName: "info",
              readOnly: true,
              type: {
                name: "Dictionary",
                value: { type: { name: "any" } }
              }
            }
          }
        }
      };
      Subscription = {
        type: {
          name: "Composite",
          className: "Subscription",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            subscriptionId: {
              serializedName: "subscriptionId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            state: {
              serializedName: "state",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"]
              }
            },
            subscriptionPolicies: {
              serializedName: "subscriptionPolicies",
              type: {
                name: "Composite",
                className: "SubscriptionPolicies"
              }
            },
            authorizationSource: {
              serializedName: "authorizationSource",
              type: {
                name: "String"
              }
            },
            managedByTenants: {
              serializedName: "managedByTenants",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "ManagedByTenant"
                  }
                }
              }
            },
            tags: {
              serializedName: "tags",
              type: {
                name: "Dictionary",
                value: { type: { name: "String" } }
              }
            }
          }
        }
      };
      SubscriptionPolicies = {
        type: {
          name: "Composite",
          className: "SubscriptionPolicies",
          modelProperties: {
            locationPlacementId: {
              serializedName: "locationPlacementId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            quotaId: {
              serializedName: "quotaId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            spendingLimit: {
              serializedName: "spendingLimit",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["On", "Off", "CurrentPeriodOff"]
              }
            }
          }
        }
      };
      ManagedByTenant = {
        type: {
          name: "Composite",
          className: "ManagedByTenant",
          modelProperties: {
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      SubscriptionListResult = {
        type: {
          name: "Composite",
          className: "SubscriptionListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Subscription"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TenantListResult = {
        type: {
          name: "Composite",
          className: "TenantListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "TenantIdDescription"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      TenantIdDescription = {
        type: {
          name: "Composite",
          className: "TenantIdDescription",
          modelProperties: {
            id: {
              serializedName: "id",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantId: {
              serializedName: "tenantId",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantCategory: {
              serializedName: "tenantCategory",
              readOnly: true,
              type: {
                name: "Enum",
                allowedValues: ["Home", "ProjectedBy", "ManagedBy"]
              }
            },
            country: {
              serializedName: "country",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            countryCode: {
              serializedName: "countryCode",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            displayName: {
              serializedName: "displayName",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            domains: {
              serializedName: "domains",
              readOnly: true,
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "String"
                  }
                }
              }
            },
            defaultDomain: {
              serializedName: "defaultDomain",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantType: {
              serializedName: "tenantType",
              readOnly: true,
              type: {
                name: "String"
              }
            },
            tenantBrandingLogoUrl: {
              serializedName: "tenantBrandingLogoUrl",
              readOnly: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      ResourceName = {
        type: {
          name: "Composite",
          className: "ResourceName",
          modelProperties: {
            name: {
              serializedName: "name",
              required: true,
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              required: true,
              type: {
                name: "String"
              }
            }
          }
        }
      };
      CheckResourceNameResult = {
        type: {
          name: "Composite",
          className: "CheckResourceNameResult",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            type: {
              serializedName: "type",
              type: {
                name: "String"
              }
            },
            status: {
              serializedName: "status",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      Operation5 = {
        type: {
          name: "Composite",
          className: "Operation",
          modelProperties: {
            name: {
              serializedName: "name",
              type: {
                name: "String"
              }
            },
            display: {
              serializedName: "display",
              type: {
                name: "Composite",
                className: "OperationDisplay"
              }
            }
          }
        }
      };
      OperationDisplay5 = {
        type: {
          name: "Composite",
          className: "OperationDisplay",
          modelProperties: {
            provider: {
              serializedName: "provider",
              type: {
                name: "String"
              }
            },
            resource: {
              serializedName: "resource",
              type: {
                name: "String"
              }
            },
            operation: {
              serializedName: "operation",
              type: {
                name: "String"
              }
            },
            description: {
              serializedName: "description",
              type: {
                name: "String"
              }
            }
          }
        }
      };
      OperationListResult5 = {
        type: {
          name: "Composite",
          className: "OperationListResult",
          modelProperties: {
            value: {
              serializedName: "value",
              type: {
                name: "Sequence",
                element: {
                  type: {
                    name: "Composite",
                    className: "Operation"
                  }
                }
              }
            },
            nextLink: {
              serializedName: "nextLink",
              type: {
                name: "String"
              }
            }
          }
        }
      };
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/parameters.js
  var accept5, $host5, subscriptionId5, apiVersion5, includeExtendedLocations, nextLink5, contentType5, resourceNameDefinition;
  var init_parameters5 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/models/parameters.js"() {
      init_mappers5();
      accept5 = {
        parameterPath: "accept",
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Accept",
          type: {
            name: "String"
          }
        }
      };
      $host5 = {
        parameterPath: "$host",
        mapper: {
          serializedName: "$host",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      subscriptionId5 = {
        parameterPath: "subscriptionId",
        mapper: {
          serializedName: "subscriptionId",
          required: true,
          type: {
            name: "String"
          }
        }
      };
      apiVersion5 = {
        parameterPath: "apiVersion",
        mapper: {
          defaultValue: "2021-01-01",
          isConstant: true,
          serializedName: "api-version",
          type: {
            name: "String"
          }
        }
      };
      includeExtendedLocations = {
        parameterPath: ["options", "includeExtendedLocations"],
        mapper: {
          serializedName: "includeExtendedLocations",
          type: {
            name: "Boolean"
          }
        }
      };
      nextLink5 = {
        parameterPath: "nextLink",
        mapper: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        },
        skipEncoding: true
      };
      contentType5 = {
        parameterPath: ["options", "contentType"],
        mapper: {
          defaultValue: "application/json",
          isConstant: true,
          serializedName: "Content-Type",
          type: {
            name: "String"
          }
        }
      };
      resourceNameDefinition = {
        parameterPath: ["options", "resourceNameDefinition"],
        mapper: ResourceName
      };
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/subscriptions.js
  var SubscriptionsImpl, serializer46, listLocationsOperationSpec, getOperationSpec27, listOperationSpec38, listNextOperationSpec22;
  var init_subscriptions = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/subscriptions.js"() {
      init_tslib_es66();
      init_src6();
      init_mappers5();
      init_parameters5();
      SubscriptionsImpl = class {
        /**
         * Initialize a new instance of the class Subscriptions class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * This operation provides all the locations that are available for resource providers; however, each
         * resource provider may support a subset of this list.
         * @param subscriptionId The ID of the target subscription.
         * @param options The options parameters.
         */
        listLocations(subscriptionId7, options) {
          const iter = this.listLocationsPagingAll(subscriptionId7, options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listLocationsPagingPage(subscriptionId7, options);
            }
          };
        }
        listLocationsPagingPage(subscriptionId7, options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listLocationsPagingPage_1() {
            let result = yield __await5(this._listLocations(subscriptionId7, options));
            yield yield __await5(result.value || []);
          }, "listLocationsPagingPage_1"));
        }
        listLocationsPagingAll(subscriptionId7, options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listLocationsPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues5(this.listLocationsPagingPage(subscriptionId7, options)), _c2; _c2 = yield __await5(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await5(yield* __asyncDelegator5(__asyncValues5(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await5(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listLocationsPagingAll_1"));
        }
        /**
         * Gets all subscriptions for a tenant.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await5(this._list(options));
            yield yield __await5(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await5(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await5(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_2, _a7;
            try {
              for (var _b2 = __asyncValues5(this.listPagingPage(options)), _c2; _c2 = yield __await5(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await5(yield* __asyncDelegator5(__asyncValues5(page)));
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await5(_a7.call(_b2));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * This operation provides all the locations that are available for resource providers; however, each
         * resource provider may support a subset of this list.
         * @param subscriptionId The ID of the target subscription.
         * @param options The options parameters.
         */
        _listLocations(subscriptionId7, options) {
          return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, listLocationsOperationSpec);
        }
        /**
         * Gets details about a specified subscription.
         * @param subscriptionId The ID of the target subscription.
         * @param options The options parameters.
         */
        get(subscriptionId7, options) {
          return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, getOperationSpec27);
        }
        /**
         * Gets all subscriptions for a tenant.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec38);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec22);
        }
      };
      __name(SubscriptionsImpl, "SubscriptionsImpl");
      serializer46 = createSerializer(
        mappers_exports5,
        /* isXml */
        false
      );
      listLocationsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/locations",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: LocationListResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5, includeExtendedLocations],
        urlParameters: [$host5, subscriptionId5],
        headerParameters: [accept5],
        serializer: serializer46
      };
      getOperationSpec27 = {
        path: "/subscriptions/{subscriptionId}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: Subscription
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5],
        urlParameters: [$host5, subscriptionId5],
        headerParameters: [accept5],
        serializer: serializer46
      };
      listOperationSpec38 = {
        path: "/subscriptions",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: SubscriptionListResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5],
        urlParameters: [$host5],
        headerParameters: [accept5],
        serializer: serializer46
      };
      listNextOperationSpec22 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: SubscriptionListResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5],
        urlParameters: [$host5, nextLink5],
        headerParameters: [accept5],
        serializer: serializer46
      };
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/tenants.js
  var TenantsImpl, serializer47, listOperationSpec39, listNextOperationSpec23;
  var init_tenants = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/tenants.js"() {
      init_tslib_es66();
      init_src6();
      init_mappers5();
      init_parameters5();
      TenantsImpl = class {
        /**
         * Initialize a new instance of the class Tenants class.
         * @param client Reference to the service client
         */
        constructor(client) {
          this.client = client;
        }
        /**
         * Gets the tenants for your account.
         * @param options The options parameters.
         */
        list(options) {
          const iter = this.listPagingAll(options);
          return {
            next() {
              return iter.next();
            },
            [Symbol.asyncIterator]() {
              return this;
            },
            byPage: () => {
              return this.listPagingPage(options);
            }
          };
        }
        listPagingPage(options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
            let result = yield __await5(this._list(options));
            yield yield __await5(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
              result = yield __await5(this._listNext(continuationToken, options));
              continuationToken = result.nextLink;
              yield yield __await5(result.value || []);
            }
          }, "listPagingPage_1"));
        }
        listPagingAll(options) {
          return __asyncGenerator5(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
            var e_1, _a7;
            try {
              for (var _b2 = __asyncValues5(this.listPagingPage(options)), _c2; _c2 = yield __await5(_b2.next()), !_c2.done; ) {
                const page = _c2.value;
                yield __await5(yield* __asyncDelegator5(__asyncValues5(page)));
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_c2 && !_c2.done && (_a7 = _b2.return))
                  yield __await5(_a7.call(_b2));
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          }, "listPagingAll_1"));
        }
        /**
         * Gets the tenants for your account.
         * @param options The options parameters.
         */
        _list(options) {
          return this.client.sendOperationRequest({ options }, listOperationSpec39);
        }
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        _listNext(nextLink7, options) {
          return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec23);
        }
      };
      __name(TenantsImpl, "TenantsImpl");
      serializer47 = createSerializer(
        mappers_exports5,
        /* isXml */
        false
      );
      listOperationSpec39 = {
        path: "/tenants",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TenantListResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5],
        urlParameters: [$host5],
        headerParameters: [accept5],
        serializer: serializer47
      };
      listNextOperationSpec23 = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
          200: {
            bodyMapper: TenantListResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        queryParameters: [apiVersion5],
        urlParameters: [$host5, nextLink5],
        headerParameters: [accept5],
        serializer: serializer47
      };
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/index.js
  var init_operations13 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operations/index.js"() {
      init_subscriptions();
      init_tenants();
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/subscriptionClient.js
  var SubscriptionClient, serializer48, checkResourceNameOperationSpec;
  var init_subscriptionClient = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/subscriptionClient.js"() {
      init_src6();
      init_src5();
      init_operations13();
      init_parameters5();
      init_mappers5();
      SubscriptionClient = class extends ServiceClient {
        /**
         * Initializes a new instance of the SubscriptionClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param options The parameter options
         */
        constructor(credentials, options) {
          var _a7, _b2;
          if (credentials === void 0) {
            throw new Error("'credentials' cannot be null");
          }
          if (!options) {
            options = {};
          }
          const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
          };
          const packageDetails = `azsdk-js-arm-resources-subscriptions/2.0.1`;
          const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
          if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
          }
          const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
            userAgentPrefix
          }, baseUri: (_b2 = (_a7 = options.endpoint) !== null && _a7 !== void 0 ? _a7 : options.baseUri) !== null && _b2 !== void 0 ? _b2 : "https://management.azure.com" });
          super(optionsWithDefaults);
          if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name === bearerTokenAuthenticationPolicyName);
            if (!bearerTokenAuthenticationPolicyFound) {
              this.pipeline.removePolicy({
                name: bearerTokenAuthenticationPolicyName
              });
              this.pipeline.addPolicy(bearerTokenAuthenticationPolicy({
                scopes: `${optionsWithDefaults.baseUri}/.default`,
                challengeCallbacks: {
                  authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge
                }
              }));
            }
          }
          this.$host = options.$host || "https://management.azure.com";
          this.apiVersion = options.apiVersion || "2021-01-01";
          this.subscriptions = new SubscriptionsImpl(this);
          this.tenants = new TenantsImpl(this);
        }
        /**
         * A resource name is valid if it is not a reserved word, does not contains a reserved word and does
         * not start with a reserved word
         * @param options The options parameters.
         */
        checkResourceName(options) {
          return this.sendOperationRequest({ options }, checkResourceNameOperationSpec);
        }
      };
      __name(SubscriptionClient, "SubscriptionClient");
      serializer48 = createSerializer(
        mappers_exports5,
        /* isXml */
        false
      );
      checkResourceNameOperationSpec = {
        path: "/providers/Microsoft.Resources/checkResourceName",
        httpMethod: "POST",
        responses: {
          200: {
            bodyMapper: CheckResourceNameResult
          },
          default: {
            bodyMapper: CloudError4
          }
        },
        requestBody: resourceNameDefinition,
        queryParameters: [apiVersion5],
        urlParameters: [$host5],
        headerParameters: [accept5, contentType5],
        mediaType: "json",
        serializer: serializer48
      };
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/subscriptions.js
  var init_subscriptions2 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/subscriptions.js"() {
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/tenants.js
  var init_tenants2 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/tenants.js"() {
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/index.js
  var init_operationsInterfaces5 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/operationsInterfaces/index.js"() {
      init_subscriptions2();
      init_tenants2();
    }
  });

  // node_modules/@azure/arm-resources-subscriptions/dist-esm/src/index.js
  var src_exports7 = {};
  __export(src_exports7, {
    KnownRegionCategory: () => KnownRegionCategory,
    KnownRegionType: () => KnownRegionType,
    KnownResourceNameStatus: () => KnownResourceNameStatus,
    SubscriptionClient: () => SubscriptionClient
  });
  var init_src12 = __esm({
    "node_modules/@azure/arm-resources-subscriptions/dist-esm/src/index.js"() {
      init_models6();
      init_subscriptionClient();
      init_operationsInterfaces5();
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/clients.js
  var require_clients = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/clients.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createSubscriptionsClient = exports.createResourcesClient = exports.createStorageClient = void 0;
      var createAzureClient_1 = require_createAzureClient();
      function createStorageClient(context) {
        return __awaiter6(this, void 0, void 0, function* () {
          if ((0, createAzureClient_1.parseClientContext)(context).isCustomCloud) {
            return (0, createAzureClient_1.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src8(), __toCommonJS(src_exports3)))).StorageManagementClient);
          } else {
            return (0, createAzureClient_1.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src9(), __toCommonJS(src_exports4)))).StorageManagementClient);
          }
        });
      }
      __name(createStorageClient, "createStorageClient");
      exports.createStorageClient = createStorageClient;
      function createResourcesClient(context) {
        return __awaiter6(this, void 0, void 0, function* () {
          if ((0, createAzureClient_1.parseClientContext)(context).isCustomCloud) {
            return (0, createAzureClient_1.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src10(), __toCommonJS(src_exports5)))).ResourceManagementClient);
          } else {
            return (0, createAzureClient_1.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src11(), __toCommonJS(src_exports6)))).ResourceManagementClient);
          }
        });
      }
      __name(createResourcesClient, "createResourcesClient");
      exports.createResourcesClient = createResourcesClient;
      function createSubscriptionsClient(context) {
        return __awaiter6(this, void 0, void 0, function* () {
          return (0, createAzureClient_1.createAzureSubscriptionClient)(context, (yield Promise.resolve().then(() => (init_src12(), __toCommonJS(src_exports7)))).SubscriptionClient);
        });
      }
      __name(createSubscriptionsClient, "createSubscriptionsClient");
      exports.createSubscriptionsClient = createSubscriptionsClient;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/constants.js
  var require_constants3 = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.storageProviderType = exports.storageProvider = exports.resourcesProvider = void 0;
      exports.resourcesProvider = "Microsoft.Resources";
      exports.storageProvider = "Microsoft.Storage";
      exports.storageProviderType = "Microsoft.Storage/storageAccounts";
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/LocationListStep.js
  var require_LocationListStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/LocationListStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LocationListStep = void 0;
      var clients_1 = require_clients();
      var constants_1 = require_constants3();
      var vscode_azext_utils_1 = require_src3();
      var localize_1 = require_localize2();
      var extensionVariables_1 = require_extensionVariables2();
      var uiUtils_1 = require_uiUtils();
      var LocationListStep2 = class extends vscode_azext_utils_1.AzureWizardPromptStep {
        constructor(options) {
          super();
          this.options = options;
        }
        static addStep(wizardContext, promptSteps, options) {
          if (!wizardContext._alreadyHasLocationStep) {
            promptSteps.push(new this(options));
            wizardContext._alreadyHasLocationStep = true;
          }
        }
        static getInternalVariables(wizardContext) {
          if (!wizardContext._allLocationsTask) {
            wizardContext._allLocationsTask = getAllLocations(wizardContext);
          }
          if (!wizardContext._providerLocationsMap) {
            wizardContext._providerLocationsMap = /* @__PURE__ */ new Map();
            this.addProviderForFiltering(wizardContext, constants_1.resourcesProvider, "resourceGroups");
          }
          return [wizardContext._allLocationsTask, wizardContext._providerLocationsMap];
        }
        static setLocation(wizardContext, name) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const [allLocationsTask] = this.getInternalVariables(wizardContext);
            wizardContext._location = (yield allLocationsTask).find((l) => LocationListStep2.locationMatchesName(l, name));
            wizardContext.telemetry.properties.locationType = (_a7 = wizardContext._location) === null || _a7 === void 0 ? void 0 : _a7.type;
          });
        }
        static setLocationSubset(wizardContext, task, provider) {
          const [, providerLocationsMap] = this.getInternalVariables(wizardContext);
          providerLocationsMap.set(provider.toLowerCase(), task);
        }
        static addProviderForFiltering(wizardContext, provider, resourceType3) {
          this.setLocationSubset(wizardContext, getProviderLocations(wizardContext, provider, resourceType3), provider);
        }
        static hasLocation(wizardContext) {
          return !!wizardContext._location;
        }
        static getExtendedLocation(location4) {
          let locationName = location4.name;
          let extendedLocation;
          if (location4.type === "EdgeZone") {
            locationName = location4.metadata.homeLocation;
            extendedLocation = location4;
          }
          return {
            location: locationName,
            extendedLocation
          };
        }
        static getLocation(wizardContext, provider, supportsExtendedLocations) {
          var _a7, _b2;
          return __awaiter6(this, void 0, void 0, function* () {
            let location4 = (0, vscode_azext_utils_1.nonNullProp)(wizardContext, "_location");
            function warnAboutRelatedLocation(loc) {
              extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("relatedLocWarning", 'WARNING: Provider "{0}" does not support location "{1}". Using "{2}" instead.', provider, location4.displayName, loc.displayName));
            }
            __name(warnAboutRelatedLocation, "warnAboutRelatedLocation");
            if (location4.type === "EdgeZone") {
              if (supportsExtendedLocations) {
                return location4;
              } else {
                const homeLocName = (0, vscode_azext_utils_1.nonNullProp)((0, vscode_azext_utils_1.nonNullProp)(location4, "metadata"), "homeLocation");
                const [allLocationsTask] = this.getInternalVariables(wizardContext);
                const allLocations = yield allLocationsTask;
                const homeLocation = (0, vscode_azext_utils_1.nonNullValue)(allLocations.find((l) => LocationListStep2.locationMatchesName(l, homeLocName)), "homeLocation");
                wizardContext.telemetry.properties.relatedLocationSource = "home";
                extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("homeLocationWarning", 'WARNING: Resource does not support extended location "{0}". Using "{1}" instead.', location4.displayName, homeLocation.displayName));
                location4 = homeLocation;
              }
            }
            if (provider) {
              const [allLocationsTask, providerLocationsMap] = this.getInternalVariables(wizardContext);
              const providerLocations = yield providerLocationsMap.get(provider.toLowerCase());
              if (providerLocations) {
                let isSupportedByProvider = function(loc) {
                  return !!(providerLocations === null || providerLocations === void 0 ? void 0 : providerLocations.find((name) => LocationListStep2.locationMatchesName(loc, name)));
                }, useProviderName = function(loc) {
                  return Object.assign(Object.assign({}, loc), { name: (0, vscode_azext_utils_1.nonNullValue)(providerLocations === null || providerLocations === void 0 ? void 0 : providerLocations.find((name) => LocationListStep2.locationMatchesName(loc, name), "providerName")) });
                };
                __name(isSupportedByProvider, "isSupportedByProvider");
                __name(useProviderName, "useProviderName");
                if (isSupportedByProvider(location4)) {
                  return useProviderName(location4);
                }
                const allLocations = yield allLocationsTask;
                if ((_a7 = location4.metadata) === null || _a7 === void 0 ? void 0 : _a7.pairedRegion) {
                  const pairedLocation = (_b2 = location4.metadata) === null || _b2 === void 0 ? void 0 : _b2.pairedRegion.map((paired) => allLocations.find((l) => paired.name && LocationListStep2.locationMatchesName(l, paired.name))).find((pairedLoc) => pairedLoc && isSupportedByProvider(pairedLoc));
                  if (pairedLocation) {
                    wizardContext.telemetry.properties.relatedLocationSource = "paired";
                    warnAboutRelatedLocation(pairedLocation);
                    return useProviderName(pairedLocation);
                  }
                }
                if (location4.name.toLowerCase().endsWith("stage")) {
                  const nonStageName = location4.name.replace(/stage/i, "");
                  const nonStageLocation = allLocations.find((l) => LocationListStep2.locationMatchesName(l, nonStageName));
                  if (nonStageLocation && isSupportedByProvider(nonStageLocation)) {
                    wizardContext.telemetry.properties.relatedLocationSource = "nonStage";
                    warnAboutRelatedLocation(nonStageLocation);
                    return useProviderName(nonStageLocation);
                  }
                }
                wizardContext.telemetry.properties.locationProviderNotFound = provider;
              }
            }
            return location4;
          });
        }
        static getLocations(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const [allLocationsTask, providerLocationsMap] = this.getInternalVariables(wizardContext);
            const locationSubsets = yield Promise.all(providerLocationsMap.values());
            return (yield allLocationsTask).filter((l1) => l1.type === "EdgeZone" && wizardContext.includeExtendedLocations || locationSubsets.every((subset) => subset.find((l2) => generalizeLocationName(l1.name) === generalizeLocationName(l2))));
          });
        }
        static locationMatchesName(location4, name) {
          name = generalizeLocationName(name);
          return name === generalizeLocationName(location4.name) || name === generalizeLocationName(location4.displayName);
        }
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const options = Object.assign({ placeHolder: (0, localize_1.localize)("selectLocation", "Select a location for new resources."), enableGrouping: true }, this.options);
            wizardContext._location = (yield wizardContext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
            wizardContext.telemetry.properties.locationType = wizardContext._location.type;
          });
        }
        shouldPrompt(wizardContext) {
          return !wizardContext._location;
        }
        getQuickPicks(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            let locations = yield LocationListStep2.getLocations(wizardContext);
            locations = locations.sort(compareLocation);
            return locations.map((l) => {
              var _a7, _b2;
              return {
                label: (0, vscode_azext_utils_1.nonNullProp)(l, "displayName"),
                group: (_a7 = l.metadata) === null || _a7 === void 0 ? void 0 : _a7.regionCategory,
                data: l,
                description: (_b2 = LocationListStep2.getQuickPickDescription) === null || _b2 === void 0 ? void 0 : _b2.call(LocationListStep2, l)
              };
            });
          });
        }
      };
      __name(LocationListStep2, "LocationListStep");
      exports.LocationListStep = LocationListStep2;
      function generalizeLocationName(name) {
        return (name || "").toLowerCase().replace(/[^a-z0-9]/gi, "");
      }
      __name(generalizeLocationName, "generalizeLocationName");
      function getAllLocations(wizardContext) {
        return __awaiter6(this, void 0, void 0, function* () {
          const client = yield (0, clients_1.createSubscriptionsClient)(wizardContext);
          const locations = yield uiUtils_1.uiUtils.listAllIterator(client.subscriptions.listLocations(wizardContext.subscriptionId, { includeExtendedLocations: wizardContext.includeExtendedLocations }));
          return locations.filter((l) => !!(l.id && l.name && l.displayName));
        });
      }
      __name(getAllLocations, "getAllLocations");
      function getProviderLocations(wizardContext, provider, resourceType3) {
        var _a7;
        return __awaiter6(this, void 0, void 0, function* () {
          const rgClient = yield (0, clients_1.createResourcesClient)(wizardContext);
          const providerData = yield rgClient.providers.get(provider);
          const resourceTypeData = (_a7 = providerData.resourceTypes) === null || _a7 === void 0 ? void 0 : _a7.find((rt2) => {
            var _a8;
            return ((_a8 = rt2.resourceType) === null || _a8 === void 0 ? void 0 : _a8.toLowerCase()) === resourceType3.toLowerCase();
          });
          return (0, vscode_azext_utils_1.nonNullProp)((0, vscode_azext_utils_1.nonNullValue)(resourceTypeData, "resourceTypeData"), "locations");
        });
      }
      __name(getProviderLocations, "getProviderLocations");
      function compareLocation(l1, l2) {
        if (!isRecommended(l1) && isRecommended(l2)) {
          return 1;
        } else if (isRecommended(l1) && !isRecommended(l2)) {
          return -1;
        } else {
          return 0;
        }
      }
      __name(compareLocation, "compareLocation");
      function isRecommended(l) {
        var _a7, _b2;
        return ((_b2 = (_a7 = l.metadata) === null || _a7 === void 0 ? void 0 : _a7.regionCategory) === null || _b2 === void 0 ? void 0 : _b2.toLowerCase()) === "recommended";
      }
      __name(isRecommended, "isRecommended");
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupNameStep.js
  var require_ResourceGroupNameStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupNameStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResourceGroupNameStep = void 0;
      var localize_1 = require_localize2();
      var vscode_azext_utils_1 = require_src3();
      var ResourceGroupListStep_1 = require_ResourceGroupListStep();
      var ResourceGroupNameStep2 = class extends vscode_azext_utils_1.AzureWizardPromptStep {
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const suggestedName = wizardContext.relatedNameTask ? yield wizardContext.relatedNameTask : void 0;
            wizardContext.newResourceGroupName = (yield wizardContext.ui.showInputBox({
              value: suggestedName,
              prompt: "Enter the name of the new resource group.",
              validateInput: (value) => __awaiter6(this, void 0, void 0, function* () {
                return yield this.validateResourceGroupName(wizardContext, value);
              })
            })).trim();
            wizardContext.valuesToMask.push(wizardContext.newResourceGroupName);
          });
        }
        shouldPrompt(wizardContext) {
          return !wizardContext.newResourceGroupName;
        }
        validateResourceGroupName(wizardContext, name) {
          return __awaiter6(this, void 0, void 0, function* () {
            name = name.trim();
            if (name.length < ResourceGroupListStep_1.resourceGroupNamingRules.minLength || name.length > ResourceGroupListStep_1.resourceGroupNamingRules.maxLength) {
              return (0, localize_1.localize)("invalidLength", "The name must be between {0} and {1} characters.", ResourceGroupListStep_1.resourceGroupNamingRules.minLength, ResourceGroupListStep_1.resourceGroupNamingRules.maxLength);
            } else if (name.match(ResourceGroupListStep_1.resourceGroupNamingRules.invalidCharsRegExp) !== null) {
              return (0, localize_1.localize)("invalidChars", "The name can only contain alphanumeric characters or the symbols ._-()");
            } else if (name.endsWith(".")) {
              return (0, localize_1.localize)("invalidEndingChar", "The name cannot end in a period.");
            } else if (!(yield ResourceGroupListStep_1.ResourceGroupListStep.isNameAvailable(wizardContext, name))) {
              return (0, localize_1.localize)("nameAlreadyExists", 'Resource group "{0}" already exists in subscription "{1}".', name, wizardContext.subscriptionDisplayName);
            } else {
              return void 0;
            }
          });
        }
      };
      __name(ResourceGroupNameStep2, "ResourceGroupNameStep");
      exports.ResourceGroupNameStep = ResourceGroupNameStep2;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupListStep.js
  var require_ResourceGroupListStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupListStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResourceGroupListStep = exports.resourceGroupNamingRules = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var localize_1 = require_localize2();
      var uiUtils_1 = require_uiUtils();
      var LocationListStep_1 = require_LocationListStep();
      var ResourceGroupCreateStep_1 = require_ResourceGroupCreateStep();
      var ResourceGroupNameStep_1 = require_ResourceGroupNameStep();
      exports.resourceGroupNamingRules = {
        minLength: 1,
        maxLength: 90,
        invalidCharsRegExp: /[^a-zA-Z0-9\.\_\-\(\)]/
      };
      var ResourceGroupListStep = class extends vscode_azext_utils_1.AzureWizardPromptStep {
        constructor(suppressCreate) {
          super();
          this._suppressCreate = suppressCreate;
        }
        static getResourceGroups(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (wizardContext.resourceGroupsTask === void 0) {
              const client = yield (0, clients_1.createResourcesClient)(wizardContext);
              wizardContext.resourceGroupsTask = uiUtils_1.uiUtils.listAllIterator(client.resourceGroups.list());
            }
            return yield wizardContext.resourceGroupsTask;
          });
        }
        static isNameAvailable(wizardContext, name) {
          return __awaiter6(this, void 0, void 0, function* () {
            const resourceGroupsTask = ResourceGroupListStep.getResourceGroups(wizardContext);
            return !(yield resourceGroupsTask).some((rg) => rg.name !== void 0 && rg.name.toLowerCase() === name.toLowerCase());
          });
        }
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const options = { placeHolder: "Select a resource group for new resources.", id: `ResourceGroupListStep/${wizardContext.subscriptionId}` };
            wizardContext.resourceGroup = (yield wizardContext.ui.showQuickPick(this.getQuickPicks(wizardContext), options)).data;
            if (wizardContext.resourceGroup && !LocationListStep_1.LocationListStep.hasLocation(wizardContext)) {
              yield LocationListStep_1.LocationListStep.setLocation(wizardContext, (0, vscode_azext_utils_1.nonNullProp)(wizardContext.resourceGroup, "location"));
            }
          });
        }
        getSubWizard(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!wizardContext.resourceGroup) {
              const promptSteps = [new ResourceGroupNameStep_1.ResourceGroupNameStep()];
              LocationListStep_1.LocationListStep.addStep(wizardContext, promptSteps);
              return {
                promptSteps,
                executeSteps: [new ResourceGroupCreateStep_1.ResourceGroupCreateStep()]
              };
            } else {
              wizardContext.valuesToMask.push((0, vscode_azext_utils_1.nonNullProp)(wizardContext.resourceGroup, "name"));
              return void 0;
            }
          });
        }
        shouldPrompt(wizardContext) {
          return !wizardContext.resourceGroup && !wizardContext.newResourceGroupName;
        }
        getQuickPicks(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const picks = [];
            if (!this._suppressCreate) {
              picks.push({
                label: (0, localize_1.localize)("NewResourceGroup", "$(plus) Create new resource group"),
                description: "",
                data: void 0
              });
            }
            const resourceGroups = (yield ResourceGroupListStep.getResourceGroups(wizardContext)).sort((a, b) => {
              const nameA = (0, vscode_azext_utils_1.nonNullProp)(a, "name");
              const nameB = (0, vscode_azext_utils_1.nonNullProp)(b, "name");
              if (nameA > nameB) {
                return 1;
              } else if (nameA < nameB) {
                return -1;
              } else {
                return 0;
              }
            });
            return picks.concat(resourceGroups.map((rg) => {
              return {
                id: rg.id,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                label: rg.name,
                description: rg.location,
                data: rg
              };
            }));
          });
        }
      };
      __name(ResourceGroupListStep, "ResourceGroupListStep");
      exports.ResourceGroupListStep = ResourceGroupListStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupCreateStep.js
  var require_ResourceGroupCreateStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/ResourceGroupCreateStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResourceGroupCreateStep = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var constants_1 = require_constants3();
      var extensionVariables_1 = require_extensionVariables2();
      var localize_1 = require_localize2();
      var uiUtils_1 = require_uiUtils();
      var LocationListStep_1 = require_LocationListStep();
      var ResourceGroupListStep_1 = require_ResourceGroupListStep();
      var ResourceGroupCreateStep2 = class extends vscode_azext_utils_1.AzureWizardExecuteStep {
        constructor() {
          super(...arguments);
          this.priority = 100;
        }
        execute(wizardContext, progress) {
          var _a7;
          return __awaiter6(this, void 0, void 0, function* () {
            const newName = wizardContext.newResourceGroupName;
            const newLocation = yield LocationListStep_1.LocationListStep.getLocation(wizardContext, constants_1.resourcesProvider, false);
            const newLocationName = newLocation.name;
            const resourceClient = yield (0, clients_1.createResourcesClient)(wizardContext);
            try {
              const rgExists = (yield resourceClient.resourceGroups.checkExistence(newName)).body;
              if (rgExists) {
                extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("existingResourceGroup", 'Using existing resource group "{0}".', newName));
                wizardContext.resourceGroup = yield resourceClient.resourceGroups.get(newName);
              } else {
                const creatingMessage = (0, localize_1.localize)("creatingResourceGroup", 'Creating resource group "{0}" in location "{1}"...', newName, newLocationName);
                extensionVariables_1.ext.outputChannel.appendLog(creatingMessage);
                progress.report({ message: creatingMessage });
                wizardContext.resourceGroup = yield resourceClient.resourceGroups.createOrUpdate(newName, { location: newLocationName });
                extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("createdResourceGroup", 'Successfully created resource group "{0}".', newName));
              }
            } catch (error) {
              if (wizardContext.suppress403Handling || (0, vscode_azext_utils_1.parseError)(error).errorType !== "403") {
                throw error;
              } else {
                if (/concierge/i.test(wizardContext.subscriptionDisplayName)) {
                  const rgs = yield uiUtils_1.uiUtils.listAllIterator(resourceClient.resourceGroups.list());
                  if (rgs.length === 1 && rgs[0].name && /^learn/i.test(rgs[0].name)) {
                    wizardContext.resourceGroup = rgs[0];
                    wizardContext.telemetry.properties.forbiddenResponse = "SelectLearnRg";
                    extensionVariables_1.ext.outputChannel.appendLog((0, localize_1.localize)("usedLearnResourceGroup", 'WARNING: Cannot create resource group "{0}" because the selected subscription is a concierge subscription. Using resource group "{1}" instead.', newName, (_a7 = wizardContext.resourceGroup) === null || _a7 === void 0 ? void 0 : _a7.name));
                    return void 0;
                  }
                }
                const message = (0, localize_1.localize)("rgForbidden", 'You do not have permission to create a resource group in subscription "{0}".', wizardContext.subscriptionDisplayName);
                const selectExisting = { title: (0, localize_1.localize)("selectExisting", "Select Existing") };
                yield wizardContext.ui.showWarningMessage(message, { modal: true, stepName: "RgNoPermissions" }, selectExisting);
                wizardContext.telemetry.properties.forbiddenResponse = "SelectExistingRg";
                const step = new ResourceGroupListStep_1.ResourceGroupListStep(
                  true
                  /* suppressCreate */
                );
                yield step.prompt(wizardContext);
              }
            }
          });
        }
        shouldExecute(wizardContext) {
          return !wizardContext.resourceGroup;
        }
      };
      __name(ResourceGroupCreateStep2, "ResourceGroupCreateStep");
      exports.ResourceGroupCreateStep = ResourceGroupCreateStep2;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountCreateStep.js
  var require_StorageAccountCreateStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountCreateStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StorageAccountCreateStep = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var constants_1 = require_constants3();
      var extensionVariables_1 = require_extensionVariables2();
      var localize_1 = require_localize2();
      var LocationListStep_1 = require_LocationListStep();
      var StorageAccountCreateStep = class extends vscode_azext_utils_1.AzureWizardExecuteStep {
        constructor(defaults) {
          super();
          this.priority = 130;
          this._defaults = defaults;
        }
        execute(wizardContext, progress) {
          return __awaiter6(this, void 0, void 0, function* () {
            const newLocation = (yield LocationListStep_1.LocationListStep.getLocation(wizardContext, constants_1.storageProvider)).name;
            const newName = wizardContext.newStorageAccountName;
            const newSkuName = `${this._defaults.performance}_${this._defaults.replication}`;
            const creatingStorageAccount = (0, localize_1.localize)("CreatingStorageAccount", 'Creating storage account "{0}" in location "{1}" with sku "{2}"...', newName, newLocation, newSkuName);
            extensionVariables_1.ext.outputChannel.appendLog(creatingStorageAccount);
            progress.report({ message: creatingStorageAccount });
            const storageClient = yield (0, clients_1.createStorageClient)(wizardContext);
            wizardContext.storageAccount = yield storageClient.storageAccounts.beginCreateAndWait(
              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
              wizardContext.resourceGroup.name,
              newName,
              {
                sku: { name: newSkuName },
                kind: this._defaults.kind,
                location: newLocation,
                enableHttpsTrafficOnly: true,
                defaultToOAuthAuthentication: true
              }
            );
            const createdStorageAccount = (0, localize_1.localize)("CreatedStorageAccount", 'Successfully created storage account "{0}".', newName);
            extensionVariables_1.ext.outputChannel.appendLog(createdStorageAccount);
          });
        }
        shouldExecute(wizardContext) {
          return !wizardContext.storageAccount;
        }
      };
      __name(StorageAccountCreateStep, "StorageAccountCreateStep");
      exports.StorageAccountCreateStep = StorageAccountCreateStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountNameStep.js
  var require_StorageAccountNameStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountNameStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StorageAccountNameStep = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var constants_1 = require_constants3();
      var localize_1 = require_localize2();
      var ResourceGroupListStep_1 = require_ResourceGroupListStep();
      var StorageAccountListStep_1 = require_StorageAccountListStep();
      var StorageAccountNameStep = class extends vscode_azext_utils_1.AzureNameStep {
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const client = yield (0, clients_1.createStorageClient)(wizardContext);
            const suggestedName = wizardContext.relatedNameTask ? yield wizardContext.relatedNameTask : void 0;
            wizardContext.newStorageAccountName = (yield wizardContext.ui.showInputBox({
              value: suggestedName,
              prompt: "Enter the name of the new storage account.",
              validateInput: (value) => __awaiter6(this, void 0, void 0, function* () {
                return yield this.validateStorageAccountName(client, value);
              })
            })).trim();
            if (!wizardContext.relatedNameTask) {
              wizardContext.relatedNameTask = this.generateRelatedName(wizardContext, wizardContext.newStorageAccountName, ResourceGroupListStep_1.resourceGroupNamingRules);
            }
            wizardContext.valuesToMask.push(wizardContext.newStorageAccountName);
          });
        }
        shouldPrompt(wizardContext) {
          return !wizardContext.newStorageAccountName;
        }
        isRelatedNameAvailable(wizardContext, name) {
          return __awaiter6(this, void 0, void 0, function* () {
            return yield ResourceGroupListStep_1.ResourceGroupListStep.isNameAvailable(wizardContext, name);
          });
        }
        validateStorageAccountName(client, name) {
          return __awaiter6(this, void 0, void 0, function* () {
            name = name.trim();
            if (!name || name.length < StorageAccountListStep_1.storageAccountNamingRules.minLength || name.length > StorageAccountListStep_1.storageAccountNamingRules.maxLength) {
              return (0, localize_1.localize)("invalidLength", "The name must be between {0} and {1} characters.", StorageAccountListStep_1.storageAccountNamingRules.minLength, StorageAccountListStep_1.storageAccountNamingRules.maxLength);
            } else if (name.match(StorageAccountListStep_1.storageAccountNamingRules.invalidCharsRegExp) !== null) {
              return (0, localize_1.localize)("invalidChars", "The name can only contain lowercase letters and numbers.");
            } else {
              const nameAvailabilityResult = yield client.storageAccounts.checkNameAvailability({ name, type: constants_1.storageProviderType });
              if (!nameAvailabilityResult.nameAvailable) {
                return nameAvailabilityResult.message;
              } else {
                return void 0;
              }
            }
          });
        }
      };
      __name(StorageAccountNameStep, "StorageAccountNameStep");
      exports.StorageAccountNameStep = StorageAccountNameStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountListStep.js
  var require_StorageAccountListStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/StorageAccountListStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StorageAccountListStep = exports.StorageAccountReplication = exports.StorageAccountPerformance = exports.StorageAccountKind = exports.storageAccountNamingRules = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var constants_1 = require_constants3();
      var localize_1 = require_localize2();
      var LocationListStep_1 = require_LocationListStep();
      var ResourceGroupListStep_1 = require_ResourceGroupListStep();
      var StorageAccountCreateStep_1 = require_StorageAccountCreateStep();
      var StorageAccountNameStep_1 = require_StorageAccountNameStep();
      var uiUtils_1 = require_uiUtils();
      exports.storageAccountNamingRules = {
        minLength: 3,
        maxLength: 24,
        invalidCharsRegExp: /[^a-z0-9]/,
        lowercaseOnly: true
      };
      var StorageAccountKind;
      (function(StorageAccountKind2) {
        StorageAccountKind2["Storage"] = "Storage";
        StorageAccountKind2["StorageV2"] = "StorageV2";
        StorageAccountKind2["BlobStorage"] = "BlobStorage";
        StorageAccountKind2["BlockBlobStorage"] = "BlockBlobStorage";
      })(StorageAccountKind = exports.StorageAccountKind || (exports.StorageAccountKind = {}));
      var StorageAccountPerformance;
      (function(StorageAccountPerformance2) {
        StorageAccountPerformance2["Standard"] = "Standard";
        StorageAccountPerformance2["Premium"] = "Premium";
      })(StorageAccountPerformance = exports.StorageAccountPerformance || (exports.StorageAccountPerformance = {}));
      var StorageAccountReplication;
      (function(StorageAccountReplication2) {
        StorageAccountReplication2["LRS"] = "LRS";
        StorageAccountReplication2["ZRS"] = "ZRS";
        StorageAccountReplication2["GRS"] = "GRS";
        StorageAccountReplication2["RAGRS"] = "RAGRS";
      })(StorageAccountReplication = exports.StorageAccountReplication || (exports.StorageAccountReplication = {}));
      var StorageAccountListStep = class extends vscode_azext_utils_1.AzureWizardPromptStep {
        constructor(newAccountDefaults, filters) {
          super();
          this._newAccountDefaults = newAccountDefaults;
          this._filters = filters || {};
        }
        static isNameAvailable(wizardContext, name) {
          return __awaiter6(this, void 0, void 0, function* () {
            const storageClient = yield (0, clients_1.createStorageClient)(wizardContext);
            return !!(yield storageClient.storageAccounts.checkNameAvailability({ name, type: constants_1.storageProviderType })).nameAvailable;
          });
        }
        prompt(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            const client = yield (0, clients_1.createStorageClient)(wizardContext);
            const quickPickOptions = { placeHolder: "Select a storage account.", id: `StorageAccountListStep/${wizardContext.subscriptionId}` };
            const picksTask = this.getQuickPicks(wizardContext, uiUtils_1.uiUtils.listAllIterator(client.storageAccounts.list()));
            const result = (yield wizardContext.ui.showQuickPick(picksTask, quickPickOptions)).data;
            wizardContext.storageAccount = result;
            if (wizardContext.storageAccount) {
              yield LocationListStep_1.LocationListStep.setLocation(wizardContext, wizardContext.storageAccount.location);
            }
          });
        }
        getSubWizard(wizardContext) {
          return __awaiter6(this, void 0, void 0, function* () {
            if (!wizardContext.storageAccount) {
              const promptSteps = [new StorageAccountNameStep_1.StorageAccountNameStep(), new ResourceGroupListStep_1.ResourceGroupListStep()];
              LocationListStep_1.LocationListStep.addStep(wizardContext, promptSteps);
              return {
                promptSteps,
                executeSteps: [new StorageAccountCreateStep_1.StorageAccountCreateStep(this._newAccountDefaults)]
              };
            } else {
              wizardContext.valuesToMask.push((0, vscode_azext_utils_1.nonNullProp)(wizardContext.storageAccount, "name"));
              return void 0;
            }
          });
        }
        shouldPrompt(wizardContext) {
          return !wizardContext.storageAccount && !wizardContext.newStorageAccountName;
        }
        getQuickPicks(wizardContext, storageAccountsTask) {
          return __awaiter6(this, void 0, void 0, function* () {
            const picks = [{
              label: (0, localize_1.localize)("NewStorageAccount", "$(plus) Create new storage account"),
              description: "",
              data: void 0
            }];
            const kindRegExp = new RegExp(`^${convertFilterToPattern(this._filters.kind)}$`, "i");
            const performanceRegExp = new RegExp(`^${convertFilterToPattern(this._filters.performance)}_.*$`, "i");
            const replicationRegExp = new RegExp(`^.*_${convertFilterToPattern(this._filters.replication)}$`, "i");
            let location4;
            if (LocationListStep_1.LocationListStep.hasLocation(wizardContext)) {
              location4 = yield LocationListStep_1.LocationListStep.getLocation(wizardContext, constants_1.storageProvider);
            }
            let hasFilteredAccountsBySku = false;
            let hasFilteredAccountsByLocation = false;
            const storageAccounts = yield storageAccountsTask;
            for (const sa2 of storageAccounts) {
              if (!sa2.kind || sa2.kind.match(kindRegExp) || !sa2.sku || sa2.sku.name.match(performanceRegExp) || sa2.sku.name.match(replicationRegExp)) {
                hasFilteredAccountsBySku = true;
                continue;
              }
              if (location4 && !LocationListStep_1.LocationListStep.locationMatchesName(location4, sa2.location)) {
                hasFilteredAccountsByLocation = true;
                continue;
              }
              picks.push({
                id: sa2.id,
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                label: sa2.name,
                description: "",
                data: sa2
              });
            }
            if (hasFilteredAccountsBySku && this._filters.learnMoreLink) {
              picks.push({
                label: (0, localize_1.localize)("hasFilteredAccountsBySku", "$(info) Some storage accounts were filtered because of their sku. Learn more..."),
                onPicked: () => __awaiter6(this, void 0, void 0, function* () {
                  yield (0, vscode_azext_utils_1.openUrl)(this._filters.learnMoreLink);
                }),
                data: void 0
              });
            }
            if (hasFilteredAccountsByLocation && location4) {
              picks.push({
                label: (0, localize_1.localize)("hasFilteredAccountsByLocation", '$(warning) Only storage accounts in the region "{0}" are shown.', location4.displayName),
                onPicked: () => {
                },
                data: void 0
              });
            }
            return picks;
          });
        }
      };
      __name(StorageAccountListStep, "StorageAccountListStep");
      exports.StorageAccountListStep = StorageAccountListStep;
      function convertFilterToPattern(values) {
        values || (values = []);
        return `(${values.join("|")})`;
      }
      __name(convertFilterToPattern, "convertFilterToPattern");
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/delay.js
  var require_delay = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/utils/delay.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.delay = void 0;
      function delay2(ms2) {
        return __awaiter6(this, void 0, void 0, function* () {
          yield new Promise((resolve) => setTimeout(resolve, ms2));
        });
      }
      __name(delay2, "delay");
      exports.delay = delay2;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/VerifyProvidersStep.js
  var require_VerifyProvidersStep = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/wizard/VerifyProvidersStep.js"(exports) {
      "use strict";
      var __awaiter6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        __name(adopt, "adopt");
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          __name(fulfilled, "fulfilled");
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          __name(rejected, "rejected");
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          __name(step, "step");
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.VerifyProvidersStep = void 0;
      var vscode_azext_utils_1 = require_src3();
      var clients_1 = require_clients();
      var localize_1 = require_localize2();
      var delay_1 = require_delay();
      var VerifyProvidersStep = class extends vscode_azext_utils_1.AzureWizardExecuteStep {
        constructor(providers) {
          super();
          this.priority = 90;
          this._providers = providers;
        }
        execute(context, progress) {
          return __awaiter6(this, void 0, void 0, function* () {
            progress.report({ message: (0, localize_1.localize)("registeringProviders", "Registering Providers...") });
            const client = yield (0, clients_1.createResourcesClient)(context);
            yield Promise.all(this._providers.map((providerName) => __awaiter6(this, void 0, void 0, function* () {
              var _a7, _b2;
              try {
                let provider = yield client.providers.get(providerName);
                if (((_a7 = provider.registrationState) === null || _a7 === void 0 ? void 0 : _a7.toLowerCase()) !== "registered") {
                  yield client.providers.register(providerName);
                  const maxTime = Date.now() + 30 * 1e3;
                  do {
                    yield (0, delay_1.delay)(2 * 1e3);
                    provider = yield client.providers.get(providerName);
                  } while (((_b2 = provider.registrationState) === null || _b2 === void 0 ? void 0 : _b2.toLowerCase()) === "registering" && Date.now() < maxTime);
                }
              } catch (error) {
                context.telemetry.properties.providerError = (0, vscode_azext_utils_1.parseError)(error).message;
              }
            })));
          });
        }
        shouldExecute(_context) {
          return true;
        }
      };
      __name(VerifyProvidersStep, "VerifyProvidersStep");
      exports.VerifyProvidersStep = VerifyProvidersStep;
    }
  });

  // node_modules/@microsoft/vscode-azext-azureutils/out/src/index.js
  var require_src4 = __commonJS({
    "node_modules/@microsoft/vscode-azext-azureutils/out/src/index.js"(exports) {
      "use strict";
      var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding2(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.registerAzureUtilsExtensionVariables = void 0;
      __exportStar(require_createAzureClient(), exports);
      __exportStar(require_openInPortal(), exports);
      __exportStar(require_AzureAccountTreeItemBase(), exports);
      __exportStar(require_SubscriptionTreeItemBase(), exports);
      __exportStar(require_createPortalUri(), exports);
      __exportStar(require_parseAzureResourceId(), exports);
      __exportStar(require_uiUtils(), exports);
      __exportStar(require_LocationListStep(), exports);
      __exportStar(require_ResourceGroupCreateStep(), exports);
      __exportStar(require_ResourceGroupListStep(), exports);
      __exportStar(require_ResourceGroupNameStep(), exports);
      __exportStar(require_StorageAccountCreateStep(), exports);
      __exportStar(require_StorageAccountListStep(), exports);
      __exportStar(require_StorageAccountNameStep(), exports);
      __exportStar(require_VerifyProvidersStep(), exports);
      var extensionVariables_1 = require_extensionVariables2();
      Object.defineProperty(exports, "registerAzureUtilsExtensionVariables", { enumerable: true, get: function() {
        return extensionVariables_1.registerAzureUtilsExtensionVariables;
      } });
    }
  });

  // src/extension.ts
  var import_vscode_azext_azureutils11 = __toESM(require_src4());
  var import_vscode_azext_utils40 = __toESM(require_src3());
  var vscode22 = __toESM(__require("vscode"));

  // src/activityLog/ActivityLogsTreeItem.ts
  var import_vscode_azext_utils2 = __toESM(require_src3());
  var import_vscode4 = __require("vscode");

  // src/utils/localize.ts
  var nls = __toESM(require_main());
  var localize = nls.loadMessageBundle();

  // src/utils/settingUtils.ts
  var import_vscode2 = __require("vscode");

  // src/extensionVariables.ts
  var import_vscode = __require("vscode");
  var extEmitters;
  ((extEmitters2) => {
  })(extEmitters || (extEmitters = {}));
  var extEvents;
  ((extEvents2) => {
  })(extEvents || (extEvents = {}));
  var extActions;
  ((extActions2) => {
  })(extActions || (extActions = {}));
  var ext;
  ((ext2) => {
    ext2.prefix = "azureResourceGroups";
    ext2.emitters = extEmitters;
    ext2.events = extEvents;
    ext2.isWeb = import_vscode.env.uiKind === import_vscode.UIKind.Web;
    let v2;
    ((v22) => {
    })(v2 = ext2.v2 || (ext2.v2 = {}));
    ext2.actions = extActions;
  })(ext || (ext = {}));

  // src/utils/settingUtils.ts
  var settingUtils;
  ((settingUtils2) => {
    function updateGlobalSetting(_0, _1) {
      return __async(this, arguments, function* (section, value, prefix = ext.prefix) {
        const projectConfiguration = import_vscode2.workspace.getConfiguration(prefix);
        yield projectConfiguration.update(section, value, import_vscode2.ConfigurationTarget.Global);
      });
    }
    settingUtils2.updateGlobalSetting = updateGlobalSetting;
    __name(updateGlobalSetting, "updateGlobalSetting");
    function updateWorkspaceSetting(_0, _1, _2) {
      return __async(this, arguments, function* (section, value, fsPath, prefix = ext.prefix) {
        const projectConfiguration = import_vscode2.workspace.getConfiguration(prefix, import_vscode2.Uri.file(fsPath));
        yield projectConfiguration.update(section, value);
      });
    }
    settingUtils2.updateWorkspaceSetting = updateWorkspaceSetting;
    __name(updateWorkspaceSetting, "updateWorkspaceSetting");
    function getGlobalSetting(key, prefix = ext.prefix) {
      const projectConfiguration = import_vscode2.workspace.getConfiguration(prefix);
      const result = projectConfiguration.inspect(key);
      return result && result.globalValue;
    }
    settingUtils2.getGlobalSetting = getGlobalSetting;
    __name(getGlobalSetting, "getGlobalSetting");
    function getWorkspaceSetting(key, fsPath, prefix = ext.prefix) {
      const projectConfiguration = import_vscode2.workspace.getConfiguration(prefix, fsPath ? import_vscode2.Uri.file(fsPath) : void 0);
      return projectConfiguration.get(key);
    }
    settingUtils2.getWorkspaceSetting = getWorkspaceSetting;
    __name(getWorkspaceSetting, "getWorkspaceSetting");
    function getWorkspaceSettingFromAnyFolder(key, prefix = ext.prefix) {
      if (import_vscode2.workspace.workspaceFolders && import_vscode2.workspace.workspaceFolders.length > 0) {
        let result;
        for (const folder of import_vscode2.workspace.workspaceFolders) {
          const projectConfiguration = import_vscode2.workspace.getConfiguration(prefix, folder.uri);
          const folderResult = projectConfiguration.get(key);
          if (!result) {
            result = folderResult;
          } else if (folderResult && result !== folderResult) {
            return void 0;
          }
        }
        return result;
      } else {
        return getGlobalSetting(key, prefix);
      }
    }
    settingUtils2.getWorkspaceSettingFromAnyFolder = getWorkspaceSettingFromAnyFolder;
    __name(getWorkspaceSettingFromAnyFolder, "getWorkspaceSettingFromAnyFolder");
  })(settingUtils || (settingUtils = {}));

  // src/activityLog/ActivityTreeItem.ts
  var import_vscode_azext_utils = __toESM(require_src3());
  var import_vscode3 = __require("vscode");
  var ActivityTreeItem = class extends import_vscode_azext_utils.AzExtParentTreeItem {
    constructor(parent, activity) {
      super(parent);
      this.state = {
        label: localize("loading", "Loading...")
      };
      this.initialCollapsibleState = import_vscode3.TreeItemCollapsibleState.None;
      this.disposables = [];
      this.id = activity.id;
      this.setupListeners(activity);
      this.startedAtMs = Date.now();
    }
    get contextValue() {
      var _a7;
      const contextValues = /* @__PURE__ */ new Set(["azureActivity", ...(_a7 = this.state.contextValuesToAdd) != null ? _a7 : []]);
      return Array.from(contextValues).sort().join(";");
    }
    get label() {
      return this.state.label;
    }
    get description() {
      var _a7;
      if (this.status === "done" /* Done */) {
        if (this.error) {
          return localize("failed", "Failed");
        } else {
          return localize("succeeded", "Succeeded");
        }
      } else {
        return (_a7 = this.latestProgress) == null ? void 0 : _a7.message;
      }
    }
    get iconPath() {
      if (this.status === "done" /* Done */) {
        if (this.error) {
          return new import_vscode3.ThemeIcon("error", new import_vscode3.ThemeColor("testing.iconFailed"));
        } else {
          return new import_vscode3.ThemeIcon("pass", new import_vscode3.ThemeColor("testing.iconPassed"));
        }
      }
      return new import_vscode3.ThemeIcon("loading~spin");
    }
    dispose() {
      this.disposables.forEach((d) => {
        d.dispose();
      });
    }
    loadMoreChildrenImpl(_clearCache, _context) {
      return __async(this, null, function* () {
        if (this.state.getChildren) {
          return yield this.state.getChildren(this);
        }
        return [];
      });
    }
    hasMoreChildrenImpl() {
      return false;
    }
    onProgress(data) {
      void (0, import_vscode_azext_utils.callWithTelemetryAndErrorHandling)("activityOnProgress", (context) => __async(this, null, function* () {
        context.telemetry.suppressIfSuccessful = true;
        this.latestProgress = data.message ? { message: data == null ? void 0 : data.message } : this.latestProgress;
        this.state = data;
        yield this.refresh(context);
      }));
    }
    onStart(data) {
      void (0, import_vscode_azext_utils.callWithTelemetryAndErrorHandling)("activityOnStart", (context) => __async(this, null, function* () {
        this.startedAtMs = Date.now();
        this.status = "running" /* Running */;
        this.state = data;
        yield this.refresh(context);
      }));
    }
    onSuccess(data) {
      void (0, import_vscode_azext_utils.callWithTelemetryAndErrorHandling)("activityOnSuccess", (context) => __async(this, null, function* () {
        this.state = data;
        this.status = "done" /* Done */;
        if (this.state.getChildren) {
          this.initialCollapsibleState = import_vscode3.TreeItemCollapsibleState.Expanded;
        }
        yield this.refresh(context);
      }));
    }
    onError(data) {
      void (0, import_vscode_azext_utils.callWithTelemetryAndErrorHandling)("activityOnError", (context) => __async(this, null, function* () {
        this.state = data;
        this.status = "done" /* Done */;
        this.error = data.error;
        this.initialCollapsibleState = import_vscode3.TreeItemCollapsibleState.Expanded;
        yield this.refresh(context);
      }));
    }
    setupListeners(activity) {
      this.disposables.push(activity.onProgress(this.onProgress.bind(this)));
      this.disposables.push(activity.onStart(this.onStart.bind(this)));
      this.disposables.push(activity.onSuccess(this.onSuccess.bind(this)));
      this.disposables.push(activity.onError(this.onError.bind(this)));
    }
  };
  __name(ActivityTreeItem, "ActivityTreeItem");

  // src/activityLog/ActivityLogsTreeItem.ts
  var ActivityLogTreeItem = class extends import_vscode_azext_utils2.AzExtParentTreeItem {
    constructor() {
      super(void 0);
      this.label = localize("activityLog", "Activity Log");
      this.contextValue = "azureActivityLog";
      this.activityTreeItems = {};
    }
    dispose() {
      Object.values(this.activityTreeItems).forEach((activity) => {
        activity.dispose();
      });
    }
    addActivity(activity) {
      return __async(this, null, function* () {
        yield (0, import_vscode_azext_utils2.callWithTelemetryAndErrorHandling)("registerActivity", (context) => __async(this, null, function* () {
          this.activityTreeItems[activity.id] = new ActivityTreeItem(this, activity);
          if (yield settingUtils.getWorkspaceSetting("autoOpenActivityPanel")) {
            yield import_vscode4.commands.executeCommand("azureActivityLog.focus");
          }
          yield this.refresh(context);
        }));
      });
    }
    clearActivities(context) {
      return __async(this, null, function* () {
        Object.entries(this.activityTreeItems).forEach(([id, activity]) => {
          if (activity.status === "done" /* Done */) {
            activity.dispose();
            delete this.activityTreeItems[id];
          }
        });
        yield this.refresh(context);
      });
    }
    loadMoreChildrenImpl(_clearCache, _context) {
      return __async(this, null, function* () {
        return Object.values(this.activityTreeItems).filter((activity) => !!activity.status);
      });
    }
    compareChildrenImpl(item1, item2) {
      return item1.startedAtMs - item2.startedAtMs;
    }
    hasMoreChildrenImpl() {
      return false;
    }
  };
  __name(ActivityLogTreeItem, "ActivityLogTreeItem");

  // src/activityLog/registerActivity.ts
  function registerActivity(activity) {
    return __async(this, null, function* () {
      yield ext.activityLogTreeItem.addActivity(activity);
    });
  }
  __name(registerActivity, "registerActivity");

  // src/api/compatibility/AzureResourceGroupsExtensionApi.ts
  var _appResourceTree, _appResourceTreeView, _workspaceResourceTree, _workspaceResourceTreeView, _apiVersion, _registerApplicationResourceResolver, _registerWorkspaceResourceProvider, _registerActivity, _pickAppResource;
  var InternalAzureResourceGroupsExtensionApi = class {
    // This `Omit` is here because the interface expects those keys to be defined, but in this object they will not be
    // They are replaced with functions defined on this class that merely wrap the newly-named keys
    // TODO: when `tree`, `treeView`, and `registerLocalResourceProvider` are removed from the interface, this `Omit` can be removed
    constructor(options) {
      __privateAdd(this, _appResourceTree, void 0);
      __privateAdd(this, _appResourceTreeView, void 0);
      __privateAdd(this, _workspaceResourceTree, void 0);
      __privateAdd(this, _workspaceResourceTreeView, void 0);
      __privateAdd(this, _apiVersion, void 0);
      __privateAdd(this, _registerApplicationResourceResolver, void 0);
      __privateAdd(this, _registerWorkspaceResourceProvider, void 0);
      __privateAdd(this, _registerActivity, void 0);
      __privateAdd(this, _pickAppResource, void 0);
      __privateSet(this, _appResourceTree, options.appResourceTree);
      __privateSet(this, _appResourceTreeView, options.appResourceTreeView);
      __privateSet(this, _workspaceResourceTree, options.workspaceResourceTree);
      __privateSet(this, _workspaceResourceTreeView, options.workspaceResourceTreeView);
      __privateSet(this, _apiVersion, options.apiVersion);
      __privateSet(this, _registerApplicationResourceResolver, options.registerApplicationResourceResolver);
      __privateSet(this, _registerWorkspaceResourceProvider, options.registerWorkspaceResourceProvider);
      __privateSet(this, _registerActivity, options.registerActivity);
      __privateSet(this, _pickAppResource, options.pickAppResource);
    }
    get appResourceTree() {
      return __privateGet(this, _appResourceTree);
    }
    get appResourceTreeView() {
      return __privateGet(this, _appResourceTreeView);
    }
    get workspaceResourceTree() {
      return __privateGet(this, _workspaceResourceTree);
    }
    get workspaceResourceTreeView() {
      return __privateGet(this, _workspaceResourceTreeView);
    }
    get apiVersion() {
      return __privateGet(this, _apiVersion);
    }
    pickAppResource(context, options) {
      return __async(this, null, function* () {
        return __privateGet(this, _pickAppResource).call(this, context, options);
      });
    }
    registerApplicationResourceResolver(id, resolver) {
      return __privateGet(this, _registerApplicationResourceResolver).call(this, id, resolver);
    }
    registerWorkspaceResourceProvider(id, resolver) {
      return __privateGet(this, _registerWorkspaceResourceProvider).call(this, id, resolver);
    }
    registerActivity(activity) {
      return __async(this, null, function* () {
        return __privateGet(this, _registerActivity).call(this, activity);
      });
    }
    //#region Deprecated things that will be removed soon
    get tree() {
      return this.appResourceTree;
    }
    get treeView() {
      return this.appResourceTreeView;
    }
    registerLocalResourceProvider(id, provider) {
      return this.registerWorkspaceResourceProvider(id, provider);
    }
    //#endregion
  };
  __name(InternalAzureResourceGroupsExtensionApi, "InternalAzureResourceGroupsExtensionApi");
  _appResourceTree = new WeakMap();
  _appResourceTreeView = new WeakMap();
  _workspaceResourceTree = new WeakMap();
  _workspaceResourceTreeView = new WeakMap();
  _apiVersion = new WeakMap();
  _registerApplicationResourceResolver = new WeakMap();
  _registerWorkspaceResourceProvider = new WeakMap();
  _registerActivity = new WeakMap();
  _pickAppResource = new WeakMap();
  InternalAzureResourceGroupsExtensionApi.apiVersion = "0.0.1";

  // src/api/compatibility/CompatibleAzExtTreeDataProvider.ts
  var import_vscode_azext_azureutils2 = __toESM(require_src4());
  var import_vscode_azext_utils4 = __toESM(require_src3());

  // api/src/utils/apiUtils.ts
  var vscode = __toESM(__require("vscode"));
  var apiUtils;
  ((apiUtils2) => {
    class ExtensionNotFoundError extends Error {
      constructor(extensionId) {
        super(`Extension with id ${extensionId} not found.`);
      }
    }
    __name(ExtensionNotFoundError, "ExtensionNotFoundError");
    apiUtils2.ExtensionNotFoundError = ExtensionNotFoundError;
    function getAzureExtensionApi(context, extensionId, apiVersionRange, options) {
      return __async(this, null, function* () {
        var _a7;
        const apiProvider = yield getExtensionExports(extensionId);
        if (apiProvider) {
          return apiProvider.getApi(apiVersionRange, __spreadProps(__spreadValues({}, options), {
            extensionId: (_a7 = options == null ? void 0 : options.extensionId) != null ? _a7 : context.extension.id
          }));
        }
        throw new ExtensionNotFoundError(extensionId);
      });
    }
    apiUtils2.getAzureExtensionApi = getAzureExtensionApi;
    __name(getAzureExtensionApi, "getAzureExtensionApi");
    function getExtensionExports(extensionId) {
      return __async(this, null, function* () {
        const extension = vscode.extensions.getExtension(extensionId);
        if (extension) {
          if (!extension.isActive) {
            yield extension.activate();
          }
          return extension.exports;
        }
        return void 0;
      });
    }
    apiUtils2.getExtensionExports = getExtensionExports;
    __name(getExtensionExports, "getExtensionExports");
  })(apiUtils || (apiUtils = {}));

  // api/src/utils/wrapper.ts
  function isWrapper(maybeWrapper) {
    if (maybeWrapper && typeof maybeWrapper === "object" && maybeWrapper.unwrap && typeof maybeWrapper.unwrap === "function") {
      return true;
    }
    return false;
  }
  __name(isWrapper, "isWrapper");

  // src/api/compatibility/CompatibleAzureAccountTreeItem.ts
  var import_vscode_azext_azureutils = __toESM(require_src4());
  var import_vscode_azext_utils3 = __toESM(require_src3());
  var CompatibleAzureAccountTreeItem = class extends import_vscode_azext_azureutils.AzureAccountTreeItemBase {
    constructor(testAccount) {
      super(void 0, testAccount);
      this.valuesToMask = [];
    }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    get fullId() {
      return "";
    }
    /**
     * Override the subscription prompt step to use for compatibility with v2.
     */
    getSubscriptionPromptStep() {
      return __async(this, null, function* () {
        return new CompatibilitySubscriptionPromptStep();
      });
    }
    createSubscriptionTreeItem() {
      throw new Error("createSubscriptionTreeItem should not be called");
    }
  };
  __name(CompatibleAzureAccountTreeItem, "CompatibleAzureAccountTreeItem");
  var CompatibilitySubscriptionPromptStep = class extends import_vscode_azext_utils3.AzureWizardPromptStep {
    prompt(context) {
      return __async(this, null, function* () {
        const subscription = yield import_vscode_azext_utils3.PickTreeItemWithCompatibility.subscription(context, ext.v2.api.resources.azureResourceTreeDataProvider);
        Object.assign(context, subscription);
      });
    }
    shouldPrompt(context) {
      return !context.subscriptionId;
    }
  };
  __name(CompatibilitySubscriptionPromptStep, "CompatibilitySubscriptionPromptStep");

  // src/api/compatibility/CompatibleAzExtTreeDataProvider.ts
  var IntermediateCompatibleAzExtTreeDataProvider = class extends import_vscode_azext_utils4.AzExtTreeDataProvider {
  };
  __name(IntermediateCompatibleAzExtTreeDataProvider, "IntermediateCompatibleAzExtTreeDataProvider");
  var CompatibleAzExtTreeDataProvider = class extends IntermediateCompatibleAzExtTreeDataProvider {
    constructor(tdp) {
      super(new CompatibleAzureAccountTreeItem(), void 0);
      this.tdp = tdp;
    }
    getParent(treeItem) {
      return this.tdp.getParent(treeItem);
    }
    getTreeItem(treeItem) {
      return this.tdp.getTreeItem(treeItem);
    }
    getChildren(treeItem) {
      return this.tdp.getChildren(treeItem);
    }
    findTreeItem(fullId) {
      return __async(this, null, function* () {
        const id = convertV1TreeItemId(fullId);
        const result = yield this.tdp.findItemById(id);
        return isWrapper(result) ? result.unwrap() : result;
      });
    }
    showTreeItemPicker(expectedContextValues, context, _startingTreeItem) {
      return __async(this, null, function* () {
        if (expectedContextValues === import_vscode_azext_azureutils2.SubscriptionTreeItemBase.contextValue) {
          const subscriptionContext = yield import_vscode_azext_utils4.PickTreeItemWithCompatibility.subscription(context, this.tdp);
          const ti2 = { subscription: subscriptionContext };
          return ti2;
        }
        return import_vscode_azext_utils4.PickTreeItemWithCompatibility.showTreeItemPicker(context, this.tdp, expectedContextValues, _startingTreeItem);
      });
    }
    refresh(_context, treeItem) {
      if ((0, import_vscode_azext_utils4.isAzExtParentTreeItem)(treeItem)) {
        treeItem.clearCache();
      }
      this.tdp.notifyTreeDataChanged(treeItem);
      return Promise.resolve();
    }
    refreshUIOnly(treeItem) {
      this.tdp.notifyTreeDataChanged(treeItem);
    }
    //#region Things that should not be called
    trackTreeItemCollapsibleState(_treeView) {
      throw new ShouldNeverBeCalledError("trackTreeItemCollapsibleState method");
    }
    get onDidChangeTreeData() {
      throw new ShouldNeverBeCalledError("onDidChangeTreeData accessor");
    }
    get onTreeItemCreate() {
      throw new ShouldNeverBeCalledError("onTreeItemCreate accessor");
    }
    get onDidExpandOrRefreshExpandedTreeItem() {
      throw new ShouldNeverBeCalledError("onDidExpandOrRefreshExpandedTreeItem accessor");
    }
    //#endregion Things that should not be called
  };
  __name(CompatibleAzExtTreeDataProvider, "CompatibleAzExtTreeDataProvider");
  var ShouldNeverBeCalledError = class extends Error {
    constructor(methodName) {
      super(`${methodName} should never be called.`);
    }
  };
  __name(ShouldNeverBeCalledError, "ShouldNeverBeCalledError");
  function convertV1TreeItemId(id) {
    const regex = /^(\/subscriptions.*)(?:\/subscriptions)/i;
    return id.replace(regex, "/subscriptions");
  }
  __name(convertV1TreeItemId, "convertV1TreeItemId");

  // src/api/compatibility/pickAppResource.ts
  var import_vscode_azext_utils5 = __toESM(require_src3());
  function createCompatibilityPickAppResource(itemCache) {
    return /* @__PURE__ */ __name(function pickAppResource(context, options) {
      return __async(this, null, function* () {
        var _a7;
        const result = yield import_vscode_azext_utils5.PickTreeItemWithCompatibility.resource(context, ext.v2.api.resources.azureResourceTreeDataProvider, {
          resourceTypes: convertAppResourceFilterToAzExtResourceType(options == null ? void 0 : options.filter),
          childItemFilter: convertExpectedChildContextValueToContextValueFilter(options == null ? void 0 : options.expectedChildContextValue)
        });
        return (_a7 = itemCache.getItemForId(result.fullId)) != null ? _a7 : result;
      });
    }, "pickAppResource");
  }
  __name(createCompatibilityPickAppResource, "createCompatibilityPickAppResource");
  function convertExpectedChildContextValueToContextValueFilter(expectedChildContextValue) {
    return expectedChildContextValue ? { include: expectedChildContextValue } : void 0;
  }
  __name(convertExpectedChildContextValueToContextValueFilter, "convertExpectedChildContextValueToContextValueFilter");
  function convertAppResourceFilterToAzExtResourceType(filter4) {
    if (!filter4) {
      return void 0;
    }
    filter4 = Array.isArray(filter4) ? filter4 : [filter4];
    return filterMap(filter4, import_vscode_azext_utils5.getAzExtResourceType);
  }
  __name(convertAppResourceFilterToAzExtResourceType, "convertAppResourceFilterToAzExtResourceType");
  function filterMap(source, predicateMapper) {
    let index = 0;
    return source.reduce((accumulator, current) => {
      const mapped = predicateMapper(current, index++);
      if (mapped !== null && mapped !== void 0) {
        accumulator.push(mapped);
      }
      return accumulator;
    }, []);
  }
  __name(filterMap, "filterMap");

  // src/api/compatibility/registerApplicationResourceResolver.ts
  var import_vscode_azext_utils10 = __toESM(require_src3());
  var import_vscode7 = __require("vscode");

  // src/api/compatibility/application/CompatibleApplicationResourceBranchDataProvider.ts
  var import_vscode_azext_utils9 = __toESM(require_src3());

  // src/api/compatibility/CompatibleBranchDataProviderBase.ts
  var import_vscode_azext_utils6 = __toESM(require_src3());
  var vscode2 = __toESM(__require("vscode"));
  var CompatibleBranchDataProviderBase = class extends import_vscode_azext_utils6.AzExtTreeDataProvider {
    constructor(loadMoreCommandId) {
      super({}, loadMoreCommandId);
      this.overrideOnDidChangeTreeDataEmitter = new vscode2.EventEmitter();
    }
    //#region TreeDataProvider
    // @ts-expect-error overriding a property with an accessor
    get onDidChangeTreeData() {
      return this.overrideOnDidChangeTreeDataEmitter.event;
    }
    set onDidChangeTreeData(_) {
    }
    getParent(treeItem) {
      return Promise.resolve(treeItem.parent);
    }
    getChildren(treeItem) {
      return __async(this, null, function* () {
        return __superGet(CompatibleBranchDataProviderBase.prototype, this, "getChildren").call(this, treeItem);
      });
    }
    //#endregion
    //#region AzExtTreeDataProvider
    refreshUIOnly(treeItem) {
      this.overrideOnDidChangeTreeDataEmitter.fire(treeItem);
    }
    showTreeItemPicker(_expectedContextValues, _context, _startingTreeItem) {
      return __async(this, null, function* () {
        throw new Error("Use the Resources extension API to do showTreeItemPicker");
      });
    }
    findTreeItem(_fullId, _context) {
      return __async(this, null, function* () {
        throw new Error("Use the Resources extension API to do findTreeItem");
      });
    }
    // TODO: this (probably?) shouldn't remain in the code we release, but will be helpful in testing to ensure we never access the root
    // @ts-expect-error TypeScript is unhappy that we're overriding something that it doesn't know is secretly on the base class
    get _rootTreeItem() {
      throw new Error("The root tree item should not be accessed in a BranchDataProvider");
    }
    // This is assigned to in the constructor of AzExtTreeDataProvider
    // @ts-expect-error TypeScript is unhappy that we're overriding something that it doesn't know is secretly on the base class
    set _rootTreeItem(_value) {
    }
    //#endregion AzExtTreeDataProvider
    dispose() {
      super.dispose();
      this.overrideOnDidChangeTreeDataEmitter.dispose();
    }
  };
  __name(CompatibleBranchDataProviderBase, "CompatibleBranchDataProviderBase");

  // src/api/compatibility/application/CompatibleApplicationResourceTreeItem.ts
  var import_vscode_azext_utils8 = __toESM(require_src3());
  var import_vscode6 = __require("vscode");

  // src/utils/azureUtils.ts
  var import_vscode_azext_azureutils3 = __toESM(require_src4());
  var import_vscode_azext_utils7 = __toESM(require_src3());
  var import_vscode5 = __require("vscode");

  // node_modules/vscode-uri/lib/esm/index.js
  var LIB;
  (() => {
    "use strict";
    var t = { 470: (t2) => {
      function e2(t3) {
        if ("string" != typeof t3)
          throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
      }
      __name(e2, "e");
      function r2(t3, e3) {
        for (var r3, n3 = "", o = 0, i = -1, a = 0, h2 = 0; h2 <= t3.length; ++h2) {
          if (h2 < t3.length)
            r3 = t3.charCodeAt(h2);
          else {
            if (47 === r3)
              break;
            r3 = 47;
          }
          if (47 === r3) {
            if (i === h2 - 1 || 1 === a)
              ;
            else if (i !== h2 - 1 && 2 === a) {
              if (n3.length < 2 || 2 !== o || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
                if (n3.length > 2) {
                  var s = n3.lastIndexOf("/");
                  if (s !== n3.length - 1) {
                    -1 === s ? (n3 = "", o = 0) : o = (n3 = n3.slice(0, s)).length - 1 - n3.lastIndexOf("/"), i = h2, a = 0;
                    continue;
                  }
                } else if (2 === n3.length || 1 === n3.length) {
                  n3 = "", o = 0, i = h2, a = 0;
                  continue;
                }
              }
              e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", o = 2);
            } else
              n3.length > 0 ? n3 += "/" + t3.slice(i + 1, h2) : n3 = t3.slice(i + 1, h2), o = h2 - i - 1;
            i = h2, a = 0;
          } else
            46 === r3 && -1 !== a ? ++a : a = -1;
        }
        return n3;
      }
      __name(r2, "r");
      var n2 = { resolve: function() {
        for (var t3, n3 = "", o = false, i = arguments.length - 1; i >= -1 && !o; i--) {
          var a;
          i >= 0 ? a = arguments[i] : (void 0 === t3 && (t3 = process.cwd()), a = t3), e2(a), 0 !== a.length && (n3 = a + "/" + n3, o = 47 === a.charCodeAt(0));
        }
        return n3 = r2(n3, !o), o ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
      }, normalize: function(t3) {
        if (e2(t3), 0 === t3.length)
          return ".";
        var n3 = 47 === t3.charCodeAt(0), o = 47 === t3.charCodeAt(t3.length - 1);
        return 0 !== (t3 = r2(t3, !n3)).length || n3 || (t3 = "."), t3.length > 0 && o && (t3 += "/"), n3 ? "/" + t3 : t3;
      }, isAbsolute: function(t3) {
        return e2(t3), t3.length > 0 && 47 === t3.charCodeAt(0);
      }, join: function() {
        if (0 === arguments.length)
          return ".";
        for (var t3, r3 = 0; r3 < arguments.length; ++r3) {
          var o = arguments[r3];
          e2(o), o.length > 0 && (void 0 === t3 ? t3 = o : t3 += "/" + o);
        }
        return void 0 === t3 ? "." : n2.normalize(t3);
      }, relative: function(t3, r3) {
        if (e2(t3), e2(r3), t3 === r3)
          return "";
        if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3)))
          return "";
        for (var o = 1; o < t3.length && 47 === t3.charCodeAt(o); ++o)
          ;
        for (var i = t3.length, a = i - o, h2 = 1; h2 < r3.length && 47 === r3.charCodeAt(h2); ++h2)
          ;
        for (var s = r3.length - h2, c = a < s ? a : s, f2 = -1, u = 0; u <= c; ++u) {
          if (u === c) {
            if (s > c) {
              if (47 === r3.charCodeAt(h2 + u))
                return r3.slice(h2 + u + 1);
              if (0 === u)
                return r3.slice(h2 + u);
            } else
              a > c && (47 === t3.charCodeAt(o + u) ? f2 = u : 0 === u && (f2 = 0));
            break;
          }
          var l = t3.charCodeAt(o + u);
          if (l !== r3.charCodeAt(h2 + u))
            break;
          47 === l && (f2 = u);
        }
        var p = "";
        for (u = o + f2 + 1; u <= i; ++u)
          u !== i && 47 !== t3.charCodeAt(u) || (0 === p.length ? p += ".." : p += "/..");
        return p.length > 0 ? p + r3.slice(h2 + f2) : (h2 += f2, 47 === r3.charCodeAt(h2) && ++h2, r3.slice(h2));
      }, _makeLong: function(t3) {
        return t3;
      }, dirname: function(t3) {
        if (e2(t3), 0 === t3.length)
          return ".";
        for (var r3 = t3.charCodeAt(0), n3 = 47 === r3, o = -1, i = true, a = t3.length - 1; a >= 1; --a)
          if (47 === (r3 = t3.charCodeAt(a))) {
            if (!i) {
              o = a;
              break;
            }
          } else
            i = false;
        return -1 === o ? n3 ? "/" : "." : n3 && 1 === o ? "//" : t3.slice(0, o);
      }, basename: function(t3, r3) {
        if (void 0 !== r3 && "string" != typeof r3)
          throw new TypeError('"ext" argument must be a string');
        e2(t3);
        var n3, o = 0, i = -1, a = true;
        if (void 0 !== r3 && r3.length > 0 && r3.length <= t3.length) {
          if (r3.length === t3.length && r3 === t3)
            return "";
          var h2 = r3.length - 1, s = -1;
          for (n3 = t3.length - 1; n3 >= 0; --n3) {
            var c = t3.charCodeAt(n3);
            if (47 === c) {
              if (!a) {
                o = n3 + 1;
                break;
              }
            } else
              -1 === s && (a = false, s = n3 + 1), h2 >= 0 && (c === r3.charCodeAt(h2) ? -1 == --h2 && (i = n3) : (h2 = -1, i = s));
          }
          return o === i ? i = s : -1 === i && (i = t3.length), t3.slice(o, i);
        }
        for (n3 = t3.length - 1; n3 >= 0; --n3)
          if (47 === t3.charCodeAt(n3)) {
            if (!a) {
              o = n3 + 1;
              break;
            }
          } else
            -1 === i && (a = false, i = n3 + 1);
        return -1 === i ? "" : t3.slice(o, i);
      }, extname: function(t3) {
        e2(t3);
        for (var r3 = -1, n3 = 0, o = -1, i = true, a = 0, h2 = t3.length - 1; h2 >= 0; --h2) {
          var s = t3.charCodeAt(h2);
          if (47 !== s)
            -1 === o && (i = false, o = h2 + 1), 46 === s ? -1 === r3 ? r3 = h2 : 1 !== a && (a = 1) : -1 !== r3 && (a = -1);
          else if (!i) {
            n3 = h2 + 1;
            break;
          }
        }
        return -1 === r3 || -1 === o || 0 === a || 1 === a && r3 === o - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, o);
      }, format: function(t3) {
        if (null === t3 || "object" != typeof t3)
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
        return function(t4, e3) {
          var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
          return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
        }(0, t3);
      }, parse: function(t3) {
        e2(t3);
        var r3 = { root: "", dir: "", base: "", ext: "", name: "" };
        if (0 === t3.length)
          return r3;
        var n3, o = t3.charCodeAt(0), i = 47 === o;
        i ? (r3.root = "/", n3 = 1) : n3 = 0;
        for (var a = -1, h2 = 0, s = -1, c = true, f2 = t3.length - 1, u = 0; f2 >= n3; --f2)
          if (47 !== (o = t3.charCodeAt(f2)))
            -1 === s && (c = false, s = f2 + 1), 46 === o ? -1 === a ? a = f2 : 1 !== u && (u = 1) : -1 !== a && (u = -1);
          else if (!c) {
            h2 = f2 + 1;
            break;
          }
        return -1 === a || -1 === s || 0 === u || 1 === u && a === s - 1 && a === h2 + 1 ? -1 !== s && (r3.base = r3.name = 0 === h2 && i ? t3.slice(1, s) : t3.slice(h2, s)) : (0 === h2 && i ? (r3.name = t3.slice(1, a), r3.base = t3.slice(1, s)) : (r3.name = t3.slice(h2, a), r3.base = t3.slice(h2, s)), r3.ext = t3.slice(a, s)), h2 > 0 ? r3.dir = t3.slice(0, h2 - 1) : i && (r3.dir = "/"), r3;
      }, sep: "/", delimiter: ":", win32: null, posix: null };
      n2.posix = n2, t2.exports = n2;
    } }, e = {};
    function r(n2) {
      var o = e[n2];
      if (void 0 !== o)
        return o.exports;
      var i = e[n2] = { exports: {} };
      return t[n2](i, i.exports, r), i.exports;
    }
    __name(r, "r");
    r.d = (t2, e2) => {
      for (var n2 in e2)
        r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: e2[n2] });
    }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
    };
    var n = {};
    (() => {
      var t2;
      if (r.r(n), r.d(n, { URI: () => g, Utils: () => O2 }), "object" == typeof process)
        t2 = "win32" === process.platform;
      else if ("object" == typeof navigator) {
        var e2 = navigator.userAgent;
        t2 = e2.indexOf("Windows") >= 0;
      }
      var o, i, a = (o = /* @__PURE__ */ __name(function(t3, e3) {
        return o = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t4, e4) {
          t4.__proto__ = e4;
        } || function(t4, e4) {
          for (var r2 in e4)
            Object.prototype.hasOwnProperty.call(e4, r2) && (t4[r2] = e4[r2]);
        }, o(t3, e3);
      }, "o"), function(t3, e3) {
        if ("function" != typeof e3 && null !== e3)
          throw new TypeError("Class extends value " + String(e3) + " is not a constructor or null");
        function r2() {
          this.constructor = t3;
        }
        __name(r2, "r");
        o(t3, e3), t3.prototype = null === e3 ? Object.create(e3) : (r2.prototype = e3.prototype, new r2());
      }), h2 = /^\w[\w\d+.-]*$/, s = /^\//, c = /^\/\//;
      function f2(t3, e3) {
        if (!t3.scheme && e3)
          throw new Error('[UriError]: Scheme is missing: {scheme: "", authority: "'.concat(t3.authority, '", path: "').concat(t3.path, '", query: "').concat(t3.query, '", fragment: "').concat(t3.fragment, '"}'));
        if (t3.scheme && !h2.test(t3.scheme))
          throw new Error("[UriError]: Scheme contains illegal characters.");
        if (t3.path) {
          if (t3.authority) {
            if (!s.test(t3.path))
              throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
          } else if (c.test(t3.path))
            throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
        }
      }
      __name(f2, "f");
      var u = "", l = "/", p = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, g = function() {
        function e3(t3, e4, r2, n2, o2, i2) {
          void 0 === i2 && (i2 = false), "object" == typeof t3 ? (this.scheme = t3.scheme || u, this.authority = t3.authority || u, this.path = t3.path || u, this.query = t3.query || u, this.fragment = t3.fragment || u) : (this.scheme = function(t4, e5) {
            return t4 || e5 ? t4 : "file";
          }(t3, i2), this.authority = e4 || u, this.path = function(t4, e5) {
            switch (t4) {
              case "https":
              case "http":
              case "file":
                e5 ? e5[0] !== l && (e5 = l + e5) : e5 = l;
            }
            return e5;
          }(this.scheme, r2 || u), this.query = n2 || u, this.fragment = o2 || u, f2(this, i2));
        }
        __name(e3, "e");
        return e3.isUri = function(t3) {
          return t3 instanceof e3 || !!t3 && "string" == typeof t3.authority && "string" == typeof t3.fragment && "string" == typeof t3.path && "string" == typeof t3.query && "string" == typeof t3.scheme && "string" == typeof t3.fsPath && "function" == typeof t3.with && "function" == typeof t3.toString;
        }, Object.defineProperty(e3.prototype, "fsPath", { get: function() {
          return C(this, false);
        }, enumerable: false, configurable: true }), e3.prototype.with = function(t3) {
          if (!t3)
            return this;
          var e4 = t3.scheme, r2 = t3.authority, n2 = t3.path, o2 = t3.query, i2 = t3.fragment;
          return void 0 === e4 ? e4 = this.scheme : null === e4 && (e4 = u), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = u), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = u), void 0 === o2 ? o2 = this.query : null === o2 && (o2 = u), void 0 === i2 ? i2 = this.fragment : null === i2 && (i2 = u), e4 === this.scheme && r2 === this.authority && n2 === this.path && o2 === this.query && i2 === this.fragment ? this : new v(e4, r2, n2, o2, i2);
        }, e3.parse = function(t3, e4) {
          void 0 === e4 && (e4 = false);
          var r2 = p.exec(t3);
          return r2 ? new v(r2[2] || u, _(r2[4] || u), _(r2[5] || u), _(r2[7] || u), _(r2[9] || u), e4) : new v(u, u, u, u, u);
        }, e3.file = function(e4) {
          var r2 = u;
          if (t2 && (e4 = e4.replace(/\\/g, l)), e4[0] === l && e4[1] === l) {
            var n2 = e4.indexOf(l, 2);
            -1 === n2 ? (r2 = e4.substring(2), e4 = l) : (r2 = e4.substring(2, n2), e4 = e4.substring(n2) || l);
          }
          return new v("file", r2, e4, u, u);
        }, e3.from = function(t3) {
          var e4 = new v(t3.scheme, t3.authority, t3.path, t3.query, t3.fragment);
          return f2(e4, true), e4;
        }, e3.prototype.toString = function(t3) {
          return void 0 === t3 && (t3 = false), A(this, t3);
        }, e3.prototype.toJSON = function() {
          return this;
        }, e3.revive = function(t3) {
          if (t3) {
            if (t3 instanceof e3)
              return t3;
            var r2 = new v(t3);
            return r2._formatted = t3.external, r2._fsPath = t3._sep === d ? t3.fsPath : null, r2;
          }
          return t3;
        }, e3;
      }(), d = t2 ? 1 : void 0, v = function(t3) {
        function e3() {
          var e4 = null !== t3 && t3.apply(this, arguments) || this;
          return e4._formatted = null, e4._fsPath = null, e4;
        }
        __name(e3, "e");
        return a(e3, t3), Object.defineProperty(e3.prototype, "fsPath", { get: function() {
          return this._fsPath || (this._fsPath = C(this, false)), this._fsPath;
        }, enumerable: false, configurable: true }), e3.prototype.toString = function(t4) {
          return void 0 === t4 && (t4 = false), t4 ? A(this, true) : (this._formatted || (this._formatted = A(this, false)), this._formatted);
        }, e3.prototype.toJSON = function() {
          var t4 = { $mid: 1 };
          return this._fsPath && (t4.fsPath = this._fsPath, t4._sep = d), this._formatted && (t4.external = this._formatted), this.path && (t4.path = this.path), this.scheme && (t4.scheme = this.scheme), this.authority && (t4.authority = this.authority), this.query && (t4.query = this.query), this.fragment && (t4.fragment = this.fragment), t4;
        }, e3;
      }(g), y = ((i = {})[58] = "%3A", i[47] = "%2F", i[63] = "%3F", i[35] = "%23", i[91] = "%5B", i[93] = "%5D", i[64] = "%40", i[33] = "%21", i[36] = "%24", i[38] = "%26", i[39] = "%27", i[40] = "%28", i[41] = "%29", i[42] = "%2A", i[43] = "%2B", i[44] = "%2C", i[59] = "%3B", i[61] = "%3D", i[32] = "%20", i);
      function m(t3, e3, r2) {
        for (var n2 = void 0, o2 = -1, i2 = 0; i2 < t3.length; i2++) {
          var a2 = t3.charCodeAt(i2);
          if (a2 >= 97 && a2 <= 122 || a2 >= 65 && a2 <= 90 || a2 >= 48 && a2 <= 57 || 45 === a2 || 46 === a2 || 95 === a2 || 126 === a2 || e3 && 47 === a2 || r2 && 91 === a2 || r2 && 93 === a2 || r2 && 58 === a2)
            -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), void 0 !== n2 && (n2 += t3.charAt(i2));
          else {
            void 0 === n2 && (n2 = t3.substr(0, i2));
            var h3 = y[a2];
            void 0 !== h3 ? (-1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2, i2)), o2 = -1), n2 += h3) : -1 === o2 && (o2 = i2);
          }
        }
        return -1 !== o2 && (n2 += encodeURIComponent(t3.substring(o2))), void 0 !== n2 ? n2 : t3;
      }
      __name(m, "m");
      function b(t3) {
        for (var e3 = void 0, r2 = 0; r2 < t3.length; r2++) {
          var n2 = t3.charCodeAt(r2);
          35 === n2 || 63 === n2 ? (void 0 === e3 && (e3 = t3.substr(0, r2)), e3 += y[n2]) : void 0 !== e3 && (e3 += t3[r2]);
        }
        return void 0 !== e3 ? e3 : t3;
      }
      __name(b, "b");
      function C(e3, r2) {
        var n2;
        return n2 = e3.authority && e3.path.length > 1 && "file" === e3.scheme ? "//".concat(e3.authority).concat(e3.path) : 47 === e3.path.charCodeAt(0) && (e3.path.charCodeAt(1) >= 65 && e3.path.charCodeAt(1) <= 90 || e3.path.charCodeAt(1) >= 97 && e3.path.charCodeAt(1) <= 122) && 58 === e3.path.charCodeAt(2) ? r2 ? e3.path.substr(1) : e3.path[1].toLowerCase() + e3.path.substr(2) : e3.path, t2 && (n2 = n2.replace(/\//g, "\\")), n2;
      }
      __name(C, "C");
      function A(t3, e3) {
        var r2 = e3 ? b : m, n2 = "", o2 = t3.scheme, i2 = t3.authority, a2 = t3.path, h3 = t3.query, s2 = t3.fragment;
        if (o2 && (n2 += o2, n2 += ":"), (i2 || "file" === o2) && (n2 += l, n2 += l), i2) {
          var c2 = i2.indexOf("@");
          if (-1 !== c2) {
            var f3 = i2.substr(0, c2);
            i2 = i2.substr(c2 + 1), -1 === (c2 = f3.lastIndexOf(":")) ? n2 += r2(f3, false, false) : (n2 += r2(f3.substr(0, c2), false, false), n2 += ":", n2 += r2(f3.substr(c2 + 1), false, true)), n2 += "@";
          }
          -1 === (c2 = (i2 = i2.toLowerCase()).lastIndexOf(":")) ? n2 += r2(i2, false, true) : (n2 += r2(i2.substr(0, c2), false, true), n2 += i2.substr(c2));
        }
        if (a2) {
          if (a2.length >= 3 && 47 === a2.charCodeAt(0) && 58 === a2.charCodeAt(2))
            (u2 = a2.charCodeAt(1)) >= 65 && u2 <= 90 && (a2 = "/".concat(String.fromCharCode(u2 + 32), ":").concat(a2.substr(3)));
          else if (a2.length >= 2 && 58 === a2.charCodeAt(1)) {
            var u2;
            (u2 = a2.charCodeAt(0)) >= 65 && u2 <= 90 && (a2 = "".concat(String.fromCharCode(u2 + 32), ":").concat(a2.substr(2)));
          }
          n2 += r2(a2, true, false);
        }
        return h3 && (n2 += "?", n2 += r2(h3, false, false)), s2 && (n2 += "#", n2 += e3 ? s2 : m(s2, false, false)), n2;
      }
      __name(A, "A");
      function w(t3) {
        try {
          return decodeURIComponent(t3);
        } catch (e3) {
          return t3.length > 3 ? t3.substr(0, 3) + w(t3.substr(3)) : t3;
        }
      }
      __name(w, "w");
      var x2 = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
      function _(t3) {
        return t3.match(x2) ? t3.replace(x2, function(t4) {
          return w(t4);
        }) : t3;
      }
      __name(_, "_");
      var O2, P = r(470), j = /* @__PURE__ */ __name(function(t3, e3, r2) {
        if (r2 || 2 === arguments.length)
          for (var n2, o2 = 0, i2 = e3.length; o2 < i2; o2++)
            !n2 && o2 in e3 || (n2 || (n2 = Array.prototype.slice.call(e3, 0, o2)), n2[o2] = e3[o2]);
        return t3.concat(n2 || Array.prototype.slice.call(e3));
      }, "j"), I2 = P.posix || P, U2 = "/";
      !function(t3) {
        t3.joinPath = function(t4) {
          for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
            e3[r2 - 1] = arguments[r2];
          return t4.with({ path: I2.join.apply(I2, j([t4.path], e3, false)) });
        }, t3.resolvePath = function(t4) {
          for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
            e3[r2 - 1] = arguments[r2];
          var n2 = t4.path, o2 = false;
          n2[0] !== U2 && (n2 = U2 + n2, o2 = true);
          var i2 = I2.resolve.apply(I2, j([n2], e3, false));
          return o2 && i2[0] === U2 && !t4.authority && (i2 = i2.substring(1)), t4.with({ path: i2 });
        }, t3.dirname = function(t4) {
          if (0 === t4.path.length || t4.path === U2)
            return t4;
          var e3 = I2.dirname(t4.path);
          return 1 === e3.length && 46 === e3.charCodeAt(0) && (e3 = ""), t4.with({ path: e3 });
        }, t3.basename = function(t4) {
          return I2.basename(t4.path);
        }, t3.extname = function(t4) {
          return I2.extname(t4.path);
        };
      }(O2 || (O2 = {}));
    })(), LIB = n;
  })();
  var { URI, Utils: Utils2 } = LIB;

  // src/azureExtensions.ts
  var azureExtensions = [
    {
      name: "vscode-azurefunctions",
      label: "Functions",
      resourceTypes: [
        "FunctionApp" /* FunctionApp */
      ],
      tutorial: {
        label: localize("deployServerless", "Create and deploy a serverless app"),
        url: "https://aka.ms/AAb5xpj"
      },
      reportIssueCommandId: "azureFunctions.reportIssue"
    },
    {
      name: "vscode-azureappservice",
      label: "App Service",
      resourceTypes: [
        "AppServices" /* AppServices */
      ],
      tutorial: {
        label: localize("deployWebApp", "Deploy a web app"),
        url: "https://aka.ms/AAb5dz2"
      },
      reportIssueCommandId: "appService.ReportIssue"
    },
    {
      name: "vscode-azurestaticwebapps",
      label: "Static Web Apps",
      resourceTypes: [
        "StaticWebApps" /* StaticWebApps */
      ],
      tutorial: {
        label: localize("deployStatic", "Deploy a static app"),
        url: "https://aka.ms/AAb5xp8"
      },
      reportIssueCommandId: "staticWebApps.reportIssue"
    },
    {
      name: "vscode-azureresourcegroups",
      label: "Resource Groups",
      resourceTypes: [],
      reportIssueCommandId: "azureResourceGroups.reportIssue"
    },
    {
      name: "vscode-azurestorage",
      label: "Storage",
      resourceTypes: [
        "StorageAccounts" /* StorageAccounts */
      ],
      reportIssueCommandId: "azureStorage.reportIssue"
    },
    {
      name: "vscode-azurevirtualmachines",
      label: "Virtual Machines",
      resourceTypes: [
        "VirtualMachines" /* VirtualMachines */
      ],
      reportIssueCommandId: "azureVirtualMachines.reportIssue"
    },
    {
      name: "vscode-cosmosdb",
      label: "Databases",
      resourceTypes: [
        "AzureCosmosDb" /* AzureCosmosDb */,
        "PostgresqlServersStandard" /* PostgresqlServersStandard */,
        "PostgresqlServersFlexible" /* PostgresqlServersFlexible */
      ],
      reportIssueCommandId: "azureDatabases.reportIssue"
    },
    {
      name: "vscode-azurecontainerapps",
      label: "Container Apps",
      resourceTypes: [
        "ContainerAppsEnvironment" /* ContainerAppsEnvironment */
      ],
      reportIssueCommandId: "containerApps.reportIssue"
    },
    {
      name: "vscode-azurespringcloud",
      publisher: "vscjava",
      label: "Spring Apps",
      resourceTypes: [
        "SpringApps" /* SpringApps */
      ],
      reportIssueCommandId: "springApps.reportIssue"
    }
  ];

  // src/utils/treeUtils.ts
  var treeUtils;
  ((treeUtils2) => {
    function getIconPath2(iconName) {
      return Utils2.joinPath(getResourcesPath(), `${iconName}.svg`);
    }
    treeUtils2.getIconPath = getIconPath2;
    __name(getIconPath2, "getIconPath");
    function getThemedIconPath(iconName) {
      return {
        light: Utils2.joinPath(getResourcesPath(), "light", `${iconName}.svg`),
        dark: Utils2.joinPath(getResourcesPath(), "dark", `${iconName}.svg`)
      };
    }
    treeUtils2.getThemedIconPath = getThemedIconPath;
    __name(getThemedIconPath, "getThemedIconPath");
    function getResourcesPath() {
      return Utils2.joinPath(ext.context.extensionUri, "resources");
    }
    __name(getResourcesPath, "getResourcesPath");
  })(treeUtils || (treeUtils = {}));

  // src/utils/azureUtils.ts
  function getIconPath(azExtResourceType) {
    return treeUtils.getIconPath(azExtResourceType ? Utils2.joinPath(URI.parse("azureIcons"), azExtResourceType).fsPath : URI.parse("resource").fsPath);
  }
  __name(getIconPath, "getIconPath");
  function getName(azExtResourceType) {
    var _a7;
    return azExtResourceType ? (_a7 = azExtDisplayInfo[azExtResourceType]) == null ? void 0 : _a7.displayName : void 0;
  }
  __name(getName, "getName");
  var azExtDisplayInfo = {
    ApplicationInsights: { displayName: localize("insightsComponents", "Application Insights") },
    AppServiceKubernetesEnvironment: { displayName: localize("containerService", "App Service Kubernetes Environment") },
    AppServicePlans: { displayName: localize("serverFarms", "App Service plans") },
    AppServices: { displayName: localize("webApp", "App Services") },
    AvailabilitySets: { displayName: localize("availabilitySets", "Availability sets") },
    AzureCosmosDb: { displayName: localize("documentDB", "Azure Cosmos DB") },
    BatchAccounts: { displayName: localize("batchAccounts", "Batch accounts") },
    ContainerAppsEnvironment: { displayName: localize("containerAppsEnv", "Container Apps") },
    ContainerRegistry: { displayName: localize("containerRegistry", "Container registry") },
    Disks: { displayName: localize("disks", "Disks") },
    FrontDoorAndCdnProfiles: { displayName: localize("frontDoorAndcdnProfiles", "Front Door and CDN profiles") },
    FunctionApp: { displayName: localize("functionApp", "Function App") },
    Images: { displayName: localize("images", "Images") },
    LoadBalancers: { displayName: localize("loadBalancers", "Load balancers") },
    LogicApp: { displayName: localize("logicApp", "Logic App") },
    MysqlServers: { displayName: localize("mysqlServers", "MySql servers") },
    NetworkInterfaces: { displayName: localize("networkInterfaces", "Network interfaces") },
    NetworkSecurityGroups: { displayName: localize("networkSecurityGroups", "Network security groups") },
    NetworkWatchers: { displayName: localize("networkWatchers", "Network watchers") },
    OperationalInsightsWorkspaces: { displayName: localize("operationalInsightsWorkspaces", "Operational Insights workspaces") },
    OperationsManagementSolutions: { displayName: localize("operationsManagementSolutions", "Operations management solutions") },
    PostgresqlServersFlexible: { displayName: localize("postgreSqlServers", "PostgreSQL servers (Flexible)") },
    PostgresqlServersStandard: { displayName: localize("postgreSqlServers", "PostgreSQL servers (Standard)") },
    PublicIpAddresses: { displayName: localize("publicIpAddresses", "Public IP addresses") },
    SpringApps: { displayName: localize("springApps", "Spring Apps") },
    SqlDatabases: { displayName: localize("sqlDatabases", "SQL databases") },
    SqlServers: { displayName: localize("sqlServers", "SQL servers") },
    StaticWebApps: { displayName: localize("staticWebApp", "Static Web Apps") },
    StorageAccounts: { displayName: localize("storageAccounts", "Storage accounts") },
    VirtualMachines: { displayName: localize("virtualMachines", "Virtual machines") },
    VirtualMachineScaleSets: { displayName: localize("virtualMachineScaleSets", "Virtual machine scale sets") },
    VirtualNetworks: { displayName: localize("virtualNetworks", "Virtual networks") }
  };

  // src/api/compatibility/application/CompatibleApplicationResourceTreeItem.ts
  var _CompatibleResolvedApplicationResourceTreeItem = class extends import_vscode_azext_utils8.AzExtParentTreeItem {
    constructor(resource, resolved, __subscription, __treeDataProvider, azureResource) {
      var _a7;
      super(
        {
          treeDataProvider: __treeDataProvider,
          valuesToMask: [],
          subscription: __subscription,
          parent: void 0,
          removeChildFromCache: () => {
            this.treeDataProvider.refreshUIOnly(void 0);
          }
        }
      );
      this.contextValues = /* @__PURE__ */ new Set();
      this.valuesToMask = [];
      this.cTime = Date.now();
      this.mTime = Date.now();
      this.resource = azureResource;
      this.resolveResult = resolved;
      this.data = resource;
      this.tags = resource.tags;
      this.contextValues.add(_CompatibleResolvedApplicationResourceTreeItem.contextValue);
      if (azureResource.resourceType) {
        this.contextValues.add(azureResource.resourceType);
      }
      (_a7 = resolved.contextValuesToAdd) == null ? void 0 : _a7.forEach((value) => this.contextValues.add(value));
    }
    get contextValue() {
      return Array.from(this.contextValues.values()).sort().join(";");
    }
    // override
    get effectiveId() {
      return void 0;
    }
    get label() {
      return (0, import_vscode_azext_utils8.nonNullProp)(this.data, "name");
    }
    get iconPath() {
      return getIconPath(this.data.resourceType);
    }
    get description() {
      var _a7;
      return (_a7 = this.resolveResult) == null ? void 0 : _a7.description;
    }
    get collapsibleState() {
      var _a7, _b2, _c2;
      return ((_c2 = (_a7 = this.resolveResult) == null ? void 0 : _a7.initialCollapsibleState) != null ? _c2 : !!((_b2 = this.resolveResult) == null ? void 0 : _b2.loadMoreChildrenImpl)) ? import_vscode6.TreeItemCollapsibleState.Collapsed : import_vscode6.TreeItemCollapsibleState.None;
    }
    static Create(resource, resolveResult, subscription, treeDataProvider, azureResource) {
      const resolvable = new _CompatibleResolvedApplicationResourceTreeItem(resource, resolveResult, subscription, treeDataProvider, azureResource);
      return createResolvableProxy(resolvable);
    }
    loadMoreChildrenImpl(clearCache, context) {
      return __async(this, null, function* () {
        var _a7;
        if ((_a7 = this.resolveResult) == null ? void 0 : _a7.loadMoreChildrenImpl) {
          return yield this.loadMoreChildrenImpl(clearCache, context);
        } else {
          return [];
        }
      });
    }
    hasMoreChildrenImpl() {
      return false;
    }
    refreshImpl() {
      return __async(this, null, function* () {
        this.mTime = Date.now();
      });
    }
  };
  var CompatibleResolvedApplicationResourceTreeItem = _CompatibleResolvedApplicationResourceTreeItem;
  __name(CompatibleResolvedApplicationResourceTreeItem, "CompatibleResolvedApplicationResourceTreeItem");
  CompatibleResolvedApplicationResourceTreeItem.contextValue = "azureResource";
  function createResolvableProxy(resolvable) {
    const providerHandler = {
      get: (target, name) => {
        var _a7, _b2;
        return (_b2 = (_a7 = resolvable == null ? void 0 : resolvable.resolveResult) == null ? void 0 : _a7[name]) != null ? _b2 : target[name];
      },
      set: (target, name, value) => {
        var _a7;
        if (resolvable.resolveResult && ((_a7 = Object.getOwnPropertyDescriptor(resolvable.resolveResult, name)) == null ? void 0 : _a7.writable)) {
          resolvable.resolveResult[name] = value;
          return true;
        }
        target[name] = value;
        return true;
      },
      /**
       * Needed to be compatible with any usages of instanceof in utils/azureutils
       *
       * If resolved returns AzExtTreeItem or AzExtParentTreeItem depending on if resolveResult has loadMoreChildrenImpl defined
       * If not resolved, returns AppResourceTreeItem
       */
      getPrototypeOf: (target) => {
        if (resolvable == null ? void 0 : resolvable.resolveResult) {
          return resolvable.resolveResult.loadMoreChildrenImpl ? import_vscode_azext_utils8.AzExtParentTreeItem.prototype : import_vscode_azext_utils8.AzExtTreeItem.prototype;
        }
        return target;
      }
    };
    return new Proxy(resolvable, providerHandler);
  }
  __name(createResolvableProxy, "createResolvableProxy");

  // src/api/compatibility/application/CompatibleApplicationResourceBranchDataProvider.ts
  var CompatibleApplicationResourceBranchDataProvider = class extends CompatibleBranchDataProviderBase {
    constructor(resolver, loadMoreCommandId) {
      super(loadMoreCommandId);
      this.resolver = resolver;
    }
    getResourceItem(element) {
      return __async(this, null, function* () {
        var _a7;
        const oldAppResource = __spreadProps(__spreadValues({}, element), {
          type: element.azureResourceType.type,
          kind: (_a7 = element.azureResourceType.kinds) == null ? void 0 : _a7.join(";")
        });
        const subscriptionContext = (0, import_vscode_azext_utils9.createSubscriptionContext)(element.subscription);
        const resolved = yield this.resolver.resolveResource(subscriptionContext, oldAppResource);
        const result = CompatibleResolvedApplicationResourceTreeItem.Create(element, resolved, subscriptionContext, this, element);
        Object.defineProperty(result, "fullId", {
          get: () => {
            return element.id;
          }
        });
        Object.defineProperty(result, "id", {
          get: () => {
            return element.id;
          }
        });
        return result;
      });
    }
  };
  __name(CompatibleApplicationResourceBranchDataProvider, "CompatibleApplicationResourceBranchDataProvider");

  // src/api/compatibility/registerApplicationResourceResolver.ts
  var applicationResourceResolvers = {};
  function registerApplicationResourceResolver(type, resolver) {
    return (0, import_vscode_azext_utils10.callWithTelemetryAndErrorHandlingSync)("registerApplicationResourceResolver", () => {
      if (applicationResourceResolvers[type]) {
        throw new Error(`Application resource resolver with id '${type}' has already been registered.`);
      }
      applicationResourceResolvers[type] = resolver;
      ext.emitters.onDidRegisterResolver.fire(resolver);
      const compat = new CompatibleApplicationResourceBranchDataProvider(
        resolver,
        "azureResourceGroups.loadMore"
        /** TODO: what is the correct value for this? */
      );
      const disposable = ext.v2.api.resources.registerAzureResourceBranchDataProvider(type, compat);
      return new import_vscode7.Disposable(() => {
        delete applicationResourceResolvers[type];
        disposable.dispose();
        compat.dispose();
      });
    });
  }
  __name(registerApplicationResourceResolver, "registerApplicationResourceResolver");

  // src/api/compatibility/registerWorkspaceResourceProvider.ts
  var import_vscode_azext_utils11 = __toESM(require_src3());
  var import_vscode8 = __require("vscode");

  // src/api/compatibility/workspace/CompatibilityWorkspaceResourceProvider.ts
  var CompatibilityWorkspaceResourceProvider = class {
    constructor(resourceType3, provider, compatTreeDataProvider) {
      this.resourceType = resourceType3;
      this.provider = provider;
      this.compatTreeDataProvider = compatTreeDataProvider;
      // No comparable mechanism in v1, leave as undefined
      this.onDidChangeResource = void 0;
    }
    getResources() {
      return __async(this, null, function* () {
        const resources = yield this.provider.provideResources(
          // pass in stub parent
          {
            treeDataProvider: this.compatTreeDataProvider,
            valuesToMask: [],
            parent: void 0,
            fullId: ""
            // prevent ids from starting with undefined
          }
        );
        if (resources) {
          return resources.map((resource) => {
            return Object.assign(
              resource,
              {
                // omit id because it's already in the treeItem
                resourceType: this.resourceType,
                name: resource.label
              }
            );
          });
        }
        return [];
      });
    }
  };
  __name(CompatibilityWorkspaceResourceProvider, "CompatibilityWorkspaceResourceProvider");

  // src/api/compatibility/workspace/CompatibleWorkspaceResourceBranchDataProvider.ts
  var CompatibleWorkspaceResourceBranchDataProvider = class extends CompatibleBranchDataProviderBase {
    getResourceItem(element) {
      return __async(this, null, function* () {
        return element;
      });
    }
  };
  __name(CompatibleWorkspaceResourceBranchDataProvider, "CompatibleWorkspaceResourceBranchDataProvider");

  // src/api/compatibility/registerWorkspaceResourceProvider.ts
  var workspaceResourceProviders = {};
  function registerWorkspaceResourceProvider(resourceType3, provider) {
    workspaceResourceProviders[resourceType3] = provider;
    return (0, import_vscode_azext_utils11.callWithTelemetryAndErrorHandlingSync)("registerWorkspaceResourceProvider", () => {
      const disposables = [];
      ext.actions.refreshWorkspaceTree();
      const compatBranchDataProvider = new CompatibleWorkspaceResourceBranchDataProvider("azureWorkspace.loadMore");
      disposables.push(ext.v2.api.resources.registerWorkspaceResourceProvider(new CompatibilityWorkspaceResourceProvider(resourceType3, provider, compatBranchDataProvider)));
      disposables.push(ext.v2.api.resources.registerWorkspaceResourceBranchDataProvider(resourceType3, compatBranchDataProvider));
      return new import_vscode8.Disposable(() => {
        for (const disposable of disposables) {
          disposable.dispose();
        }
        delete workspaceResourceProviders[resourceType3];
        ext.actions.refreshWorkspaceTree();
      });
    });
  }
  __name(registerWorkspaceResourceProvider, "registerWorkspaceResourceProvider");

  // src/api/createAzureResourcesHostApi.ts
  var import_vscode_azext_utils13 = __toESM(require_src3());
  var vscode3 = __toESM(__require("vscode"));

  // src/commands/revealResource.ts
  var import_vscode_azext_utils12 = __toESM(require_src3());
  function revealResource(context, resourceId3, options) {
    return __async(this, null, function* () {
      setTelemetryPropertiesForId(context, resourceId3);
      try {
        const item = yield ext.v2.api.resources.azureResourceTreeDataProvider.findItemById(resourceId3);
        if (item) {
          yield ext.appResourceTreeView.reveal(item, options != null ? options : { expand: false, focus: true, select: true });
        }
      } catch (error) {
        context.telemetry.properties.revealError = (0, import_vscode_azext_utils12.parseError)(error).message;
      }
    });
  }
  __name(revealResource, "revealResource");
  function setTelemetryPropertiesForId(context, resourceId3) {
    var _a7;
    const parsedAzureResourceId = parsePartialAzureResourceId(resourceId3);
    const resourceKind = getResourceKindFromId(parsedAzureResourceId);
    context.telemetry.properties.resourceKind = resourceKind;
    if (resourceKind === "resource") {
      context.telemetry.properties.resourceType = (_a7 = parsedAzureResourceId.provider) == null ? void 0 : _a7.replace(/\//g, "|");
    }
  }
  __name(setTelemetryPropertiesForId, "setTelemetryPropertiesForId");
  function parsePartialAzureResourceId(id) {
    const matches = id.match(/^\/subscriptions\/([^\/]*)(\/resourceGroups\/([^\/]*)(\/providers\/([^\/]*\/[^\/]*)\/([^\/]*))?)?$/i);
    return {
      rawId: id,
      subscriptionId: matches == null ? void 0 : matches[1],
      resourceGroup: matches == null ? void 0 : matches[3],
      provider: matches == null ? void 0 : matches[5],
      resourceName: matches == null ? void 0 : matches[6]
    };
  }
  __name(parsePartialAzureResourceId, "parsePartialAzureResourceId");
  function getResourceKindFromId(parsedId) {
    if (parsedId.resourceName) {
      return "resource";
    } else if (parsedId.resourceGroup) {
      return "resourceGroup";
    } else if (parsedId.subscriptionId) {
      return "subscription";
    }
    throw new Error("Invalid Azure Resource Id");
  }
  __name(getResourceKindFromId, "getResourceKindFromId");

  // src/api/createAzureResourcesHostApi.ts
  function createAzureResourcesHostApi(azureResourceProviderManager, azureResourceBranchDataProviderManager, azureResourceTreeDataProvider, workspaceResourceProviderManager, workspaceResourceBranchDataProviderManager, workspaceResourceTreeDataProvider) {
    return {
      azureResourceTreeDataProvider,
      workspaceResourceTreeDataProvider,
      registerAzureResourceProvider: (provider) => {
        azureResourceProviderManager.addResourceProvider(provider);
        return new vscode3.Disposable(() => azureResourceProviderManager.removeResourceProvider(provider));
      },
      registerAzureResourceBranchDataProvider: (type, provider) => {
        azureResourceBranchDataProviderManager.addProvider(type, provider);
        return new vscode3.Disposable(() => azureResourceBranchDataProviderManager.removeProvider(type));
      },
      registerWorkspaceResourceProvider: (provider) => {
        workspaceResourceProviderManager.addResourceProvider(provider);
        return new vscode3.Disposable(() => workspaceResourceProviderManager.removeResourceProvider(provider));
      },
      registerWorkspaceResourceBranchDataProvider: (type, provider) => {
        workspaceResourceBranchDataProviderManager.addProvider(type, provider);
        return new vscode3.Disposable(() => workspaceResourceBranchDataProviderManager.removeProvider(type));
      },
      revealAzureResource: (id, options) => {
        return (0, import_vscode_azext_utils13.callWithTelemetryAndErrorHandling)("internalRevealAzureResource", (context) => {
          context.errorHandling.rethrow = true;
          context.errorHandling.suppressDisplay = true;
          context.errorHandling.suppressReportIssue = true;
          return revealResource(context, id, options);
        });
      }
    };
  }
  __name(createAzureResourcesHostApi, "createAzureResourcesHostApi");

  // src/utils/wrapFunctionsInTelemetry.ts
  var import_vscode_azext_utils14 = __toESM(require_src3());
  function stringifyError(e) {
    const error = (0, import_vscode_azext_utils14.parseError)(e);
    let str = `${error.message}`;
    if (error.stack) {
      str = str.concat(`
		at ${error.stack.split("\n").join("\n		")}`);
    }
    return str;
  }
  __name(stringifyError, "stringifyError");
  function handleError(e, functionName) {
    ext.outputChannel.appendLog(`Internal error: '${functionName}' threw an exception
	${stringifyError(e)}`);
    if (e instanceof Error) {
      e.message = `Internal error: '${functionName}' threw exception ${(0, import_vscode_azext_utils14.parseError)(e).message}`;
    }
    throw e;
  }
  __name(handleError, "handleError");
  function wrapFunctionsInTelemetry(functions, options) {
    const wrappedFunctions = {};
    Object.entries(functions).forEach(([functionName, func]) => {
      wrappedFunctions[functionName] = (...args) => {
        var _a7;
        return (0, import_vscode_azext_utils14.callWithTelemetryAndErrorHandling)(((_a7 = options == null ? void 0 : options.callbackIdPrefix) != null ? _a7 : "") + functionName, (context) => __async(this, null, function* () {
          var _a8, _b2;
          context.errorHandling.rethrow = true;
          context.errorHandling.suppressDisplay = true;
          context.errorHandling.suppressReportIssue = true;
          (_a8 = options == null ? void 0 : options.beforeHook) == null ? void 0 : _a8.call(options, context);
          try {
            return yield func(...args);
          } catch (e) {
            handleError(e, ((_b2 = options == null ? void 0 : options.callbackIdPrefix) != null ? _b2 : "") + functionName);
          }
        }));
      };
    });
    return wrappedFunctions;
  }
  __name(wrapFunctionsInTelemetry, "wrapFunctionsInTelemetry");
  function wrapFunctionsInTelemetrySync(functions, options) {
    const wrappedFunctions = {};
    Object.entries(functions).forEach(([functionName, func]) => {
      wrappedFunctions[functionName] = (...args) => {
        var _a7;
        return (0, import_vscode_azext_utils14.callWithTelemetryAndErrorHandlingSync)(((_a7 = options == null ? void 0 : options.callbackIdPrefix) != null ? _a7 : "") + functionName, (context) => {
          var _a8, _b2;
          context.errorHandling.rethrow = true;
          context.errorHandling.suppressDisplay = true;
          context.errorHandling.suppressReportIssue = true;
          (_a8 = options == null ? void 0 : options.beforeHook) == null ? void 0 : _a8.call(options, context);
          try {
            return func(...args);
          } catch (e) {
            handleError(e, ((_b2 = options == null ? void 0 : options.callbackIdPrefix) != null ? _b2 : "") + functionName);
          }
        });
      };
    });
    return wrappedFunctions;
  }
  __name(wrapFunctionsInTelemetrySync, "wrapFunctionsInTelemetrySync");

  // src/api/createWrappedAzureResourcesExtensionApi.ts
  function createWrappedAzureResourcesExtensionApi(api, extensionId) {
    const wrapOptions = {
      callbackIdPrefix: "api.",
      beforeHook: (context) => {
        context.telemetry.properties.callingExtensionId = extensionId;
        context.telemetry.properties.apiVersion = api.apiVersion;
      }
    };
    return Object.freeze({
      apiVersion: api.apiVersion,
      activity: wrapFunctionsInTelemetry({
        registerActivity: api.activity.registerActivity.bind(api)
      }, wrapOptions),
      resources: __spreadValues(__spreadValues({
        azureResourceTreeDataProvider: api.resources.azureResourceTreeDataProvider,
        workspaceResourceTreeDataProvider: api.resources.workspaceResourceTreeDataProvider
      }, wrapFunctionsInTelemetry({
        revealAzureResource: api.resources.revealAzureResource.bind(api)
      }, wrapOptions)), wrapFunctionsInTelemetrySync({
        registerAzureResourceBranchDataProvider: api.resources.registerAzureResourceBranchDataProvider.bind(api),
        registerAzureResourceProvider: api.resources.registerAzureResourceProvider.bind(api),
        registerWorkspaceResourceProvider: api.resources.registerWorkspaceResourceProvider.bind(api),
        registerWorkspaceResourceBranchDataProvider: api.resources.registerWorkspaceResourceBranchDataProvider.bind(api)
      }, wrapOptions))
    });
  }
  __name(createWrappedAzureResourcesExtensionApi, "createWrappedAzureResourcesExtensionApi");

  // src/api/DefaultAzureResourceProvider.ts
  var import_vscode_azext_azureutils5 = __toESM(require_src4());
  var import_vscode_azext_utils15 = __toESM(require_src3());
  var vscode4 = __toESM(__require("vscode"));

  // src/utils/azureClients.ts
  var import_vscode_azext_azureutils4 = __toESM(require_src4());
  function createResourceClient(context) {
    return __async(this, null, function* () {
      if ((0, import_vscode_azext_azureutils4.parseClientContext)(context).isCustomCloud) {
        return (0, import_vscode_azext_azureutils4.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src10(), src_exports5))).ResourceManagementClient);
      } else {
        return (0, import_vscode_azext_azureutils4.createAzureClient)(context, (yield Promise.resolve().then(() => (init_src11(), src_exports6))).ResourceManagementClient);
      }
    });
  }
  __name(createResourceClient, "createResourceClient");

  // src/api/DefaultAzureResourceProvider.ts
  var DefaultAzureResourceProvider = class {
    constructor() {
      this.onDidChangeResourceEmitter = new vscode4.EventEmitter();
      this.onDidChangeResource = this.onDidChangeResourceEmitter.event;
    }
    getResources(subscription) {
      return (0, import_vscode_azext_utils15.callWithTelemetryAndErrorHandling)(
        "defaultAzureResourceProvider.getResources",
        (context) => __async(this, null, function* () {
          const azureResources = yield listResources(context, subscription);
          const resourceGroups = yield listResourceGroups(context, subscription);
          return [...azureResources, ...resourceGroups];
        })
      );
    }
  };
  __name(DefaultAzureResourceProvider, "DefaultAzureResourceProvider");
  function listResources(context, subscription) {
    return __async(this, null, function* () {
      const subContext = (0, import_vscode_azext_utils15.createSubscriptionContext)(subscription);
      const client = yield createResourceClient([context, subContext]);
      const allResources = yield import_vscode_azext_azureutils5.uiUtils.listAllIterator(client.resources.list());
      const allResourcesDeduped = [...new Map(allResources.map((item) => [item.id, item])).values()];
      context.telemetry.measurements.resourceCount = allResourcesDeduped.length;
      if (allResourcesDeduped.length !== allResources.length) {
        context.telemetry.properties.duplicateResources = "true";
        context.telemetry.measurements.rawResourceCount = allResources.length;
      }
      return allResourcesDeduped.map((resource) => createAzureResource(subscription, resource));
    });
  }
  __name(listResources, "listResources");
  function createAzureResource(subscription, resource) {
    var _a7, _b2;
    const resourceId3 = (0, import_vscode_azext_utils15.nonNullProp)(resource, "id");
    return __spreadProps(__spreadValues({}, resource), {
      subscription,
      id: resourceId3,
      name: (0, import_vscode_azext_utils15.nonNullProp)(resource, "name"),
      azureResourceType: {
        type: (0, import_vscode_azext_utils15.nonNullProp)(resource, "type").toLowerCase(),
        kinds: (_b2 = (_a7 = resource.kind) == null ? void 0 : _a7.split(",")) == null ? void 0 : _b2.map((kind) => kind.toLowerCase())
      },
      resourceGroup: (0, import_vscode_azext_azureutils5.getResourceGroupFromId)(resourceId3),
      location: resource.location,
      resourceType: (0, import_vscode_azext_utils15.getAzExtResourceType)({
        type: (0, import_vscode_azext_utils15.nonNullProp)(resource, "type"),
        kind: resource.kind
      }),
      raw: resource
    });
  }
  __name(createAzureResource, "createAzureResource");
  function listResourceGroups(context, subscription) {
    return __async(this, null, function* () {
      const subContext = (0, import_vscode_azext_utils15.createSubscriptionContext)(subscription);
      const client = yield createResourceClient([context, subContext]);
      const allResourceGroups = yield import_vscode_azext_azureutils5.uiUtils.listAllIterator(client.resourceGroups.list());
      context.telemetry.measurements.resourceGroupCount = allResourceGroups.length;
      return allResourceGroups.map((resource) => createResourceGroup(subscription, resource));
    });
  }
  __name(listResourceGroups, "listResourceGroups");
  function createResourceGroup(subscription, resourceGroup) {
    return __spreadProps(__spreadValues({}, resourceGroup), {
      subscription,
      id: (0, import_vscode_azext_utils15.nonNullProp)(resourceGroup, "id"),
      name: (0, import_vscode_azext_utils15.nonNullProp)(resourceGroup, "name"),
      azureResourceType: {
        type: (0, import_vscode_azext_utils15.nonNullProp)(resourceGroup, "type").toLowerCase()
      },
      raw: resourceGroup
    });
  }
  __name(createResourceGroup, "createResourceGroup");

  // src/api/ResourceGroupsExtensionManager.ts
  var vscode5 = __toESM(__require("vscode"));

  // src/constants.ts
  var contributesKey = "x-azResources";
  var showHiddenTypesSettingKey = "showHiddenTypes";

  // src/utils/getResourceContributions.ts
  function getResourceContributions(extension) {
    var _a7;
    const packageJson = extension.packageJSON;
    return (_a7 = packageJson == null ? void 0 : packageJson.contributes) == null ? void 0 : _a7[contributesKey];
  }
  __name(getResourceContributions, "getResourceContributions");

  // src/api/ResourceGroupsExtensionManager.ts
  var builtInExtensionIdRegex = /^vscode\./i;
  function getInactiveExtensions() {
    return vscode5.extensions.all.filter((extension) => !extension.isActive).filter((extension) => !builtInExtensionIdRegex.test(extension.id));
  }
  __name(getInactiveExtensions, "getInactiveExtensions");
  var ResourceGroupsExtensionManager = class {
    activateApplicationResourceBranchDataProvider(type) {
      return __async(this, null, function* () {
        const extensionAndContributions = getInactiveExtensions().map((extension) => {
          var _a7, _b2, _c2, _d;
          return { extension, contributions: (_d = (_c2 = (_b2 = (_a7 = getResourceContributions(extension)) == null ? void 0 : _a7.azure) == null ? void 0 : _b2.branches) == null ? void 0 : _c2.map((resource) => resource.type)) != null ? _d : [] };
        }).find((extensionAndContributions2) => extensionAndContributions2.contributions.find((contribution) => contribution === type) !== void 0);
        if (extensionAndContributions) {
          yield extensionAndContributions.extension.activate();
        }
      });
    }
    activateApplicationResourceProviders() {
      return __async(this, null, function* () {
        const inactiveResourceContributors = getInactiveExtensions().filter((extension) => {
          var _a7, _b2;
          return (_b2 = (_a7 = getResourceContributions(extension)) == null ? void 0 : _a7.azure) == null ? void 0 : _b2.resources;
        });
        yield Promise.all(inactiveResourceContributors.map((extension) => extension.activate()));
      });
    }
    activateWorkspaceResourceProviders() {
      return __async(this, null, function* () {
        const inactiveResourceContributors = getInactiveExtensions().filter((extension) => {
          var _a7, _b2;
          return (_b2 = (_a7 = getResourceContributions(extension)) == null ? void 0 : _a7.workspace) == null ? void 0 : _b2.resources;
        });
        yield Promise.all(inactiveResourceContributors.map((extension) => extension.activate()));
      });
    }
    activateWorkspaceResourceBranchDataProvider(type) {
      return __async(this, null, function* () {
        const extensionAndContributions = getInactiveExtensions().map((extension) => {
          var _a7, _b2, _c2, _d;
          return { extension, contributions: (_d = (_c2 = (_b2 = (_a7 = getResourceContributions(extension)) == null ? void 0 : _a7.workspace) == null ? void 0 : _b2.branches) == null ? void 0 : _c2.map((resources) => resources.type)) != null ? _d : [] };
        }).find((extensionAndContributions2) => extensionAndContributions2.contributions.find((contribution) => contribution === type) !== void 0);
        if (extensionAndContributions) {
          yield extensionAndContributions.extension.activate();
        }
      });
    }
  };
  __name(ResourceGroupsExtensionManager, "ResourceGroupsExtensionManager");

  // src/api/ResourceProviderManagers.ts
  var vscode6 = __toESM(__require("vscode"));
  function isArray2(maybeArray) {
    return Array.isArray(maybeArray);
  }
  __name(isArray2, "isArray");
  var ResourceProviderManager = class extends vscode6.Disposable {
    constructor(extensionActivator) {
      super(
        () => {
          var _a7;
          for (const context of this.providers.values()) {
            (_a7 = context.listener) == null ? void 0 : _a7.dispose();
          }
          this.onDidChangeResourceEventEmitter.dispose();
        }
      );
      this.extensionActivator = extensionActivator;
      this.onDidChangeResourceEventEmitter = new vscode6.EventEmitter();
      this.providers = /* @__PURE__ */ new Map();
      this.isActivating = false;
      this.onDidChangeResourceChange = this.onDidChangeResourceEventEmitter.event;
    }
    get hasResourceProviders() {
      return this.providers.size > 0;
    }
    addResourceProvider(resourceProvider) {
      var _a7;
      this.providers.set(resourceProvider, { listener: (_a7 = resourceProvider.onDidChangeResource) == null ? void 0 : _a7.call(resourceProvider, (resource) => this.onDidChangeResourceEventEmitter.fire(resource)) });
      if (!this.isActivating) {
        this.onDidChangeResourceEventEmitter.fire(void 0);
      }
    }
    removeResourceProvider(resourceProvider) {
      var _a7;
      const context = this.providers.get(resourceProvider);
      if (context) {
        (_a7 = context.listener) == null ? void 0 : _a7.dispose();
        this.providers.delete(resourceProvider);
      }
      if (!this.isActivating) {
        this.onDidChangeResourceEventEmitter.fire(void 0);
      }
    }
    getResources(source) {
      return __async(this, null, function* () {
        yield this.activateExtensions();
        const resourceProviders = Array.from(this.providers.keys());
        const resources = yield Promise.all(resourceProviders.map((resourceProvider) => resourceProvider.getResources(source)));
        return resources.filter(isArray2).reduce((acc, result) => acc == null ? void 0 : acc.concat(result != null ? result : []), []);
      });
    }
    activateExtensions() {
      return __async(this, null, function* () {
        this.isActivating = true;
        try {
          yield this.extensionActivator();
        } finally {
          this.isActivating = false;
        }
      });
    }
  };
  __name(ResourceProviderManager, "ResourceProviderManager");
  var AzureResourceProviderManager = class extends ResourceProviderManager {
  };
  __name(AzureResourceProviderManager, "AzureResourceProviderManager");
  var WorkspaceResourceProviderManager = class extends ResourceProviderManager {
  };
  __name(WorkspaceResourceProviderManager, "WorkspaceResourceProviderManager");

  // src/commands/registerCommands.ts
  var import_vscode_azext_utils30 = __toESM(require_src3());
  var import_vscode18 = __require("vscode");

  // src/tree/BranchDataProviderItem.ts
  var import_vscode_azext_utils16 = __toESM(require_src3());

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues2;
  var rnds82 = new Uint8Array(16);
  function rng2() {
    if (!getRandomValues2) {
      getRandomValues2 = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues2) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues2(rnds82);
  }
  __name(rng2, "rng");

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex2 = [];
  for (let i = 0; i < 256; ++i) {
    byteToHex2.push((i + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return (byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + "-" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + "-" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + "-" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + "-" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]]).toLowerCase();
  }
  __name(unsafeStringify, "unsafeStringify");

  // node_modules/uuid/dist/esm-browser/native.js
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/uuid/dist/esm-browser/v4.js
  function v42(options, buf, offset) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng2)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  __name(v42, "v4");
  var v4_default2 = v42;

  // src/tree/BranchDataProviderItem.ts
  function appendContextValues(originalValues, optionsValues, extraValues) {
    var _a7;
    const set = new Set((_a7 = originalValues == null ? void 0 : originalValues.split(";")) != null ? _a7 : []);
    optionsValues == null ? void 0 : optionsValues.forEach((value) => set.add(value));
    extraValues == null ? void 0 : extraValues.forEach((value) => set.add(value));
    return Array.from(set).join(";");
  }
  __name(appendContextValues, "appendContextValues");
  var _a6, _b;
  var _BranchDataItemWrapper = class {
    constructor(branchItem, branchDataProvider, itemCache, options) {
      this.branchItem = branchItem;
      this.branchDataProvider = branchDataProvider;
      this.itemCache = itemCache;
      this.options = options;
      this.portalUrl = (_a6 = this.options) == null ? void 0 : _a6.portalUrl;
      this.viewProperties = (_b = this.options) == null ? void 0 : _b.viewProperties;
      var _a7, _b2, _c2;
      itemCache.addBranchItem(this.branchItem, this);
      if ((0, import_vscode_azext_utils16.isAzExtTreeItem)(this.branchItem)) {
        this.id = this.branchItem.fullId;
      } else {
        this.id = (_c2 = (_b2 = this.branchItem.id) != null ? _b2 : (_a7 = this == null ? void 0 : this.options) == null ? void 0 : _a7.defaultId) != null ? _c2 : v4_default2();
      }
    }
    getChildren() {
      return __async(this, null, function* () {
        const children = yield this.branchDataProvider.getChildren(this.branchItem);
        const factory = createBranchDataItemFactory(this.itemCache);
        return children == null ? void 0 : children.map(
          (child) => factory(child, this.branchDataProvider, {
            portalUrl: child.portalUrl,
            viewProperties: child.viewProperties
          })
        );
      });
    }
    getTreeItem() {
      return __async(this, null, function* () {
        var _a7, _b2, _c2;
        const treeItem = yield this.branchDataProvider.getTreeItem(this.branchItem);
        const contextValue = appendContextValues(treeItem.contextValue, (_a7 = this.options) == null ? void 0 : _a7.contextValues, this.getExtraContextValues());
        return __spreadProps(__spreadValues(__spreadValues({}, (_c2 = (_b2 = this.options) == null ? void 0 : _b2.defaults) != null ? _c2 : {}), treeItem), {
          contextValue
        });
      });
    }
    getParent() {
      return __async(this, null, function* () {
        if (this.branchDataProvider.getParent) {
          const branchItem = yield this.branchDataProvider.getParent(this.branchItem);
          if (branchItem) {
            return this.itemCache.getItemForBranchItem(branchItem);
          }
        }
        return void 0;
      });
    }
    unwrap() {
      return this.branchItem;
    }
    getExtraContextValues() {
      const extraValues = [];
      if (this.portalUrl) {
        extraValues.push(_BranchDataItemWrapper.hasPortalUrlContextValue);
      }
      if (this.viewProperties) {
        extraValues.push(_BranchDataItemWrapper.hasPropertiesContextValue);
      }
      return extraValues;
    }
  };
  var BranchDataItemWrapper = _BranchDataItemWrapper;
  __name(BranchDataItemWrapper, "BranchDataItemWrapper");
  BranchDataItemWrapper.hasPropertiesContextValue = "hasProperties";
  BranchDataItemWrapper.hasPortalUrlContextValue = "hasPortalUrl";
  function createBranchDataItemFactory(itemCache) {
    return (branchItem, branchDataProvider, options) => new BranchDataItemWrapper(branchItem, branchDataProvider, itemCache, options);
  }
  __name(createBranchDataItemFactory, "createBranchDataItemFactory");

  // src/tree/azure/GroupingItem.ts
  var import_vscode_azext_utils19 = __toESM(require_src3());
  var vscode9 = __toESM(__require("vscode"));

  // src/commands/tags/TagFileSystem.ts
  var import_vscode_azext_azureutils6 = __toESM(require_src4());
  var import_vscode_azext_utils17 = __toESM(require_src3());

  // node_modules/jsonc-parser/lib/esm/impl/scanner.js
  function createScanner(text, ignoreTrivia) {
    if (ignoreTrivia === void 0) {
      ignoreTrivia = false;
    }
    var len = text.length;
    var pos = 0, value = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
    function scanHexDigits(count, exact) {
      var digits = 0;
      var value2 = 0;
      while (digits < count || !exact) {
        var ch = text.charCodeAt(pos);
        if (ch >= 48 && ch <= 57) {
          value2 = value2 * 16 + ch - 48;
        } else if (ch >= 65 && ch <= 70) {
          value2 = value2 * 16 + ch - 65 + 10;
        } else if (ch >= 97 && ch <= 102) {
          value2 = value2 * 16 + ch - 97 + 10;
        } else {
          break;
        }
        pos++;
        digits++;
      }
      if (digits < count) {
        value2 = -1;
      }
      return value2;
    }
    __name(scanHexDigits, "scanHexDigits");
    function setPosition(newPosition) {
      pos = newPosition;
      value = "";
      tokenOffset = 0;
      token = 16;
      scanError = 0;
    }
    __name(setPosition, "setPosition");
    function scanNumber() {
      var start = pos;
      if (text.charCodeAt(pos) === 48) {
        pos++;
      } else {
        pos++;
        while (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
        }
      }
      if (pos < text.length && text.charCodeAt(pos) === 46) {
        pos++;
        if (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
          while (pos < text.length && isDigit(text.charCodeAt(pos))) {
            pos++;
          }
        } else {
          scanError = 3;
          return text.substring(start, pos);
        }
      }
      var end = pos;
      if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
        pos++;
        if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
          pos++;
        }
        if (pos < text.length && isDigit(text.charCodeAt(pos))) {
          pos++;
          while (pos < text.length && isDigit(text.charCodeAt(pos))) {
            pos++;
          }
          end = pos;
        } else {
          scanError = 3;
        }
      }
      return text.substring(start, end);
    }
    __name(scanNumber, "scanNumber");
    function scanString() {
      var result = "", start = pos;
      while (true) {
        if (pos >= len) {
          result += text.substring(start, pos);
          scanError = 2;
          break;
        }
        var ch = text.charCodeAt(pos);
        if (ch === 34) {
          result += text.substring(start, pos);
          pos++;
          break;
        }
        if (ch === 92) {
          result += text.substring(start, pos);
          pos++;
          if (pos >= len) {
            scanError = 2;
            break;
          }
          var ch2 = text.charCodeAt(pos++);
          switch (ch2) {
            case 34:
              result += '"';
              break;
            case 92:
              result += "\\";
              break;
            case 47:
              result += "/";
              break;
            case 98:
              result += "\b";
              break;
            case 102:
              result += "\f";
              break;
            case 110:
              result += "\n";
              break;
            case 114:
              result += "\r";
              break;
            case 116:
              result += "	";
              break;
            case 117:
              var ch3 = scanHexDigits(4, true);
              if (ch3 >= 0) {
                result += String.fromCharCode(ch3);
              } else {
                scanError = 4;
              }
              break;
            default:
              scanError = 5;
          }
          start = pos;
          continue;
        }
        if (ch >= 0 && ch <= 31) {
          if (isLineBreak(ch)) {
            result += text.substring(start, pos);
            scanError = 2;
            break;
          } else {
            scanError = 6;
          }
        }
        pos++;
      }
      return result;
    }
    __name(scanString, "scanString");
    function scanNext() {
      value = "";
      scanError = 0;
      tokenOffset = pos;
      lineStartOffset = lineNumber;
      prevTokenLineStartOffset = tokenLineStartOffset;
      if (pos >= len) {
        tokenOffset = len;
        return token = 17;
      }
      var code = text.charCodeAt(pos);
      if (isWhiteSpace(code)) {
        do {
          pos++;
          value += String.fromCharCode(code);
          code = text.charCodeAt(pos);
        } while (isWhiteSpace(code));
        return token = 15;
      }
      if (isLineBreak(code)) {
        pos++;
        value += String.fromCharCode(code);
        if (code === 13 && text.charCodeAt(pos) === 10) {
          pos++;
          value += "\n";
        }
        lineNumber++;
        tokenLineStartOffset = pos;
        return token = 14;
      }
      switch (code) {
        case 123:
          pos++;
          return token = 1;
        case 125:
          pos++;
          return token = 2;
        case 91:
          pos++;
          return token = 3;
        case 93:
          pos++;
          return token = 4;
        case 58:
          pos++;
          return token = 6;
        case 44:
          pos++;
          return token = 5;
        case 34:
          pos++;
          value = scanString();
          return token = 10;
        case 47:
          var start = pos - 1;
          if (text.charCodeAt(pos + 1) === 47) {
            pos += 2;
            while (pos < len) {
              if (isLineBreak(text.charCodeAt(pos))) {
                break;
              }
              pos++;
            }
            value = text.substring(start, pos);
            return token = 12;
          }
          if (text.charCodeAt(pos + 1) === 42) {
            pos += 2;
            var safeLength = len - 1;
            var commentClosed = false;
            while (pos < safeLength) {
              var ch = text.charCodeAt(pos);
              if (ch === 42 && text.charCodeAt(pos + 1) === 47) {
                pos += 2;
                commentClosed = true;
                break;
              }
              pos++;
              if (isLineBreak(ch)) {
                if (ch === 13 && text.charCodeAt(pos) === 10) {
                  pos++;
                }
                lineNumber++;
                tokenLineStartOffset = pos;
              }
            }
            if (!commentClosed) {
              pos++;
              scanError = 1;
            }
            value = text.substring(start, pos);
            return token = 13;
          }
          value += String.fromCharCode(code);
          pos++;
          return token = 16;
        case 45:
          value += String.fromCharCode(code);
          pos++;
          if (pos === len || !isDigit(text.charCodeAt(pos))) {
            return token = 16;
          }
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          value += scanNumber();
          return token = 11;
        default:
          while (pos < len && isUnknownContentCharacter(code)) {
            pos++;
            code = text.charCodeAt(pos);
          }
          if (tokenOffset !== pos) {
            value = text.substring(tokenOffset, pos);
            switch (value) {
              case "true":
                return token = 8;
              case "false":
                return token = 9;
              case "null":
                return token = 7;
            }
            return token = 16;
          }
          value += String.fromCharCode(code);
          pos++;
          return token = 16;
      }
    }
    __name(scanNext, "scanNext");
    function isUnknownContentCharacter(code) {
      if (isWhiteSpace(code) || isLineBreak(code)) {
        return false;
      }
      switch (code) {
        case 125:
        case 93:
        case 123:
        case 91:
        case 34:
        case 58:
        case 44:
        case 47:
          return false;
      }
      return true;
    }
    __name(isUnknownContentCharacter, "isUnknownContentCharacter");
    function scanNextNonTrivia() {
      var result;
      do {
        result = scanNext();
      } while (result >= 12 && result <= 15);
      return result;
    }
    __name(scanNextNonTrivia, "scanNextNonTrivia");
    return {
      setPosition,
      getPosition: function() {
        return pos;
      },
      scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
      getToken: function() {
        return token;
      },
      getTokenValue: function() {
        return value;
      },
      getTokenOffset: function() {
        return tokenOffset;
      },
      getTokenLength: function() {
        return pos - tokenOffset;
      },
      getTokenStartLine: function() {
        return lineStartOffset;
      },
      getTokenStartCharacter: function() {
        return tokenOffset - prevTokenLineStartOffset;
      },
      getTokenError: function() {
        return scanError;
      }
    };
  }
  __name(createScanner, "createScanner");
  function isWhiteSpace(ch) {
    return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch === 5760 || ch >= 8192 && ch <= 8203 || ch === 8239 || ch === 8287 || ch === 12288 || ch === 65279;
  }
  __name(isWhiteSpace, "isWhiteSpace");
  function isLineBreak(ch) {
    return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
  }
  __name(isLineBreak, "isLineBreak");
  function isDigit(ch) {
    return ch >= 48 && ch <= 57;
  }
  __name(isDigit, "isDigit");

  // node_modules/jsonc-parser/lib/esm/impl/parser.js
  var ParseOptions;
  (function(ParseOptions2) {
    ParseOptions2.DEFAULT = {
      allowTrailingComma: false
    };
  })(ParseOptions || (ParseOptions = {}));
  function parse2(text, errors, options) {
    if (errors === void 0) {
      errors = [];
    }
    if (options === void 0) {
      options = ParseOptions.DEFAULT;
    }
    var currentProperty = null;
    var currentParent = [];
    var previousParents = [];
    function onValue(value) {
      if (Array.isArray(currentParent)) {
        currentParent.push(value);
      } else if (currentProperty !== null) {
        currentParent[currentProperty] = value;
      }
    }
    __name(onValue, "onValue");
    var visitor = {
      onObjectBegin: function() {
        var object = {};
        onValue(object);
        previousParents.push(currentParent);
        currentParent = object;
        currentProperty = null;
      },
      onObjectProperty: function(name) {
        currentProperty = name;
      },
      onObjectEnd: function() {
        currentParent = previousParents.pop();
      },
      onArrayBegin: function() {
        var array = [];
        onValue(array);
        previousParents.push(currentParent);
        currentParent = array;
        currentProperty = null;
      },
      onArrayEnd: function() {
        currentParent = previousParents.pop();
      },
      onLiteralValue: onValue,
      onError: function(error, offset, length) {
        errors.push({ error, offset, length });
      }
    };
    visit(text, visitor, options);
    return currentParent[0];
  }
  __name(parse2, "parse");
  function visit(text, visitor, options) {
    if (options === void 0) {
      options = ParseOptions.DEFAULT;
    }
    var _scanner = createScanner(text, false);
    function toNoArgVisit(visitFunction) {
      return visitFunction ? function() {
        return visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());
      } : function() {
        return true;
      };
    }
    __name(toNoArgVisit, "toNoArgVisit");
    function toOneArgVisit(visitFunction) {
      return visitFunction ? function(arg) {
        return visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());
      } : function() {
        return true;
      };
    }
    __name(toOneArgVisit, "toOneArgVisit");
    var onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    var disallowComments = options && options.disallowComments;
    var allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
      while (true) {
        var token = _scanner.scan();
        switch (_scanner.getTokenError()) {
          case 4:
            handleError2(
              14
              /* InvalidUnicode */
            );
            break;
          case 5:
            handleError2(
              15
              /* InvalidEscapeCharacter */
            );
            break;
          case 3:
            handleError2(
              13
              /* UnexpectedEndOfNumber */
            );
            break;
          case 1:
            if (!disallowComments) {
              handleError2(
                11
                /* UnexpectedEndOfComment */
              );
            }
            break;
          case 2:
            handleError2(
              12
              /* UnexpectedEndOfString */
            );
            break;
          case 6:
            handleError2(
              16
              /* InvalidCharacter */
            );
            break;
        }
        switch (token) {
          case 12:
          case 13:
            if (disallowComments) {
              handleError2(
                10
                /* InvalidCommentToken */
              );
            } else {
              onComment();
            }
            break;
          case 16:
            handleError2(
              1
              /* InvalidSymbol */
            );
            break;
          case 15:
          case 14:
            break;
          default:
            return token;
        }
      }
    }
    __name(scanNext, "scanNext");
    function handleError2(error, skipUntilAfter, skipUntil) {
      if (skipUntilAfter === void 0) {
        skipUntilAfter = [];
      }
      if (skipUntil === void 0) {
        skipUntil = [];
      }
      onError(error);
      if (skipUntilAfter.length + skipUntil.length > 0) {
        var token = _scanner.getToken();
        while (token !== 17) {
          if (skipUntilAfter.indexOf(token) !== -1) {
            scanNext();
            break;
          } else if (skipUntil.indexOf(token) !== -1) {
            break;
          }
          token = scanNext();
        }
      }
    }
    __name(handleError2, "handleError");
    function parseString(isValue) {
      var value = _scanner.getTokenValue();
      if (isValue) {
        onLiteralValue(value);
      } else {
        onObjectProperty(value);
      }
      scanNext();
      return true;
    }
    __name(parseString, "parseString");
    function parseLiteral() {
      switch (_scanner.getToken()) {
        case 11:
          var tokenValue = _scanner.getTokenValue();
          var value = Number(tokenValue);
          if (isNaN(value)) {
            handleError2(
              2
              /* InvalidNumberFormat */
            );
            value = 0;
          }
          onLiteralValue(value);
          break;
        case 7:
          onLiteralValue(null);
          break;
        case 8:
          onLiteralValue(true);
          break;
        case 9:
          onLiteralValue(false);
          break;
        default:
          return false;
      }
      scanNext();
      return true;
    }
    __name(parseLiteral, "parseLiteral");
    function parseProperty() {
      if (_scanner.getToken() !== 10) {
        handleError2(3, [], [
          2,
          5
          /* CommaToken */
        ]);
        return false;
      }
      parseString(false);
      if (_scanner.getToken() === 6) {
        onSeparator(":");
        scanNext();
        if (!parseValue()) {
          handleError2(4, [], [
            2,
            5
            /* CommaToken */
          ]);
        }
      } else {
        handleError2(5, [], [
          2,
          5
          /* CommaToken */
        ]);
      }
      return true;
    }
    __name(parseProperty, "parseProperty");
    function parseObject() {
      onObjectBegin();
      scanNext();
      var needsComma = false;
      while (_scanner.getToken() !== 2 && _scanner.getToken() !== 17) {
        if (_scanner.getToken() === 5) {
          if (!needsComma) {
            handleError2(4, [], []);
          }
          onSeparator(",");
          scanNext();
          if (_scanner.getToken() === 2 && allowTrailingComma) {
            break;
          }
        } else if (needsComma) {
          handleError2(6, [], []);
        }
        if (!parseProperty()) {
          handleError2(4, [], [
            2,
            5
            /* CommaToken */
          ]);
        }
        needsComma = true;
      }
      onObjectEnd();
      if (_scanner.getToken() !== 2) {
        handleError2(7, [
          2
          /* CloseBraceToken */
        ], []);
      } else {
        scanNext();
      }
      return true;
    }
    __name(parseObject, "parseObject");
    function parseArray() {
      onArrayBegin();
      scanNext();
      var needsComma = false;
      while (_scanner.getToken() !== 4 && _scanner.getToken() !== 17) {
        if (_scanner.getToken() === 5) {
          if (!needsComma) {
            handleError2(4, [], []);
          }
          onSeparator(",");
          scanNext();
          if (_scanner.getToken() === 4 && allowTrailingComma) {
            break;
          }
        } else if (needsComma) {
          handleError2(6, [], []);
        }
        if (!parseValue()) {
          handleError2(4, [], [
            4,
            5
            /* CommaToken */
          ]);
        }
        needsComma = true;
      }
      onArrayEnd();
      if (_scanner.getToken() !== 4) {
        handleError2(8, [
          4
          /* CloseBracketToken */
        ], []);
      } else {
        scanNext();
      }
      return true;
    }
    __name(parseArray, "parseArray");
    function parseValue() {
      switch (_scanner.getToken()) {
        case 3:
          return parseArray();
        case 1:
          return parseObject();
        case 10:
          return parseString(true);
        default:
          return parseLiteral();
      }
    }
    __name(parseValue, "parseValue");
    scanNext();
    if (_scanner.getToken() === 17) {
      if (options.allowEmptyContent) {
        return true;
      }
      handleError2(4, [], []);
      return false;
    }
    if (!parseValue()) {
      handleError2(4, [], []);
      return false;
    }
    if (_scanner.getToken() !== 17) {
      handleError2(9, [], []);
    }
    return true;
  }
  __name(visit, "visit");

  // node_modules/jsonc-parser/lib/esm/main.js
  var parse3 = parse2;
  var visit2 = visit;

  // src/commands/tags/TagFileSystem.ts
  var os2 = __toESM(require_browser2());
  var import_vscode9 = __require("vscode");
  var insertKeyHere = localize("insertTagName", "<Insert tag name>");
  var insertValueHere = localize("insertTagValue", "<Insert tag value>");
  var ResourceTags = class {
    constructor(resource) {
      this.resource = resource;
      this.id = this.resource.id;
      this.subscription = this.resource.subscription;
      this.displayName = this.resource.name;
      this.displayType = resource.resourceGroup ? "resource" : "resource group";
    }
    getTags() {
      return __async(this, null, function* () {
        var _a7;
        return (_a7 = yield (0, import_vscode_azext_utils17.callWithTelemetryAndErrorHandling)("getTags", (context) => __async(this, null, function* () {
          var _a8;
          const subscriptionContext = (0, import_vscode_azext_utils17.createSubscriptionContext)(this.resource.subscription);
          const client = yield createResourceClient([context, subscriptionContext]);
          if (this.resource.resourceGroup) {
            const resources = yield import_vscode_azext_azureutils6.uiUtils.listAllIterator(client.resources.listByResourceGroup((0, import_vscode_azext_utils17.nonNullValue)(this.resource.resourceGroup)));
            return (_a8 = resources.find((r) => r.id === this.id)) == null ? void 0 : _a8.tags;
          } else {
            const resourceGroup = yield client.resourceGroups.get((0, import_vscode_azext_utils17.nonNullValue)(this.resource.name));
            return resourceGroup.tags;
          }
        }))) != null ? _a7 : {};
      });
    }
  };
  __name(ResourceTags, "ResourceTags");
  var _TagFileSystem = class extends import_vscode_azext_utils17.AzExtTreeFileSystem {
    constructor() {
      super(...arguments);
      this.scheme = _TagFileSystem.scheme;
    }
    statImpl(_context, model) {
      return __async(this, null, function* () {
        const fileContent = this.getFileContentFromTags(yield this.getTagsFromNode(model));
        return { type: import_vscode9.FileType.File, ctime: model.cTime, mtime: model.mTime, size: Buffer.byteLength(fileContent) };
      });
    }
    readFileImpl(_context, node) {
      return __async(this, null, function* () {
        const fileContent = this.getFileContentFromTags(yield this.getTagsFromNode(node));
        return Buffer.from(fileContent);
      });
    }
    writeFileImpl(context, model, content, originalUri) {
      return __async(this, null, function* () {
        const buf = Buffer.from(content, 0);
        const text = buf.toString("utf-8");
        const diagnostics = import_vscode9.languages.getDiagnostics(originalUri).filter((d) => d.severity === import_vscode9.DiagnosticSeverity.Error);
        if (diagnostics.length > 0) {
          context.telemetry.measurements.tagDiagnosticsLength = diagnostics.length;
          const showErrors = { title: localize("showErrors", "Show Errors") };
          const message = localize("errorsExist", "Failed to upload tags for {0}.", this.getDetailedName(model));
          void import_vscode9.window.showErrorMessage(message, showErrors).then((result) => __async(this, null, function* () {
            var _a7;
            if (result === showErrors) {
              const openedUri = (_a7 = import_vscode9.window.activeTextEditor) == null ? void 0 : _a7.document.uri;
              if (!openedUri || originalUri.query !== openedUri.query) {
                yield this.showTextDocument(model);
              }
              yield import_vscode9.commands.executeCommand("workbench.action.showErrorsWarnings");
            }
          }));
          context.telemetry.properties.diagnosticSources = diagnostics.map((d) => d.source).filter((value, index, array) => value && array.indexOf(value) === index).sort().join(",");
          context.errorHandling.suppressDisplay = true;
          throw new Error(diagnostics[0].message);
        } else {
          const confirmMessage = localize("confirmTags", "Are you sure you want to update tags for {0}?", this.getDetailedName(model));
          const update = { title: localize("update", "Update") };
          yield context.ui.showWarningMessage(confirmMessage, { modal: true }, update);
          const tags = parse3(text);
          if (Object.keys(tags).includes(insertKeyHere) && tags[insertKeyHere] === insertValueHere) {
            delete tags[insertKeyHere];
          }
          const subscriptionContext = (0, import_vscode_azext_utils17.createSubscriptionContext)(model.subscription);
          const client = yield createResourceClient([context, subscriptionContext]);
          yield client.tagsOperations.updateAtScope(model.id, { properties: { tags }, operation: "Replace" });
          const updatedMessage = localize("updatedTags", "Successfully updated tags for {0}.", this.getDetailedName(model));
          void import_vscode9.window.showInformationMessage(updatedMessage);
          ext.outputChannel.appendLog(updatedMessage);
        }
      });
    }
    getFilePath(node) {
      return `${node.displayName}-tags.jsonc`;
    }
    getFileContentFromTags(tags) {
      tags = tags || {};
      const comment = localize("editAndSave", "Edit and save this file to upload tags in Azure");
      if (Object.keys(tags).length === 0) {
        tags = {
          [insertKeyHere]: insertValueHere
        };
      }
      return `// ${comment}${os2.EOL}${JSON.stringify(tags, void 0, 4)}`;
    }
    getTagsFromNode(node) {
      return __async(this, null, function* () {
        return yield node.getTags();
      });
    }
    getDetailedName(node) {
      return `${node.displayType} "${node.displayName}"`;
    }
  };
  var TagFileSystem = _TagFileSystem;
  __name(TagFileSystem, "TagFileSystem");
  TagFileSystem.scheme = "azureResourceGroups";

  // src/utils/v2/createPortalUrl.ts
  var vscode7 = __toESM(__require("vscode"));
  function createPortalUrl(subscription, id, options) {
    const queryPrefix = options && options.queryPrefix ? `?${options.queryPrefix}` : "";
    const url = `${subscription.environment.portalUrl}/${queryPrefix}#@${subscription.tenantId}/resource${id}`;
    return vscode7.Uri.parse(url);
  }
  __name(createPortalUrl, "createPortalUrl");

  // src/tree/InvalidAzureResourceItem.ts
  var import_vscode_azext_utils18 = __toESM(require_src3());
  var vscode8 = __toESM(__require("vscode"));

  // src/tree/InvalidItem.ts
  var import_vscode10 = __require("vscode");
  var InvalidItem = class {
    constructor(error) {
      this.error = error;
      this.id = v4_default2();
    }
    getTreeItem() {
      return {
        collapsibleState: import_vscode10.TreeItemCollapsibleState.None,
        contextValue: "invalidItem",
        iconPath: new import_vscode10.ThemeIcon("warning"),
        id: this.id,
        label: this.error.message
      };
    }
    getChildren() {
      return [];
    }
  };
  __name(InvalidItem, "InvalidItem");

  // src/tree/InvalidAzureResourceItem.ts
  var InvalidAzureResourceItem = class {
    constructor(resource, error) {
      this.resource = resource;
      this.error = error;
      this.id = this.resource.id;
      this.portalUrl = createPortalUrl(resource.subscription, resource.id);
    }
    getChildren() {
      return Promise.resolve([new InvalidItem((0, import_vscode_azext_utils18.parseError)(this.error))]);
    }
    getTreeItem() {
      const treeItem = new vscode8.TreeItem(this.resource.name, vscode8.TreeItemCollapsibleState.Collapsed);
      treeItem.iconPath = getIconPath(this.resource.resourceType);
      treeItem.contextValue = (0, import_vscode_azext_utils18.createContextValue)(["invalid", "azureResource", "hasPortalUrl"]);
      treeItem.description = localize("error", "Error");
      return treeItem;
    }
  };
  __name(InvalidAzureResourceItem, "InvalidAzureResourceItem");

  // src/tree/azure/GroupingItem.ts
  var GroupingItem = class {
    constructor(context, resourceItemFactory, branchDataProviderFactory, onDidChangeBranchDataProviders, contextValues, iconPath, label, resources, resourceType3, parent, resourceGroup) {
      this.context = context;
      this.resourceItemFactory = resourceItemFactory;
      this.branchDataProviderFactory = branchDataProviderFactory;
      this.onDidChangeBranchDataProviders = onDidChangeBranchDataProviders;
      this.contextValues = contextValues;
      this.iconPath = iconPath;
      this.label = label;
      this.resources = resources;
      this.resourceType = resourceType3;
      this.parent = parent;
      this.resourceGroup = resourceGroup;
      this.id = this.resourceGroup ? this.resourceGroup.id : `/subscriptions/${this.context.subscriptionContext.subscriptionId}/groupings/${this.label}`;
      if (resourceGroup) {
        this.tagsModel = new ResourceTags(resourceGroup);
        this.viewProperties = {
          label: resourceGroup.name,
          data: resourceGroup.raw
        };
        this.portalUrl = createPortalUrl(resourceGroup.subscription, resourceGroup.id);
      }
      this.subscription = __spreadValues(__spreadValues({}, this.context.subscriptionContext), this.context.subscription);
    }
    getChildren() {
      return __async(this, null, function* () {
        const sortedResources = this.resources.sort((a, b) => a.name.localeCompare(b.name));
        this.onDidChangeBranchDataProviders((type) => {
          const azExtResourceTypes = sortedResources.map((r) => r.resourceType);
          if (azExtResourceTypes.includes(type)) {
            ext.actions.refreshAzureTree(this);
          }
        });
        const resourceItems = yield Promise.all(sortedResources.map(
          (resource) => __async(this, null, function* () {
            var _a7, _b2;
            try {
              const branchDataProvider = this.branchDataProviderFactory(resource);
              const resourceItem = yield branchDataProvider.getResourceItem(resource);
              const options = {
                contextValues: ["azureResource"],
                defaultId: resource.id,
                defaults: {
                  iconPath: getIconPath(resource.resourceType)
                },
                portalUrl: (_a7 = resourceItem.portalUrl) != null ? _a7 : createPortalUrl(resource.subscription, resource.id),
                viewProperties: (_b2 = resourceItem.viewProperties) != null ? _b2 : {
                  label: resource.name,
                  data: resource.raw
                }
              };
              return this.resourceItemFactory(resource, resourceItem, branchDataProvider, this, options);
            } catch (e) {
              return new InvalidAzureResourceItem(resource, e);
            }
          })
        ));
        return resourceItems;
      });
    }
    getTreeItem() {
      return __async(this, null, function* () {
        var _a7;
        const treeItem = new vscode9.TreeItem(this.label, vscode9.TreeItemCollapsibleState.Collapsed);
        const contextValuesToAdd = [];
        if (this.resourceGroup) {
          contextValuesToAdd.push("hasPortalUrl");
        }
        treeItem.contextValue = (0, import_vscode_azext_utils19.createContextValue)(((_a7 = this.contextValues) != null ? _a7 : []).concat(contextValuesToAdd));
        treeItem.description = this.description;
        treeItem.iconPath = this.iconPath;
        treeItem.id = this.id;
        return treeItem;
      });
    }
    getParent() {
      return this.parent;
    }
  };
  __name(GroupingItem, "GroupingItem");
  function createGroupingItemFactory(resourceItemFactory, branchDataProviderFactory, onDidChangeBranchDataProvider) {
    return (context, contextValues, iconPath, label, resources, resourceType3, parent, resourceGroup) => new GroupingItem(context, resourceItemFactory, branchDataProviderFactory, onDidChangeBranchDataProvider, contextValues, iconPath, label, resources, resourceType3, parent, resourceGroup);
  }
  __name(createGroupingItemFactory, "createGroupingItemFactory");

  // src/commands/accounts/logIn.ts
  function logIn(_context) {
    return __async(this, null, function* () {
      const provider = yield ext.subscriptionProviderFactory();
      yield provider.logIn();
    });
  }
  __name(logIn, "logIn");

  // src/commands/accounts/logOut.ts
  function logOut(_context) {
    return __async(this, null, function* () {
      const provider = yield ext.subscriptionProviderFactory();
      yield provider.logOut();
    });
  }
  __name(logOut, "logOut");

  // src/commands/accounts/selectSubscriptions.ts
  function selectSubscriptions(_context) {
    return __async(this, null, function* () {
      const provider = yield ext.subscriptionProviderFactory();
      yield provider.selectSubscriptions();
    });
  }
  __name(selectSubscriptions, "selectSubscriptions");

  // src/commands/activities/clearActivities.ts
  function clearActivities(context) {
    return __async(this, null, function* () {
      yield ext.activityLogTreeItem.clearActivities(context);
    });
  }
  __name(clearActivities, "clearActivities");

  // src/commands/createResource.ts
  var import_vscode11 = __require("vscode");
  function createResource(context, node) {
    return __async(this, null, function* () {
      var _a7;
      const picks = getPicks(getContributedCreateResourceCommands());
      const pick = yield context.ui.showQuickPick(picks, {
        placeHolder: "Select a resource to create"
      });
      if (pick) {
        yield (_a7 = import_vscode11.extensions.getExtension(pick.data.extensionId)) == null ? void 0 : _a7.activate();
        yield import_vscode11.commands.executeCommand(pick.data.command, node);
      }
    });
  }
  __name(createResource, "createResource");
  function getPicks(createResourceCommands) {
    return createResourceCommands.sort((a, b) => a.title.localeCompare(b.title)).map((command) => ({
      label: command.title,
      data: command,
      detail: command.detail
    }));
  }
  __name(getPicks, "getPicks");
  function getContributedCreateResourceCommands() {
    const getCommandsForExtension = /* @__PURE__ */ __name((extension) => {
      var _a7, _b2;
      return (_b2 = (_a7 = getResourceContributions(extension)) == null ? void 0 : _a7.commands) == null ? void 0 : _b2.map((command) => __spreadValues({ extensionId: extension.id }, command));
    }, "getCommandsForExtension");
    const createCommands = [];
    import_vscode11.extensions.all.forEach((extension) => {
      var _a7;
      return createCommands.push(...(_a7 = getCommandsForExtension(extension)) != null ? _a7 : []);
    });
    return createCommands;
  }
  __name(getContributedCreateResourceCommands, "getContributedCreateResourceCommands");

  // src/commands/createResourceGroup.ts
  var import_vscode_azext_azureutils7 = __toESM(require_src4());
  var import_vscode_azext_utils20 = __toESM(require_src3());
  var import_vscode12 = __require("vscode");

  // src/utils/activityUtils.ts
  function createActivityContext() {
    return __async(this, null, function* () {
      return {
        registerActivity: (activity) => __async(this, null, function* () {
          return registerActivity(activity);
        }),
        suppressNotification: yield settingUtils.getWorkspaceSetting("suppressActivityNotifications")
      };
    });
  }
  __name(createActivityContext, "createActivityContext");

  // src/commands/createResourceGroup.ts
  function createResourceGroup2(context, node) {
    return __async(this, null, function* () {
      let subscription = node == null ? void 0 : node.subscription;
      if (!subscription) {
        subscription = yield (0, import_vscode_azext_utils20.subscriptionExperience)(context, ext.v2.api.resources.azureResourceTreeDataProvider);
      }
      const wizardContext = __spreadValues(__spreadProps(__spreadValues(__spreadValues({}, context), (0, import_vscode_azext_utils20.createSubscriptionContext)(subscription)), {
        suppress403Handling: true
      }), yield createActivityContext());
      const title = localize("createResourceGroup", "Create Resource Group");
      const promptSteps = [new import_vscode_azext_azureutils7.ResourceGroupNameStep()];
      import_vscode_azext_azureutils7.LocationListStep.addStep(wizardContext, promptSteps);
      const executeSteps = [new import_vscode_azext_azureutils7.ResourceGroupCreateStep()];
      const wizard = new import_vscode_azext_utils20.AzureWizard(wizardContext, { title, promptSteps, executeSteps });
      yield wizard.prompt();
      const newResourceGroupName = (0, import_vscode_azext_utils20.nonNullProp)(wizardContext, "newResourceGroupName");
      wizardContext.activityTitle = localize("createResourceGroup", 'Create Resource Group "{0}"', newResourceGroupName);
      yield wizard.execute();
      if (!wizardContext.suppressNotification) {
        void import_vscode12.window.showInformationMessage(localize("createdRg", 'Created resource group "{0}".', newResourceGroupName));
      }
      ext.azureTreeState.notifyChildrenChanged(`/subscriptions/${subscription.subscriptionId}`);
    });
  }
  __name(createResourceGroup2, "createResourceGroup");

  // src/commands/deleteResourceGroup/v2/deleteResourceGroupV2.ts
  var import_vscode_azext_azureutils8 = __toESM(require_src4());
  var import_vscode_azext_utils22 = __toESM(require_src3());

  // src/commands/deleteResourceGroup/DeleteResourceGroupStep.ts
  var import_vscode_azext_utils21 = __toESM(require_src3());
  var DeleteResourceGroupStep = class extends import_vscode_azext_utils21.AzureWizardExecuteStep {
    constructor() {
      super(...arguments);
      this.priority = 250;
    }
    execute(context, progress) {
      return __async(this, null, function* () {
        const resourceGroupName5 = (0, import_vscode_azext_utils21.nonNullProp)(context, "resourceGroupToDelete");
        const message = localize("deleteResourceGroup", 'Deleting resource group "{0}"...', resourceGroupName5);
        ext.outputChannel.appendLog(message);
        progress.report({ message });
        const resourceClient = yield createResourceClient([context, context.subscription]);
        yield resourceClient.resourceGroups.beginDeleteAndWait(resourceGroupName5);
        ext.outputChannel.appendLog(localize("deletedRg", 'Successfully deleted resource group "{0}".', resourceGroupName5));
      });
    }
    shouldExecute(context) {
      return !!context.resourceGroupToDelete;
    }
  };
  __name(DeleteResourceGroupStep, "DeleteResourceGroupStep");

  // src/commands/deleteResourceGroup/v2/deleteResourceGroupV2.ts
  function deleteResourceGroupV2(context, primaryNode, selectedNodes) {
    return __async(this, null, function* () {
      selectedNodes = selectedNodes == null ? void 0 : selectedNodes.filter((n) => primaryNode instanceof GroupingItem && !!n.resourceGroup);
      if (!(primaryNode instanceof GroupingItem) || !(primaryNode == null ? void 0 : primaryNode.resourceGroup)) {
        primaryNode = void 0;
      }
      const selectedResourceGroupNodes = getSelectedNodes(primaryNode, selectedNodes);
      let subscription;
      let resourceGroupsToDelete = [];
      if (selectedResourceGroupNodes) {
        subscription = selectedResourceGroupNodes[0].subscription;
        resourceGroupsToDelete = selectedResourceGroupNodes.map((node) => (0, import_vscode_azext_utils22.nonNullProp)(node, "resourceGroup"));
      } else {
        ({ subscription, resourceGroupsToDelete } = yield pickResourceGroups(context));
      }
      yield deleteResourceGroups(context, subscription, resourceGroupsToDelete);
    });
  }
  __name(deleteResourceGroupV2, "deleteResourceGroupV2");
  function isNameEqual(val, name) {
    return !!val && val.toLowerCase() === name.toLowerCase();
  }
  __name(isNameEqual, "isNameEqual");
  function getSelectedNodes(primaryNode, selectedNodes) {
    if (selectedNodes && selectedNodes.length > 0) {
      return selectedNodes;
    }
    if (primaryNode) {
      return [primaryNode];
    }
    return void 0;
  }
  __name(getSelectedNodes, "getSelectedNodes");
  function pickResourceGroups(context) {
    return __async(this, null, function* () {
      const subscription = yield (0, import_vscode_azext_utils22.subscriptionExperience)(context, ext.v2.api.resources.azureResourceTreeDataProvider);
      const client = yield createResourceClient([context, (0, import_vscode_azext_utils22.createSubscriptionContext)(subscription)]);
      const resourceGroups = yield import_vscode_azext_azureutils8.uiUtils.listAllIterator(client.resourceGroups.list());
      const picks = resourceGroups.map((rg) => ({ label: (0, import_vscode_azext_utils22.nonNullProp)(rg, "name"), data: rg })).sort((a, b) => a.label.localeCompare(b.label));
      const pickedResourceGroups = yield context.ui.showQuickPick(picks, {
        canPickMany: true,
        placeHolder: localize("selectResourceGroupToDelete", "Select resource group(s) to delete")
      });
      return {
        subscription,
        resourceGroupsToDelete: pickedResourceGroups.map((pick) => createResourceGroup(subscription, pick.data))
      };
    });
  }
  __name(pickResourceGroups, "pickResourceGroups");
  function deleteResourceGroups(context, subscription, resourceGroups) {
    return __async(this, null, function* () {
      const client = yield createResourceClient([context, (0, import_vscode_azext_utils22.createSubscriptionContext)(subscription)]);
      const deleteConfirmation = settingUtils.getWorkspaceSetting("deleteConfirmation");
      try {
        for (var iter = __forAwait(resourceGroups), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          const rg = temp.value;
          const resourcesInRg = yield import_vscode_azext_azureutils8.uiUtils.listAllIterator(client.resources.listByResourceGroup(rg.name));
          const numOfResources = resourcesInRg.length;
          const hasOneResource = numOfResources === 1;
          if (deleteConfirmation === "ClickButton") {
            const areYouSureDelete = localize("areYouSureDelete", 'Are you sure you want to delete resource group "{0}"? There are {1} resources in this resource group that will be deleted.', rg.name, numOfResources);
            const areYouSureDeleteOne = localize("areYouSureDeleteOne", 'Are you sure you want to delete resource group "{0}"? There is {1} resource in this resource group that will be deleted.', rg.name, numOfResources);
            yield context.ui.showWarningMessage(hasOneResource ? areYouSureDeleteOne : areYouSureDelete, { modal: true }, { title: localize("delete", "Delete") });
          } else {
            let validateInput = function(val) {
              return isNameEqual(val, rg.name) ? void 0 : prompt;
            };
            __name(validateInput, "validateInput");
            const enterToDelete = localize("enterToDelete", 'Enter "{0}" to delete this resource group. There are {1} resources in this resource group that will be deleted.', rg.name, numOfResources);
            const enterToDeleteOne = localize("enterToDeleteOne", 'Enter "{0}" to delete this resource group. There is {1} resource in this resource group that will be deleted.', rg.name, numOfResources);
            const prompt = hasOneResource ? enterToDeleteOne : enterToDelete;
            const result = yield context.ui.showInputBox({ prompt, validateInput });
            if (!isNameEqual(result, rg.name)) {
              context.telemetry.properties.cancelStep = "mismatchDelete";
              throw new import_vscode_azext_utils22.UserCancelledError();
            }
          }
          void ext.azureTreeState.runWithTemporaryDescription(rg.id, localize("deleting", "Deleting..."), () => __async(this, null, function* () {
            const wizard = new import_vscode_azext_utils22.AzureWizard(__spreadValues(__spreadValues({
              subscription: (0, import_vscode_azext_utils22.createSubscriptionContext)(subscription),
              resourceGroupToDelete: rg.name,
              activityTitle: localize("deleteResourceGroup", 'Delete resource group "{0}"', rg.name)
            }, yield createActivityContext()), context), {
              executeSteps: [new DeleteResourceGroupStep()]
            });
            yield wizard.execute();
            ext.azureTreeState.notifyChildrenChanged(`/subscriptions/${rg.subscription.subscriptionId}`);
          }));
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  __name(deleteResourceGroups, "deleteResourceGroups");

  // src/commands/explorer/groupBy.ts
  var import_vscode_azext_azureutils9 = __toESM(require_src4());
  var import_vscode_azext_utils23 = __toESM(require_src3());
  function buildGroupByCommand(setting) {
    return (context) => groupBy(context, setting);
  }
  __name(buildGroupByCommand, "buildGroupByCommand");
  function groupBy(context, setting) {
    return __async(this, null, function* () {
      if (setting === "armTag") {
        const subscription = yield (0, import_vscode_azext_utils23.subscriptionExperience)(context, ext.v2.api.resources.azureResourceTreeDataProvider);
        const tag = yield context.ui.showQuickPick(getQuickPicks(context, subscription), {
          placeHolder: localize("groupByArmTagKey", "Select the tag key to group by..."),
          loadingPlaceHolder: localize("loadingTags", "Loading tags...")
        });
        setting += `-${tag.label}`;
      }
      yield settingUtils.updateGlobalSetting("groupBy", setting);
    });
  }
  __name(groupBy, "groupBy");
  function getQuickPicks(context, subscription) {
    return __async(this, null, function* () {
      const client = yield createResourceClient([context, (0, import_vscode_azext_utils23.createSubscriptionContext)(subscription)]);
      const tags = yield import_vscode_azext_azureutils9.uiUtils.listAllIterator(client.tagsOperations.list());
      return tags.map((tag) => ({
        label: (0, import_vscode_azext_utils23.nonNullProp)(tag, "tagName")
      }));
    });
  }
  __name(getQuickPicks, "getQuickPicks");

  // src/commands/explorer/showGroupOptions.ts
  var import_vscode13 = __require("vscode");
  function showGroupOptions() {
    return __async(this, null, function* () {
      yield import_vscode13.commands.executeCommand("workbench.view.extension.azure");
      yield import_vscode13.commands.executeCommand("workbench.action.quickOpen", ">Azure: Group by");
    });
  }
  __name(showGroupOptions, "showGroupOptions");

  // src/commands/helpAndFeedback/getStarted.ts
  var import_vscode_azext_utils24 = __toESM(require_src3());

  // src/AzExtWrapper.ts
  var import_vscode14 = __require("vscode");
  var wrappers;
  function getAzureExtensions() {
    if (!wrappers) {
      wrappers = azureExtensions.map((d) => new AzExtWrapper(d));
    }
    return wrappers;
  }
  __name(getAzureExtensions, "getAzureExtensions");
  function getInstalledAzureExtensions() {
    const azExtensions = getAzureExtensions();
    return azExtensions.filter((e) => !!e.getCodeExtension());
  }
  __name(getInstalledAzureExtensions, "getInstalledAzureExtensions");
  function getInstalledExtensionPicks() {
    return getInstalledAzureExtensions().map((e) => {
      return { label: e.label, data: e };
    }).sort((a, b) => a.label.localeCompare(b.label));
  }
  __name(getInstalledExtensionPicks, "getInstalledExtensionPicks");
  var AzExtWrapper = class {
    constructor(data) {
      this._data = data;
      this.id = `${data.publisher || "ms-azuretools"}.${data.name}`;
      this._resourceTypes = data.resourceTypes;
    }
    get name() {
      return this._data.name;
    }
    get label() {
      return this._data.label;
    }
    get tutorial() {
      return this._data.tutorial;
    }
    matchesResourceType(resource) {
      return this._resourceTypes.some((rt2) => rt2 === resource.azExtResourceType);
    }
    matchesApplicationResourceType(resource) {
      return this._resourceTypes.some((rt2) => rt2 === resource.resourceType);
    }
    getCodeExtension() {
      return import_vscode14.extensions.getExtension(this.id);
    }
    getReportIssueCommandId() {
      return __async(this, null, function* () {
        if (!this._verifiedReportIssueCommandId && this._data.reportIssueCommandId) {
          const commandIs = yield import_vscode14.commands.getCommands(
            true
            /* filterInternal */
          );
          if (commandIs.some((c) => c === this._data.reportIssueCommandId)) {
            this._verifiedReportIssueCommandId = this._data.reportIssueCommandId;
          }
        }
        return this._verifiedReportIssueCommandId;
      });
    }
    isInstalled() {
      return !!this.getCodeExtension();
    }
    meetsMinVersion() {
      var _a7, _b2, _c2;
      return ((_c2 = (_b2 = (_a7 = this.getCodeExtension()) == null ? void 0 : _a7.packageJSON) == null ? void 0 : _b2.contributes) == null ? void 0 : _c2[contributesKey]) !== void 0;
    }
  };
  __name(AzExtWrapper, "AzExtWrapper");

  // src/commands/helpAndFeedback/getStarted.ts
  function getStarted(context) {
    return __async(this, null, function* () {
      const azExtensions = getAzureExtensions();
      let picks = [];
      for (const azExt of azExtensions) {
        if (azExt.tutorial) {
          picks.push({
            label: azExt.tutorial.label,
            description: `Azure ${azExt.label}`,
            data: azExt
          });
        }
      }
      picks = picks.sort((a, b) => a.label.localeCompare(b.label));
      const placeHolder = localize("selectExtension", "Select a getting started scenario");
      const extension = (yield context.ui.showQuickPick(picks, { placeHolder, suppressPersistence: true })).data;
      context.telemetry.properties.extension = extension.name;
      yield (0, import_vscode_azext_utils24.openUrl)((0, import_vscode_azext_utils24.nonNullProp)(extension, "tutorial").url);
    });
  }
  __name(getStarted, "getStarted");

  // src/commands/helpAndFeedback/reportIssue.ts
  var import_vscode_azext_utils25 = __toESM(require_src3());
  var import_vscode15 = __require("vscode");
  function reportIssue(context) {
    return __async(this, null, function* () {
      const picks = getInstalledExtensionPicks();
      picks.push({
        label: localize("other", "Other"),
        data: void 0
      });
      const placeHolder = localize("selectExtension", "Select the Azure extension you want to report an issue on");
      const azExtension = (yield context.ui.showQuickPick(picks, { placeHolder, suppressPersistence: true })).data;
      if (azExtension) {
        context.telemetry.properties.extension = azExtension.name;
        const commandId = yield azExtension.getReportIssueCommandId();
        if (commandId) {
          yield import_vscode15.commands.executeCommand(commandId);
        } else {
          yield openNewIssuePage(azExtension.name);
        }
      } else {
        yield openNewIssuePage("azcode");
      }
    });
  }
  __name(reportIssue, "reportIssue");
  function openNewIssuePage(extensionName) {
    return __async(this, null, function* () {
      yield (0, import_vscode_azext_utils25.openUrl)(`https://github.com/microsoft/${extensionName}/issues/new`);
    });
  }
  __name(openNewIssuePage, "openNewIssuePage");

  // src/commands/helpAndFeedback/reviewIssues.ts
  var import_vscode_azext_utils26 = __toESM(require_src3());
  function reviewIssues(context) {
    return __async(this, null, function* () {
      const picks = getInstalledExtensionPicks();
      const placeHolder = localize("selectExtension", "Select the Azure extension you want to review issues for");
      const azExtension = (yield context.ui.showQuickPick(picks, { placeHolder, suppressPersistence: true })).data;
      context.telemetry.properties.extension = azExtension.name;
      yield (0, import_vscode_azext_utils26.openUrl)(`https://github.com/microsoft/${azExtension.name}/issues`);
    });
  }
  __name(reviewIssues, "reviewIssues");

  // src/commands/installExtension.ts
  var import_vscode16 = __require("vscode");
  function installExtension(context, extensionId) {
    return __async(this, null, function* () {
      context.telemetry.properties.extensionId = extensionId;
      yield import_vscode16.commands.executeCommand("extension.open", extensionId);
      function isInstalled() {
        return !!import_vscode16.extensions.getExtension(extensionId);
      }
      __name(isInstalled, "isInstalled");
      const alreadyInstalled = isInstalled();
      context.telemetry.properties.alreadyInstalled = String(alreadyInstalled);
      if (!alreadyInstalled) {
        context.telemetry.properties.installedAfterOneMinute = "false";
        return new Promise((resolve) => {
          const disposable = import_vscode16.extensions.onDidChange(() => {
            var _a7;
            if (isInstalled()) {
              context.telemetry.properties.installedAfterOneMinute = "true";
              disposable.dispose();
              clearTimeout(timeout);
              resolve();
              void ((_a7 = import_vscode16.extensions.getExtension(extensionId)) == null ? void 0 : _a7.activate());
            }
          });
          const timeout = setTimeout(
            () => {
              disposable.dispose();
              resolve();
            },
            1e3 * 60 * 1
            /* 1 minute */
          );
        });
      }
    });
  }
  __name(installExtension, "installExtension");

  // src/commands/openInPortal.ts
  var import_vscode_azext_utils27 = __toESM(require_src3());
  var import_vscode17 = __require("vscode");
  function openInPortal(context, node) {
    return __async(this, null, function* () {
      if (!node) {
        node = yield (0, import_vscode_azext_utils27.azureResourceExperience)(__spreadProps(__spreadValues({}, context), { dontUnwrap: true }), ext.v2.api.resources.azureResourceTreeDataProvider);
      }
      if (hasPortalUrl(node)) {
        return yield (0, import_vscode_azext_utils27.openUrl)(node.portalUrl.toString(
          /* skipEncoding: */
          true
        ));
      }
      throw new Error(localize("commands.openInPortal.noPortalLocation", "The selected resource is not associated with location within the Azure portal."));
    });
  }
  __name(openInPortal, "openInPortal");
  function hasPortalUrl(node) {
    return !!node && typeof node === "object" && node.portalUrl instanceof import_vscode17.Uri;
  }
  __name(hasPortalUrl, "hasPortalUrl");

  // src/commands/tags/editTags.ts
  var import_vscode_azext_utils28 = __toESM(require_src3());
  function editTags(context, item) {
    return __async(this, null, function* () {
      if (!item) {
        item = yield (0, import_vscode_azext_utils28.azureResourceExperience)(__spreadProps(__spreadValues({}, context), { dontUnwrap: true }), ext.v2.api.resources.azureResourceTreeDataProvider);
      }
      if (!item.tagsModel) {
        throw new Error("Editing tags is not supported for this resource.");
      }
      yield ext.tagFS.showTextDocument(item.tagsModel);
    });
  }
  __name(editTags, "editTags");

  // src/commands/viewProperties.ts
  var import_vscode_azext_utils29 = __toESM(require_src3());
  function viewProperties(context, node) {
    return __async(this, null, function* () {
      var _a7;
      if (!node) {
        node = yield (0, import_vscode_azext_utils29.azureResourceExperience)(__spreadProps(__spreadValues({}, context), { dontUnwrap: true }), ext.v2.api.resources.azureResourceTreeDataProvider);
      }
      if (!hasViewProperties(node)) {
        throw new Error(localize("commands.viewProperties.noProperties", "The selected resource has no properties to view."));
      }
      yield (0, import_vscode_azext_utils29.openReadOnlyJson)({ fullId: (_a7 = node.id) != null ? _a7 : v4_default2(), label: node.viewProperties.label }, node.viewProperties.data);
    });
  }
  __name(viewProperties, "viewProperties");
  function hasViewProperties(node) {
    return !!(node == null ? void 0 : node.viewProperties);
  }
  __name(hasViewProperties, "hasViewProperties");

  // src/commands/registerCommands.ts
  function registerCommands() {
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.refreshTree", () => ext.actions.refreshAzureTree());
    (0, import_vscode_azext_utils30.registerCommand)("azureWorkspace.refreshTree", () => ext.actions.refreshWorkspaceTree());
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.refresh", (context, node) => __async(this, null, function* () {
      yield handleAzExtTreeItemRefresh(context, node);
      if (node instanceof GroupingItem) {
        ext.actions.refreshAzureTree(node.parent);
      } else {
        ext.actions.refreshAzureTree(node);
      }
    }));
    (0, import_vscode_azext_utils30.registerCommand)("azureWorkspace.refresh", (context, node) => __async(this, null, function* () {
      yield handleAzExtTreeItemRefresh(context, node);
      ext.actions.refreshWorkspaceTree(node);
    }));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.vscodeAuth.logIn", (context) => logIn(context));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.vscodeAuth.logOut", (context) => logOut(context));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.vscodeAuth.selectSubscriptions", (context) => selectSubscriptions(context));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.createResourceGroup", createResourceGroup2);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.deleteResourceGroupV2", deleteResourceGroupV2);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.loadMore", (context, node) => __async(this, null, function* () {
      return yield ext.appResourceTree.loadMore(node, context);
    }));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.openInPortal", openInPortal);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.revealResource", revealResource);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.selectSubscriptions", () => import_vscode18.commands.executeCommand("azure-account.selectSubscriptions"));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.viewProperties", viewProperties);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.editTags", editTags);
    (0, import_vscode_azext_utils30.registerCommand)("ms-azuretools.getStarted", getStarted);
    (0, import_vscode_azext_utils30.registerCommand)("ms-azuretools.loadMore", (context, node) => __async(this, null, function* () {
      return yield ext.helpTree.loadMore(node, context);
    }));
    (0, import_vscode_azext_utils30.registerCommand)("ms-azuretools.reportIssue", reportIssue);
    (0, import_vscode_azext_utils30.registerCommand)("ms-azuretools.reviewIssues", reviewIssues);
    (0, import_vscode_azext_utils30.registerCommand)("ms-azuretools.openWalkthrough", () => import_vscode18.commands.executeCommand("workbench.action.openWalkthrough", `ms-azuretools.vscode-azureresourcegroups#azure-get-started`));
    (0, import_vscode_azext_utils30.registerErrorHandler)((c) => c.errorHandling.suppressReportIssue = true);
    (0, import_vscode_azext_utils30.registerReportIssueCommand)("azureResourceGroups.reportIssue");
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.createResource", createResource);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.groupBy.resourceGroup", buildGroupByCommand("resourceGroup"));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.groupBy.resourceType", buildGroupByCommand("resourceType"));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.groupBy.location", buildGroupByCommand("location"));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.groupBy.armTag", buildGroupByCommand("armTag"));
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.installExtension", installExtension);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.clearActivities", clearActivities);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.showGroupOptions", showGroupOptions);
    (0, import_vscode_azext_utils30.registerCommand)("azureResourceGroups.openUrl", (context, url) => __async(this, null, function* () {
      context.telemetry.properties.url = url;
      yield (0, import_vscode_azext_utils30.openUrl)(url);
    }));
    (0, import_vscode_azext_utils30.registerCommand)("azureWorkspace.loadMore", (context, node) => __async(this, null, function* () {
      return yield ext.workspaceTree.loadMore(node, context);
    }));
  }
  __name(registerCommands, "registerCommands");
  function handleAzExtTreeItemRefresh(context, node) {
    return __async(this, null, function* () {
      if (node instanceof BranchDataItemWrapper) {
        const item = node.unwrap();
        if ((0, import_vscode_azext_utils30.isAzExtTreeItem)(item)) {
          yield item.refresh(context);
        }
      }
    });
  }
  __name(handleAzExtTreeItemRefresh, "handleAzExtTreeItemRefresh");

  // src/commands/tags/registerTagDiagnostics.ts
  var import_vscode_azext_utils32 = __toESM(require_src3());
  var import_vscode20 = __require("vscode");

  // src/commands/tags/getTagDiagnostics.ts
  var import_vscode_azext_utils31 = __toESM(require_src3());
  var import_vscode19 = __require("vscode");
  function getTagDiagnostics(text) {
    const visitor = new TagVisitor();
    visit2(text, visitor);
    return visitor.diagnostics;
  }
  __name(getTagDiagnostics, "getTagDiagnostics");
  var TagVisitor = class {
    constructor() {
      this.diagnostics = [];
      this._objectOpenBracketPositions = [];
      this._arrayOpenBracketPositions = [];
      this._tagCount = 0;
      this._existingTags = [];
      /**
       * Invoked when an open brace is encountered and an object is started. The offset and length represent the location of the open brace.
       */
      this.onObjectBegin = /* @__PURE__ */ __name((_offset, _length, startLine, startCharacter) => {
        this._objectOpenBracketPositions.push(new import_vscode19.Position(startLine, startCharacter));
      }, "onObjectBegin");
      /**
       * Invoked when a closing brace is encountered and an object is completed. The offset and length represent the location of the closing brace.
       */
      this.onObjectEnd = /* @__PURE__ */ __name((_offset, _length, closeBracketLine, closeBracketChar) => {
        const openBracketPosition = (0, import_vscode_azext_utils31.nonNullValue)(this._objectOpenBracketPositions.pop());
        if (this._objectOpenBracketPositions.length === 1) {
          const range = new import_vscode19.Range(openBracketPosition, new import_vscode19.Position(closeBracketLine, closeBracketChar + 1));
          this.addTagValueTypeError(range, "object");
        }
      }, "onObjectEnd");
      /**
       * Invoked when an open bracket is encountered. The offset and length represent the location of the open bracket.
       */
      this.onArrayBegin = /* @__PURE__ */ __name((_offset, _length, startLine, startCharacter) => {
        this._arrayOpenBracketPositions.push(new import_vscode19.Position(startLine, startCharacter));
      }, "onArrayBegin");
      /**
       * Invoked when a closing bracket is encountered. The offset and length represent the location of the closing bracket.
       */
      this.onArrayEnd = /* @__PURE__ */ __name((_offset, _length, closeBracketLine, closeBracketChar) => {
        const openBracketPosition = (0, import_vscode_azext_utils31.nonNullValue)(this._arrayOpenBracketPositions.pop());
        if (this._arrayOpenBracketPositions.length === 0) {
          const range = new import_vscode19.Range(openBracketPosition, new import_vscode19.Position(closeBracketLine, closeBracketChar + 1));
          const actualType = "array";
          if (this._objectOpenBracketPositions.length === 0) {
            this.addTagsTypeError(range, actualType);
          } else if (this._objectOpenBracketPositions.length === 1) {
            this.addTagValueTypeError(range, actualType);
          }
        }
      }, "onArrayEnd");
      /**
       * Invoked when a property is encountered. The offset and length represent the location of the property name.
       */
      this.onObjectProperty = /* @__PURE__ */ __name((property, _offset, length, startLine, startCharacter) => {
        if (this._objectOpenBracketPositions.length === 1) {
          this._tagCount += 1;
          const range = new import_vscode19.Range(startLine, startCharacter, startLine, startCharacter + length);
          const max = 512;
          if (property.length > max) {
            this.addError(range, localize("tagNameTooLong", "Tag name must be {0} characters or less.", max));
          }
          if (/^\s*$/.test(property)) {
            const error = localize("tagNameEmpty", "Tag name cannot be empty.");
            this.addError(range, error);
          }
          const invalidChars = ["<", ">", "%", "&", "\\", "?", "/"];
          const matchingChars = invalidChars.filter((c) => property.includes(c));
          if (matchingChars.length > 0) {
            const error = localize("tagNameInvalidChars", "Tag name cannot contain the following characters: {0}", invalidChars.join(", "));
            this.addError(range, error);
          }
          if (this._existingTags.includes(property.toLowerCase())) {
            const error = localize("tagNameAlreadyUsed", "Tag name is already used. Tag names are case-insensitive.");
            this.addError(range, error);
          } else {
            this._existingTags.push(property.toLowerCase());
          }
          const maxTags = 50;
          if (this._tagCount > maxTags) {
            this.addError(range, localize("tooManyTags", "Only {0} tags are allowed.", maxTags));
          }
        }
      }, "onObjectProperty");
      /**
       * Invoked when a literal value is encountered. The offset and length represent the location of the literal value.
       */
      this.onLiteralValue = /* @__PURE__ */ __name((value, _offset, length, startLine, startChar) => {
        const range = new import_vscode19.Range(startLine, startChar, startLine, startChar + length);
        const actualType = typeof value;
        if (this._objectOpenBracketPositions.length === 0) {
          this.addTagsTypeError(range, actualType);
        } else if (typeof value !== "string") {
          this.addTagValueTypeError(range, actualType);
        } else {
          const max = 256;
          if (value.length > max) {
            this.addError(range, localize("tagValueTooLong", "Tag value must be {0} characters or less.", max));
          }
        }
      }, "onLiteralValue");
    }
    addTagsTypeError(range, actualType) {
      this.addError(range, localize("tagsTypeError", 'Tags must be an object of key/value pairs instead of "{0}".', actualType));
    }
    addTagValueTypeError(range, actualType) {
      this.addError(range, localize("tagTypeError", 'Tag value must be of type "string" instead of "{0}".', actualType));
    }
    addError(range, error) {
      const diagnostic = new import_vscode19.Diagnostic(range, error);
      diagnostic.source = "Azure";
      this.diagnostics.push(diagnostic);
    }
  };
  __name(TagVisitor, "TagVisitor");

  // src/commands/tags/registerTagDiagnostics.ts
  function registerTagDiagnostics() {
    ext.diagnosticCollection = import_vscode20.languages.createDiagnosticCollection("Azure Tags");
    ext.context.subscriptions.push(ext.diagnosticCollection);
    (0, import_vscode_azext_utils32.registerEvent)("onDidChangeActiveTextEditor", import_vscode20.window.onDidChangeActiveTextEditor, onDidChangeActiveTextEditor);
  }
  __name(registerTagDiagnostics, "registerTagDiagnostics");
  function onDidChangeActiveTextEditor(context, editor) {
    context.telemetry.suppressIfSuccessful = true;
    context.errorHandling.suppressDisplay = true;
    if ((editor == null ? void 0 : editor.document.uri.scheme) === TagFileSystem.scheme) {
      if (!ext.diagnosticWatcher) {
        ext.diagnosticWatcher = import_vscode20.workspace.onDidChangeTextDocument(onDidChangeTextDocument);
      }
      updateTagDiagnostics(editor.document);
    } else if (ext.diagnosticWatcher) {
      ext.diagnosticWatcher.dispose();
      ext.diagnosticWatcher = void 0;
      ext.diagnosticCollection.clear();
    }
  }
  __name(onDidChangeActiveTextEditor, "onDidChangeActiveTextEditor");
  function onDidChangeTextDocument(e) {
    return __async(this, null, function* () {
      yield (0, import_vscode_azext_utils32.callWithTelemetryAndErrorHandling)("onDidChangeTextDocument", (context) => {
        context.telemetry.suppressIfSuccessful = true;
        context.errorHandling.suppressDisplay = true;
        if (e.contentChanges.length > 0 && e.document.uri.scheme === TagFileSystem.scheme) {
          updateTagDiagnostics(e.document);
        }
      });
    });
  }
  __name(onDidChangeTextDocument, "onDidChangeTextDocument");
  function updateTagDiagnostics(document2) {
    const diagnostics = getTagDiagnostics(document2.getText());
    ext.diagnosticCollection.set(document2.uri, diagnostics);
  }
  __name(updateTagDiagnostics, "updateTagDiagnostics");

  // src/services/DesktopSubscriptionProvider.ts
  var vscode10 = __toESM(__require("vscode"));
  function getAzureAccountExtensionApi() {
    return __async(this, null, function* () {
      const extension = vscode10.extensions.getExtension("ms-vscode.azure-account");
      if (extension) {
        if (!extension.isActive) {
          yield extension.activate();
        }
        if ("getApi" in extension.exports) {
          return extension.exports.getApi("1");
        } else {
          return extension.exports;
        }
      } else {
        throw new Error("Azure Account extension is not installed.");
      }
    });
  }
  __name(getAzureAccountExtensionApi, "getAzureAccountExtensionApi");
  var azureAccountSubscriptionProvider;
  function createAzureAccountSubscriptionProviderFactory() {
    return () => __async(this, null, function* () {
      if (!azureAccountSubscriptionProvider) {
        const api = yield getAzureAccountExtensionApi();
        azureAccountSubscriptionProvider = new AzureAccountSubscriptionProvider(api);
      }
      return azureAccountSubscriptionProvider;
    });
  }
  __name(createAzureAccountSubscriptionProviderFactory, "createAzureAccountSubscriptionProviderFactory");
  var AzureAccountSubscriptionProvider = class {
    constructor(azureAccountApi) {
      this.azureAccountApi = azureAccountApi;
      this.onStatusChanged = azureAccountApi.onStatusChanged;
      this.onFiltersChanged = azureAccountApi.onFiltersChanged;
      this.onSessionsChanged = azureAccountApi.onSessionsChanged;
      this.onSubscriptionsChanged = azureAccountApi.onSubscriptionsChanged;
      this.waitForFilters = azureAccountApi.waitForFilters.bind(azureAccountApi);
    }
    get status() {
      return this.azureAccountApi.status;
    }
    get filters() {
      return this.azureAccountApi.filters.map(this.createAzureSubscription);
    }
    get allSubscriptions() {
      return this.azureAccountApi.subscriptions.map(this.createAzureSubscription);
    }
    logIn() {
      return __async(this, null, function* () {
        yield vscode10.commands.executeCommand("azure-account.login");
      });
    }
    logOut() {
      return __async(this, null, function* () {
        yield vscode10.commands.executeCommand("azure-account.logout");
      });
    }
    selectSubscriptions() {
      return __async(this, null, function* () {
        yield vscode10.commands.executeCommand("azure-account.selectSubscriptions");
      });
    }
    createAzureSubscription(subscription) {
      return {
        authentication: {
          getSession: (scopes) => __async(this, null, function* () {
            const token = yield subscription.session.credentials2.getToken(scopes != null ? scopes : []);
            if (!token) {
              return void 0;
            }
            return {
              accessToken: token.token,
              account: {
                id: subscription.session.userId,
                label: subscription.session.userId
              },
              id: "microsoft",
              scopes: scopes != null ? scopes : []
            };
          })
        },
        name: subscription.subscription.displayName || "TODO: ever undefined?",
        environment: subscription.session.environment,
        isCustomCloud: subscription.session.environment.name === "AzureCustomCloud",
        subscriptionId: subscription.subscription.subscriptionId || "TODO: ever undefined?",
        tenantId: subscription.session.tenantId
      };
    }
  };
  __name(AzureAccountSubscriptionProvider, "AzureAccountSubscriptionProvider");

  // node_modules/@azure/arm-subscriptions/dist-esm/src/pagingHelper.js
  var pageMap2 = /* @__PURE__ */ new WeakMap();
  function setContinuationToken2(page, continuationToken) {
    var _a7;
    if (typeof page !== "object" || page === null || !continuationToken) {
      return;
    }
    const pageInfo = (_a7 = pageMap2.get(page)) !== null && _a7 !== void 0 ? _a7 : {};
    pageInfo.continuationToken = continuationToken;
    pageMap2.set(page, pageInfo);
  }
  __name(setContinuationToken2, "setContinuationToken");

  // node_modules/@azure/arm-subscriptions/dist-esm/src/subscriptionClient.js
  init_src6();
  init_src5();

  // node_modules/@azure/arm-subscriptions/node_modules/tslib/tslib.es6.js
  function __rest5(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  __name(__rest5, "__rest");
  function __awaiter5(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    __name(adopt, "adopt");
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      __name(fulfilled, "fulfilled");
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      __name(rejected, "rejected");
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      __name(step, "step");
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  __name(__awaiter5, "__awaiter");
  function __values7(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  __name(__values7, "__values");
  function __await6(v) {
    return this instanceof __await6 ? (this.v = v, this) : new __await6(v);
  }
  __name(__await6, "__await");
  function __asyncGenerator6(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    __name(verb, "verb");
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    __name(resume, "resume");
    function step(r) {
      r.value instanceof __await6 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    __name(step, "step");
    function fulfill(value) {
      resume("next", value);
    }
    __name(fulfill, "fulfill");
    function reject(value) {
      resume("throw", value);
    }
    __name(reject, "reject");
    function settle(f2, v) {
      if (f2(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
    __name(settle, "settle");
  }
  __name(__asyncGenerator6, "__asyncGenerator");
  function __asyncDelegator6(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f2) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await6(o[n](v)), done: false } : f2 ? f2(v) : v;
      } : f2;
    }
    __name(verb, "verb");
  }
  __name(__asyncDelegator6, "__asyncDelegator");
  function __asyncValues6(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values7 === "function" ? __values7(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    __name(verb, "verb");
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
    __name(settle, "settle");
  }
  __name(__asyncValues6, "__asyncValues");

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/subscriptions.js
  init_src6();

  // node_modules/@azure/arm-subscriptions/dist-esm/src/models/mappers.js
  var mappers_exports6 = {};
  __export(mappers_exports6, {
    AcceptOwnershipRequest: () => AcceptOwnershipRequest,
    AcceptOwnershipRequestProperties: () => AcceptOwnershipRequestProperties,
    AcceptOwnershipStatusResponse: () => AcceptOwnershipStatusResponse,
    BillingAccountPoliciesResponse: () => BillingAccountPoliciesResponse,
    BillingAccountPoliciesResponseProperties: () => BillingAccountPoliciesResponseProperties,
    CanceledSubscriptionId: () => CanceledSubscriptionId,
    EnabledSubscriptionId: () => EnabledSubscriptionId,
    ErrorResponse: () => ErrorResponse6,
    ErrorResponseBody: () => ErrorResponseBody3,
    GetTenantPolicyListResponse: () => GetTenantPolicyListResponse,
    GetTenantPolicyResponse: () => GetTenantPolicyResponse,
    Location: () => Location2,
    LocationListResult: () => LocationListResult2,
    Operation: () => Operation6,
    OperationDisplay: () => OperationDisplay6,
    OperationListResult: () => OperationListResult6,
    PutAliasRequest: () => PutAliasRequest,
    PutAliasRequestAdditionalProperties: () => PutAliasRequestAdditionalProperties,
    PutAliasRequestProperties: () => PutAliasRequestProperties,
    PutTenantPolicyRequestProperties: () => PutTenantPolicyRequestProperties,
    RenamedSubscriptionId: () => RenamedSubscriptionId,
    ServiceTenantResponse: () => ServiceTenantResponse,
    Subscription: () => Subscription2,
    SubscriptionAcceptOwnershipHeaders: () => SubscriptionAcceptOwnershipHeaders,
    SubscriptionAliasListResult: () => SubscriptionAliasListResult,
    SubscriptionAliasResponse: () => SubscriptionAliasResponse,
    SubscriptionAliasResponseProperties: () => SubscriptionAliasResponseProperties,
    SubscriptionListResult: () => SubscriptionListResult2,
    SubscriptionName: () => SubscriptionName,
    SubscriptionPolicies: () => SubscriptionPolicies2,
    SystemData: () => SystemData3,
    TenantIdDescription: () => TenantIdDescription2,
    TenantListResult: () => TenantListResult2,
    TenantPolicy: () => TenantPolicy
  });
  var LocationListResult2 = {
    type: {
      name: "Composite",
      className: "LocationListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "Location"
              }
            }
          }
        }
      }
    }
  };
  var Location2 = {
    type: {
      name: "Composite",
      className: "Location",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        name: {
          serializedName: "name",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        displayName: {
          serializedName: "displayName",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        latitude: {
          serializedName: "latitude",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        longitude: {
          serializedName: "longitude",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var Subscription2 = {
    type: {
      name: "Composite",
      className: "Subscription",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        displayName: {
          serializedName: "displayName",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        state: {
          serializedName: "state",
          readOnly: true,
          type: {
            name: "Enum",
            allowedValues: ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"]
          }
        },
        tenantId: {
          serializedName: "tenantId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
          }
        },
        subscriptionPolicies: {
          serializedName: "subscriptionPolicies",
          type: {
            name: "Composite",
            className: "SubscriptionPolicies"
          }
        },
        authorizationSource: {
          serializedName: "authorizationSource",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var SubscriptionPolicies2 = {
    type: {
      name: "Composite",
      className: "SubscriptionPolicies",
      modelProperties: {
        locationPlacementId: {
          serializedName: "locationPlacementId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        quotaId: {
          serializedName: "quotaId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        spendingLimit: {
          serializedName: "spendingLimit",
          readOnly: true,
          type: {
            name: "Enum",
            allowedValues: ["On", "Off", "CurrentPeriodOff"]
          }
        }
      }
    }
  };
  var SubscriptionListResult2 = {
    type: {
      name: "Composite",
      className: "SubscriptionListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "Subscription"
              }
            }
          }
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var TenantListResult2 = {
    type: {
      name: "Composite",
      className: "TenantListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "TenantIdDescription"
              }
            }
          }
        },
        nextLink: {
          serializedName: "nextLink",
          required: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var TenantIdDescription2 = {
    type: {
      name: "Composite",
      className: "TenantIdDescription",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        tenantId: {
          serializedName: "tenantId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        tenantCategory: {
          serializedName: "tenantCategory",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        country: {
          serializedName: "country",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        countryCode: {
          serializedName: "countryCode",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        displayName: {
          serializedName: "displayName",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        domains: {
          serializedName: "domains",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        defaultDomain: {
          serializedName: "defaultDomain",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        tenantType: {
          serializedName: "tenantType",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var CanceledSubscriptionId = {
    type: {
      name: "Composite",
      className: "CanceledSubscriptionId",
      modelProperties: {
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var ErrorResponseBody3 = {
    type: {
      name: "Composite",
      className: "ErrorResponseBody",
      modelProperties: {
        error: {
          serializedName: "error",
          type: {
            name: "Composite",
            className: "ErrorResponse"
          }
        },
        code: {
          serializedName: "code",
          type: {
            name: "String"
          }
        },
        message: {
          serializedName: "message",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var ErrorResponse6 = {
    type: {
      name: "Composite",
      className: "ErrorResponse",
      modelProperties: {
        code: {
          serializedName: "code",
          type: {
            name: "String"
          }
        },
        message: {
          serializedName: "message",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var SubscriptionName = {
    type: {
      name: "Composite",
      className: "SubscriptionName",
      modelProperties: {
        subscriptionName: {
          serializedName: "subscriptionName",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var RenamedSubscriptionId = {
    type: {
      name: "Composite",
      className: "RenamedSubscriptionId",
      modelProperties: {
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var EnabledSubscriptionId = {
    type: {
      name: "Composite",
      className: "EnabledSubscriptionId",
      modelProperties: {
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var OperationListResult6 = {
    type: {
      name: "Composite",
      className: "OperationListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "Operation"
              }
            }
          }
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var Operation6 = {
    type: {
      name: "Composite",
      className: "Operation",
      modelProperties: {
        name: {
          serializedName: "name",
          type: {
            name: "String"
          }
        },
        isDataAction: {
          serializedName: "isDataAction",
          type: {
            name: "Boolean"
          }
        },
        display: {
          serializedName: "display",
          type: {
            name: "Composite",
            className: "OperationDisplay"
          }
        }
      }
    }
  };
  var OperationDisplay6 = {
    type: {
      name: "Composite",
      className: "OperationDisplay",
      modelProperties: {
        provider: {
          serializedName: "provider",
          type: {
            name: "String"
          }
        },
        resource: {
          serializedName: "resource",
          type: {
            name: "String"
          }
        },
        operation: {
          serializedName: "operation",
          type: {
            name: "String"
          }
        },
        description: {
          serializedName: "description",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var PutAliasRequest = {
    type: {
      name: "Composite",
      className: "PutAliasRequest",
      modelProperties: {
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "PutAliasRequestProperties"
          }
        }
      }
    }
  };
  var PutAliasRequestProperties = {
    type: {
      name: "Composite",
      className: "PutAliasRequestProperties",
      modelProperties: {
        displayName: {
          serializedName: "displayName",
          type: {
            name: "String"
          }
        },
        workload: {
          serializedName: "workload",
          type: {
            name: "String"
          }
        },
        billingScope: {
          serializedName: "billingScope",
          type: {
            name: "String"
          }
        },
        subscriptionId: {
          serializedName: "subscriptionId",
          type: {
            name: "String"
          }
        },
        resellerId: {
          serializedName: "resellerId",
          type: {
            name: "String"
          }
        },
        additionalProperties: {
          serializedName: "additionalProperties",
          type: {
            name: "Composite",
            className: "PutAliasRequestAdditionalProperties"
          }
        }
      }
    }
  };
  var PutAliasRequestAdditionalProperties = {
    type: {
      name: "Composite",
      className: "PutAliasRequestAdditionalProperties",
      modelProperties: {
        managementGroupId: {
          serializedName: "managementGroupId",
          type: {
            name: "String"
          }
        },
        subscriptionTenantId: {
          serializedName: "subscriptionTenantId",
          type: {
            name: "String"
          }
        },
        subscriptionOwnerId: {
          serializedName: "subscriptionOwnerId",
          type: {
            name: "String"
          }
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
          }
        }
      }
    }
  };
  var SubscriptionAliasResponse = {
    type: {
      name: "Composite",
      className: "SubscriptionAliasResponse",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        name: {
          serializedName: "name",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        type: {
          serializedName: "type",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "SubscriptionAliasResponseProperties"
          }
        },
        systemData: {
          serializedName: "systemData",
          type: {
            name: "Composite",
            className: "SystemData"
          }
        }
      }
    }
  };
  var SubscriptionAliasResponseProperties = {
    type: {
      name: "Composite",
      className: "SubscriptionAliasResponseProperties",
      modelProperties: {
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        displayName: {
          serializedName: "displayName",
          type: {
            name: "String"
          }
        },
        provisioningState: {
          serializedName: "provisioningState",
          type: {
            name: "String"
          }
        },
        acceptOwnershipUrl: {
          serializedName: "acceptOwnershipUrl",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        acceptOwnershipState: {
          serializedName: "acceptOwnershipState",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        billingScope: {
          serializedName: "billingScope",
          type: {
            name: "String"
          }
        },
        workload: {
          serializedName: "workload",
          type: {
            name: "String"
          }
        },
        resellerId: {
          serializedName: "resellerId",
          type: {
            name: "String"
          }
        },
        subscriptionOwnerId: {
          serializedName: "subscriptionOwnerId",
          type: {
            name: "String"
          }
        },
        managementGroupId: {
          serializedName: "managementGroupId",
          type: {
            name: "String"
          }
        },
        createdTime: {
          serializedName: "createdTime",
          type: {
            name: "String"
          }
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
          }
        }
      }
    }
  };
  var SystemData3 = {
    type: {
      name: "Composite",
      className: "SystemData",
      modelProperties: {
        createdBy: {
          serializedName: "createdBy",
          type: {
            name: "String"
          }
        },
        createdByType: {
          serializedName: "createdByType",
          type: {
            name: "String"
          }
        },
        createdAt: {
          serializedName: "createdAt",
          type: {
            name: "DateTime"
          }
        },
        lastModifiedBy: {
          serializedName: "lastModifiedBy",
          type: {
            name: "String"
          }
        },
        lastModifiedByType: {
          serializedName: "lastModifiedByType",
          type: {
            name: "String"
          }
        },
        lastModifiedAt: {
          serializedName: "lastModifiedAt",
          type: {
            name: "DateTime"
          }
        }
      }
    }
  };
  var SubscriptionAliasListResult = {
    type: {
      name: "Composite",
      className: "SubscriptionAliasListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "SubscriptionAliasResponse"
              }
            }
          }
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var AcceptOwnershipRequest = {
    type: {
      name: "Composite",
      className: "AcceptOwnershipRequest",
      modelProperties: {
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "AcceptOwnershipRequestProperties"
          }
        }
      }
    }
  };
  var AcceptOwnershipRequestProperties = {
    type: {
      name: "Composite",
      className: "AcceptOwnershipRequestProperties",
      modelProperties: {
        displayName: {
          serializedName: "displayName",
          required: true,
          type: {
            name: "String"
          }
        },
        managementGroupId: {
          serializedName: "managementGroupId",
          type: {
            name: "String"
          }
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
          }
        }
      }
    }
  };
  var AcceptOwnershipStatusResponse = {
    type: {
      name: "Composite",
      className: "AcceptOwnershipStatusResponse",
      modelProperties: {
        subscriptionId: {
          serializedName: "subscriptionId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        acceptOwnershipState: {
          serializedName: "acceptOwnershipState",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        billingOwner: {
          serializedName: "billingOwner",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        subscriptionTenantId: {
          serializedName: "subscriptionTenantId",
          type: {
            name: "String"
          }
        },
        displayName: {
          serializedName: "displayName",
          type: {
            name: "String"
          }
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } }
          }
        }
      }
    }
  };
  var PutTenantPolicyRequestProperties = {
    type: {
      name: "Composite",
      className: "PutTenantPolicyRequestProperties",
      modelProperties: {
        blockSubscriptionsLeavingTenant: {
          serializedName: "blockSubscriptionsLeavingTenant",
          type: {
            name: "Boolean"
          }
        },
        blockSubscriptionsIntoTenant: {
          serializedName: "blockSubscriptionsIntoTenant",
          type: {
            name: "Boolean"
          }
        },
        exemptedPrincipals: {
          serializedName: "exemptedPrincipals",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Uuid"
              }
            }
          }
        }
      }
    }
  };
  var GetTenantPolicyResponse = {
    type: {
      name: "Composite",
      className: "GetTenantPolicyResponse",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        name: {
          serializedName: "name",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        type: {
          serializedName: "type",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "TenantPolicy"
          }
        },
        systemData: {
          serializedName: "systemData",
          type: {
            name: "Composite",
            className: "SystemData"
          }
        }
      }
    }
  };
  var TenantPolicy = {
    type: {
      name: "Composite",
      className: "TenantPolicy",
      modelProperties: {
        policyId: {
          serializedName: "policyId",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        blockSubscriptionsLeavingTenant: {
          serializedName: "blockSubscriptionsLeavingTenant",
          type: {
            name: "Boolean"
          }
        },
        blockSubscriptionsIntoTenant: {
          serializedName: "blockSubscriptionsIntoTenant",
          type: {
            name: "Boolean"
          }
        },
        exemptedPrincipals: {
          serializedName: "exemptedPrincipals",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Uuid"
              }
            }
          }
        }
      }
    }
  };
  var GetTenantPolicyListResponse = {
    type: {
      name: "Composite",
      className: "GetTenantPolicyListResponse",
      modelProperties: {
        value: {
          serializedName: "value",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "GetTenantPolicyResponse"
              }
            }
          }
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var BillingAccountPoliciesResponse = {
    type: {
      name: "Composite",
      className: "BillingAccountPoliciesResponse",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        name: {
          serializedName: "name",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        type: {
          serializedName: "type",
          readOnly: true,
          type: {
            name: "String"
          }
        },
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "BillingAccountPoliciesResponseProperties"
          }
        },
        systemData: {
          serializedName: "systemData",
          type: {
            name: "Composite",
            className: "SystemData"
          }
        }
      }
    }
  };
  var BillingAccountPoliciesResponseProperties = {
    type: {
      name: "Composite",
      className: "BillingAccountPoliciesResponseProperties",
      modelProperties: {
        serviceTenants: {
          serializedName: "serviceTenants",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ServiceTenantResponse"
              }
            }
          }
        },
        allowTransfers: {
          serializedName: "allowTransfers",
          type: {
            name: "Boolean"
          }
        }
      }
    }
  };
  var ServiceTenantResponse = {
    type: {
      name: "Composite",
      className: "ServiceTenantResponse",
      modelProperties: {
        tenantId: {
          serializedName: "tenantId",
          type: {
            name: "String"
          }
        },
        tenantName: {
          serializedName: "tenantName",
          type: {
            name: "String"
          }
        }
      }
    }
  };
  var SubscriptionAcceptOwnershipHeaders = {
    type: {
      name: "Composite",
      className: "SubscriptionAcceptOwnershipHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String"
          }
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number"
          }
        }
      }
    }
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/models/parameters.js
  var accept6 = {
    parameterPath: "accept",
    mapper: {
      defaultValue: "application/json",
      isConstant: true,
      serializedName: "Accept",
      type: {
        name: "String"
      }
    }
  };
  var $host6 = {
    parameterPath: "$host",
    mapper: {
      serializedName: "$host",
      required: true,
      type: {
        name: "String"
      }
    },
    skipEncoding: true
  };
  var subscriptionId6 = {
    parameterPath: "subscriptionId",
    mapper: {
      serializedName: "subscriptionId",
      required: true,
      type: {
        name: "String"
      }
    }
  };
  var apiVersion6 = {
    parameterPath: "apiVersion",
    mapper: {
      defaultValue: "2016-06-01",
      isConstant: true,
      serializedName: "api-version",
      type: {
        name: "String"
      }
    }
  };
  var nextLink6 = {
    parameterPath: "nextLink",
    mapper: {
      serializedName: "nextLink",
      required: true,
      type: {
        name: "String"
      }
    },
    skipEncoding: true
  };
  var apiVersion13 = {
    parameterPath: "apiVersion",
    mapper: {
      defaultValue: "2021-10-01",
      isConstant: true,
      serializedName: "api-version",
      type: {
        name: "String"
      }
    }
  };
  var contentType6 = {
    parameterPath: ["options", "contentType"],
    mapper: {
      defaultValue: "application/json",
      isConstant: true,
      serializedName: "Content-Type",
      type: {
        name: "String"
      }
    }
  };
  var body = {
    parameterPath: "body",
    mapper: SubscriptionName
  };
  var body1 = {
    parameterPath: "body",
    mapper: AcceptOwnershipRequest
  };
  var body2 = {
    parameterPath: "body",
    mapper: PutAliasRequest
  };
  var aliasName = {
    parameterPath: "aliasName",
    mapper: {
      serializedName: "aliasName",
      required: true,
      type: {
        name: "String"
      }
    }
  };
  var body3 = {
    parameterPath: "body",
    mapper: PutTenantPolicyRequestProperties
  };
  var billingAccountId = {
    parameterPath: "billingAccountId",
    mapper: {
      serializedName: "billingAccountId",
      required: true,
      type: {
        name: "String"
      }
    }
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/subscriptions.js
  var SubscriptionsImpl2 = class {
    /**
     * Initialize a new instance of the class Subscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * This operation provides all the locations that are available for resource providers; however, each
     * resource provider may support a subset of this list.
     * @param subscriptionId The ID of the target subscription.
     * @param options The options parameters.
     */
    listLocations(subscriptionId7, options) {
      const iter = this.listLocationsPagingAll(subscriptionId7, options);
      return {
        next() {
          return iter.next();
        },
        [Symbol.asyncIterator]() {
          return this;
        },
        byPage: (settings) => {
          if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
            throw new Error("maxPageSize is not supported by this operation.");
          }
          return this.listLocationsPagingPage(subscriptionId7, options, settings);
        }
      };
    }
    listLocationsPagingPage(subscriptionId7, options, _settings) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listLocationsPagingPage_1() {
        let result;
        result = yield __await6(this._listLocations(subscriptionId7, options));
        yield yield __await6(result.value || []);
      }, "listLocationsPagingPage_1"));
    }
    listLocationsPagingAll(subscriptionId7, options) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listLocationsPagingAll_1() {
        var e_1, _a7;
        try {
          for (var _b2 = __asyncValues6(this.listLocationsPagingPage(subscriptionId7, options)), _c2; _c2 = yield __await6(_b2.next()), !_c2.done; ) {
            const page = _c2.value;
            yield __await6(yield* __asyncDelegator6(__asyncValues6(page)));
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a7 = _b2.return))
              yield __await6(_a7.call(_b2));
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }, "listLocationsPagingAll_1"));
    }
    /**
     * Gets all subscriptions for a tenant.
     * @param options The options parameters.
     */
    list(options) {
      const iter = this.listPagingAll(options);
      return {
        next() {
          return iter.next();
        },
        [Symbol.asyncIterator]() {
          return this;
        },
        byPage: (settings) => {
          if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
            throw new Error("maxPageSize is not supported by this operation.");
          }
          return this.listPagingPage(options, settings);
        }
      };
    }
    listPagingPage(options, settings) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
        let result;
        let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
        if (!continuationToken) {
          result = yield __await6(this._list(options));
          let page = result.value || [];
          continuationToken = result.nextLink;
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
        while (continuationToken) {
          result = yield __await6(this._listNext(continuationToken, options));
          continuationToken = result.nextLink;
          let page = result.value || [];
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
      }, "listPagingPage_1"));
    }
    listPagingAll(options) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
        var e_2, _a7;
        try {
          for (var _b2 = __asyncValues6(this.listPagingPage(options)), _c2; _c2 = yield __await6(_b2.next()), !_c2.done; ) {
            const page = _c2.value;
            yield __await6(yield* __asyncDelegator6(__asyncValues6(page)));
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a7 = _b2.return))
              yield __await6(_a7.call(_b2));
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }, "listPagingAll_1"));
    }
    /**
     * This operation provides all the locations that are available for resource providers; however, each
     * resource provider may support a subset of this list.
     * @param subscriptionId The ID of the target subscription.
     * @param options The options parameters.
     */
    _listLocations(subscriptionId7, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, listLocationsOperationSpec2);
    }
    /**
     * Gets details about a specified subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The options parameters.
     */
    get(subscriptionId7, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, getOperationSpec28);
    }
    /**
     * Gets all subscriptions for a tenant.
     * @param options The options parameters.
     */
    _list(options) {
      return this.client.sendOperationRequest({ options }, listOperationSpec40);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink7, options) {
      return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec24);
    }
  };
  __name(SubscriptionsImpl2, "SubscriptionsImpl");
  var serializer49 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var listLocationsOperationSpec2 = {
    path: "/subscriptions/{subscriptionId}/locations",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: LocationListResult2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6],
    serializer: serializer49
  };
  var getOperationSpec28 = {
    path: "/subscriptions/{subscriptionId}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Subscription2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6],
    serializer: serializer49
  };
  var listOperationSpec40 = {
    path: "/subscriptions",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: SubscriptionListResult2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer49
  };
  var listNextOperationSpec24 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: SubscriptionListResult2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6, nextLink6],
    headerParameters: [accept6],
    serializer: serializer49
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/tenants.js
  init_src6();
  var TenantsImpl2 = class {
    /**
     * Initialize a new instance of the class Tenants class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * Gets the tenants for your account.
     * @param options The options parameters.
     */
    list(options) {
      const iter = this.listPagingAll(options);
      return {
        next() {
          return iter.next();
        },
        [Symbol.asyncIterator]() {
          return this;
        },
        byPage: (settings) => {
          if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
            throw new Error("maxPageSize is not supported by this operation.");
          }
          return this.listPagingPage(options, settings);
        }
      };
    }
    listPagingPage(options, settings) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
        let result;
        let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
        if (!continuationToken) {
          result = yield __await6(this._list(options));
          let page = result.value || [];
          continuationToken = result.nextLink;
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
        while (continuationToken) {
          result = yield __await6(this._listNext(continuationToken, options));
          continuationToken = result.nextLink;
          let page = result.value || [];
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
      }, "listPagingPage_1"));
    }
    listPagingAll(options) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
        var e_1, _a7;
        try {
          for (var _b2 = __asyncValues6(this.listPagingPage(options)), _c2; _c2 = yield __await6(_b2.next()), !_c2.done; ) {
            const page = _c2.value;
            yield __await6(yield* __asyncDelegator6(__asyncValues6(page)));
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a7 = _b2.return))
              yield __await6(_a7.call(_b2));
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }, "listPagingAll_1"));
    }
    /**
     * Gets the tenants for your account.
     * @param options The options parameters.
     */
    _list(options) {
      return this.client.sendOperationRequest({ options }, listOperationSpec41);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink7, options) {
      return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec25);
    }
  };
  __name(TenantsImpl2, "TenantsImpl");
  var serializer50 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var listOperationSpec41 = {
    path: "/tenants",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: TenantListResult2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer50
  };
  var listNextOperationSpec25 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: TenantListResult2
      }
    },
    queryParameters: [apiVersion6],
    urlParameters: [$host6, nextLink6],
    headerParameters: [accept6],
    serializer: serializer50
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/subscriptionOperations.js
  init_src6();
  init_src7();

  // node_modules/@azure/arm-subscriptions/dist-esm/src/lroImpl.js
  var LroImpl5 = class {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
      this.sendOperationFn = sendOperationFn;
      this.args = args;
      this.spec = spec;
      this.requestPath = requestPath;
      this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
      return __awaiter5(this, void 0, void 0, function* () {
        return this.sendOperationFn(this.args, this.spec);
      });
    }
    sendPollRequest(path) {
      return __awaiter5(this, void 0, void 0, function* () {
        const _a7 = this.spec, { requestBody } = _a7, restSpec = __rest5(_a7, ["requestBody"]);
        return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
      });
    }
  };
  __name(LroImpl5, "LroImpl");

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/subscriptionOperations.js
  var SubscriptionOperationsImpl = class {
    /**
     * Initialize a new instance of the class SubscriptionOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    cancel(subscriptionId7, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, cancelOperationSpec3);
    }
    /**
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id.
     * @param body Subscription Name
     * @param options The options parameters.
     */
    rename(subscriptionId7, body4, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, body: body4, options }, renameOperationSpec);
    }
    /**
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    enable(subscriptionId7, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, enableOperationSpec);
    }
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    beginAcceptOwnership(subscriptionId7, body4, options) {
      return __awaiter5(this, void 0, void 0, function* () {
        const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter5(this, void 0, void 0, function* () {
          return this.client.sendOperationRequest(args, spec);
        }), "directSendOperation");
        const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter5(this, void 0, void 0, function* () {
          var _a7;
          let currentRawResponse = void 0;
          const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
          const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
            currentRawResponse = rawResponse;
            providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
          }, "callback");
          const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
          const flatResponse = yield directSendOperation(updatedArgs, spec);
          return {
            flatResponse,
            rawResponse: {
              statusCode: currentRawResponse.status,
              body: currentRawResponse.parsedBody,
              headers: currentRawResponse.headers.toJSON()
            }
          };
        }), "sendOperation");
        const lro = new LroImpl5(sendOperation, { subscriptionId: subscriptionId7, body: body4, options }, acceptOwnershipOperationSpec);
        const poller = new LroEngine(lro, {
          resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
          intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        yield poller.poll();
        return poller;
      });
    }
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    beginAcceptOwnershipAndWait(subscriptionId7, body4, options) {
      return __awaiter5(this, void 0, void 0, function* () {
        const poller = yield this.beginAcceptOwnership(subscriptionId7, body4, options);
        return poller.pollUntilDone();
      });
    }
    /**
     * Accept subscription ownership status.
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    acceptOwnershipStatus(subscriptionId7, options) {
      return this.client.sendOperationRequest({ subscriptionId: subscriptionId7, options }, acceptOwnershipStatusOperationSpec);
    }
  };
  __name(SubscriptionOperationsImpl, "SubscriptionOperationsImpl");
  var serializer51 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var cancelOperationSpec3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: CanceledSubscriptionId
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6],
    serializer: serializer51
  };
  var renameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: RenamedSubscriptionId
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    requestBody: body,
    queryParameters: [apiVersion13],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6, contentType6],
    mediaType: "json",
    serializer: serializer51
  };
  var enableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: EnabledSubscriptionId
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6],
    serializer: serializer51
  };
  var acceptOwnershipOperationSpec = {
    path: "/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnership",
    httpMethod: "POST",
    responses: {
      200: {
        headersMapper: SubscriptionAcceptOwnershipHeaders
      },
      201: {
        headersMapper: SubscriptionAcceptOwnershipHeaders
      },
      202: {
        headersMapper: SubscriptionAcceptOwnershipHeaders
      },
      204: {
        headersMapper: SubscriptionAcceptOwnershipHeaders
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    requestBody: body1,
    queryParameters: [apiVersion13],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6, contentType6],
    mediaType: "json",
    serializer: serializer51
  };
  var acceptOwnershipStatusOperationSpec = {
    path: "/providers/Microsoft.Subscription/subscriptions/{subscriptionId}/acceptOwnershipStatus",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: AcceptOwnershipStatusResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, subscriptionId6],
    headerParameters: [accept6],
    serializer: serializer51
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/operations.js
  init_src6();
  var OperationsImpl5 = class {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * Lists all of the available Microsoft.Subscription API operations.
     * @param options The options parameters.
     */
    list(options) {
      const iter = this.listPagingAll(options);
      return {
        next() {
          return iter.next();
        },
        [Symbol.asyncIterator]() {
          return this;
        },
        byPage: (settings) => {
          if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
            throw new Error("maxPageSize is not supported by this operation.");
          }
          return this.listPagingPage(options, settings);
        }
      };
    }
    listPagingPage(options, settings) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingPage_1() {
        let result;
        let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
        if (!continuationToken) {
          result = yield __await6(this._list(options));
          let page = result.value || [];
          continuationToken = result.nextLink;
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
        while (continuationToken) {
          result = yield __await6(this._listNext(continuationToken, options));
          continuationToken = result.nextLink;
          let page = result.value || [];
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
      }, "listPagingPage_1"));
    }
    listPagingAll(options) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPagingAll_1() {
        var e_1, _a7;
        try {
          for (var _b2 = __asyncValues6(this.listPagingPage(options)), _c2; _c2 = yield __await6(_b2.next()), !_c2.done; ) {
            const page = _c2.value;
            yield __await6(yield* __asyncDelegator6(__asyncValues6(page)));
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a7 = _b2.return))
              yield __await6(_a7.call(_b2));
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }, "listPagingAll_1"));
    }
    /**
     * Lists all of the available Microsoft.Subscription API operations.
     * @param options The options parameters.
     */
    _list(options) {
      return this.client.sendOperationRequest({ options }, listOperationSpec42);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink7, options) {
      return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listNextOperationSpec26);
    }
  };
  __name(OperationsImpl5, "OperationsImpl");
  var serializer52 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var listOperationSpec42 = {
    path: "/providers/Microsoft.Subscription/operations",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: OperationListResult6
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer52
  };
  var listNextOperationSpec26 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: OperationListResult6
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, nextLink6],
    headerParameters: [accept6],
    serializer: serializer52
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/alias.js
  init_src6();
  init_src7();
  var AliasImpl = class {
    /**
     * Initialize a new instance of the class Alias class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    beginCreate(aliasName2, body4, options) {
      return __awaiter5(this, void 0, void 0, function* () {
        const directSendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter5(this, void 0, void 0, function* () {
          return this.client.sendOperationRequest(args, spec);
        }), "directSendOperation");
        const sendOperation = /* @__PURE__ */ __name((args, spec) => __awaiter5(this, void 0, void 0, function* () {
          var _a7;
          let currentRawResponse = void 0;
          const providedCallback = (_a7 = args.options) === null || _a7 === void 0 ? void 0 : _a7.onResponse;
          const callback = /* @__PURE__ */ __name((rawResponse, flatResponse2) => {
            currentRawResponse = rawResponse;
            providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse2);
          }, "callback");
          const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
          const flatResponse = yield directSendOperation(updatedArgs, spec);
          return {
            flatResponse,
            rawResponse: {
              statusCode: currentRawResponse.status,
              body: currentRawResponse.parsedBody,
              headers: currentRawResponse.headers.toJSON()
            }
          };
        }), "sendOperation");
        const lro = new LroImpl5(sendOperation, { aliasName: aliasName2, body: body4, options }, createOperationSpec7);
        const poller = new LroEngine(lro, {
          resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
          intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        yield poller.poll();
        return poller;
      });
    }
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    beginCreateAndWait(aliasName2, body4, options) {
      return __awaiter5(this, void 0, void 0, function* () {
        const poller = yield this.beginCreate(aliasName2, body4, options);
        return poller.pollUntilDone();
      });
    }
    /**
     * Get Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    get(aliasName2, options) {
      return this.client.sendOperationRequest({ aliasName: aliasName2, options }, getOperationSpec29);
    }
    /**
     * Delete Alias.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    delete(aliasName2, options) {
      return this.client.sendOperationRequest({ aliasName: aliasName2, options }, deleteOperationSpec24);
    }
    /**
     * List Alias Subscription.
     * @param options The options parameters.
     */
    list(options) {
      return this.client.sendOperationRequest({ options }, listOperationSpec43);
    }
  };
  __name(AliasImpl, "AliasImpl");
  var serializer53 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var createOperationSpec7 = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "PUT",
    responses: {
      200: {
        bodyMapper: SubscriptionAliasResponse
      },
      201: {
        bodyMapper: SubscriptionAliasResponse
      },
      202: {
        bodyMapper: SubscriptionAliasResponse
      },
      204: {
        bodyMapper: SubscriptionAliasResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    requestBody: body2,
    queryParameters: [apiVersion13],
    urlParameters: [$host6, aliasName],
    headerParameters: [accept6, contentType6],
    mediaType: "json",
    serializer: serializer53
  };
  var getOperationSpec29 = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: SubscriptionAliasResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, aliasName],
    headerParameters: [accept6],
    serializer: serializer53
  };
  var deleteOperationSpec24 = {
    path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
    httpMethod: "DELETE",
    responses: {
      200: {},
      204: {},
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, aliasName],
    headerParameters: [accept6],
    serializer: serializer53
  };
  var listOperationSpec43 = {
    path: "/providers/Microsoft.Subscription/aliases",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: SubscriptionAliasListResult
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer53
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/subscriptionPolicy.js
  init_src6();
  var SubscriptionPolicyImpl = class {
    /**
     * Initialize a new instance of the class SubscriptionPolicy class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    listPolicyForTenant(options) {
      const iter = this.listPolicyForTenantPagingAll(options);
      return {
        next() {
          return iter.next();
        },
        [Symbol.asyncIterator]() {
          return this;
        },
        byPage: (settings) => {
          if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
            throw new Error("maxPageSize is not supported by this operation.");
          }
          return this.listPolicyForTenantPagingPage(options, settings);
        }
      };
    }
    listPolicyForTenantPagingPage(options, settings) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPolicyForTenantPagingPage_1() {
        let result;
        let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
        if (!continuationToken) {
          result = yield __await6(this._listPolicyForTenant(options));
          let page = result.value || [];
          continuationToken = result.nextLink;
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
        while (continuationToken) {
          result = yield __await6(this._listPolicyForTenantNext(continuationToken, options));
          continuationToken = result.nextLink;
          let page = result.value || [];
          setContinuationToken2(page, continuationToken);
          yield yield __await6(page);
        }
      }, "listPolicyForTenantPagingPage_1"));
    }
    listPolicyForTenantPagingAll(options) {
      return __asyncGenerator6(this, arguments, /* @__PURE__ */ __name(function* listPolicyForTenantPagingAll_1() {
        var e_1, _a7;
        try {
          for (var _b2 = __asyncValues6(this.listPolicyForTenantPagingPage(options)), _c2; _c2 = yield __await6(_b2.next()), !_c2.done; ) {
            const page = _c2.value;
            yield __await6(yield* __asyncDelegator6(__asyncValues6(page)));
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a7 = _b2.return))
              yield __await6(_a7.call(_b2));
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }, "listPolicyForTenantPagingAll_1"));
    }
    /**
     * Create or Update Subscription tenant policy for user's tenant.
     * @param body Put tenant policy request properties.
     * @param options The options parameters.
     */
    addUpdatePolicyForTenant(body4, options) {
      return this.client.sendOperationRequest({ body: body4, options }, addUpdatePolicyForTenantOperationSpec);
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    getPolicyForTenant(options) {
      return this.client.sendOperationRequest({ options }, getPolicyForTenantOperationSpec);
    }
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    _listPolicyForTenant(options) {
      return this.client.sendOperationRequest({ options }, listPolicyForTenantOperationSpec);
    }
    /**
     * ListPolicyForTenantNext
     * @param nextLink The nextLink from the previous successful call to the ListPolicyForTenant method.
     * @param options The options parameters.
     */
    _listPolicyForTenantNext(nextLink7, options) {
      return this.client.sendOperationRequest({ nextLink: nextLink7, options }, listPolicyForTenantNextOperationSpec);
    }
  };
  __name(SubscriptionPolicyImpl, "SubscriptionPolicyImpl");
  var serializer54 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var addUpdatePolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies/default",
    httpMethod: "PUT",
    responses: {
      200: {
        bodyMapper: GetTenantPolicyResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    requestBody: body3,
    queryParameters: [apiVersion13],
    urlParameters: [$host6],
    headerParameters: [accept6, contentType6],
    mediaType: "json",
    serializer: serializer54
  };
  var getPolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies/default",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: GetTenantPolicyResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer54
  };
  var listPolicyForTenantOperationSpec = {
    path: "/providers/Microsoft.Subscription/policies",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: GetTenantPolicyListResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6],
    headerParameters: [accept6],
    serializer: serializer54
  };
  var listPolicyForTenantNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: GetTenantPolicyListResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, nextLink6],
    headerParameters: [accept6],
    serializer: serializer54
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/operations/billingAccount.js
  init_src6();
  var BillingAccountImpl = class {
    /**
     * Initialize a new instance of the class BillingAccount class.
     * @param client Reference to the service client
     */
    constructor(client) {
      this.client = client;
    }
    /**
     * Get Billing Account Policy.
     * @param billingAccountId Billing Account Id.
     * @param options The options parameters.
     */
    getPolicy(billingAccountId2, options) {
      return this.client.sendOperationRequest({ billingAccountId: billingAccountId2, options }, getPolicyOperationSpec);
    }
  };
  __name(BillingAccountImpl, "BillingAccountImpl");
  var serializer55 = createSerializer(
    mappers_exports6,
    /* isXml */
    false
  );
  var getPolicyOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Subscription/policies/default",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: BillingAccountPoliciesResponse
      },
      default: {
        bodyMapper: ErrorResponseBody3
      }
    },
    queryParameters: [apiVersion13],
    urlParameters: [$host6, billingAccountId],
    headerParameters: [accept6],
    serializer: serializer55
  };

  // node_modules/@azure/arm-subscriptions/dist-esm/src/subscriptionClient.js
  var SubscriptionClient2 = class extends ServiceClient {
    /**
     * Initializes a new instance of the SubscriptionClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
      var _a7, _b2, _c2;
      if (credentials === void 0) {
        throw new Error("'credentials' cannot be null");
      }
      if (!options) {
        options = {};
      }
      const defaults = {
        requestContentType: "application/json; charset=utf-8",
        credential: credentials
      };
      const packageDetails = `azsdk-js-arm-subscriptions/5.1.0`;
      const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
      const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
        userAgentPrefix
      }, endpoint: (_b2 = (_a7 = options.endpoint) !== null && _a7 !== void 0 ? _a7 : options.baseUri) !== null && _b2 !== void 0 ? _b2 : "https://management.azure.com" });
      super(optionsWithDefaults);
      let bearerTokenAuthenticationPolicyFound = false;
      if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
        const pipelinePolicies = options.pipeline.getOrderedPolicies();
        bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name === bearerTokenAuthenticationPolicyName);
      }
      if (!options || !options.pipeline || options.pipeline.getOrderedPolicies().length == 0 || !bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes: (_c2 = optionsWithDefaults.credentialScopes) !== null && _c2 !== void 0 ? _c2 : `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge
          }
        }));
      }
      this.$host = options.$host || "https://management.azure.com";
      this.subscriptions = new SubscriptionsImpl2(this);
      this.tenants = new TenantsImpl2(this);
      this.subscriptionOperations = new SubscriptionOperationsImpl(this);
      this.operations = new OperationsImpl5(this);
      this.alias = new AliasImpl(this);
      this.subscriptionPolicy = new SubscriptionPolicyImpl(this);
      this.billingAccount = new BillingAccountImpl(this);
    }
  };
  __name(SubscriptionClient2, "SubscriptionClient");

  // node_modules/@azure/ms-rest-azure-env/es/lib/azureEnvironment.js
  var Environment = (
    /** @class */
    function() {
      function Environment2(parameters17) {
        this.validateAuthority = true;
        if (!parameters17 || typeof parameters17 !== "object") {
          throw new Error("'parameters' is a required parameter and must be of type 'object'.");
        }
        var requiredParams = [
          "name",
          "portalUrl",
          "managementEndpointUrl",
          "resourceManagerEndpointUrl",
          "activeDirectoryEndpointUrl",
          "activeDirectoryResourceId"
        ];
        requiredParams.forEach(function(param) {
          if (!parameters17[param] || typeof parameters17[param].valueOf() !== "string") {
            throw new Error('Please provide "' + param + '" for the environment and it must be of type "string".');
          }
        });
        this.name = parameters17.name;
        this.portalUrl = parameters17.portalUrl;
        this.managementEndpointUrl = parameters17.managementEndpointUrl;
        this.resourceManagerEndpointUrl = parameters17.resourceManagerEndpointUrl;
        this.activeDirectoryEndpointUrl = parameters17.activeDirectoryEndpointUrl;
        this.activeDirectoryResourceId = parameters17.activeDirectoryResourceId;
        if (this.activeDirectoryGraphApiVersion) {
          this.activeDirectoryGraphApiVersion = parameters17.activeDirectoryGraphApiVersion;
        }
        if (this.activeDirectoryGraphResourceId) {
          this.activeDirectoryGraphResourceId = parameters17.activeDirectoryGraphResourceId;
        }
        if (this.azureDataLakeAnalyticsCatalogAndJobEndpointSuffix) {
          this.azureDataLakeAnalyticsCatalogAndJobEndpointSuffix = parameters17.azureDataLakeAnalyticsCatalogAndJobEndpointSuffix;
        }
        if (this.azureDataLakeStoreFileSystemEndpointSuffix) {
          this.azureDataLakeStoreFileSystemEndpointSuffix = parameters17.azureDataLakeStoreFileSystemEndpointSuffix;
        }
        if (this.batchResourceId) {
          this.batchResourceId = parameters17.batchResourceId;
        }
        if (this.galleryEndpointUrl) {
          this.galleryEndpointUrl = parameters17.galleryEndpointUrl;
        }
        if (this.keyVaultDnsSuffix) {
          this.keyVaultDnsSuffix = parameters17.keyVaultDnsSuffix;
        }
        if (this.publishingProfileUrl) {
          this.publishingProfileUrl = parameters17.publishingProfileUrl;
        }
        if (this.sqlManagementEndpointUrl) {
          this.sqlManagementEndpointUrl = parameters17.sqlManagementEndpointUrl;
        }
        if (this.sqlServerHostnameSuffix) {
          this.sqlServerHostnameSuffix = parameters17.sqlServerHostnameSuffix;
        }
        if (this.storageEndpointSuffix) {
          this.storageEndpointSuffix = parameters17.storageEndpointSuffix;
        }
      }
      __name(Environment2, "Environment");
      Environment2.add = function(parameters17) {
        var envContainer = {};
        var envObj = new Environment2(parameters17);
        envContainer[parameters17.name] = envObj;
        Object.assign(Environment2, envContainer);
        return;
      };
      Environment2.get = function(name) {
        if (!name) {
          throw new TypeError("name cannot be null or undefined and must be of type string.");
        }
        return Environment2[name];
      };
      Environment2.AzureCloud = {
        name: "AzureCloud",
        portalUrl: "https://portal.azure.com",
        publishingProfileUrl: "https://go.microsoft.com/fwlink/?LinkId=254432",
        managementEndpointUrl: "https://management.core.windows.net",
        resourceManagerEndpointUrl: "https://management.azure.com/",
        sqlManagementEndpointUrl: "https://management.core.windows.net:8443/",
        sqlServerHostnameSuffix: ".database.windows.net",
        galleryEndpointUrl: "https://gallery.azure.com/",
        activeDirectoryEndpointUrl: "https://login.microsoftonline.com/",
        activeDirectoryResourceId: "https://management.core.windows.net/",
        activeDirectoryGraphResourceId: "https://graph.windows.net/",
        batchResourceId: "https://batch.core.windows.net/",
        activeDirectoryGraphApiVersion: "2013-04-05",
        storageEndpointSuffix: "core.windows.net",
        keyVaultDnsSuffix: ".vault.azure.net",
        azureDataLakeStoreFileSystemEndpointSuffix: "azuredatalakestore.net",
        azureDataLakeAnalyticsCatalogAndJobEndpointSuffix: "azuredatalakeanalytics.net",
        validateAuthority: true
      };
      Environment2.ChinaCloud = {
        name: "AzureChinaCloud",
        portalUrl: "https://portal.azure.cn",
        publishingProfileUrl: "https://go.microsoft.com/fwlink/?LinkID=301774",
        managementEndpointUrl: "https://management.core.chinacloudapi.cn",
        resourceManagerEndpointUrl: "https://management.chinacloudapi.cn",
        sqlManagementEndpointUrl: "https://management.core.chinacloudapi.cn:8443/",
        sqlServerHostnameSuffix: ".database.chinacloudapi.cn",
        galleryEndpointUrl: "https://gallery.chinacloudapi.cn/",
        activeDirectoryEndpointUrl: "https://login.chinacloudapi.cn/",
        activeDirectoryResourceId: "https://management.core.chinacloudapi.cn/",
        activeDirectoryGraphResourceId: "https://graph.chinacloudapi.cn/",
        activeDirectoryGraphApiVersion: "2013-04-05",
        batchResourceId: "https://batch.chinacloudapi.cn/",
        storageEndpointSuffix: "core.chinacloudapi.cn",
        keyVaultDnsSuffix: ".vault.azure.cn",
        // TODO: add dns suffixes for the china cloud for datalake store and datalake analytics once they are defined.
        azureDataLakeStoreFileSystemEndpointSuffix: "N/A",
        azureDataLakeAnalyticsCatalogAndJobEndpointSuffix: "N/A",
        validateAuthority: true
      };
      Environment2.USGovernment = {
        name: "AzureUSGovernment",
        portalUrl: "https://portal.azure.us",
        publishingProfileUrl: "https://manage.windowsazure.us/publishsettings/index",
        managementEndpointUrl: "https://management.core.usgovcloudapi.net",
        resourceManagerEndpointUrl: "https://management.usgovcloudapi.net",
        sqlManagementEndpointUrl: "https://management.core.usgovcloudapi.net:8443/",
        sqlServerHostnameSuffix: ".database.usgovcloudapi.net",
        galleryEndpointUrl: "https://gallery.usgovcloudapi.net/",
        activeDirectoryEndpointUrl: "https://login.microsoftonline.us/",
        activeDirectoryResourceId: "https://management.core.usgovcloudapi.net/",
        activeDirectoryGraphResourceId: "https://graph.windows.net/",
        batchResourceId: "https://batch.core.usgovcloudapi.net/",
        activeDirectoryGraphApiVersion: "2013-04-05",
        storageEndpointSuffix: "core.usgovcloudapi.net",
        keyVaultDnsSuffix: ".vault.usgovcloudapi.net",
        azureDataLakeStoreFileSystemEndpointSuffix: "N/A",
        azureDataLakeAnalyticsCatalogAndJobEndpointSuffix: "N/A",
        validateAuthority: true
      };
      Environment2.GermanCloud = {
        name: "AzureGermanCloud",
        portalUrl: "https://portal.microsoftazure.de/",
        publishingProfileUrl: "https://manage.microsoftazure.de/publishsettings/index",
        managementEndpointUrl: "https://management.core.cloudapi.de",
        resourceManagerEndpointUrl: "https://management.microsoftazure.de",
        sqlManagementEndpointUrl: "https://management.core.cloudapi.de:8443/",
        sqlServerHostnameSuffix: ".database.cloudapi.de",
        galleryEndpointUrl: "https://gallery.cloudapi.de/",
        activeDirectoryEndpointUrl: "https://login.microsoftonline.de/",
        activeDirectoryResourceId: "https://management.core.cloudapi.de/",
        activeDirectoryGraphResourceId: "https://graph.cloudapi.de/",
        batchResourceId: "https://batch.microsoftazure.de/",
        activeDirectoryGraphApiVersion: "2013-04-05",
        storageEndpointSuffix: "core.cloudapi.de",
        keyVaultDnsSuffix: ".vault.microsoftazure.de",
        azureDataLakeStoreFileSystemEndpointSuffix: "N/A",
        azureDataLakeAnalyticsCatalogAndJobEndpointSuffix: "N/A",
        validateAuthority: true
      };
      return Environment2;
    }()
  );

  // src/services/WebAzureSubscriptionProvider.ts
  var import_vscode_azext_azureutils10 = __toESM(require_src4());
  var import_vscode_azext_utils33 = __toESM(require_src3());
  var vscode11 = __toESM(__require("vscode"));
  var webSubscriptionProvider;
  function createWebSubscriptionProviderFactory(context) {
    return () => __async(this, null, function* () {
      webSubscriptionProvider != null ? webSubscriptionProvider : webSubscriptionProvider = new VSCodeAzureSubscriptionProvider(context.globalState);
      return webSubscriptionProvider;
    });
  }
  __name(createWebSubscriptionProviderFactory, "createWebSubscriptionProviderFactory");
  var VSCodeAzureSubscriptionProvider = class extends vscode11.Disposable {
    constructor(storage) {
      super(() => this.onSubscriptionsChangedEmitter.dispose());
      this.storage = storage;
      this.allSubscriptions = [];
      this.onStatusChangedEmitter = new vscode11.EventEmitter();
      this.onFiltersChangedEmitter = new vscode11.EventEmitter();
      this.onSessionsChangedEmitter = new vscode11.EventEmitter();
      this.onSubscriptionsChangedEmitter = new vscode11.EventEmitter();
      this.subscriptionResultsTask = this.getSubscriptions;
      this.onStatusChanged = this.onStatusChangedEmitter.event;
      this.onFiltersChanged = this.onFiltersChangedEmitter.event;
      this.onSessionsChanged = this.onSessionsChangedEmitter.event;
      this.onSubscriptionsChanged = this.onSubscriptionsChangedEmitter.event;
    }
    getSubscriptions() {
      return __async(this, null, function* () {
        if (!this.isLoggedIn()) {
          return {
            status: "LoggedOut",
            allSubscriptions: [],
            filters: []
          };
        }
        const session = yield this.getSession();
        if (!session) {
          return {
            status: "LoggedOut",
            allSubscriptions: [],
            filters: []
          };
        }
        const allSubscriptions = [];
        const defaultTenantSubscriptions = yield this.getSubscriptionsFromTenant();
        allSubscriptions.push(...defaultTenantSubscriptions.subscriptions);
        if (allSubscriptions.length === 0) {
          const tenants = yield import_vscode_azext_azureutils10.uiUtils.listAllIterator(defaultTenantSubscriptions.client.tenants.list());
          for (const tenant of tenants) {
            const tenantSubscriptions = yield this.getSubscriptionsFromTenant(tenant.tenantId);
            allSubscriptions.push(...tenantSubscriptions.subscriptions);
          }
        }
        this.allSubscriptions = allSubscriptions;
        return {
          status: session ? "LoggedIn" : "LoggedOut",
          allSubscriptions,
          filters: this.filters
        };
      });
    }
    get filters() {
      const selectedSubscriptionIds = settingUtils.getGlobalSetting("selectedSubscriptions");
      return this.allSubscriptions.filter((s) => selectedSubscriptionIds === void 0 || selectedSubscriptionIds.includes(s.subscriptionId)).sort((a, b) => a.name.localeCompare(b.name));
    }
    logIn() {
      return __async(this, null, function* () {
        const session = yield this.getSession({ createNew: true });
        if (session) {
          yield this.updateStatus(true);
        }
      });
    }
    logOut() {
      return __async(this, null, function* () {
        yield this.updateStatus(false);
      });
    }
    get status() {
      if (!this.isLoggedIn()) {
        return "LoggedOut";
      } else {
        return "LoggedIn";
      }
    }
    selectSubscriptions() {
      return __async(this, null, function* () {
        this.subscriptionResultsTask = this.getSubscriptions;
        if (this.status === "LoggedIn") {
          const subscriptionQuickPickItems = /* @__PURE__ */ __name(() => __async(this, null, function* () {
            yield this.subscriptionResultsTask();
            return this.allSubscriptions.map((subscription) => ({
              label: subscription.name,
              picked: this.filters.includes(subscription),
              subscription
            })).sort((a, b) => a.label.localeCompare(b.label));
          }), "subscriptionQuickPickItems");
          const picks = yield vscode11.window.showQuickPick(
            subscriptionQuickPickItems(),
            {
              canPickMany: true,
              placeHolder: "Select Subscriptions"
            }
          );
          if (picks) {
            yield this.updateSelectedSubscriptions(
              picks.length < this.allSubscriptions.length ? picks.map((pick) => pick.subscription.subscriptionId) : void 0
            );
          }
        }
        this.onSubscriptionsChangedEmitter.fire();
        this.onFiltersChangedEmitter.fire();
      });
    }
    waitForFilters() {
      return __async(this, null, function* () {
        return (yield (0, import_vscode_azext_utils33.callWithTelemetryAndErrorHandling)("waitForFilters", (_context) => __async(this, null, function* () {
          if (!(yield this.waitForSubscriptions())) {
            return false;
          }
          yield this.subscriptionResultsTask();
          return true;
        }))) || false;
      });
    }
    waitForLogin() {
      return __async(this, null, function* () {
        return (yield (0, import_vscode_azext_utils33.callWithTelemetryAndErrorHandling)("waitForLogin", (_context) => {
          switch (this.status) {
            case "LoggedIn":
              return true;
            case "LoggedOut":
              return false;
            case "Initializing":
            case "LoggingIn":
              return new Promise((resolve) => {
                const subscription = this.onStatusChanged(() => {
                  subscription.dispose();
                  resolve(this.waitForLogin());
                });
              });
            default:
              const status = this.status;
              throw new Error(`Unexpected status '${status}'`);
          }
        })) || false;
      });
    }
    waitForSubscriptions(isLegacyApi) {
      return __async(this, null, function* () {
        return (yield (0, import_vscode_azext_utils33.callWithTelemetryAndErrorHandling)("waitForSubscriptions", (context) => __async(this, null, function* () {
          context.telemetry.properties.isLegacyApi = String(!!isLegacyApi);
          if (!(yield this.waitForLogin())) {
            return false;
          }
          yield this.subscriptionResultsTask();
          return true;
        }))) || false;
      });
    }
    isLoggedIn() {
      return this.storage.get("isLoggedIn", false);
    }
    getSession(options) {
      const scopeSet = /* @__PURE__ */ new Set(["https://management.azure.com/.default"]);
      if (options) {
        if (typeof options.scopes === "string") {
          scopeSet.add(options.scopes);
        }
        if (Array.isArray(options.scopes)) {
          for (const scope3 of options.scopes) {
            scopeSet.add(scope3);
          }
        }
        if (options.tenantId) {
          scopeSet.add(`VSCODE_TENANT:${options.tenantId}`);
        }
      }
      return vscode11.authentication.getSession(
        "microsoft",
        Array.from(scopeSet),
        {
          clearSessionPreference: options == null ? void 0 : options.createNew,
          createIfNone: options == null ? void 0 : options.createNew
        }
      );
    }
    updateStatus(isLoggedIn) {
      return __async(this, null, function* () {
        yield this.storage.update("isLoggedIn", isLoggedIn);
        if (!isLoggedIn) {
          yield this.updateSelectedSubscriptions(void 0);
        }
        this.onStatusChangedEmitter.fire(this.status);
        this.onSubscriptionsChangedEmitter.fire();
      });
    }
    updateSelectedSubscriptions(subscriptionsIds) {
      this.onFiltersChangedEmitter.fire();
      return settingUtils.updateGlobalSetting("selectedSubscriptions", subscriptionsIds);
    }
    getSubscriptionsFromTenant(tenantId) {
      return __async(this, null, function* () {
        let session;
        const client = new SubscriptionClient2(
          {
            getToken: (scopes) => __async(this, null, function* () {
              session = yield this.getSession({ scopes, tenantId });
              if (session) {
                return {
                  token: session.accessToken,
                  expiresOnTimestamp: 0
                };
              }
              return null;
            })
          }
        );
        const subscriptions = yield import_vscode_azext_azureutils10.uiUtils.listAllIterator(client.subscriptions.list());
        return {
          client,
          subscriptions: subscriptions.map((s) => {
            var _a7, _b2;
            return {
              displayName: (_a7 = s.displayName) != null ? _a7 : "name",
              authentication: {
                getSession: () => session
              },
              environment: Environment.AzureCloud,
              isCustomCloud: false,
              name: s.displayName || "TODO: ever undefined?",
              tenantId: "",
              subscriptionId: (_b2 = s.subscriptionId) != null ? _b2 : "id"
            };
          })
        };
      });
    }
  };
  __name(VSCodeAzureSubscriptionProvider, "VSCodeAzureSubscriptionProvider");

  // src/tree/ResourceBranchDataProviderManagerBase.ts
  var vscode12 = __toESM(__require("vscode"));
  var ResourceBranchDataProviderManagerBase = class extends vscode12.Disposable {
    constructor(defaultProvider, extensionActivator) {
      super(
        () => {
          var _a7;
          this.onDidChangeTreeDataEmitter.dispose();
          this.onDidChangeBranchDataProvidersEmitter.dispose();
          for (const providerContext of this.branchDataProviderMap.values()) {
            (_a7 = providerContext.listener) == null ? void 0 : _a7.dispose();
          }
        }
      );
      this.defaultProvider = defaultProvider;
      this.extensionActivator = extensionActivator;
      this.branchDataProviderMap = /* @__PURE__ */ new Map();
      this.onDidChangeTreeDataEmitter = new vscode12.EventEmitter();
      this.onDidChangeBranchDataProvidersEmitter = new vscode12.EventEmitter();
      this.onDidChangeTreeData = this.onDidChangeTreeDataEmitter.event;
      this.onChangeBranchDataProviders = this.onDidChangeBranchDataProvidersEmitter.event;
    }
    addProvider(type, provider) {
      var _a7;
      this.branchDataProviderMap.set(
        type,
        {
          provider: wrapBranchDataProvider(provider, type),
          listener: (_a7 = provider.onDidChangeTreeData) == null ? void 0 : _a7.call(provider, (e) => this.onDidChangeTreeDataEmitter.fire(e))
        }
      );
      this.onDidChangeBranchDataProvidersEmitter.fire(type);
    }
    getProvider(type) {
      if (type) {
        const providerContext = this.branchDataProviderMap.get(type);
        if (providerContext) {
          return providerContext.provider;
        }
        this.extensionActivator(type);
      }
      return this.defaultProvider;
    }
    removeProvider(type) {
      var _a7;
      const providerContext = this.branchDataProviderMap.get(type);
      if (providerContext) {
        (_a7 = providerContext.listener) == null ? void 0 : _a7.dispose();
        this.branchDataProviderMap.delete(type);
        this.onDidChangeBranchDataProvidersEmitter.fire(type);
      }
    }
  };
  __name(ResourceBranchDataProviderManagerBase, "ResourceBranchDataProviderManagerBase");
  function wrapBranchDataProvider(branchDataProvider, type) {
    var _a7, _b2, _c2;
    return __spreadProps(__spreadValues({}, wrapFunctionsInTelemetry(
      {
        getChildren: branchDataProvider.getChildren.bind(branchDataProvider),
        getTreeItem: branchDataProvider.getTreeItem.bind(branchDataProvider),
        getResourceItem: (element) => __async(this, null, function* () {
          const result = yield branchDataProvider.getResourceItem(element);
          if (!result) {
            throw new NullishGetResourceItemResultError(result);
          }
          return result;
        }),
        getParent: (_a7 = branchDataProvider.getParent) == null ? void 0 : _a7.bind(branchDataProvider)
      },
      {
        callbackIdPrefix: "branchDataProvider.",
        beforeHook: (context) => {
          context.telemetry.properties.branchDataProviderType = String(type);
        }
      }
    )), {
      onDidChangeTreeData: (_b2 = branchDataProvider.onDidChangeTreeData) == null ? void 0 : _b2.bind(branchDataProvider),
      resolveTreeItem: (_c2 = branchDataProvider.resolveTreeItem) == null ? void 0 : _c2.bind(branchDataProvider)
    });
  }
  __name(wrapBranchDataProvider, "wrapBranchDataProvider");
  var NullishGetResourceItemResultError = class extends Error {
    constructor(result) {
      super(`Internal error: getResourceItem returned ${String(result)}. Expected a non-nullish value.`);
      this.name = "NullishGetResourceItemResultError";
    }
  };
  __name(NullishGetResourceItemResultError, "NullishGetResourceItemResultError");

  // src/tree/azure/AzureResourceBranchDataProviderManager.ts
  var AzureResourceBranchDataProviderManager = class extends ResourceBranchDataProviderManagerBase {
    constructor(defaultProvider, extensionActivator) {
      super(
        defaultProvider,
        extensionActivator
      );
    }
  };
  __name(AzureResourceBranchDataProviderManager, "AzureResourceBranchDataProviderManager");

  // src/tree/azure/DefaultAzureResourceItem.ts
  var import_vscode_azext_utils34 = __toESM(require_src3());
  var vscode14 = __toESM(__require("vscode"));

  // src/tree/GenericItem.ts
  var vscode13 = __toESM(__require("vscode"));
  var GenericItem = class {
    constructor(label, options) {
      this.label = label;
      this.options = options;
      this.id = this.label;
    }
    getChildren() {
      var _a7;
      return (_a7 = this.options) == null ? void 0 : _a7.children;
    }
    getTreeItem() {
      var _a7, _b2, _c2, _d;
      const treeItem = new vscode13.TreeItem(this.label, ((_a7 = this.options) == null ? void 0 : _a7.children) ? vscode13.TreeItemCollapsibleState.Collapsed : vscode13.TreeItemCollapsibleState.None);
      if ((_b2 = this.options) == null ? void 0 : _b2.commandId) {
        treeItem.command = {
          arguments: this.options.commandArgs,
          command: this.options.commandId,
          title: ""
        };
      }
      treeItem.contextValue = (_c2 = this.options) == null ? void 0 : _c2.contextValue;
      treeItem.iconPath = (_d = this.options) == null ? void 0 : _d.iconPath;
      return treeItem;
    }
  };
  __name(GenericItem, "GenericItem");

  // src/tree/azure/DefaultAzureResourceItem.ts
  var DefaultAzureResourceItem = class {
    constructor(resource) {
      this.resource = resource;
      this.id = this.resource.id;
      this.resourceTypeExtension = getAzureExtensions().find((ext2) => ext2.matchesApplicationResourceType(resource));
      this.portalUrl = createPortalUrl(resource.subscription, resource.id);
    }
    getChildren() {
      if (this.resourceTypeExtension && !this.resourceTypeExtension.isInstalled()) {
        return Promise.resolve([
          new GenericItem(
            localize("installExtensionToEnableFeatures", "Install extension to enable additional features..."),
            {
              commandArgs: [this.resourceTypeExtension.id],
              commandId: "azureResourceGroups.installExtension",
              contextValue: "installExtension",
              iconPath: new vscode14.ThemeIcon("extensions")
            }
          )
        ]);
      } else {
        return Promise.resolve(void 0);
      }
    }
    getTreeItem() {
      var _a7, _b2;
      const isResourceTypeExtensionInstalled = (_a7 = this.resourceTypeExtension) == null ? void 0 : _a7.isInstalled();
      const treeItem = new vscode14.TreeItem((_b2 = this.resource.name) != null ? _b2 : "Unnamed Resource", isResourceTypeExtensionInstalled === false ? vscode14.TreeItemCollapsibleState.Collapsed : vscode14.TreeItemCollapsibleState.None);
      treeItem.iconPath = getIconPath(this.resource.resourceType);
      treeItem.contextValue = (0, import_vscode_azext_utils34.createContextValue)(["azureResource", "hasPortalUrl"]);
      return treeItem;
    }
  };
  __name(DefaultAzureResourceItem, "DefaultAzureResourceItem");

  // src/tree/azure/DefaultAzureResourceBranchDataProvider.ts
  var DefaultAzureResourceBranchDataProvider = class {
    getChildren(element) {
      return element.getChildren();
    }
    getResourceItem(element) {
      return new DefaultAzureResourceItem(element);
    }
    // TODO: Implement change eventing.
    // onDidChangeTreeData?: vscode.Event<void | ResourceGroupsItem | null | undefined> | undefined;
    getTreeItem(element) {
      return element.getTreeItem();
    }
  };
  __name(DefaultAzureResourceBranchDataProvider, "DefaultAzureResourceBranchDataProvider");

  // src/tree/TreeItemState.ts
  var vscode15 = __toESM(__require("vscode"));
  var TreeItemStateStore = class {
    constructor() {
      this.store = {};
      this.disposables = [];
      this.onDidUpdateStateEmitter = new vscode15.EventEmitter();
      this.onDidUpdateStateEvent = this.onDidUpdateStateEmitter.event;
    }
    /**
     * Notify a resource that its children have changed.
     */
    notifyChildrenChanged(id) {
      this.onDidUpdateStateEmitter.fire(id);
    }
    wrapItemInStateHandling(item, refresh) {
      const getTreeItem = item.getTreeItem.bind(item);
      item.getTreeItem = () => __async(this, null, function* () {
        const treeItem = yield getTreeItem();
        if (treeItem.id) {
          return this.applyToTreeItem(__spreadProps(__spreadValues({}, treeItem), { id: treeItem.id }));
        }
        return treeItem;
      });
      this.onDidRequestRefresh(item.id, () => refresh(item));
      return item;
    }
    dispose() {
      this.disposables.forEach((disposable) => {
        disposable.dispose();
      });
    }
    runWithTemporaryDescription(id, description, callback) {
      return __async(this, null, function* () {
        let result;
        this.update(id, __spreadProps(__spreadValues({}, this.getState(id)), { temporaryDescription: description, spinner: true }));
        try {
          result = yield callback();
        } finally {
          this.update(id, __spreadProps(__spreadValues({}, this.getState(id)), { temporaryDescription: void 0, spinner: false }));
        }
        return result;
      });
    }
    applyStateToTreeItem(state, treeItem) {
      treeItem.description = state.temporaryDescription;
      if (state.spinner) {
        treeItem.iconPath = new vscode15.ThemeIcon("loading~spin");
      }
      return treeItem;
    }
    onDidRequestRefresh(id, callback) {
      this.disposables.push(this.onDidUpdateStateEvent((eventId) => {
        if (eventId === id) {
          callback();
        }
      }));
    }
    applyToTreeItem(treeItem) {
      const state = this.getState(treeItem.id);
      return this.applyStateToTreeItem(state, __spreadValues({}, treeItem));
    }
    getState(id) {
      var _a7;
      return (_a7 = this.store[id]) != null ? _a7 : {};
    }
    update(id, state) {
      this.store[id] = __spreadValues(__spreadValues({}, this.getState(id)), state);
      this.onDidUpdateStateEmitter.fire(id);
    }
  };
  __name(TreeItemStateStore, "TreeItemStateStore");

  // src/tree/createTreeView.ts
  var import_vscode_azext_utils35 = __toESM(require_src3());
  var import_vscode21 = __require("vscode");
  function createTreeView(viewId, options) {
    const treeView = import_vscode21.window.createTreeView(viewId, options);
    treeView.description = options.description;
    modifyReveal(treeView, options.findItemById, options.itemCache);
    return treeView;
  }
  __name(createTreeView, "createTreeView");
  function modifyReveal(treeView, findItemById, itemCache) {
    treeView._reveal = treeView.reveal.bind(treeView);
    treeView.reveal = (element, options) => __async(this, null, function* () {
      var _a7;
      const item = (0, import_vscode_azext_utils35.isAzExtTreeItem)(element) ? (_a7 = itemCache.getItemForBranchItem(element)) != null ? _a7 : yield findItemById(element.fullId) : element;
      yield treeView._reveal(item, options);
    });
  }
  __name(modifyReveal, "modifyReveal");

  // src/tree/wrapTreeForVSCode.ts
  function wrapTreeForVSCode(treeDataProvider, branchItemCache) {
    return new OnRefreshTreeDataProvider(treeDataProvider, () => branchItemCache.clear());
  }
  __name(wrapTreeForVSCode, "wrapTreeForVSCode");
  var OnRefreshTreeDataProvider = class {
    constructor(treeDataProvider, onRefresh) {
      this.treeDataProvider = treeDataProvider;
      this.onRefresh = onRefresh;
      this.onDidChangeTreeData = this.treeDataProvider.onDidChangeTreeData;
    }
    getTreeItem(element) {
      return this.treeDataProvider.getTreeItem(element);
    }
    getParent(element) {
      var _a7, _b2;
      return (_b2 = (_a7 = this.treeDataProvider).getParent) == null ? void 0 : _b2.call(_a7, element);
    }
    getChildren(element) {
      if (!element) {
        this.onRefresh();
      }
      return this.treeDataProvider.getChildren(element);
    }
  };
  __name(OnRefreshTreeDataProvider, "OnRefreshTreeDataProvider");

  // src/tree/azure/AzureResourceGroupingManager.ts
  var vscode16 = __toESM(__require("vscode"));
  var unknownLabel = localize("unknown", "Unknown");
  var AzureResourceGroupingManager = class extends vscode16.Disposable {
    constructor(groupingItemFactory) {
      super(
        () => {
          this.configSubscription.dispose();
        }
      );
      this.groupingItemFactory = groupingItemFactory;
      this.onDidChangeGroupingEmitter = new vscode16.EventEmitter();
      this.configSubscription = vscode16.workspace.onDidChangeConfiguration(
        (e) => {
          if (e.affectsConfiguration(`${ext.prefix}.groupBy`)) {
            this.onDidChangeGroupingEmitter.fire();
          }
        }
      );
    }
    get onDidChangeGrouping() {
      return this.onDidChangeGroupingEmitter.event;
    }
    groupResources(parent, context, resources, groupBySetting) {
      if (groupBySetting == null ? void 0 : groupBySetting.startsWith("armTag")) {
        const tag = groupBySetting.substring("armTag".length + 1);
        return this.groupByArmTag(parent, context, resources, tag);
      }
      switch (groupBySetting) {
        case "location" /* Location */:
          return this.groupByLocation(parent, context, resources);
        case "resourceType" /* ResourceType */:
          return this.groupByResourceType(parent, context, resources);
        case "resourceGroup" /* ResourceGroup */:
        default:
          return this.groupByResourceGroup(parent, context, resources);
      }
    }
    groupBy(parent, context, resources, keySelector, labelSelector, iconSelector, initialGrouping, contextValues, resourceTypeSelector, resourceGroupSelector) {
      initialGrouping = initialGrouping != null ? initialGrouping : {};
      const map = resources.reduce(
        (acc, resource) => {
          const key = keySelector(resource);
          let children = acc[key];
          if (!children) {
            acc[key] = children = [];
          }
          children.push(resource);
          return acc;
        },
        initialGrouping
      );
      return Object.keys(map).map((key) => {
        return this.groupingItemFactory(
          context,
          [...contextValues != null ? contextValues : [], key],
          iconSelector(key),
          labelSelector(key),
          map[key],
          resourceTypeSelector == null ? void 0 : resourceTypeSelector(key),
          parent,
          resourceGroupSelector == null ? void 0 : resourceGroupSelector(key)
        );
      });
    }
    groupByArmTag(parent, context, resources, tag) {
      const ungroupedKey = "ungrouped";
      return this.groupBy(
        parent,
        context,
        resources,
        (resource) => {
          var _a7, _b2;
          return (_b2 = (_a7 = resource.tags) == null ? void 0 : _a7[tag]) != null ? _b2 : ungroupedKey;
        },
        (key) => key !== ungroupedKey ? key : localize("ungrouped", "ungrouped"),
        (key) => new vscode16.ThemeIcon(key !== ungroupedKey ? "tag" : "json")
      );
    }
    groupByLocation(parent, context, resources) {
      return this.groupBy(
        parent,
        context,
        resources,
        (resource) => {
          var _a7;
          return (_a7 = resource.location) != null ? _a7 : unknownLabel;
        },
        // TODO: Is location ever undefined?
        (key) => key,
        () => new vscode16.ThemeIcon("globe")
      );
    }
    groupByResourceGroup(parent, context, resources) {
      const resourceGroups = [];
      const nonResourceGroups = [];
      resources.forEach((resource) => resource.azureResourceType.type === "microsoft.resources/resourcegroups" ? resourceGroups.push(resource) : nonResourceGroups.push(resource));
      const keySelector = /* @__PURE__ */ __name((resource) => {
        var _a7, _b2;
        return (_b2 = (_a7 = resource.resourceGroup) == null ? void 0 : _a7.toLowerCase()) != null ? _b2 : unknownLabel;
      }, "keySelector");
      const initialGrouping = resourceGroups.reduce(
        (previous, next) => {
          var _a7;
          previous[(_a7 = next.name.toLowerCase()) != null ? _a7 : unknownLabel] = [];
          return previous;
        },
        {}
      );
      const groupedResources = this.groupBy(
        parent,
        context,
        nonResourceGroups,
        keySelector,
        (key) => key,
        () => treeUtils.getIconPath("resourceGroup"),
        initialGrouping,
        ["azureResourceGroup"],
        void 0,
        (key) => resourceGroups.find((resource) => resource.name.toLowerCase() === key.toLowerCase())
      );
      return groupedResources;
    }
    groupByResourceType(parent, context, resources) {
      const initialGrouping = {};
      azureExtensions.forEach((extension) => {
        extension.resourceTypes.forEach((resourceType3) => {
          initialGrouping[resourceType3] = [];
        });
      });
      resources = resources.filter((resource) => resource.azureResourceType.type !== "microsoft.resources/resourcegroups");
      return this.groupBy(
        parent,
        context,
        resources,
        (resource) => {
          var _a7;
          return (_a7 = resource.resourceType) != null ? _a7 : unknownLabel;
        },
        // TODO: Is resource type ever undefined?
        (key) => {
          var _a7;
          return (_a7 = getName(key)) != null ? _a7 : key;
        },
        (key) => getIconPath(key),
        // TODO: What's the default icon for a resource type?
        initialGrouping,
        ["azureResourceTypeGroup"],
        (key) => key
      );
    }
  };
  __name(AzureResourceGroupingManager, "AzureResourceGroupingManager");

  // src/tree/azure/AzureResourceItem.ts
  var import_vscode22 = __require("vscode");
  var AzureResourceItem = class extends BranchDataItemWrapper {
    constructor(resource, branchItem, branchDataProvider, itemCache, parent, options) {
      super(branchItem, branchDataProvider, itemCache, options);
      this.resource = resource;
      this.parent = parent;
      this.id = this.resource.id;
      this.tagsModel = new ResourceTags(this.resource);
      ext.tagFS.fireSoon({ type: import_vscode22.FileChangeType.Changed, item: this.tagsModel });
      this.portalUrl = createPortalUrl(resource.subscription, resource.id);
    }
    getParent() {
      return __async(this, null, function* () {
        return this.parent;
      });
    }
    getTreeItem() {
      return __async(this, null, function* () {
        const treeItem = yield __superGet(AzureResourceItem.prototype, this, "getTreeItem").call(this);
        treeItem.id = this.id;
        return treeItem;
      });
    }
    getExtraContextValues() {
      const values = super.getExtraContextValues();
      if (this.resource.resourceType) {
        values.push(this.resource.resourceType);
      }
      return values;
    }
  };
  __name(AzureResourceItem, "AzureResourceItem");
  function createResourceItemFactory(itemCache) {
    return (resource, branchItem, branchDataProvider, parent, options) => new AzureResourceItem(resource, branchItem, branchDataProvider, itemCache, parent, options);
  }
  __name(createResourceItemFactory, "createResourceItemFactory");

  // src/tree/azure/AzureResourceTreeDataProvider.ts
  var import_vscode_azext_utils38 = __toESM(require_src3());
  var vscode19 = __toESM(__require("vscode"));

  // src/tree/ResourceTreeDataProviderBase.ts
  var import_vscode_azext_utils36 = __toESM(require_src3());
  var vscode17 = __toESM(__require("vscode"));
  var ResourceTreeDataProviderBase = class extends vscode17.Disposable {
    constructor(itemCache, onDidChangeBranchTreeData, onDidChangeResource, onRefresh, state, callOnDispose) {
      super(
        () => {
          callOnDispose == null ? void 0 : callOnDispose();
          this.branchTreeDataChangeSubscription.dispose();
          this.refreshSubscription.dispose();
          this.resourceProviderManagerListener.dispose();
        }
      );
      this.itemCache = itemCache;
      this.state = state;
      this.onDidChangeTreeDataEmitter = new vscode17.EventEmitter();
      this.onDidChangeTreeData = this.onDidChangeTreeDataEmitter.event;
      this.branchTreeDataChangeSubscription = onDidChangeBranchTreeData((e) => this.notifyTreeDataChanged(e));
      this.refreshSubscription = onRefresh((e) => this.onDidChangeTreeDataEmitter.fire(e));
      this.resourceProviderManagerListener = onDidChangeResource(() => this.onDidChangeTreeDataEmitter.fire());
    }
    notifyTreeDataChanged(data) {
      const rgItems = [];
      if (!!data) {
        const branchItems = Array.isArray(data) ? data : [data];
        for (const branchItem of branchItems) {
          const rgItem = this.itemCache.getItemForBranchItem(branchItem);
          if (rgItem) {
            rgItems.push(rgItem);
          }
        }
        this.onDidChangeTreeDataEmitter.fire(rgItems);
      } else {
        this.onDidChangeTreeDataEmitter.fire();
      }
    }
    getTreeItem(element) {
      return __async(this, null, function* () {
        try {
          return yield (0, import_vscode_azext_utils36.callWithTelemetryAndErrorHandling)("getTreeItem", (context) => __async(this, null, function* () {
            context.errorHandling.rethrow = true;
            return yield element.getTreeItem();
          }));
        } catch (e) {
          const invalidItem = new InvalidItem((0, import_vscode_azext_utils36.parseError)(e));
          return invalidItem.getTreeItem();
        }
      });
    }
    getChildren(element) {
      return __async(this, null, function* () {
        const children = yield this.onGetChildren(element);
        return children == null ? void 0 : children.map((child) => {
          if (this.state) {
            if (child instanceof BranchDataItemWrapper) {
              return child;
            }
            return this.state.wrapItemInStateHandling(child, (item) => this.onDidChangeTreeDataEmitter.fire(item));
          }
          return child;
        });
      });
    }
    getParent(element) {
      var _a7;
      return (_a7 = element.getParent) == null ? void 0 : _a7.call(element);
    }
    findItemById(id) {
      return __async(this, null, function* () {
        let element = void 0;
        outerLoop:
          while (true) {
            const children = yield this.getChildren(element);
            if (!children) {
              return;
            }
            for (const child of children) {
              if (child.id.toLowerCase() === id.toLowerCase()) {
                return child;
              } else if (this.isAncestorOf(child, id)) {
                element = child;
                continue outerLoop;
              }
            }
            return void 0;
          }
      });
    }
    isAncestorOf(element, id) {
      return id.toLowerCase().startsWith(element.id.toLowerCase() + "/");
    }
  };
  __name(ResourceTreeDataProviderBase, "ResourceTreeDataProviderBase");

  // src/tree/azure/SubscriptionItem.ts
  var import_vscode_azext_utils37 = __toESM(require_src3());
  var vscode18 = __toESM(__require("vscode"));
  var supportedResourceTypes = azureExtensions.map((e) => e.resourceTypes).reduce((a, b) => a.concat(...b), []);
  var SubscriptionItem = class {
    constructor(context, resourceGroupingManager, resourceProviderManager, subscription) {
      this.context = context;
      this.resourceGroupingManager = resourceGroupingManager;
      this.resourceProviderManager = resourceProviderManager;
      this.subscription = __spreadValues(__spreadValues({}, (0, import_vscode_azext_utils37.createSubscriptionContext)(subscription)), subscription);
      this.id = `/subscriptions/${this.subscription.subscriptionId}`;
      this.portalUrl = createPortalUrl(this.subscription, this.id);
    }
    getChildren() {
      return __async(this, null, function* () {
        var _a7;
        return (_a7 = yield (0, import_vscode_azext_utils37.callWithTelemetryAndErrorHandling)("subscriptionItem.getChildren", (context) => __async(this, null, function* () {
          let resources = yield this.resourceProviderManager.getResources(this.subscription);
          context.telemetry.measurements.resourceCount = resources.length;
          const showHiddenTypes = settingUtils.getWorkspaceSetting(showHiddenTypesSettingKey);
          context.telemetry.properties.showHiddenTypes = String(showHiddenTypes);
          if (!showHiddenTypes) {
            resources = resources.filter((resource) => resource.azureResourceType.type === "microsoft.resources/resourcegroups" || resource.resourceType && supportedResourceTypes.find((type) => type === resource.resourceType));
          }
          const groupBySetting = settingUtils.getWorkspaceSetting("groupBy");
          context.telemetry.properties.groupBySetting = (groupBySetting == null ? void 0 : groupBySetting.startsWith("armTag")) ? "armTag" : groupBySetting;
          const groupingItems = this.resourceGroupingManager.groupResources(this, this.context, resources != null ? resources : [], groupBySetting).sort((a, b) => a.label.localeCompare(b.label));
          context.telemetry.measurements.groupCount = groupingItems.length;
          return groupingItems;
        }))) != null ? _a7 : [];
      });
    }
    getTreeItem() {
      var _a7;
      const treeItem = new vscode18.TreeItem((_a7 = this.subscription.name) != null ? _a7 : "Unnamed", vscode18.TreeItemCollapsibleState.Collapsed);
      treeItem.contextValue = "azureextensionui.azureSubscription";
      treeItem.iconPath = treeUtils.getIconPath("azureSubscription");
      treeItem.id = this.id;
      return treeItem;
    }
  };
  __name(SubscriptionItem, "SubscriptionItem");

  // src/utils/v2/credentialsUtils.ts
  function createCredential(getSession) {
    return {
      getToken: (scopes) => __async(this, null, function* () {
        if (typeof scopes === "string") {
          scopes = [scopes];
        }
        const session = yield getSession(scopes);
        if (session) {
          return {
            token: session.accessToken
          };
        } else {
          return null;
        }
      }),
      signRequest: () => __async(this, null, function* () {
        throw new Error(localize("signRequestError", "Track 1 credentials are not (currently) supported."));
      })
    };
  }
  __name(createCredential, "createCredential");

  // src/tree/azure/VSCodeAuthentication.ts
  function createSubscriptionContext8(subscription) {
    return {
      environment: Environment.AzureCloud,
      isCustomCloud: false,
      subscriptionDisplayName: subscription.name,
      subscriptionId: subscription.subscriptionId,
      subscriptionPath: "",
      tenantId: "",
      userId: "",
      credentials: createCredential(subscription.authentication.getSession)
    };
  }
  __name(createSubscriptionContext8, "createSubscriptionContext");

  // src/tree/azure/AzureResourceTreeDataProvider.ts
  var AzureResourceTreeDataProvider = class extends ResourceTreeDataProviderBase {
    constructor(onDidChangeBranchTreeData, itemCache, state, onRefresh, resourceGroupingManager, resourceProviderManager) {
      super(
        itemCache,
        onDidChangeBranchTreeData,
        resourceProviderManager.onDidChangeResourceChange,
        onRefresh,
        state,
        () => {
          var _a7, _b2;
          this.groupingChangeSubscription.dispose();
          (_a7 = this.filtersSubscription) == null ? void 0 : _a7.dispose();
          (_b2 = this.statusSubscription) == null ? void 0 : _b2.dispose();
        }
      );
      this.resourceGroupingManager = resourceGroupingManager;
      this.resourceProviderManager = resourceProviderManager;
      (0, import_vscode_azext_utils38.registerEvent)(
        "treeView.onDidChangeConfiguration",
        vscode19.workspace.onDidChangeConfiguration,
        (context, e) => __async(this, null, function* () {
          context.errorHandling.suppressDisplay = true;
          context.telemetry.suppressIfSuccessful = true;
          context.telemetry.properties.isActivationEvent = "true";
          if (e.affectsConfiguration(`${ext.prefix}.${showHiddenTypesSettingKey}`)) {
            this.notifyTreeDataChanged();
          }
        })
      );
      this.groupingChangeSubscription = this.resourceGroupingManager.onDidChangeGrouping(() => this.notifyTreeDataChanged());
    }
    onGetChildren(element) {
      return __async(this, null, function* () {
        if (element) {
          return yield element.getChildren();
        } else {
          const api = yield this.getAzureAccountExtensionApi();
          if (api) {
            if (api.status === "LoggedIn") {
              if (api.filters.length === 0) {
                return [new GenericItem(localize("noSubscriptions", "Select Subscriptions..."), {
                  commandId: ext.isWeb ? "azureResourceGroups.vscodeAuth.selectSubscriptions" : "azure-account.selectSubscriptions"
                })];
              } else {
                return api.filters.map(
                  (subscription) => new SubscriptionItem(
                    {
                      subscription,
                      subscriptionContext: createSubscriptionContext8(subscription),
                      refresh: (item) => this.notifyTreeDataChanged(item)
                    },
                    this.resourceGroupingManager,
                    this.resourceProviderManager,
                    subscription
                  )
                );
              }
            } else if (api.status === "LoggedOut") {
              return [
                new GenericItem(
                  localize("signInLabel", "Sign in to Azure..."),
                  {
                    commandId: "azureResourceGroups.vscodeAuth.logIn",
                    iconPath: new vscode19.ThemeIcon("sign-in")
                  }
                ),
                new GenericItem(
                  localize("createAccountLabel", "Create an Azure Account..."),
                  {
                    commandId: "azure-account.createAccount",
                    iconPath: new vscode19.ThemeIcon("add")
                  }
                ),
                new GenericItem(
                  localize("createStudentAccount", "Create an Azure for Students Account..."),
                  {
                    commandId: "azureResourceGroups.openUrl",
                    commandArgs: ["https://aka.ms/student-account"],
                    iconPath: new vscode19.ThemeIcon("mortar-board")
                  }
                )
              ];
            } else {
              return [
                new GenericItem(
                  api.status === "Initializing" ? localize("loadingTreeItem", "Loading...") : localize("signingIn", "Waiting for Azure sign-in..."),
                  {
                    commandId: "azureResourceGroups.vscodeAuth.logIn",
                    iconPath: new vscode19.ThemeIcon("loading~spin")
                  }
                )
              ];
            }
          }
        }
        return void 0;
      });
    }
    isAncestorOf(element, id) {
      if (element instanceof GroupingItem) {
        return element.resources.some((resource) => id.toLowerCase().startsWith(resource.id.toLowerCase()));
      }
      return super.isAncestorOf(element, id);
    }
    getAzureAccountExtensionApi() {
      return __async(this, null, function* () {
        if (!this.subscriptionProvider) {
          this.subscriptionProvider = yield ext.subscriptionProviderFactory();
          yield this.subscriptionProvider.waitForFilters();
        }
        this.filtersSubscription = this.subscriptionProvider.onFiltersChanged(() => this.notifyTreeDataChanged());
        this.statusSubscription = this.subscriptionProvider.onStatusChanged(() => this.notifyTreeDataChanged());
        return this.subscriptionProvider;
      });
    }
  };
  __name(AzureResourceTreeDataProvider, "AzureResourceTreeDataProvider");

  // src/tree/azure/registerAzureTree.ts
  function registerAzureTree(context, options) {
    const { azureResourceBranchDataProviderManager, azureResourceProviderManager: resourceProviderManager, refreshEvent, itemCache } = options;
    context.subscriptions.push(ext.azureTreeState = new TreeItemStateStore());
    const resourceGroupingManager = createGroupingManager(azureResourceBranchDataProviderManager, itemCache);
    context.subscriptions.push(resourceGroupingManager);
    const azureResourceTreeDataProvider = new AzureResourceTreeDataProvider(azureResourceBranchDataProviderManager.onDidChangeTreeData, itemCache, ext.azureTreeState, refreshEvent, resourceGroupingManager, resourceProviderManager);
    context.subscriptions.push(azureResourceTreeDataProvider);
    const treeView = createTreeView("azureResourceGroups", {
      canSelectMany: true,
      showCollapseAll: true,
      itemCache,
      description: localize("remote", "Remote"),
      treeDataProvider: wrapTreeForVSCode(azureResourceTreeDataProvider, itemCache),
      findItemById: azureResourceTreeDataProvider.findItemById.bind(azureResourceTreeDataProvider)
    });
    context.subscriptions.push(treeView);
    treeView.title = localize("resources", "Resources");
    ext.appResourceTreeView = treeView;
    return azureResourceTreeDataProvider;
  }
  __name(registerAzureTree, "registerAzureTree");
  function createGroupingManager(azureResourceBranchDataProviderManager, itemCache) {
    const branchDataItemFactory = createResourceItemFactory(itemCache);
    const groupingItemFactory = createGroupingItemFactory(branchDataItemFactory, (r) => azureResourceBranchDataProviderManager.getProvider(r.resourceType), azureResourceBranchDataProviderManager.onChangeBranchDataProviders);
    return new AzureResourceGroupingManager(groupingItemFactory);
  }
  __name(createGroupingManager, "createGroupingManager");

  // src/tree/BranchDataItemCache.ts
  var BranchDataItemCache = class {
    constructor() {
      this.branchItemToResourceGroupsItemCache = /* @__PURE__ */ new Map();
    }
    addBranchItem(branchItem, item) {
      this.branchItemToResourceGroupsItemCache.set(branchItem, item);
    }
    clear() {
      this.branchItemToResourceGroupsItemCache.clear();
    }
    getItemForBranchItem(branchItem) {
      return this.branchItemToResourceGroupsItemCache.get(branchItem);
    }
    getItemForId(id) {
      for (const [key, value] of this.branchItemToResourceGroupsItemCache.entries()) {
        if (value.id === id) {
          return key;
        }
      }
      return void 0;
    }
  };
  __name(BranchDataItemCache, "BranchDataItemCache");

  // src/tree/HelpTreeItem.ts
  var import_vscode_azext_utils39 = __toESM(require_src3());
  var import_vscode23 = __require("vscode");
  var HelpTreeItem = class extends import_vscode_azext_utils39.AzExtParentTreeItem {
    constructor() {
      super(void 0);
      this.label = localize("helpAndFeedback", "Help and Feedback");
      this.contextValue = "helpAndFeedback";
    }
    loadMoreChildrenImpl(_clearCache, _context) {
      return __async(this, null, function* () {
        const getStartedTI = new import_vscode_azext_utils39.GenericTreeItem(this, {
          label: localize("getStarted", "Get Started"),
          contextValue: "getStarted",
          commandId: "ms-azuretools.getStarted",
          iconPath: new import_vscode23.ThemeIcon("star-empty")
        });
        const openWalkthroughTI = new import_vscode_azext_utils39.GenericTreeItem(this, {
          label: localize("openWalkthrough", "Open Azure Extensions Walkthrough"),
          contextValue: "openWalkthrough",
          commandId: "ms-azuretools.openWalkthrough",
          iconPath: new import_vscode23.ThemeIcon("extensions")
        });
        const reportIssueTI = new import_vscode_azext_utils39.GenericTreeItem(this, {
          label: localize("reportIssue", "Report Issue"),
          contextValue: "reportIssue",
          commandId: "ms-azuretools.reportIssue",
          iconPath: new import_vscode23.ThemeIcon("comment")
        });
        const reviewIssuesTI = new import_vscode_azext_utils39.GenericTreeItem(this, {
          label: localize("reviewIssues", "Review Issues"),
          contextValue: "reviewIssues",
          commandId: "ms-azuretools.reviewIssues",
          iconPath: new import_vscode23.ThemeIcon("issues")
        });
        return [getStartedTI, openWalkthroughTI, reviewIssuesTI, reportIssueTI];
      });
    }
    hasMoreChildrenImpl() {
      return false;
    }
    compareChildrenImpl() {
      return 0;
    }
  };
  __name(HelpTreeItem, "HelpTreeItem");

  // src/tree/workspace/WorkspaceResourceTreeDataProvider.ts
  var vscode20 = __toESM(__require("vscode"));
  var WorkspaceResourceTreeDataProvider = class extends ResourceTreeDataProviderBase {
    constructor(branchDataProviderManager, onRefresh, resourceProviderManager, branchItemCache) {
      super(
        branchItemCache,
        branchDataProviderManager.onDidChangeTreeData,
        resourceProviderManager.onDidChangeResourceChange,
        onRefresh
      );
      this.branchDataProviderManager = branchDataProviderManager;
      this.resourceProviderManager = resourceProviderManager;
    }
    onGetChildren(element) {
      return __async(this, null, function* () {
        if (element) {
          return yield element.getChildren();
        } else {
          const children = [];
          const resources = yield this.resourceProviderManager.getResources();
          if (resources.length === 0) {
            yield vscode20.commands.executeCommand("setContext", "azureWorkspace.state", this.resourceProviderManager.hasResourceProviders ? "noWorkspaceResources" : "noWorkspaceResourceProviders");
          } else {
            children.push(...yield Promise.all(resources.map((resource) => this.getWorkspaceItemModel(resource))));
            if (vscode20.workspace.workspaceFolders === void 0 || vscode20.workspace.workspaceFolders.length === 0) {
              children.push(new GenericItem(localize("openFolderOrWorkspace", "Open folder or workspace..."), {
                iconPath: new vscode20.ThemeIcon("folder"),
                commandId: "workbench.action.openRecent"
              }));
            }
          }
          return children;
        }
      });
    }
    getWorkspaceItemModel(resource) {
      return __async(this, null, function* () {
        const branchDataProvider = this.branchDataProviderManager.getProvider(resource.resourceType);
        const resourceItem = yield branchDataProvider.getResourceItem(resource);
        return new BranchDataItemWrapper(resourceItem, branchDataProvider, this.itemCache);
      });
    }
  };
  __name(WorkspaceResourceTreeDataProvider, "WorkspaceResourceTreeDataProvider");

  // src/tree/workspace/registerWorkspaceTree.ts
  function registerWorkspaceTree(context, options) {
    const { workspaceResourceBranchDataProviderManager, workspaceResourceProviderManager, refreshEvent } = options;
    const branchItemCache = new BranchDataItemCache();
    const workspaceResourceTreeDataProvider = new WorkspaceResourceTreeDataProvider(workspaceResourceBranchDataProviderManager, refreshEvent, workspaceResourceProviderManager, branchItemCache);
    context.subscriptions.push(workspaceResourceTreeDataProvider);
    const treeView = createTreeView("azureWorkspace", {
      canSelectMany: true,
      showCollapseAll: true,
      description: localize("local", "Local"),
      itemCache: branchItemCache,
      treeDataProvider: wrapTreeForVSCode(workspaceResourceTreeDataProvider, branchItemCache),
      findItemById: workspaceResourceTreeDataProvider.findItemById.bind(workspaceResourceTreeDataProvider)
    });
    context.subscriptions.push(treeView);
    treeView.description = localize("local", "Local");
    ext.workspaceTreeView = treeView;
    return workspaceResourceTreeDataProvider;
  }
  __name(registerWorkspaceTree, "registerWorkspaceTree");

  // src/tree/workspace/WorkspaceDefaultBranchDataProvider.ts
  var vscode21 = __toESM(__require("vscode"));
  var WorkspaceResourceItem = class {
    constructor(resource) {
      this.resource = resource;
    }
    get name() {
      return this.resource.name;
    }
  };
  __name(WorkspaceResourceItem, "WorkspaceResourceItem");
  var WorkspaceDefaultBranchDataProvider = class {
    getChildren(_element) {
      return [];
    }
    getResourceItem(element) {
      return new WorkspaceResourceItem(element);
    }
    getTreeItem(element) {
      return new vscode21.TreeItem(element.name);
    }
  };
  __name(WorkspaceDefaultBranchDataProvider, "WorkspaceDefaultBranchDataProvider");

  // src/tree/workspace/WorkspaceResourceBranchDataProviderManager.ts
  var WorkspaceResourceBranchDataProviderManager = class extends ResourceBranchDataProviderManagerBase {
    constructor(defaultProvider, extensionActivator) {
      super(
        defaultProvider,
        extensionActivator
      );
    }
  };
  __name(WorkspaceResourceBranchDataProviderManager, "WorkspaceResourceBranchDataProviderManager");

  // src/extension.ts
  function activate(context, perfStats, ignoreBundle) {
    return __async(this, null, function* () {
      perfStats || (perfStats = { loadStartTime: Date.now(), loadEndTime: Date.now() });
      ext.context = context;
      ext.ignoreBundle = ignoreBundle;
      ext.outputChannel = (0, import_vscode_azext_utils40.createAzExtOutputChannel)("Azure Resource Groups", ext.prefix);
      context.subscriptions.push(ext.outputChannel);
      (0, import_vscode_azext_utils40.registerUIExtensionVariables)(ext);
      (0, import_vscode_azext_azureutils11.registerAzureUtilsExtensionVariables)(ext);
      const refreshAzureTreeEmitter = new vscode22.EventEmitter();
      context.subscriptions.push(refreshAzureTreeEmitter);
      const refreshWorkspaceTreeEmitter = new vscode22.EventEmitter();
      context.subscriptions.push(refreshWorkspaceTreeEmitter);
      ext.actions.refreshWorkspaceTree = (data) => refreshWorkspaceTreeEmitter.fire(data);
      ext.actions.refreshAzureTree = (data) => refreshAzureTreeEmitter.fire(data);
      yield (0, import_vscode_azext_utils40.callWithTelemetryAndErrorHandling)("azureResourceGroups.activate", (activateContext) => __async(this, null, function* () {
        activateContext.telemetry.properties.isActivationEvent = "true";
        activateContext.telemetry.measurements.mainFileLoad = (perfStats.loadEndTime - perfStats.loadStartTime) / 1e3;
        setupEvents(context);
        ext.subscriptionProviderFactory = ext.isWeb ? createWebSubscriptionProviderFactory(context) : createAzureAccountSubscriptionProviderFactory();
        ext.tagFS = new TagFileSystem(ext.appResourceTree);
        context.subscriptions.push(vscode22.workspace.registerFileSystemProvider(TagFileSystem.scheme, ext.tagFS));
        registerTagDiagnostics();
        const helpTreeItem = new HelpTreeItem();
        ext.helpTree = new import_vscode_azext_utils40.AzExtTreeDataProvider(helpTreeItem, "ms-azuretools.loadMore");
        context.subscriptions.push(vscode22.window.createTreeView("ms-azuretools.helpAndFeedback", { treeDataProvider: ext.helpTree }));
        context.subscriptions.push(ext.activityLogTreeItem = new ActivityLogTreeItem());
        ext.activityLogTree = new import_vscode_azext_utils40.AzExtTreeDataProvider(ext.activityLogTreeItem, "azureActivityLog.loadMore");
        context.subscriptions.push(vscode22.window.createTreeView("azureActivityLog", { treeDataProvider: ext.activityLogTree }));
        registerCommands();
      }));
      const extensionManager = new ResourceGroupsExtensionManager();
      const azureResourceBranchDataProviderManager = new AzureResourceBranchDataProviderManager(
        new DefaultAzureResourceBranchDataProvider(),
        (type) => void extensionManager.activateApplicationResourceBranchDataProvider(type)
      );
      context.subscriptions.push(azureResourceBranchDataProviderManager);
      const azureResourceProviderManager = new AzureResourceProviderManager(() => extensionManager.activateApplicationResourceProviders());
      azureResourceProviderManager.addResourceProvider(new DefaultAzureResourceProvider());
      const workspaceResourceBranchDataProviderManager = new WorkspaceResourceBranchDataProviderManager(
        new WorkspaceDefaultBranchDataProvider(),
        (type) => void extensionManager.activateWorkspaceResourceBranchDataProvider(type)
      );
      const workspaceResourceProviderManager = new WorkspaceResourceProviderManager(() => extensionManager.activateWorkspaceResourceProviders());
      const azureResourcesBranchDataItemCache = new BranchDataItemCache();
      const azureResourceTreeDataProvider = registerAzureTree(context, {
        azureResourceProviderManager,
        azureResourceBranchDataProviderManager,
        refreshEvent: refreshAzureTreeEmitter.event,
        itemCache: azureResourcesBranchDataItemCache
      });
      const workspaceResourceTreeDataProvider = registerWorkspaceTree(context, {
        workspaceResourceProviderManager,
        workspaceResourceBranchDataProviderManager,
        refreshEvent: refreshWorkspaceTreeEmitter.event
      });
      const v2ApiFactory = {
        apiVersion: "2.0.0",
        createApi: (options) => {
          var _a7;
          return createWrappedAzureResourcesExtensionApi(
            {
              apiVersion: "2.0.0",
              resources: createAzureResourcesHostApi(
                azureResourceProviderManager,
                azureResourceBranchDataProviderManager,
                azureResourceTreeDataProvider,
                workspaceResourceProviderManager,
                workspaceResourceBranchDataProviderManager,
                workspaceResourceTreeDataProvider
              ),
              activity: {
                registerActivity
              }
            },
            (_a7 = options.extensionId) != null ? _a7 : "unknown"
          );
        }
      };
      ext.v2.api = v2ApiFactory.createApi({ extensionId: "ms-azuretools.vscode-azureresourcegroups" });
      ext.appResourceTree = new CompatibleAzExtTreeDataProvider(azureResourceTreeDataProvider);
      ext.workspaceTree = new CompatibleAzExtTreeDataProvider(workspaceResourceTreeDataProvider);
      return (0, import_vscode_azext_utils40.createApiProvider)(
        [
          {
            apiVersion: InternalAzureResourceGroupsExtensionApi.apiVersion,
            createApi: () => new InternalAzureResourceGroupsExtensionApi({
              apiVersion: InternalAzureResourceGroupsExtensionApi.apiVersion,
              appResourceTree: ext.appResourceTree,
              appResourceTreeView: ext.appResourceTreeView,
              workspaceResourceTree: ext.workspaceTree,
              workspaceResourceTreeView: ext.workspaceTreeView,
              registerApplicationResourceResolver,
              registerWorkspaceResourceProvider,
              registerActivity,
              pickAppResource: createCompatibilityPickAppResource(azureResourcesBranchDataItemCache)
            })
          },
          v2ApiFactory
        ]
      );
    });
  }
  __name(activate, "activate");
  function deactivate() {
    var _a7;
    (_a7 = ext.diagnosticWatcher) == null ? void 0 : _a7.dispose();
  }
  __name(deactivate, "deactivate");
  function setupEvents(context) {
    context.subscriptions.push(ext.emitters.onDidChangeFocusedGroup = new vscode22.EventEmitter());
    ext.events.onDidChangeFocusedGroup = ext.emitters.onDidChangeFocusedGroup.event;
    context.subscriptions.push(ext.emitters.onDidRegisterResolver = new vscode22.EventEmitter());
    ext.events.onDidRegisterResolver = ext.emitters.onDidRegisterResolver.event;
  }
  __name(setupEvents, "setupEvents");
})();
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

he/he.js:
  (*! https://mths.be/he v1.2.0 by @mathias | MIT license *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

@microsoft/dynamicproto-js/lib/dist/esm/dynamicproto-js.js:
  (*!
   * Microsoft Dynamic Proto Utility, 1.1.7
   * Copyright (c) Microsoft and contributors. All rights reserved.
   *)

@vscode/extension-telemetry/lib/telemetryReporter.web.min.js:
  (*!
   * Microsoft Dynamic Proto Utility, 1.1.6
   * Copyright (c) Microsoft and contributors. All rights reserved.
   *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.3.2 by @mathias *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=out.js.map
